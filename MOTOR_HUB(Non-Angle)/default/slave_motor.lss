
slave_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004f4  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  00000590  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011f  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  0000070f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ef  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047c  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000191  00000000  00000000  000017df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	eb c0       	rjmp	.+470    	; 0x208 <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ef       	ldi	r30, 0xF4	; 244
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 31       	cpi	r26, 0x11	; 17
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	43 c2       	rjmp	.+1158   	; 0x4f0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#include "motor.h"

#define ADDR 0x01

int main(void)
{
  6c:	2f 92       	push	r2
  6e:	3f 92       	push	r3
  70:	5f 92       	push	r5
  72:	6f 92       	push	r6
  74:	7f 92       	push	r7
  76:	8f 92       	push	r8
  78:	9f 92       	push	r9
  7a:	af 92       	push	r10
  7c:	bf 92       	push	r11
  7e:	cf 92       	push	r12
  80:	df 92       	push	r13
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	a5 97       	sbiw	r28, 0x25	; 37
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	int8_t i,duty[4],buf[12]={0},tmp[2]={0};
  9e:	de 01       	movw	r26, r28
  a0:	5a 96       	adiw	r26, 0x1a	; 26
  a2:	8c e0       	ldi	r24, 0x0C	; 12
  a4:	fd 01       	movw	r30, r26
  a6:	11 92       	st	Z+, r1
  a8:	8a 95       	dec	r24
  aa:	e9 f7       	brne	.-6      	; 0xa6 <main+0x3a>
	int8_t act[4] = {0};
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
	int16_t d[4]={0};
  b4:	9e 01       	movw	r18, r28
  b6:	27 5f       	subi	r18, 0xF7	; 247
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	f9 01       	movw	r30, r18
  be:	11 92       	st	Z+, r1
  c0:	8a 95       	dec	r24
  c2:	e9 f7       	brne	.-6      	; 0xbe <main+0x52>
	Slave data = {ADDR,{(int8_t*)&buf[0],4},{(int8_t*)&buf[4],4}};
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 8b       	std	Y+17, r24	; 0x11
  c8:	bb 8b       	std	Y+19, r27	; 0x13
  ca:	aa 8b       	std	Y+18, r26	; 0x12
  cc:	24 e0       	ldi	r18, 0x04	; 4
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	3d 8b       	std	Y+21, r19	; 0x15
  d2:	2c 8b       	std	Y+20, r18	; 0x14
  d4:	ce 01       	movw	r24, r28
  d6:	4e 96       	adiw	r24, 0x1e	; 30
  d8:	9f 8b       	std	Y+23, r25	; 0x17
  da:	8e 8b       	std	Y+22, r24	; 0x16
  dc:	39 8f       	std	Y+25, r19	; 0x19
  de:	28 8f       	std	Y+24, r18	; 0x18
	sei();
  e0:	78 94       	sei
	setup();
  e2:	db d1       	rcall	.+950    	; 0x49a <setup>
	initI2CSlave(&data);
  e4:	ce 01       	movw	r24, r28
  e6:	41 96       	adiw	r24, 0x11	; 17
  e8:	7d d0       	rcall	.+250    	; 0x1e4 <initI2CSlave>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	6e 01       	movw	r12, r28
  ee:	08 94       	sec
  f0:	c1 1c       	adc	r12, r1
  f2:	d1 1c       	adc	r13, r1
	while(1){
		for(i=0;i<4;i++) duty[i] = buf[i];
  f4:	6a e1       	ldi	r22, 0x1A	; 26
  f6:	86 2e       	mov	r8, r22
  f8:	91 2c       	mov	r9, r1
  fa:	8c 0e       	add	r8, r28
  fc:	9d 1e       	adc	r9, r29
  fe:	59 e0       	ldi	r21, 0x09	; 9
 100:	a5 2e       	mov	r10, r21
 102:	b1 2c       	mov	r11, r1
 104:	ac 0e       	add	r10, r28
 106:	bd 1e       	adc	r11, r29
 108:	45 e0       	ldi	r20, 0x05	; 5
 10a:	e4 2e       	mov	r14, r20
 10c:	f1 2c       	mov	r15, r1
 10e:	ec 0e       	add	r14, r28
 110:	fd 1e       	adc	r15, r29
		for(i=0;i<4;i++){
			if(duty[i]==127)	act[i]=BRAKE;
			else if(duty[i]==0)	act[i]=FREE;
			else if(duty[i]>0)	act[i]=CW;
			else if(duty[i]<0) {act[i]=CCW;duty[i]=-duty[i];}
 112:	32 e0       	ldi	r19, 0x02	; 2
 114:	53 2e       	mov	r5, r19
	while(1){
		for(i=0;i<4;i++) duty[i] = buf[i];
		for(i=0;i<4;i++){
			if(duty[i]==127)	act[i]=BRAKE;
			else if(duty[i]==0)	act[i]=FREE;
			else if(duty[i]>0)	act[i]=CW;
 116:	66 24       	eor	r6, r6
 118:	63 94       	inc	r6
	setup();
	initI2CSlave(&data);
	while(1){
		for(i=0;i<4;i++) duty[i] = buf[i];
		for(i=0;i<4;i++){
			if(duty[i]==127)	act[i]=BRAKE;
 11a:	23 e0       	ldi	r18, 0x03	; 3
 11c:	72 2e       	mov	r7, r18
 11e:	0c c0       	rjmp	.+24     	; 0x138 <main+0xcc>
	Slave data = {ADDR,{(int8_t*)&buf[0],4},{(int8_t*)&buf[4],4}};
	sei();
	setup();
	initI2CSlave(&data);
	while(1){
		for(i=0;i<4;i++) duty[i] = buf[i];
 120:	e9 2f       	mov	r30, r25
 122:	ff 27       	eor	r31, r31
 124:	e7 fd       	sbrc	r30, 7
 126:	f0 95       	com	r31
 128:	d6 01       	movw	r26, r12
 12a:	ae 0f       	add	r26, r30
 12c:	bf 1f       	adc	r27, r31
 12e:	e8 0d       	add	r30, r8
 130:	f9 1d       	adc	r31, r9
 132:	80 81       	ld	r24, Z
 134:	8c 93       	st	X, r24
 136:	9f 5f       	subi	r25, 0xFF	; 255
 138:	94 30       	cpi	r25, 0x04	; 4
 13a:	94 f3       	brlt	.-28     	; 0x120 <main+0xb4>
 13c:	16 01       	movw	r2, r12
 13e:	85 01       	movw	r16, r10
 140:	f7 01       	movw	r30, r14
		for(i=0;i<4;i++){
			if(duty[i]==127)	act[i]=BRAKE;
 142:	d1 01       	movw	r26, r2
 144:	8c 91       	ld	r24, X
 146:	8f 37       	cpi	r24, 0x7F	; 127
 148:	11 f4       	brne	.+4      	; 0x14e <main+0xe2>
 14a:	70 82       	st	Z, r7
 14c:	0c c0       	rjmp	.+24     	; 0x166 <main+0xfa>
			else if(duty[i]==0)	act[i]=FREE;
 14e:	88 23       	and	r24, r24
 150:	11 f4       	brne	.+4      	; 0x156 <main+0xea>
 152:	10 82       	st	Z, r1
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0xfa>
			else if(duty[i]>0)	act[i]=CW;
 156:	18 16       	cp	r1, r24
 158:	14 f4       	brge	.+4      	; 0x15e <main+0xf2>
 15a:	60 82       	st	Z, r6
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0xfa>
			else if(duty[i]<0) {act[i]=CCW;duty[i]=-duty[i];}
 15e:	50 82       	st	Z, r5
 160:	81 95       	neg	r24
 162:	d1 01       	movw	r26, r2
 164:	8c 93       	st	X, r24
			d[i] = duty[i]*2;
 166:	d1 01       	movw	r26, r2
 168:	4d 91       	ld	r20, X+
 16a:	1d 01       	movw	r2, r26
			d[i] += duty[i]/10*5;
			d[i] += duty[i]/100*5;
 16c:	84 2f       	mov	r24, r20
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	a6 d1       	rcall	.+844    	; 0x4be <__divmodqi4>
 172:	b5 e0       	ldi	r27, 0x05	; 5
 174:	8b 02       	muls	r24, r27
 176:	90 01       	movw	r18, r0
 178:	11 24       	eor	r1, r1
 17a:	84 2f       	mov	r24, r20
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	9f d1       	rcall	.+830    	; 0x4be <__divmodqi4>
 180:	8b 02       	muls	r24, r27
 182:	c0 01       	movw	r24, r0
 184:	11 24       	eor	r1, r1
 186:	28 0f       	add	r18, r24
 188:	39 1f       	adc	r19, r25
 18a:	55 27       	eor	r21, r21
 18c:	47 fd       	sbrc	r20, 7
 18e:	50 95       	com	r21
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	24 0f       	add	r18, r20
 196:	35 1f       	adc	r19, r21
 198:	d8 01       	movw	r26, r16
 19a:	2d 93       	st	X+, r18
 19c:	3d 93       	st	X+, r19
 19e:	8d 01       	movw	r16, r26
 1a0:	31 96       	adiw	r30, 0x01	; 1
	sei();
	setup();
	initI2CSlave(&data);
	while(1){
		for(i=0;i<4;i++) duty[i] = buf[i];
		for(i=0;i<4;i++){
 1a2:	2e 14       	cp	r2, r14
 1a4:	3f 04       	cpc	r3, r15
 1a6:	69 f6       	brne	.-102    	; 0x142 <main+0xd6>
			d[i] += duty[i]/10*5;
			d[i] += duty[i]/100*5;
			
			}
			for(i=3;i>=0;i--){
			motor[i](act[i],d[i]);
 1a8:	e0 91 06 01 	lds	r30, 0x0106
 1ac:	f0 91 07 01 	lds	r31, 0x0107
 1b0:	88 85       	ldd	r24, Y+8	; 0x08
 1b2:	6f 85       	ldd	r22, Y+15	; 0x0f
 1b4:	09 95       	icall
 1b6:	e0 91 04 01 	lds	r30, 0x0104
 1ba:	f0 91 05 01 	lds	r31, 0x0105
 1be:	8f 81       	ldd	r24, Y+7	; 0x07
 1c0:	6d 85       	ldd	r22, Y+13	; 0x0d
 1c2:	09 95       	icall
 1c4:	e0 91 02 01 	lds	r30, 0x0102
 1c8:	f0 91 03 01 	lds	r31, 0x0103
 1cc:	8e 81       	ldd	r24, Y+6	; 0x06
 1ce:	6b 85       	ldd	r22, Y+11	; 0x0b
 1d0:	09 95       	icall
 1d2:	e0 91 00 01 	lds	r30, 0x0100
 1d6:	f0 91 01 01 	lds	r31, 0x0101
 1da:	8d 81       	ldd	r24, Y+5	; 0x05
 1dc:	69 85       	ldd	r22, Y+9	; 0x09
 1de:	09 95       	icall
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	aa cf       	rjmp	.-172    	; 0x138 <main+0xcc>

000001e4 <initI2CSlave>:
    }
#endif

#if SLAVE_COMPILE
void initI2CSlave(Slave *_own)
	{
 1e4:	fc 01       	movw	r30, r24
		own = _own;
 1e6:	90 93 0c 01 	sts	0x010C, r25
 1ea:	80 93 0b 01 	sts	0x010B, r24
		TWAR = (own->addr)<<=1;
 1ee:	80 81       	ld	r24, Z
 1f0:	88 0f       	add	r24, r24
 1f2:	80 83       	st	Z, r24
 1f4:	ea eb       	ldi	r30, 0xBA	; 186
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 83       	st	Z, r24
		TWAR |= 1;
 1fa:	80 81       	ld	r24, Z
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	80 83       	st	Z, r24
		TWCR = 0x45;
 200:	85 e4       	ldi	r24, 0x45	; 69
 202:	80 93 bc 00 	sts	0x00BC, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

	#endif
	}
 206:	08 95       	ret

00000208 <__vector_24>:


#if SLAVE_COMPILE

ISR (TWI_vect)
	{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	    switch(TWSR)                            
 21a:	80 91 b9 00 	lds	r24, 0x00B9
 21e:	80 39       	cpi	r24, 0x90	; 144
 220:	11 f1       	breq	.+68     	; 0x266 <__vector_24+0x5e>
 222:	81 39       	cpi	r24, 0x91	; 145
 224:	48 f4       	brcc	.+18     	; 0x238 <__vector_24+0x30>
 226:	80 37       	cpi	r24, 0x70	; 112
 228:	09 f4       	brne	.+2      	; 0x22c <__vector_24+0x24>
 22a:	55 c0       	rjmp	.+170    	; 0x2d6 <__vector_24+0xce>
 22c:	80 38       	cpi	r24, 0x80	; 128
 22e:	f1 f0       	breq	.+60     	; 0x26c <__vector_24+0x64>
 230:	80 36       	cpi	r24, 0x60	; 96
 232:	09 f0       	breq	.+2      	; 0x236 <__vector_24+0x2e>
 234:	58 c0       	rjmp	.+176    	; 0x2e6 <__vector_24+0xde>
 236:	0c c0       	rjmp	.+24     	; 0x250 <__vector_24+0x48>
 238:	88 3a       	cpi	r24, 0xA8	; 168
 23a:	39 f1       	breq	.+78     	; 0x28a <__vector_24+0x82>
 23c:	89 3a       	cpi	r24, 0xA9	; 169
 23e:	20 f4       	brcc	.+8      	; 0x248 <__vector_24+0x40>
 240:	80 3a       	cpi	r24, 0xA0	; 160
 242:	09 f0       	breq	.+2      	; 0x246 <__vector_24+0x3e>
 244:	50 c0       	rjmp	.+160    	; 0x2e6 <__vector_24+0xde>
 246:	41 c0       	rjmp	.+130    	; 0x2ca <__vector_24+0xc2>
 248:	88 3b       	cpi	r24, 0xB8	; 184
 24a:	09 f0       	breq	.+2      	; 0x24e <__vector_24+0x46>
 24c:	4c c0       	rjmp	.+152    	; 0x2e6 <__vector_24+0xde>
 24e:	2a c0       	rjmp	.+84     	; 0x2a4 <__vector_24+0x9c>
			{
				case 0x60:						
					count = 0;
 250:	10 92 0a 01 	sts	0x010A, r1
					TWCR |= 0x80;	
 254:	80 91 bc 00 	lds	r24, 0x00BC
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	80 93 bc 00 	sts	0x00BC, r24
					i2cComFlag = true;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 09 01 	sts	0x0109, r24
 264:	47 c0       	rjmp	.+142    	; 0x2f4 <__vector_24+0xec>
						wdt_reset();

					#endif
					break;
	            case 0x90:
	                emergency = true;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 08 01 	sts	0x0108, r24
				case 0x80:                      
					*(own->write.buf+count) = TWDR;	   
 26c:	80 91 0a 01 	lds	r24, 0x010A
 270:	90 91 bb 00 	lds	r25, 0x00BB
 274:	e0 91 0b 01 	lds	r30, 0x010B
 278:	f0 91 0c 01 	lds	r31, 0x010C
 27c:	01 80       	ldd	r0, Z+1	; 0x01
 27e:	f2 81       	ldd	r31, Z+2	; 0x02
 280:	e0 2d       	mov	r30, r0
 282:	e8 0f       	add	r30, r24
 284:	f1 1d       	adc	r31, r1
 286:	90 83       	st	Z, r25
 288:	1b c0       	rjmp	.+54     	; 0x2c0 <__vector_24+0xb8>
					break;
				case 0xA0:
					TWCR |= 0x80;
					break;				
	            case 0xA8:
					i2cComFlag = true;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 09 01 	sts	0x0109, r24
					count = 0;
 290:	10 92 0a 01 	sts	0x010A, r1
					TWDR = *own->read.buf;				
 294:	e0 91 0b 01 	lds	r30, 0x010B
 298:	f0 91 0c 01 	lds	r31, 0x010C
 29c:	05 80       	ldd	r0, Z+5	; 0x05
 29e:	f6 81       	ldd	r31, Z+6	; 0x06
 2a0:	e0 2d       	mov	r30, r0
 2a2:	0b c0       	rjmp	.+22     	; 0x2ba <__vector_24+0xb2>
						wdt_reset();

					#endif				
					break;
				case 0xB8:						
					TWDR = *(own->read.buf + count);	
 2a4:	80 91 0a 01 	lds	r24, 0x010A
 2a8:	e0 91 0b 01 	lds	r30, 0x010B
 2ac:	f0 91 0c 01 	lds	r31, 0x010C
 2b0:	05 80       	ldd	r0, Z+5	; 0x05
 2b2:	f6 81       	ldd	r31, Z+6	; 0x06
 2b4:	e0 2d       	mov	r30, r0
 2b6:	e8 0f       	add	r30, r24
 2b8:	f1 1d       	adc	r31, r1
 2ba:	80 81       	ld	r24, Z
 2bc:	80 93 bb 00 	sts	0x00BB, r24
					count++;					
 2c0:	80 91 0a 01 	lds	r24, 0x010A
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 0a 01 	sts	0x010A, r24
					TWCR |= 0x80;				
 2ca:	80 91 bc 00 	lds	r24, 0x00BC
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	80 93 bc 00 	sts	0x00BC, r24
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <__vector_24+0xec>
					break;
			    case 0x70:                      
	                *own->read.buf = 0;
 2d6:	e0 91 0b 01 	lds	r30, 0x010B
 2da:	f0 91 0c 01 	lds	r31, 0x010C
 2de:	05 80       	ldd	r0, Z+5	; 0x05
 2e0:	f6 81       	ldd	r31, Z+6	; 0x06
 2e2:	e0 2d       	mov	r30, r0
 2e4:	10 82       	st	Z, r1
				case 0xC0:   
					TWCR |= 0x80;
					i2cComFlag = false;
					break;					
				default:
					TWCR |= 0x80;
 2e6:	80 91 bc 00 	lds	r24, 0x00BC
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 93 bc 00 	sts	0x00BC, r24
					i2cComFlag = false;				
 2f0:	10 92 09 01 	sts	0x0109, r1
					break;
			}
	}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <m0_d1>:
#include <avr/io.h>
#include "motor.h"

void m0_d1(bool x){if(x) sbi(PORTC,PC0);else cbi(PORTC,PC0);}
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <m0_d1+0x8>
 30a:	40 9a       	sbi	0x08, 0	; 8
 30c:	08 95       	ret
 30e:	40 98       	cbi	0x08, 0	; 8
 310:	08 95       	ret

00000312 <m0_d2>:
void m0_d2(bool x){if(x) sbi(PORTC,PC1);else cbi(PORTC,PC1);}
 312:	88 23       	and	r24, r24
 314:	11 f0       	breq	.+4      	; 0x31a <m0_d2+0x8>
 316:	41 9a       	sbi	0x08, 1	; 8
 318:	08 95       	ret
 31a:	41 98       	cbi	0x08, 1	; 8
 31c:	08 95       	ret

0000031e <m1_d1>:
void m1_d1(bool x){if(x) sbi(PORTD,PD1);else cbi(PORTD,PD1);}
 31e:	88 23       	and	r24, r24
 320:	11 f0       	breq	.+4      	; 0x326 <m1_d1+0x8>
 322:	59 9a       	sbi	0x0b, 1	; 11
 324:	08 95       	ret
 326:	59 98       	cbi	0x0b, 1	; 11
 328:	08 95       	ret

0000032a <m1_d2>:
void m1_d2(bool x){if(x) sbi(PORTD,PD2);else cbi(PORTD,PD2);}
 32a:	88 23       	and	r24, r24
 32c:	11 f0       	breq	.+4      	; 0x332 <m1_d2+0x8>
 32e:	5a 9a       	sbi	0x0b, 2	; 11
 330:	08 95       	ret
 332:	5a 98       	cbi	0x0b, 2	; 11
 334:	08 95       	ret

00000336 <m2_d1>:
void m2_d1(bool x){if(x) sbi(PORTD,PD4);else cbi(PORTD,PD4);}
 336:	88 23       	and	r24, r24
 338:	11 f0       	breq	.+4      	; 0x33e <m2_d1+0x8>
 33a:	5c 9a       	sbi	0x0b, 4	; 11
 33c:	08 95       	ret
 33e:	5c 98       	cbi	0x0b, 4	; 11
 340:	08 95       	ret

00000342 <m2_d2>:
void m2_d2(bool x){if(x) sbi(PORTD,PD3);else cbi(PORTD,PD3);}
 342:	88 23       	and	r24, r24
 344:	11 f0       	breq	.+4      	; 0x34a <m2_d2+0x8>
 346:	5b 9a       	sbi	0x0b, 3	; 11
 348:	08 95       	ret
 34a:	5b 98       	cbi	0x0b, 3	; 11
 34c:	08 95       	ret

0000034e <m3_d1>:
void m3_d1(bool x){if(x) sbi(PORTD,PD7);else cbi(PORTD,PD7);}
 34e:	88 23       	and	r24, r24
 350:	11 f0       	breq	.+4      	; 0x356 <m3_d1+0x8>
 352:	5f 9a       	sbi	0x0b, 7	; 11
 354:	08 95       	ret
 356:	5f 98       	cbi	0x0b, 7	; 11
 358:	08 95       	ret

0000035a <m3_d2>:
void m3_d2(bool x){if(x) sbi(PORTB,PB0);else cbi(PORTB,PB0);}
 35a:	88 23       	and	r24, r24
 35c:	11 f0       	breq	.+4      	; 0x362 <m3_d2+0x8>
 35e:	28 9a       	sbi	0x05, 0	; 5
 360:	08 95       	ret
 362:	28 98       	cbi	0x05, 0	; 5
 364:	08 95       	ret

00000366 <m_act>:

void(*d1)(bool);
void(*d2)(bool);

void m_act(uint8_t act,int target)
{
 366:	28 2f       	mov	r18, r24
	switch(target){
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	71 05       	cpc	r23, r1
 36c:	b9 f0       	breq	.+46     	; 0x39c <m_act+0x36>
 36e:	62 30       	cpi	r22, 0x02	; 2
 370:	71 05       	cpc	r23, r1
 372:	1c f4       	brge	.+6      	; 0x37a <m_act+0x14>
 374:	67 2b       	or	r22, r23
 376:	49 f0       	breq	.+18     	; 0x38a <m_act+0x24>
 378:	08 95       	ret
 37a:	62 30       	cpi	r22, 0x02	; 2
 37c:	71 05       	cpc	r23, r1
 37e:	b9 f0       	breq	.+46     	; 0x3ae <m_act+0x48>
 380:	63 30       	cpi	r22, 0x03	; 3
 382:	71 05       	cpc	r23, r1
 384:	09 f0       	breq	.+2      	; 0x388 <m_act+0x22>
 386:	5c c0       	rjmp	.+184    	; 0x440 <m_act+0xda>
 388:	1b c0       	rjmp	.+54     	; 0x3c0 <m_act+0x5a>
		case 0:	d1=m0_d1;d2=m0_d2;break;
 38a:	83 e8       	ldi	r24, 0x83	; 131
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	90 93 0e 01 	sts	0x010E, r25
 392:	80 93 0d 01 	sts	0x010D, r24
 396:	89 e8       	ldi	r24, 0x89	; 137
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	1a c0       	rjmp	.+52     	; 0x3d0 <m_act+0x6a>
		case 1:	d1=m1_d1;d2=m1_d2;break;
 39c:	8f e8       	ldi	r24, 0x8F	; 143
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	90 93 0e 01 	sts	0x010E, r25
 3a4:	80 93 0d 01 	sts	0x010D, r24
 3a8:	85 e9       	ldi	r24, 0x95	; 149
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	11 c0       	rjmp	.+34     	; 0x3d0 <m_act+0x6a>
		case 2:	d1=m2_d1;d2=m2_d2;break;
 3ae:	8b e9       	ldi	r24, 0x9B	; 155
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	90 93 0e 01 	sts	0x010E, r25
 3b6:	80 93 0d 01 	sts	0x010D, r24
 3ba:	81 ea       	ldi	r24, 0xA1	; 161
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <m_act+0x6a>
		case 3:	d1=m3_d1;d2=m3_d2;break;
 3c0:	87 ea       	ldi	r24, 0xA7	; 167
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	90 93 0e 01 	sts	0x010E, r25
 3c8:	80 93 0d 01 	sts	0x010D, r24
 3cc:	8d ea       	ldi	r24, 0xAD	; 173
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	90 93 10 01 	sts	0x0110, r25
 3d4:	80 93 0f 01 	sts	0x010F, r24
		default: return;				
		}
	switch(act){
 3d8:	21 30       	cpi	r18, 0x01	; 1
 3da:	39 f0       	breq	.+14     	; 0x3ea <m_act+0x84>
 3dc:	21 30       	cpi	r18, 0x01	; 1
 3de:	b8 f0       	brcs	.+46     	; 0x40e <m_act+0xa8>
 3e0:	22 30       	cpi	r18, 0x02	; 2
 3e2:	79 f0       	breq	.+30     	; 0x402 <m_act+0x9c>
 3e4:	23 30       	cpi	r18, 0x03	; 3
 3e6:	61 f5       	brne	.+88     	; 0x440 <m_act+0xda>
 3e8:	1f c0       	rjmp	.+62     	; 0x428 <m_act+0xc2>
		case CW:	(*d1)(0);(*d2)(1);break;
 3ea:	e0 91 0d 01 	lds	r30, 0x010D
 3ee:	f0 91 0e 01 	lds	r31, 0x010E
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	09 95       	icall
 3f6:	e0 91 0f 01 	lds	r30, 0x010F
 3fa:	f0 91 10 01 	lds	r31, 0x0110
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	11 c0       	rjmp	.+34     	; 0x424 <m_act+0xbe>
		case CCW:	(*d1)(1);(*d2)(0);break;
 402:	e0 91 0d 01 	lds	r30, 0x010D
 406:	f0 91 0e 01 	lds	r31, 0x010E
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	05 c0       	rjmp	.+10     	; 0x418 <m_act+0xb2>
		case FREE:	(*d1)(0);(*d2)(0);break;
 40e:	e0 91 0d 01 	lds	r30, 0x010D
 412:	f0 91 0e 01 	lds	r31, 0x010E
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	09 95       	icall
 41a:	e0 91 0f 01 	lds	r30, 0x010F
 41e:	f0 91 10 01 	lds	r31, 0x0110
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	09 95       	icall
 426:	08 95       	ret
		case BRAKE:	(*d1)(1);(*d2)(1);break;
 428:	e0 91 0d 01 	lds	r30, 0x010D
 42c:	f0 91 0e 01 	lds	r31, 0x010E
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	09 95       	icall
 434:	e0 91 0f 01 	lds	r30, 0x010F
 438:	f0 91 10 01 	lds	r31, 0x0110
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	09 95       	icall
 440:	08 95       	ret

00000442 <m0>:
		default: return;
		}
}
void m0(uint8_t act,uint8_t duty){m_act(act,0);OCR0A=duty;}
 442:	1f 93       	push	r17
 444:	16 2f       	mov	r17, r22
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	8d df       	rcall	.-230    	; 0x366 <m_act>
 44c:	17 bd       	out	0x27, r17	; 39
 44e:	1f 91       	pop	r17
 450:	08 95       	ret

00000452 <m1>:
void m1(uint8_t act,uint8_t duty){m_act(act,1);OCR0B=duty;}
 452:	1f 93       	push	r17
 454:	16 2f       	mov	r17, r22
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	85 df       	rcall	.-246    	; 0x366 <m_act>
 45c:	18 bd       	out	0x28, r17	; 40
 45e:	1f 91       	pop	r17
 460:	08 95       	ret

00000462 <m2>:
void m2(uint8_t act,uint8_t duty){m_act(act,2);OCR1A=duty;}
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	06 2f       	mov	r16, r22
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	7c df       	rcall	.-264    	; 0x366 <m_act>
 46e:	10 e0       	ldi	r17, 0x00	; 0
 470:	10 93 89 00 	sts	0x0089, r17
 474:	00 93 88 00 	sts	0x0088, r16
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <m3>:
void m3(uint8_t act,uint8_t duty){m_act(act,3);OCR1B=duty;}
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	06 2f       	mov	r16, r22
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	6e df       	rcall	.-292    	; 0x366 <m_act>
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	10 93 8b 00 	sts	0x008B, r17
 490:	00 93 8a 00 	sts	0x008A, r16
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	08 95       	ret

0000049a <setup>:
void (*motor[4])(uint8_t act,uint8_t duty)={m0,m1,m2,m3};

void setup()
{
	DDRC   = 0x33;
 49a:	83 e3       	ldi	r24, 0x33	; 51
 49c:	87 b9       	out	0x07, r24	; 7
	DDRD   = 0xff;
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	8a b9       	out	0x0a, r24	; 10
	PORTD  = 0x00;
 4a2:	1b b8       	out	0x0b, r1	; 11
	DDRB   = 0xff;
 4a4:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0x00;
 4a6:	15 b8       	out	0x05, r1	; 5
	TCCR0A = 0xA3;  
 4a8:	83 ea       	ldi	r24, 0xA3	; 163
 4aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;                    
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	85 bd       	out	0x25, r24	; 37
	TCCR1A = 0xA1;     
 4b0:	81 ea       	ldi	r24, 0xA1	; 161
 4b2:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0x0B;                    
 4b6:	8b e0       	ldi	r24, 0x0B	; 11
 4b8:	80 93 81 00 	sts	0x0081, r24
}
 4bc:	08 95       	ret

000004be <__divmodqi4>:
 4be:	87 fb       	bst	r24, 7
 4c0:	08 2e       	mov	r0, r24
 4c2:	06 26       	eor	r0, r22
 4c4:	87 fd       	sbrc	r24, 7
 4c6:	81 95       	neg	r24
 4c8:	67 fd       	sbrc	r22, 7
 4ca:	61 95       	neg	r22
 4cc:	05 d0       	rcall	.+10     	; 0x4d8 <__udivmodqi4>
 4ce:	0e f4       	brtc	.+2      	; 0x4d2 <__divmodqi4_1>
 4d0:	91 95       	neg	r25

000004d2 <__divmodqi4_1>:
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	81 95       	neg	r24

000004d6 <__divmodqi4_exit>:
 4d6:	08 95       	ret

000004d8 <__udivmodqi4>:
 4d8:	99 1b       	sub	r25, r25
 4da:	79 e0       	ldi	r23, 0x09	; 9
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__udivmodqi4_ep>

000004de <__udivmodqi4_loop>:
 4de:	99 1f       	adc	r25, r25
 4e0:	96 17       	cp	r25, r22
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__udivmodqi4_ep>
 4e4:	96 1b       	sub	r25, r22

000004e6 <__udivmodqi4_ep>:
 4e6:	88 1f       	adc	r24, r24
 4e8:	7a 95       	dec	r23
 4ea:	c9 f7       	brne	.-14     	; 0x4de <__udivmodqi4_loop>
 4ec:	80 95       	com	r24
 4ee:	08 95       	ret

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
