
slave_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a38  00000acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  00000ad4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011f  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c4  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051e  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000166  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	d6 c1       	rjmp	.+940    	; 0x3de <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e3       	ldi	r30, 0x38	; 56
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 31       	cpi	r26, 0x11	; 17
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	e5 c4       	rjmp	.+2506   	; 0xa34 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#include "motor.h"

#define ADDR 0x01

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	6c 97       	sbiw	r28, 0x1c	; 28
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i=0;
  80:	1b 82       	std	Y+3, r1	; 0x03
	int8_t act[4]={0,0,0,0},buf[4]={0,0,0,0};
  82:	1c 82       	std	Y+4, r1	; 0x04
  84:	1d 82       	std	Y+5, r1	; 0x05
  86:	1e 82       	std	Y+6, r1	; 0x06
  88:	1f 82       	std	Y+7, r1	; 0x07
  8a:	18 86       	std	Y+8, r1	; 0x08
  8c:	19 86       	std	Y+9, r1	; 0x09
  8e:	1a 86       	std	Y+10, r1	; 0x0a
  90:	1b 86       	std	Y+11, r1	; 0x0b
	int16_t duty[4]={0,0,0,0},d=0;
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	fe 01       	movw	r30, r28
  96:	3c 96       	adiw	r30, 0x0c	; 12
  98:	df 01       	movw	r26, r30
  9a:	98 2f       	mov	r25, r24
  9c:	1d 92       	st	X+, r1
  9e:	9a 95       	dec	r25
  a0:	e9 f7       	brne	.-6      	; 0x9c <main+0x30>
  a2:	1a 82       	std	Y+2, r1	; 0x02
  a4:	19 82       	std	Y+1, r1	; 0x01
	Slave data = {ADDR,{&buf[0],4},{&buf[0],4}};
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8c 8b       	std	Y+20, r24	; 0x14
  aa:	ce 01       	movw	r24, r28
  ac:	08 96       	adiw	r24, 0x08	; 8
  ae:	9e 8b       	std	Y+22, r25	; 0x16
  b0:	8d 8b       	std	Y+21, r24	; 0x15
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	98 8f       	std	Y+24, r25	; 0x18
  b8:	8f 8b       	std	Y+23, r24	; 0x17
  ba:	ce 01       	movw	r24, r28
  bc:	08 96       	adiw	r24, 0x08	; 8
  be:	9a 8f       	std	Y+26, r25	; 0x1a
  c0:	89 8f       	std	Y+25, r24	; 0x19
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	9c 8f       	std	Y+28, r25	; 0x1c
  c8:	8b 8f       	std	Y+27, r24	; 0x1b
	setup();
  ca:	64 d4       	rcall	.+2248   	; 0x994 <setup>
	initI2CSlave(&data);
  cc:	ce 01       	movw	r24, r28
  ce:	44 96       	adiw	r24, 0x14	; 20
  d0:	4d d1       	rcall	.+666    	; 0x36c <initI2CSlave>
	sei();
  d2:	78 94       	sei
	while(1)
		{
			for(i=0;i<4;i++)
  d4:	1b 82       	std	Y+3, r1	; 0x03
  d6:	1e c0       	rjmp	.+60     	; 0x114 <main+0xa8>
				{
					duty[i] = buf[i];
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	68 2f       	mov	r22, r24
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	08 96       	adiw	r24, 0x08	; 8
  e8:	fc 01       	movw	r30, r24
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	55 27       	eor	r21, r21
  f4:	47 fd       	sbrc	r20, 7
  f6:	50 95       	com	r21
  f8:	9b 01       	movw	r18, r22
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	fc 01       	movw	r30, r24
 108:	3b 96       	adiw	r30, 0x0b	; 11
 10a:	51 83       	std	Z+1, r21	; 0x01
 10c:	40 83       	st	Z, r20
	setup();
	initI2CSlave(&data);
	sei();
	while(1)
		{
			for(i=0;i<4;i++)
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	8b 83       	std	Y+3, r24	; 0x03
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	f8 f2       	brcs	.-66     	; 0xd8 <main+0x6c>
				{
					duty[i] = buf[i];
				}
			for(i=0;i<4;i++)
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	f3 c0       	rjmp	.+486    	; 0x304 <main+0x298>
				{
					if(duty[i]==127)
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9c 01       	movw	r18, r24
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	82 0f       	add	r24, r18
 130:	93 1f       	adc	r25, r19
 132:	fc 01       	movw	r30, r24
 134:	3b 96       	adiw	r30, 0x0b	; 11
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	8f 37       	cpi	r24, 0x7F	; 127
 13c:	91 05       	cpc	r25, r1
 13e:	59 f4       	brne	.+22     	; 0x156 <main+0xea>
						{
							act[i]=BRAKE;
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	ce 01       	movw	r24, r28
 148:	04 96       	adiw	r24, 0x04	; 4
 14a:	fc 01       	movw	r30, r24
 14c:	e2 0f       	add	r30, r18
 14e:	f3 1f       	adc	r31, r19
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	80 83       	st	Z, r24
 154:	70 c0       	rjmp	.+224    	; 0x236 <main+0x1ca>
						}
					else if(duty[i]==0)
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9c 01       	movw	r18, r24
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	82 0f       	add	r24, r18
 168:	93 1f       	adc	r25, r19
 16a:	fc 01       	movw	r30, r24
 16c:	3b 96       	adiw	r30, 0x0b	; 11
 16e:	80 81       	ld	r24, Z
 170:	91 81       	ldd	r25, Z+1	; 0x01
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	51 f4       	brne	.+20     	; 0x18a <main+0x11e>
						{
							act[i]=FREE;
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	04 96       	adiw	r24, 0x04	; 4
 180:	fc 01       	movw	r30, r24
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	10 82       	st	Z, r1
 188:	56 c0       	rjmp	.+172    	; 0x236 <main+0x1ca>
						}
					else if(duty[i]>0)
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	9c 01       	movw	r18, r24
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	3b 96       	adiw	r30, 0x0b	; 11
 1a2:	80 81       	ld	r24, Z
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	18 16       	cp	r1, r24
 1a8:	19 06       	cpc	r1, r25
 1aa:	5c f4       	brge	.+22     	; 0x1c2 <main+0x156>
						{
							act[i]=CW;
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	ce 01       	movw	r24, r28
 1b4:	04 96       	adiw	r24, 0x04	; 4
 1b6:	fc 01       	movw	r30, r24
 1b8:	e2 0f       	add	r30, r18
 1ba:	f3 1f       	adc	r31, r19
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 83       	st	Z, r24
 1c0:	3a c0       	rjmp	.+116    	; 0x236 <main+0x1ca>
						}
					else if(duty[i]<0)
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9c 01       	movw	r18, r24
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	fc 01       	movw	r30, r24
 1d8:	3b 96       	adiw	r30, 0x0b	; 11
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	99 23       	and	r25, r25
 1e0:	54 f5       	brge	.+84     	; 0x236 <main+0x1ca>
						{
							act[i]=CCW;
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	ce 01       	movw	r24, r28
 1ea:	04 96       	adiw	r24, 0x04	; 4
 1ec:	fc 01       	movw	r30, r24
 1ee:	e2 0f       	add	r30, r18
 1f0:	f3 1f       	adc	r31, r19
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 83       	st	Z, r24
							duty[i]=-duty[i];
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	68 2f       	mov	r22, r24
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9c 01       	movw	r18, r24
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	fc 01       	movw	r30, r24
 212:	3b 96       	adiw	r30, 0x0b	; 11
 214:	80 81       	ld	r24, Z
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	44 27       	eor	r20, r20
 21a:	55 27       	eor	r21, r21
 21c:	48 1b       	sub	r20, r24
 21e:	59 0b       	sbc	r21, r25
 220:	9b 01       	movw	r18, r22
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	82 0f       	add	r24, r18
 22c:	93 1f       	adc	r25, r19
 22e:	fc 01       	movw	r30, r24
 230:	3b 96       	adiw	r30, 0x0b	; 11
 232:	51 83       	std	Z+1, r21	; 0x01
 234:	40 83       	st	Z, r20
						}
					d = duty[i]*2;
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9c 01       	movw	r18, r24
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	82 0f       	add	r24, r18
 248:	93 1f       	adc	r25, r19
 24a:	fc 01       	movw	r30, r24
 24c:	3b 96       	adiw	r30, 0x0b	; 11
 24e:	80 81       	ld	r24, Z
 250:	91 81       	ldd	r25, Z+1	; 0x01
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01
					d += duty[i]/10*5;
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	82 0f       	add	r24, r18
 26c:	93 1f       	adc	r25, r19
 26e:	fc 01       	movw	r30, r24
 270:	3b 96       	adiw	r30, 0x0b	; 11
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	2a e0       	ldi	r18, 0x0A	; 10
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	b4 d3       	rcall	.+1896   	; 0x9e6 <__divmodhi4>
 27e:	cb 01       	movw	r24, r22
 280:	9c 01       	movw	r18, r24
 282:	c9 01       	movw	r24, r18
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	28 0f       	add	r18, r24
 28e:	39 1f       	adc	r19, r25
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
					d += duty[i]/100*5;
 29c:	8b 81       	ldd	r24, Y+3	; 0x03
 29e:	88 2f       	mov	r24, r24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9c 01       	movw	r18, r24
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
 2b0:	fc 01       	movw	r30, r24
 2b2:	3b 96       	adiw	r30, 0x0b	; 11
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	24 e6       	ldi	r18, 0x64	; 100
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	93 d3       	rcall	.+1830   	; 0x9e6 <__divmodhi4>
 2c0:	cb 01       	movw	r24, r22
 2c2:	9c 01       	movw	r18, r24
 2c4:	c9 01       	movw	r24, r18
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	28 0f       	add	r18, r24
 2d0:	39 1f       	adc	r19, r25
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	9a 83       	std	Y+2, r25	; 0x02
 2dc:	89 83       	std	Y+1, r24	; 0x01
					duty[i] = d;
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	82 0f       	add	r24, r18
 2f0:	93 1f       	adc	r25, r19
 2f2:	fc 01       	movw	r30, r24
 2f4:	3b 96       	adiw	r30, 0x0b	; 11
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	80 83       	st	Z, r24
		{
			for(i=0;i<4;i++)
				{
					duty[i] = buf[i];
				}
			for(i=0;i<4;i++)
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	8b 83       	std	Y+3, r24	; 0x03
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	08 f4       	brcc	.+2      	; 0x30c <main+0x2a0>
 30a:	09 cf       	rjmp	.-494    	; 0x11e <main+0xb2>
					d = duty[i]*2;
					d += duty[i]/10*5;
					d += duty[i]/100*5;
					duty[i] = d;
				}
			for(i=0;i<4;i++){
 30c:	1b 82       	std	Y+3, r1	; 0x03
 30e:	2a c0       	rjmp	.+84     	; 0x364 <main+0x2f8>
					motor[i](act[i],duty[i]);
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	88 2f       	mov	r24, r24
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	fc 01       	movw	r30, r24
 31c:	e0 50       	subi	r30, 0x00	; 0
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	40 81       	ld	r20, Z
 322:	51 81       	ldd	r21, Z+1	; 0x01
 324:	8b 81       	ldd	r24, Y+3	; 0x03
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	ce 01       	movw	r24, r28
 32c:	04 96       	adiw	r24, 0x04	; 4
 32e:	fc 01       	movw	r30, r24
 330:	e2 0f       	add	r30, r18
 332:	f3 1f       	adc	r31, r19
 334:	80 81       	ld	r24, Z
 336:	68 2f       	mov	r22, r24
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	9c 01       	movw	r18, r24
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	fc 01       	movw	r30, r24
 34e:	3b 96       	adiw	r30, 0x0b	; 11
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
 354:	98 2f       	mov	r25, r24
 356:	86 2f       	mov	r24, r22
 358:	69 2f       	mov	r22, r25
 35a:	fa 01       	movw	r30, r20
 35c:	09 95       	icall
					d = duty[i]*2;
					d += duty[i]/10*5;
					d += duty[i]/100*5;
					duty[i] = d;
				}
			for(i=0;i<4;i++){
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	8b 83       	std	Y+3, r24	; 0x03
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	98 f2       	brcs	.-90     	; 0x310 <main+0x2a4>
 36a:	b4 ce       	rjmp	.-664    	; 0xd4 <main+0x68>

0000036c <initI2CSlave>:
    }
#endif

#if SLAVE_COMPILE
void initI2CSlave(Slave *_own)
	{
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	00 d0       	rcall	.+0      	; 0x372 <initI2CSlave+0x6>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
		own = _own;
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	90 93 0c 01 	sts	0x010C, r25
 382:	80 93 0b 01 	sts	0x010B, r24
		TWAR = (own->addr)<<=1;
 386:	2a eb       	ldi	r18, 0xBA	; 186
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	a0 91 0b 01 	lds	r26, 0x010B
 38e:	b0 91 0c 01 	lds	r27, 0x010C
 392:	e0 91 0b 01 	lds	r30, 0x010B
 396:	f0 91 0c 01 	lds	r31, 0x010C
 39a:	80 81       	ld	r24, Z
 39c:	88 0f       	add	r24, r24
 39e:	8c 93       	st	X, r24
 3a0:	8c 91       	ld	r24, X
 3a2:	f9 01       	movw	r30, r18
 3a4:	80 83       	st	Z, r24
		TWAR |= 1;
 3a6:	aa eb       	ldi	r26, 0xBA	; 186
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	ea eb       	ldi	r30, 0xBA	; 186
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	8c 93       	st	X, r24
		TWCR = 0x45;
 3b4:	ec eb       	ldi	r30, 0xBC	; 188
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	85 e4       	ldi	r24, 0x45	; 69
 3ba:	80 83       	st	Z, r24
	#if WDT_RESET_IN_I2C
		wdt_reset();
 3bc:	a8 95       	wdr

		wdt_enable(WDT_RESET_TIME);
 3be:	88 e1       	ldi	r24, 0x18	; 24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	2d e0       	ldi	r18, 0x0D	; 13
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	a8 95       	wdr
 3ca:	80 93 60 00 	sts	0x0060, r24
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	20 93 60 00 	sts	0x0060, r18

	#endif
	}
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	cf 91       	pop	r28
 3da:	df 91       	pop	r29
 3dc:	08 95       	ret

000003de <__vector_24>:


#if SLAVE_COMPILE

ISR (TWI_vect)
	{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <__vector_24+0x20>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
	    switch(TWSR)                            
 402:	e9 eb       	ldi	r30, 0xB9	; 185
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	3a 83       	std	Y+2, r19	; 0x02
 40e:	29 83       	std	Y+1, r18	; 0x01
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	80 39       	cpi	r24, 0x90	; 144
 416:	91 05       	cpc	r25, r1
 418:	09 f4       	brne	.+2      	; 0x41c <__vector_24+0x3e>
 41a:	43 c0       	rjmp	.+134    	; 0x4a2 <__vector_24+0xc4>
 41c:	29 81       	ldd	r18, Y+1	; 0x01
 41e:	3a 81       	ldd	r19, Y+2	; 0x02
 420:	21 39       	cpi	r18, 0x91	; 145
 422:	31 05       	cpc	r19, r1
 424:	8c f4       	brge	.+34     	; 0x448 <__vector_24+0x6a>
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	80 37       	cpi	r24, 0x70	; 112
 42c:	91 05       	cpc	r25, r1
 42e:	09 f4       	brne	.+2      	; 0x432 <__vector_24+0x54>
 430:	9d c0       	rjmp	.+314    	; 0x56c <__stack+0x6d>
 432:	29 81       	ldd	r18, Y+1	; 0x01
 434:	3a 81       	ldd	r19, Y+2	; 0x02
 436:	20 38       	cpi	r18, 0x80	; 128
 438:	31 05       	cpc	r19, r1
 43a:	b1 f1       	breq	.+108    	; 0x4a8 <__vector_24+0xca>
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	80 36       	cpi	r24, 0x60	; 96
 442:	91 05       	cpc	r25, r1
 444:	01 f1       	breq	.+64     	; 0x486 <__vector_24+0xa8>
 446:	a4 c0       	rjmp	.+328    	; 0x590 <__stack+0x91>
 448:	29 81       	ldd	r18, Y+1	; 0x01
 44a:	3a 81       	ldd	r19, Y+2	; 0x02
 44c:	28 3a       	cpi	r18, 0xA8	; 168
 44e:	31 05       	cpc	r19, r1
 450:	09 f4       	brne	.+2      	; 0x454 <__vector_24+0x76>
 452:	50 c0       	rjmp	.+160    	; 0x4f4 <__vector_24+0x116>
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	9a 81       	ldd	r25, Y+2	; 0x02
 458:	89 3a       	cpi	r24, 0xA9	; 169
 45a:	91 05       	cpc	r25, r1
 45c:	3c f4       	brge	.+14     	; 0x46c <__vector_24+0x8e>
 45e:	29 81       	ldd	r18, Y+1	; 0x01
 460:	3a 81       	ldd	r19, Y+2	; 0x02
 462:	20 3a       	cpi	r18, 0xA0	; 160
 464:	31 05       	cpc	r19, r1
 466:	09 f4       	brne	.+2      	; 0x46a <__vector_24+0x8c>
 468:	3d c0       	rjmp	.+122    	; 0x4e4 <__vector_24+0x106>
 46a:	92 c0       	rjmp	.+292    	; 0x590 <__stack+0x91>
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	88 3b       	cpi	r24, 0xB8	; 184
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <__vector_24+0x9a>
 476:	5c c0       	rjmp	.+184    	; 0x530 <__stack+0x31>
 478:	29 81       	ldd	r18, Y+1	; 0x01
 47a:	3a 81       	ldd	r19, Y+2	; 0x02
 47c:	20 3c       	cpi	r18, 0xC0	; 192
 47e:	31 05       	cpc	r19, r1
 480:	09 f4       	brne	.+2      	; 0x484 <__vector_24+0xa6>
 482:	7c c0       	rjmp	.+248    	; 0x57c <__stack+0x7d>
 484:	85 c0       	rjmp	.+266    	; 0x590 <__stack+0x91>
			{
				case 0x60:						
					count = 0;
 486:	10 92 0a 01 	sts	0x010A, r1
					TWCR |= 0x80;	
 48a:	ac eb       	ldi	r26, 0xBC	; 188
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	ec eb       	ldi	r30, 0xBC	; 188
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 68       	ori	r24, 0x80	; 128
 496:	8c 93       	st	X, r24
					i2cComFlag = true;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 09 01 	sts	0x0109, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 49e:	a8 95       	wdr
 4a0:	80 c0       	rjmp	.+256    	; 0x5a2 <__stack+0xa3>

					#endif
					break;
	            case 0x90:
	                emergency = true;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 08 01 	sts	0x0108, r24
				case 0x80:                      
					*(own->write.buf+count) = TWDR;	   
 4a8:	e0 91 0b 01 	lds	r30, 0x010B
 4ac:	f0 91 0c 01 	lds	r31, 0x010C
 4b0:	21 81       	ldd	r18, Z+1	; 0x01
 4b2:	32 81       	ldd	r19, Z+2	; 0x02
 4b4:	80 91 0a 01 	lds	r24, 0x010A
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	d9 01       	movw	r26, r18
 4be:	a8 0f       	add	r26, r24
 4c0:	b9 1f       	adc	r27, r25
 4c2:	eb eb       	ldi	r30, 0xBB	; 187
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	8c 93       	st	X, r24
					count++;
 4ca:	80 91 0a 01 	lds	r24, 0x010A
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 0a 01 	sts	0x010A, r24
					TWCR |= 0x80;		
 4d4:	ac eb       	ldi	r26, 0xBC	; 188
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	ec eb       	ldi	r30, 0xBC	; 188
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8c 93       	st	X, r24
 4e2:	5f c0       	rjmp	.+190    	; 0x5a2 <__stack+0xa3>
					break;
				case 0xA0:
					TWCR |= 0x80;
 4e4:	ac eb       	ldi	r26, 0xBC	; 188
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	ec eb       	ldi	r30, 0xBC	; 188
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	8c 93       	st	X, r24
 4f2:	57 c0       	rjmp	.+174    	; 0x5a2 <__stack+0xa3>
					break;				
	            case 0xA8:
					i2cComFlag = true;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 09 01 	sts	0x0109, r24
					count = 0;
 4fa:	10 92 0a 01 	sts	0x010A, r1
					TWDR = *own->read.buf;				
 4fe:	ab eb       	ldi	r26, 0xBB	; 187
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e0 91 0b 01 	lds	r30, 0x010B
 506:	f0 91 0c 01 	lds	r31, 0x010C
 50a:	05 80       	ldd	r0, Z+5	; 0x05
 50c:	f6 81       	ldd	r31, Z+6	; 0x06
 50e:	e0 2d       	mov	r30, r0
 510:	80 81       	ld	r24, Z
 512:	8c 93       	st	X, r24
					count++;					
 514:	80 91 0a 01 	lds	r24, 0x010A
 518:	8f 5f       	subi	r24, 0xFF	; 255
 51a:	80 93 0a 01 	sts	0x010A, r24
					TWCR |= 0x80;
 51e:	ac eb       	ldi	r26, 0xBC	; 188
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	ec eb       	ldi	r30, 0xBC	; 188
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	8c 93       	st	X, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 52c:	a8 95       	wdr
 52e:	39 c0       	rjmp	.+114    	; 0x5a2 <__stack+0xa3>

					#endif				
					break;
				case 0xB8:						
					TWDR = *(own->read.buf + count);	
 530:	ab eb       	ldi	r26, 0xBB	; 187
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e0 91 0b 01 	lds	r30, 0x010B
 538:	f0 91 0c 01 	lds	r31, 0x010C
 53c:	25 81       	ldd	r18, Z+5	; 0x05
 53e:	36 81       	ldd	r19, Z+6	; 0x06
 540:	80 91 0a 01 	lds	r24, 0x010A
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	e8 0f       	add	r30, r24
 54c:	f9 1f       	adc	r31, r25
 54e:	80 81       	ld	r24, Z
 550:	8c 93       	st	X, r24
					count++;					
 552:	80 91 0a 01 	lds	r24, 0x010A
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	80 93 0a 01 	sts	0x010A, r24
					TWCR |= 0x80;				
 55c:	ac eb       	ldi	r26, 0xBC	; 188
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	ec eb       	ldi	r30, 0xBC	; 188
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	8c 93       	st	X, r24
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__stack+0xa3>
					break;
			    case 0x70:                      
	                *own->read.buf = 0;
 56c:	e0 91 0b 01 	lds	r30, 0x010B
 570:	f0 91 0c 01 	lds	r31, 0x010C
 574:	05 80       	ldd	r0, Z+5	; 0x05
 576:	f6 81       	ldd	r31, Z+6	; 0x06
 578:	e0 2d       	mov	r30, r0
 57a:	10 82       	st	Z, r1
				case 0xC0:   
					TWCR |= 0x80;
 57c:	ac eb       	ldi	r26, 0xBC	; 188
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	ec eb       	ldi	r30, 0xBC	; 188
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 68       	ori	r24, 0x80	; 128
 588:	8c 93       	st	X, r24
					i2cComFlag = false;
 58a:	10 92 09 01 	sts	0x0109, r1
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__stack+0xa3>
					break;					
				default:
					TWCR |= 0x80;
 590:	ac eb       	ldi	r26, 0xBC	; 188
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ec eb       	ldi	r30, 0xBC	; 188
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	8c 93       	st	X, r24
					i2cComFlag = false;				
 59e:	10 92 09 01 	sts	0x0109, r1
					break;
			}
	}
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <m0_d1>:
#include <avr/io.h>
#include "motor.h"

void m0_d1(bool x){if(x) sbi(PORTC,PC0);else cbi(PORTC,PC0);}
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	0f 92       	push	r0
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	88 23       	and	r24, r24
 5d4:	41 f0       	breq	.+16     	; 0x5e6 <m0_d1+0x22>
 5d6:	a8 e2       	ldi	r26, 0x28	; 40
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e8 e2       	ldi	r30, 0x28	; 40
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	8c 93       	st	X, r24
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <m0_d1+0x30>
 5e6:	a8 e2       	ldi	r26, 0x28	; 40
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e8 e2       	ldi	r30, 0x28	; 40
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	8c 93       	st	X, r24
 5f4:	0f 90       	pop	r0
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <m0_d2>:
void m0_d2(bool x){if(x) sbi(PORTC,PC1);else cbi(PORTC,PC1);}
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	0f 92       	push	r0
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	89 83       	std	Y+1, r24	; 0x01
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	88 23       	and	r24, r24
 60c:	41 f0       	breq	.+16     	; 0x61e <m0_d2+0x22>
 60e:	a8 e2       	ldi	r26, 0x28	; 40
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e8 e2       	ldi	r30, 0x28	; 40
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	8c 93       	st	X, r24
 61c:	07 c0       	rjmp	.+14     	; 0x62c <m0_d2+0x30>
 61e:	a8 e2       	ldi	r26, 0x28	; 40
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e8 e2       	ldi	r30, 0x28	; 40
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	8d 7f       	andi	r24, 0xFD	; 253
 62a:	8c 93       	st	X, r24
 62c:	0f 90       	pop	r0
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	08 95       	ret

00000634 <m1_d1>:
void m1_d1(bool x){if(x) sbi(PORTD,PD1);else cbi(PORTD,PD1);}
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	0f 92       	push	r0
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	89 83       	std	Y+1, r24	; 0x01
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	88 23       	and	r24, r24
 644:	41 f0       	breq	.+16     	; 0x656 <m1_d1+0x22>
 646:	ab e2       	ldi	r26, 0x2B	; 43
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	eb e2       	ldi	r30, 0x2B	; 43
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	82 60       	ori	r24, 0x02	; 2
 652:	8c 93       	st	X, r24
 654:	07 c0       	rjmp	.+14     	; 0x664 <m1_d1+0x30>
 656:	ab e2       	ldi	r26, 0x2B	; 43
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	eb e2       	ldi	r30, 0x2B	; 43
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	8d 7f       	andi	r24, 0xFD	; 253
 662:	8c 93       	st	X, r24
 664:	0f 90       	pop	r0
 666:	cf 91       	pop	r28
 668:	df 91       	pop	r29
 66a:	08 95       	ret

0000066c <m1_d2>:
void m1_d2(bool x){if(x) sbi(PORTD,PD2);else cbi(PORTD,PD2);}
 66c:	df 93       	push	r29
 66e:	cf 93       	push	r28
 670:	0f 92       	push	r0
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	88 23       	and	r24, r24
 67c:	41 f0       	breq	.+16     	; 0x68e <m1_d2+0x22>
 67e:	ab e2       	ldi	r26, 0x2B	; 43
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	eb e2       	ldi	r30, 0x2B	; 43
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	84 60       	ori	r24, 0x04	; 4
 68a:	8c 93       	st	X, r24
 68c:	07 c0       	rjmp	.+14     	; 0x69c <m1_d2+0x30>
 68e:	ab e2       	ldi	r26, 0x2B	; 43
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	eb e2       	ldi	r30, 0x2B	; 43
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	8b 7f       	andi	r24, 0xFB	; 251
 69a:	8c 93       	st	X, r24
 69c:	0f 90       	pop	r0
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	08 95       	ret

000006a4 <m2_d1>:
void m2_d1(bool x){if(x) sbi(PORTD,PD4);else cbi(PORTD,PD4);}
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	0f 92       	push	r0
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	88 23       	and	r24, r24
 6b4:	41 f0       	breq	.+16     	; 0x6c6 <m2_d1+0x22>
 6b6:	ab e2       	ldi	r26, 0x2B	; 43
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	eb e2       	ldi	r30, 0x2B	; 43
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	80 61       	ori	r24, 0x10	; 16
 6c2:	8c 93       	st	X, r24
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <m2_d1+0x30>
 6c6:	ab e2       	ldi	r26, 0x2B	; 43
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	eb e2       	ldi	r30, 0x2B	; 43
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	8f 7e       	andi	r24, 0xEF	; 239
 6d2:	8c 93       	st	X, r24
 6d4:	0f 90       	pop	r0
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	08 95       	ret

000006dc <m2_d2>:
void m2_d2(bool x){if(x) sbi(PORTD,PD3);else cbi(PORTD,PD3);}
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	0f 92       	push	r0
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	88 23       	and	r24, r24
 6ec:	41 f0       	breq	.+16     	; 0x6fe <m2_d2+0x22>
 6ee:	ab e2       	ldi	r26, 0x2B	; 43
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	eb e2       	ldi	r30, 0x2B	; 43
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	88 60       	ori	r24, 0x08	; 8
 6fa:	8c 93       	st	X, r24
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <m2_d2+0x30>
 6fe:	ab e2       	ldi	r26, 0x2B	; 43
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	eb e2       	ldi	r30, 0x2B	; 43
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	87 7f       	andi	r24, 0xF7	; 247
 70a:	8c 93       	st	X, r24
 70c:	0f 90       	pop	r0
 70e:	cf 91       	pop	r28
 710:	df 91       	pop	r29
 712:	08 95       	ret

00000714 <m3_d1>:
void m3_d1(bool x){if(x) sbi(PORTD,PD7);else cbi(PORTD,PD7);}
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	0f 92       	push	r0
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	88 23       	and	r24, r24
 724:	41 f0       	breq	.+16     	; 0x736 <m3_d1+0x22>
 726:	ab e2       	ldi	r26, 0x2B	; 43
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	eb e2       	ldi	r30, 0x2B	; 43
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	80 68       	ori	r24, 0x80	; 128
 732:	8c 93       	st	X, r24
 734:	07 c0       	rjmp	.+14     	; 0x744 <m3_d1+0x30>
 736:	ab e2       	ldi	r26, 0x2B	; 43
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	eb e2       	ldi	r30, 0x2B	; 43
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	8f 77       	andi	r24, 0x7F	; 127
 742:	8c 93       	st	X, r24
 744:	0f 90       	pop	r0
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <m3_d2>:
void m3_d2(bool x){if(x) sbi(PORTB,PB0);else cbi(PORTB,PB0);}
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	0f 92       	push	r0
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	89 83       	std	Y+1, r24	; 0x01
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	88 23       	and	r24, r24
 75c:	41 f0       	breq	.+16     	; 0x76e <m3_d2+0x22>
 75e:	a5 e2       	ldi	r26, 0x25	; 37
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e5 e2       	ldi	r30, 0x25	; 37
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	8c 93       	st	X, r24
 76c:	07 c0       	rjmp	.+14     	; 0x77c <m3_d2+0x30>
 76e:	a5 e2       	ldi	r26, 0x25	; 37
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e5 e2       	ldi	r30, 0x25	; 37
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	8e 7f       	andi	r24, 0xFE	; 254
 77a:	8c 93       	st	X, r24
 77c:	0f 90       	pop	r0
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <m_act>:

void(*d1)(bool);
void(*d2)(bool);

void m_act(uint8_t act,uint8_t target)
{
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <m_act+0x6>
 78a:	00 d0       	rcall	.+0      	; 0x78c <m_act+0x8>
 78c:	00 d0       	rcall	.+0      	; 0x78e <m_act+0xa>
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	89 83       	std	Y+1, r24	; 0x01
 794:	6a 83       	std	Y+2, r22	; 0x02
	switch(target){
 796:	8a 81       	ldd	r24, Y+2	; 0x02
 798:	28 2f       	mov	r18, r24
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	3e 83       	std	Y+6, r19	; 0x06
 79e:	2d 83       	std	Y+5, r18	; 0x05
 7a0:	8d 81       	ldd	r24, Y+5	; 0x05
 7a2:	9e 81       	ldd	r25, Y+6	; 0x06
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	91 05       	cpc	r25, r1
 7a8:	11 f1       	breq	.+68     	; 0x7ee <m_act+0x6a>
 7aa:	2d 81       	ldd	r18, Y+5	; 0x05
 7ac:	3e 81       	ldd	r19, Y+6	; 0x06
 7ae:	22 30       	cpi	r18, 0x02	; 2
 7b0:	31 05       	cpc	r19, r1
 7b2:	2c f4       	brge	.+10     	; 0x7be <m_act+0x3a>
 7b4:	8d 81       	ldd	r24, Y+5	; 0x05
 7b6:	9e 81       	ldd	r25, Y+6	; 0x06
 7b8:	00 97       	sbiw	r24, 0x00	; 0
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <m_act+0x50>
 7bc:	90 c0       	rjmp	.+288    	; 0x8de <m_act+0x15a>
 7be:	2d 81       	ldd	r18, Y+5	; 0x05
 7c0:	3e 81       	ldd	r19, Y+6	; 0x06
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	01 f1       	breq	.+64     	; 0x808 <m_act+0x84>
 7c8:	8d 81       	ldd	r24, Y+5	; 0x05
 7ca:	9e 81       	ldd	r25, Y+6	; 0x06
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	91 05       	cpc	r25, r1
 7d0:	41 f1       	breq	.+80     	; 0x822 <m_act+0x9e>
 7d2:	85 c0       	rjmp	.+266    	; 0x8de <m_act+0x15a>
		case 0:	d1=m0_d1;d2=m0_d2;break;
 7d4:	82 ee       	ldi	r24, 0xE2	; 226
 7d6:	92 e0       	ldi	r25, 0x02	; 2
 7d8:	90 93 0e 01 	sts	0x010E, r25
 7dc:	80 93 0d 01 	sts	0x010D, r24
 7e0:	8e ef       	ldi	r24, 0xFE	; 254
 7e2:	92 e0       	ldi	r25, 0x02	; 2
 7e4:	90 93 10 01 	sts	0x0110, r25
 7e8:	80 93 0f 01 	sts	0x010F, r24
 7ec:	26 c0       	rjmp	.+76     	; 0x83a <m_act+0xb6>
		case 1:	d1=m1_d1;d2=m1_d2;break;
 7ee:	8a e1       	ldi	r24, 0x1A	; 26
 7f0:	93 e0       	ldi	r25, 0x03	; 3
 7f2:	90 93 0e 01 	sts	0x010E, r25
 7f6:	80 93 0d 01 	sts	0x010D, r24
 7fa:	86 e3       	ldi	r24, 0x36	; 54
 7fc:	93 e0       	ldi	r25, 0x03	; 3
 7fe:	90 93 10 01 	sts	0x0110, r25
 802:	80 93 0f 01 	sts	0x010F, r24
 806:	19 c0       	rjmp	.+50     	; 0x83a <m_act+0xb6>
		case 2:	d1=m2_d1;d2=m2_d2;break;
 808:	82 e5       	ldi	r24, 0x52	; 82
 80a:	93 e0       	ldi	r25, 0x03	; 3
 80c:	90 93 0e 01 	sts	0x010E, r25
 810:	80 93 0d 01 	sts	0x010D, r24
 814:	8e e6       	ldi	r24, 0x6E	; 110
 816:	93 e0       	ldi	r25, 0x03	; 3
 818:	90 93 10 01 	sts	0x0110, r25
 81c:	80 93 0f 01 	sts	0x010F, r24
 820:	0c c0       	rjmp	.+24     	; 0x83a <m_act+0xb6>
		case 3:	d1=m3_d1;d2=m3_d2;break;
 822:	8a e8       	ldi	r24, 0x8A	; 138
 824:	93 e0       	ldi	r25, 0x03	; 3
 826:	90 93 0e 01 	sts	0x010E, r25
 82a:	80 93 0d 01 	sts	0x010D, r24
 82e:	86 ea       	ldi	r24, 0xA6	; 166
 830:	93 e0       	ldi	r25, 0x03	; 3
 832:	90 93 10 01 	sts	0x0110, r25
 836:	80 93 0f 01 	sts	0x010F, r24
		default: return;				
		}
	switch(act){
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	28 2f       	mov	r18, r24
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	3c 83       	std	Y+4, r19	; 0x04
 842:	2b 83       	std	Y+3, r18	; 0x03
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	9c 81       	ldd	r25, Y+4	; 0x04
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	91 05       	cpc	r25, r1
 84c:	a9 f0       	breq	.+42     	; 0x878 <m_act+0xf4>
 84e:	2b 81       	ldd	r18, Y+3	; 0x03
 850:	3c 81       	ldd	r19, Y+4	; 0x04
 852:	22 30       	cpi	r18, 0x02	; 2
 854:	31 05       	cpc	r19, r1
 856:	2c f4       	brge	.+10     	; 0x862 <m_act+0xde>
 858:	8b 81       	ldd	r24, Y+3	; 0x03
 85a:	9c 81       	ldd	r25, Y+4	; 0x04
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	31 f1       	breq	.+76     	; 0x8ac <m_act+0x128>
 860:	3e c0       	rjmp	.+124    	; 0x8de <m_act+0x15a>
 862:	2b 81       	ldd	r18, Y+3	; 0x03
 864:	3c 81       	ldd	r19, Y+4	; 0x04
 866:	22 30       	cpi	r18, 0x02	; 2
 868:	31 05       	cpc	r19, r1
 86a:	99 f0       	breq	.+38     	; 0x892 <m_act+0x10e>
 86c:	8b 81       	ldd	r24, Y+3	; 0x03
 86e:	9c 81       	ldd	r25, Y+4	; 0x04
 870:	83 30       	cpi	r24, 0x03	; 3
 872:	91 05       	cpc	r25, r1
 874:	41 f1       	breq	.+80     	; 0x8c6 <m_act+0x142>
 876:	33 c0       	rjmp	.+102    	; 0x8de <m_act+0x15a>
		case CW:	(*d1)(0);(*d2)(1);break;
 878:	e0 91 0d 01 	lds	r30, 0x010D
 87c:	f0 91 0e 01 	lds	r31, 0x010E
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	09 95       	icall
 884:	e0 91 0f 01 	lds	r30, 0x010F
 888:	f0 91 10 01 	lds	r31, 0x0110
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	09 95       	icall
 890:	26 c0       	rjmp	.+76     	; 0x8de <m_act+0x15a>
		case CCW:	(*d1)(1);(*d2)(0);break;
 892:	e0 91 0d 01 	lds	r30, 0x010D
 896:	f0 91 0e 01 	lds	r31, 0x010E
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	09 95       	icall
 89e:	e0 91 0f 01 	lds	r30, 0x010F
 8a2:	f0 91 10 01 	lds	r31, 0x0110
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	09 95       	icall
 8aa:	19 c0       	rjmp	.+50     	; 0x8de <m_act+0x15a>
		case FREE:	(*d1)(0);(*d2)(0);break;
 8ac:	e0 91 0d 01 	lds	r30, 0x010D
 8b0:	f0 91 0e 01 	lds	r31, 0x010E
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	09 95       	icall
 8b8:	e0 91 0f 01 	lds	r30, 0x010F
 8bc:	f0 91 10 01 	lds	r31, 0x0110
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	09 95       	icall
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <m_act+0x15a>
		case BRAKE:	(*d1)(1);(*d2)(1);break;
 8c6:	e0 91 0d 01 	lds	r30, 0x010D
 8ca:	f0 91 0e 01 	lds	r31, 0x010E
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	09 95       	icall
 8d2:	e0 91 0f 01 	lds	r30, 0x010F
 8d6:	f0 91 10 01 	lds	r31, 0x0110
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	09 95       	icall
		default: return;
		}
}
 8de:	26 96       	adiw	r28, 0x06	; 6
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	f8 94       	cli
 8e4:	de bf       	out	0x3e, r29	; 62
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	cd bf       	out	0x3d, r28	; 61
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	08 95       	ret

000008f0 <m0>:
void m0(uint8_t act,uint8_t duty){m_act(act,0);OCR0A=duty;}
 8f0:	df 93       	push	r29
 8f2:	cf 93       	push	r28
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <m0+0x6>
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	6a 83       	std	Y+2, r22	; 0x02
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	40 df       	rcall	.-384    	; 0x784 <m_act>
 904:	e7 e4       	ldi	r30, 0x47	; 71
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	80 83       	st	Z, r24
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <m1>:
void m1(uint8_t act,uint8_t duty){m_act(act,1);OCR0B=duty;}
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	00 d0       	rcall	.+0      	; 0x91c <m1+0x6>
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	6a 83       	std	Y+2, r22	; 0x02
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	61 e0       	ldi	r22, 0x01	; 1
 928:	2d df       	rcall	.-422    	; 0x784 <m_act>
 92a:	e8 e4       	ldi	r30, 0x48	; 72
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	80 83       	st	Z, r24
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	cf 91       	pop	r28
 938:	df 91       	pop	r29
 93a:	08 95       	ret

0000093c <m2>:
void m2(uint8_t act,uint8_t duty){m_act(act,2);OCR1A=duty;}
 93c:	df 93       	push	r29
 93e:	cf 93       	push	r28
 940:	00 d0       	rcall	.+0      	; 0x942 <m2+0x6>
 942:	cd b7       	in	r28, 0x3d	; 61
 944:	de b7       	in	r29, 0x3e	; 62
 946:	89 83       	std	Y+1, r24	; 0x01
 948:	6a 83       	std	Y+2, r22	; 0x02
 94a:	89 81       	ldd	r24, Y+1	; 0x01
 94c:	62 e0       	ldi	r22, 0x02	; 2
 94e:	1a df       	rcall	.-460    	; 0x784 <m_act>
 950:	e8 e8       	ldi	r30, 0x88	; 136
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	8a 81       	ldd	r24, Y+2	; 0x02
 956:	88 2f       	mov	r24, r24
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	91 83       	std	Z+1, r25	; 0x01
 95c:	80 83       	st	Z, r24
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <m3>:
void m3(uint8_t act,uint8_t duty){m_act(act,3);OCR1B=duty;}
 968:	df 93       	push	r29
 96a:	cf 93       	push	r28
 96c:	00 d0       	rcall	.+0      	; 0x96e <m3+0x6>
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	6a 83       	std	Y+2, r22	; 0x02
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	63 e0       	ldi	r22, 0x03	; 3
 97a:	04 df       	rcall	.-504    	; 0x784 <m_act>
 97c:	ea e8       	ldi	r30, 0x8A	; 138
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	8a 81       	ldd	r24, Y+2	; 0x02
 982:	88 2f       	mov	r24, r24
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	91 83       	std	Z+1, r25	; 0x01
 988:	80 83       	st	Z, r24
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	cf 91       	pop	r28
 990:	df 91       	pop	r29
 992:	08 95       	ret

00000994 <setup>:
void (*motor[4])(uint8_t act,uint8_t duty)={m0,m1,m2,m3};

void setup()
{
 994:	df 93       	push	r29
 996:	cf 93       	push	r28
 998:	cd b7       	in	r28, 0x3d	; 61
 99a:	de b7       	in	r29, 0x3e	; 62
	DDRC   = 0x33;
 99c:	e7 e2       	ldi	r30, 0x27	; 39
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	83 e3       	ldi	r24, 0x33	; 51
 9a2:	80 83       	st	Z, r24
	DDRD   = 0xff;
 9a4:	ea e2       	ldi	r30, 0x2A	; 42
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	80 83       	st	Z, r24
	PORTD  = 0x00;
 9ac:	eb e2       	ldi	r30, 0x2B	; 43
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	10 82       	st	Z, r1
	DDRB   = 0xff;
 9b2:	e4 e2       	ldi	r30, 0x24	; 36
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	80 83       	st	Z, r24
	PORTB  = 0x00;
 9ba:	e5 e2       	ldi	r30, 0x25	; 37
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	10 82       	st	Z, r1
	TCCR0A = 0xA3;  
 9c0:	e4 e4       	ldi	r30, 0x44	; 68
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	83 ea       	ldi	r24, 0xA3	; 163
 9c6:	80 83       	st	Z, r24
	TCCR0B = 0x03;                    
 9c8:	e5 e4       	ldi	r30, 0x45	; 69
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	83 e0       	ldi	r24, 0x03	; 3
 9ce:	80 83       	st	Z, r24
	TCCR1A = 0xA1;     
 9d0:	e0 e8       	ldi	r30, 0x80	; 128
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	81 ea       	ldi	r24, 0xA1	; 161
 9d6:	80 83       	st	Z, r24
	TCCR1B = 0x0B;                    
 9d8:	e1 e8       	ldi	r30, 0x81	; 129
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	8b e0       	ldi	r24, 0x0B	; 11
 9de:	80 83       	st	Z, r24
}
 9e0:	cf 91       	pop	r28
 9e2:	df 91       	pop	r29
 9e4:	08 95       	ret

000009e6 <__divmodhi4>:
 9e6:	97 fb       	bst	r25, 7
 9e8:	09 2e       	mov	r0, r25
 9ea:	07 26       	eor	r0, r23
 9ec:	0a d0       	rcall	.+20     	; 0xa02 <__divmodhi4_neg1>
 9ee:	77 fd       	sbrc	r23, 7
 9f0:	04 d0       	rcall	.+8      	; 0x9fa <__divmodhi4_neg2>
 9f2:	0c d0       	rcall	.+24     	; 0xa0c <__udivmodhi4>
 9f4:	06 d0       	rcall	.+12     	; 0xa02 <__divmodhi4_neg1>
 9f6:	00 20       	and	r0, r0
 9f8:	1a f4       	brpl	.+6      	; 0xa00 <__divmodhi4_exit>

000009fa <__divmodhi4_neg2>:
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000a00 <__divmodhi4_exit>:
 a00:	08 95       	ret

00000a02 <__divmodhi4_neg1>:
 a02:	f6 f7       	brtc	.-4      	; 0xa00 <__divmodhi4_exit>
 a04:	90 95       	com	r25
 a06:	81 95       	neg	r24
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__udivmodhi4>:
 a0c:	aa 1b       	sub	r26, r26
 a0e:	bb 1b       	sub	r27, r27
 a10:	51 e1       	ldi	r21, 0x11	; 17
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <__udivmodhi4_ep>

00000a14 <__udivmodhi4_loop>:
 a14:	aa 1f       	adc	r26, r26
 a16:	bb 1f       	adc	r27, r27
 a18:	a6 17       	cp	r26, r22
 a1a:	b7 07       	cpc	r27, r23
 a1c:	10 f0       	brcs	.+4      	; 0xa22 <__udivmodhi4_ep>
 a1e:	a6 1b       	sub	r26, r22
 a20:	b7 0b       	sbc	r27, r23

00000a22 <__udivmodhi4_ep>:
 a22:	88 1f       	adc	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	5a 95       	dec	r21
 a28:	a9 f7       	brne	.-22     	; 0xa14 <__udivmodhi4_loop>
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	bc 01       	movw	r22, r24
 a30:	cd 01       	movw	r24, r26
 a32:	08 95       	ret

00000a34 <_exit>:
 a34:	f8 94       	cli

00000a36 <__stop_program>:
 a36:	ff cf       	rjmp	.-2      	; 0xa36 <__stop_program>
