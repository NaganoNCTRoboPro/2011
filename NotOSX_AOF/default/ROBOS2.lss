
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001d2e  00001dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800156  00800156  00001e18  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015fb  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015af  00000000  00000000  00004292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00005844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ac  00000000  00000000  00005ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_20>
      54:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_28>
      74:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e2       	ldi	r30, 0x2E	; 46
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3b       	cpi	r26, 0xBF	; 191
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define CATCH 0x50

#define SUPPLY_WATCHING (1)

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	c2 54       	subi	r28, 0x42	; 66
      dc:	d0 40       	sbci	r29, 0x00	; 0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t _group=0,_channel=0; 
      e8:	19 8a       	std	Y+17, r1	; 0x11
      ea:	18 8a       	std	Y+16, r1	; 0x10

	union controller_data *controller;

	int8_t slaveBuf[16]={0},m_size=2;
      ec:	80 e1       	ldi	r24, 0x10	; 16
      ee:	fe 01       	movw	r30, r28
      f0:	72 96       	adiw	r30, 0x12	; 18
      f2:	df 01       	movw	r26, r30
      f4:	98 2f       	mov	r25, r24
      f6:	1d 92       	st	X+, r1
      f8:	9a 95       	dec	r25
      fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x28>
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	8d 87       	std	Y+13, r24	; 0x0d
	bool zlPushed, zrPushed, rightPushed, leftPushed;
	uint8_t lAirTimeCount, rAirTimeCount;
	bool i2cStatus;

	uint8_t port;
	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],m_size},{(int8_t*)&slaveBuf[m_size],m_size}};
     100:	8d 85       	ldd	r24, Y+13	; 0x0d
     102:	68 2f       	mov	r22, r24
     104:	77 27       	eor	r23, r23
     106:	67 fd       	sbrc	r22, 7
     108:	70 95       	com	r23
     10a:	8d 85       	ldd	r24, Y+13	; 0x0d
     10c:	99 27       	eor	r25, r25
     10e:	87 fd       	sbrc	r24, 7
     110:	90 95       	com	r25
     112:	9e 01       	movw	r18, r28
     114:	2e 5e       	subi	r18, 0xEE	; 238
     116:	3f 4f       	sbci	r19, 0xFF	; 255
     118:	28 0f       	add	r18, r24
     11a:	39 1f       	adc	r19, r25
     11c:	8d 85       	ldd	r24, Y+13	; 0x0d
     11e:	48 2f       	mov	r20, r24
     120:	55 27       	eor	r21, r21
     122:	47 fd       	sbrc	r20, 7
     124:	50 95       	com	r21
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	8a a3       	std	Y+34, r24	; 0x22
     12a:	ce 01       	movw	r24, r28
     12c:	42 96       	adiw	r24, 0x12	; 18
     12e:	9c a3       	std	Y+36, r25	; 0x24
     130:	8b a3       	std	Y+35, r24	; 0x23
     132:	7e a3       	std	Y+38, r23	; 0x26
     134:	6d a3       	std	Y+37, r22	; 0x25
     136:	38 a7       	std	Y+40, r19	; 0x28
     138:	2f a3       	std	Y+39, r18	; 0x27
     13a:	5a a7       	std	Y+42, r21	; 0x2a
     13c:	49 a7       	std	Y+41, r20	; 0x29
	Slave Throw = {THROW,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	8b a7       	std	Y+43, r24	; 0x2b
     142:	ce 01       	movw	r24, r28
     144:	42 96       	adiw	r24, 0x12	; 18
     146:	0a 96       	adiw	r24, 0x0a	; 10
     148:	9d a7       	std	Y+45, r25	; 0x2d
     14a:	8c a7       	std	Y+44, r24	; 0x2c
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	9f a7       	std	Y+47, r25	; 0x2f
     152:	8e a7       	std	Y+46, r24	; 0x2e
     154:	ce 01       	movw	r24, r28
     156:	42 96       	adiw	r24, 0x12	; 18
     158:	0b 96       	adiw	r24, 0x0b	; 11
     15a:	99 ab       	std	Y+49, r25	; 0x31
     15c:	88 ab       	std	Y+48, r24	; 0x30
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	9b ab       	std	Y+51, r25	; 0x33
     164:	8a ab       	std	Y+50, r24	; 0x32
#if SUPPLY_WATCHING
	Slave EStop = {ESTOP,{(int8_t*)&slaveBuf[12],1},{(int8_t*)&slaveBuf[13],1}};	
     166:	80 e1       	ldi	r24, 0x10	; 16
     168:	8c ab       	std	Y+52, r24	; 0x34
     16a:	ce 01       	movw	r24, r28
     16c:	42 96       	adiw	r24, 0x12	; 18
     16e:	0c 96       	adiw	r24, 0x0c	; 12
     170:	9e ab       	std	Y+54, r25	; 0x36
     172:	8d ab       	std	Y+53, r24	; 0x35
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	98 af       	std	Y+56, r25	; 0x38
     17a:	8f ab       	std	Y+55, r24	; 0x37
     17c:	ce 01       	movw	r24, r28
     17e:	42 96       	adiw	r24, 0x12	; 18
     180:	0d 96       	adiw	r24, 0x0d	; 13
     182:	9a af       	std	Y+58, r25	; 0x3a
     184:	89 af       	std	Y+57, r24	; 0x39
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9c af       	std	Y+60, r25	; 0x3c
     18c:	8b af       	std	Y+59, r24	; 0x3b
	uint8_t e_flag=0;
     18e:	19 82       	std	Y+1, r1	; 0x01
#endif

/*---------------------------------------------------------------*/
// 						èëÇ´Ç©Ç¶ÇøÇ·É_ÉÅÇÊÅI
/*---------------------------------------------------------------*/
	LEDInit();
     190:	0e 94 07 0c 	call	0x180e	; 0x180e <LEDInit>
	SwitchInit();
     194:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <SwitchInit>
	BeepInit();
     198:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <BeepInit>
	initCtrlData();
     19c:	0e 94 c1 03 	call	0x782	; 0x782 <initCtrlData>
	DDRC |= 0x04;
     1a0:	a7 e2       	ldi	r26, 0x27	; 39
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e7 e2       	ldi	r30, 0x27	; 39
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	84 60       	ori	r24, 0x04	; 4
     1ac:	8c 93       	st	X, r24
	PORTC = 0x04;
     1ae:	e8 e2       	ldi	r30, 0x28	; 40
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	80 83       	st	Z, r24
	initI2CMaster(100);
     1b6:	84 e6       	ldi	r24, 0x64	; 100
     1b8:	0e 94 97 09 	call	0x132e	; 0x132e <initI2CMaster>

	wdt_reset();
     1bc:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1be:	88 e1       	ldi	r24, 0x18	; 24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	2d e0       	ldi	r18, 0x0D	; 13
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	a8 95       	wdr
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	68 e0       	ldi	r22, 0x08	; 8
     1da:	4a e0       	ldi	r20, 0x0A	; 10
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	0e 94 1f 06 	call	0xc3e	; 0xc3e <uart_init>
	uart_setbuffer(0,buf,36);
     1e2:	26 e5       	ldi	r18, 0x56	; 86
     1e4:	31 e0       	ldi	r19, 0x01	; 1
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	b9 01       	movw	r22, r18
     1ec:	44 e2       	ldi	r20, 0x24	; 36
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	0e 94 b2 06 	call	0xd64	; 0xd64 <uart_setbuffer>
	wait_ms(100);
     1f4:	84 e6       	ldi	r24, 0x64	; 100
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	68 e1       	ldi	r22, 0x18	; 24
     202:	40 e4       	ldi	r20, 0x40	; 64
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	0e 94 1f 06 	call	0xc3e	; 0xc3e <uart_init>
	mu2_command("GI",group[_group]);
     20a:	89 89       	ldd	r24, Y+17	; 0x11
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	fc 01       	movw	r30, r24
     216:	e4 5f       	subi	r30, 0xF4	; 244
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	20 81       	ld	r18, Z
     21c:	31 81       	ldd	r19, Z+1	; 0x01
     21e:	88 e2       	ldi	r24, 0x28	; 40
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	b9 01       	movw	r22, r18
     224:	0e 94 15 05 	call	0xa2a	; 0xa2a <mu2_command>
	mu2_command("CH",channel[_channel]);
     228:	88 89       	ldd	r24, Y+16	; 0x10
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	fc 01       	movw	r30, r24
     234:	e0 5e       	subi	r30, 0xE0	; 224
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	20 81       	ld	r18, Z
     23a:	31 81       	ldd	r19, Z+1	; 0x01
     23c:	8b e2       	ldi	r24, 0x2B	; 43
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	b9 01       	movw	r22, r18
     242:	0e 94 15 05 	call	0xa2a	; 0xa2a <mu2_command>
	mu2_command("EI","01");
     246:	8e e2       	ldi	r24, 0x2E	; 46
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	b9 01       	movw	r22, r18
     250:	0e 94 15 05 	call	0xa2a	; 0xa2a <mu2_command>
	mu2_command("DI","10");
     254:	81 e3       	ldi	r24, 0x31	; 49
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	24 e3       	ldi	r18, 0x34	; 52
     25a:	31 e0       	ldi	r19, 0x01	; 1
     25c:	b9 01       	movw	r22, r18
     25e:	0e 94 15 05 	call	0xa2a	; 0xa2a <mu2_command>
	mu2_command("BR","48");
     262:	87 e3       	ldi	r24, 0x37	; 55
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	2a e3       	ldi	r18, 0x3A	; 58
     268:	31 e0       	ldi	r19, 0x01	; 1
     26a:	b9 01       	movw	r22, r18
     26c:	0e 94 15 05 	call	0xa2a	; 0xa2a <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	60 e9       	ldi	r22, 0x90	; 144
     276:	43 e0       	ldi	r20, 0x03	; 3
     278:	51 e0       	ldi	r21, 0x01	; 1
     27a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
	sei();
     296:	78 94       	sei
	wait_ms(100);
     298:	84 e6       	ldi	r24, 0x64	; 100
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <wait_ms>
	PORTC &= 0xFB;
     2a0:	a8 e2       	ldi	r26, 0x28	; 40
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	e8 e2       	ldi	r30, 0x28	; 40
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	8b 7f       	andi	r24, 0xFB	; 251
     2ac:	8c 93       	st	X, r24
	wait_ms(25);
     2ae:	89 e1       	ldi	r24, 0x19	; 25
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <wait_ms>

	TCCR1A = 0;
     2b6:	e0 e8       	ldi	r30, 0x80	; 128
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	10 82       	st	Z, r1
	TCCR1B = 5;
     2bc:	e1 e8       	ldi	r30, 0x81	; 129
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	80 83       	st	Z, r24
	TIMSK1 = 1;
     2c4:	ef e6       	ldi	r30, 0x6F	; 111
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 83       	st	Z, r24
	TCNT1 = 0;
     2cc:	e4 e8       	ldi	r30, 0x84	; 132
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	11 82       	std	Z+1, r1	; 0x01
     2d2:	10 82       	st	Z, r1

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     2d4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Toggle_RC_Rx_Buffer>
     2d8:	9f 87       	std	Y+15, r25	; 0x0f
     2da:	8e 87       	std	Y+14, r24	; 0x0e
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     2dc:	ee 85       	ldd	r30, Y+14	; 0x0e
     2de:	ff 85       	ldd	r31, Y+15	; 0x0f
     2e0:	81 81       	ldd	r24, Z+1	; 0x01
     2e2:	82 70       	andi	r24, 0x02	; 2
     2e4:	88 23       	and	r24, r24
     2e6:	09 f4       	brne	.+2      	; 0x2ea <main+0x21c>
     2e8:	c2 c0       	rjmp	.+388    	; 0x46e <main+0x3a0>
     2ea:	ee 85       	ldd	r30, Y+14	; 0x0e
     2ec:	ff 85       	ldd	r31, Y+15	; 0x0f
     2ee:	80 81       	ld	r24, Z
     2f0:	81 70       	andi	r24, 0x01	; 1
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <main+0x22a>
     2f6:	bb c0       	rjmp	.+374    	; 0x46e <main+0x3a0>
     2f8:	ee 85       	ldd	r30, Y+14	; 0x0e
     2fa:	ff 85       	ldd	r31, Y+15	; 0x0f
     2fc:	80 81       	ld	r24, Z
     2fe:	80 71       	andi	r24, 0x10	; 16
     300:	88 23       	and	r24, r24
     302:	09 f4       	brne	.+2      	; 0x306 <main+0x238>
     304:	b4 c0       	rjmp	.+360    	; 0x46e <main+0x3a0>
     306:	ee 85       	ldd	r30, Y+14	; 0x0e
     308:	ff 85       	ldd	r31, Y+15	; 0x0f
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	88 2f       	mov	r24, r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	8d 30       	cpi	r24, 0x0D	; 13
     314:	91 05       	cpc	r25, r1
     316:	0c f4       	brge	.+2      	; 0x31a <main+0x24c>
     318:	aa c0       	rjmp	.+340    	; 0x46e <main+0x3a0>
     31a:	ee 85       	ldd	r30, Y+14	; 0x0e
     31c:	ff 85       	ldd	r31, Y+15	; 0x0f
     31e:	83 81       	ldd	r24, Z+3	; 0x03
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	8d 30       	cpi	r24, 0x0D	; 13
     328:	91 05       	cpc	r25, r1
     32a:	0c f4       	brge	.+2      	; 0x32e <main+0x260>
     32c:	a0 c0       	rjmp	.+320    	; 0x46e <main+0x3a0>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	68 e1       	ldi	r22, 0x18	; 24
     34c:	43 e0       	ldi	r20, 0x03	; 3
     34e:	51 e0       	ldi	r21, 0x01	; 1
     350:	0e 94 1f 06 	call	0xc3e	; 0xc3e <uart_init>
				LED(2,mu2_command_eeprom("EI","01"));
     354:	8e e2       	ldi	r24, 0x2E	; 46
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	31 e0       	ldi	r19, 0x01	; 1
     35c:	b9 01       	movw	r22, r18
     35e:	0e 94 97 05 	call	0xb2e	; 0xb2e <mu2_command_eeprom>
     362:	8e af       	std	Y+62, r24	; 0x3e
     364:	ae ad       	ldd	r26, Y+62	; 0x3e
     366:	aa 23       	and	r26, r26
     368:	11 f0       	breq	.+4      	; 0x36e <main+0x2a0>
     36a:	b1 e0       	ldi	r27, 0x01	; 1
     36c:	be af       	std	Y+62, r27	; 0x3e
     36e:	9e ad       	ldd	r25, Y+62	; 0x3e
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	69 2f       	mov	r22, r25
     374:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				LED(2,mu2_command_eeprom("DI","10"));
     378:	81 e3       	ldi	r24, 0x31	; 49
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	24 e3       	ldi	r18, 0x34	; 52
     37e:	31 e0       	ldi	r19, 0x01	; 1
     380:	b9 01       	movw	r22, r18
     382:	0e 94 97 05 	call	0xb2e	; 0xb2e <mu2_command_eeprom>
     386:	8f af       	std	Y+63, r24	; 0x3f
     388:	8f ad       	ldd	r24, Y+63	; 0x3f
     38a:	88 23       	and	r24, r24
     38c:	11 f0       	breq	.+4      	; 0x392 <main+0x2c4>
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	9f af       	std	Y+63, r25	; 0x3f
     392:	9f ad       	ldd	r25, Y+63	; 0x3f
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	69 2f       	mov	r22, r25
     398:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				LED(2,mu2_command_eeprom("GI",group[_group]));
     39c:	89 89       	ldd	r24, Y+17	; 0x11
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	fc 01       	movw	r30, r24
     3a8:	e4 5f       	subi	r30, 0xF4	; 244
     3aa:	fe 4f       	sbci	r31, 0xFE	; 254
     3ac:	20 81       	ld	r18, Z
     3ae:	31 81       	ldd	r19, Z+1	; 0x01
     3b0:	88 e2       	ldi	r24, 0x28	; 40
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	b9 01       	movw	r22, r18
     3b6:	0e 94 97 05 	call	0xb2e	; 0xb2e <mu2_command_eeprom>
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	8f af       	std	Y+63, r24	; 0x3f
     3be:	21 97       	sbiw	r28, 0x01	; 1
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	af ad       	ldd	r26, Y+63	; 0x3f
     3c4:	21 97       	sbiw	r28, 0x01	; 1
     3c6:	aa 23       	and	r26, r26
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <main+0x304>
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	21 96       	adiw	r28, 0x01	; 1
     3ce:	bf af       	std	Y+63, r27	; 0x3f
     3d0:	21 97       	sbiw	r28, 0x01	; 1
     3d2:	21 96       	adiw	r28, 0x01	; 1
     3d4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3d6:	21 97       	sbiw	r28, 0x01	; 1
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	69 2f       	mov	r22, r25
     3dc:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				LED(2,mu2_command_eeprom("CH",channel[_channel]));
     3e0:	88 89       	ldd	r24, Y+16	; 0x10
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	fc 01       	movw	r30, r24
     3ec:	e0 5e       	subi	r30, 0xE0	; 224
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	20 81       	ld	r18, Z
     3f2:	31 81       	ldd	r19, Z+1	; 0x01
     3f4:	8b e2       	ldi	r24, 0x2B	; 43
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	b9 01       	movw	r22, r18
     3fa:	0e 94 97 05 	call	0xb2e	; 0xb2e <mu2_command_eeprom>
     3fe:	22 96       	adiw	r28, 0x02	; 2
     400:	8f af       	std	Y+63, r24	; 0x3f
     402:	22 97       	sbiw	r28, 0x02	; 2
     404:	22 96       	adiw	r28, 0x02	; 2
     406:	8f ad       	ldd	r24, Y+63	; 0x3f
     408:	22 97       	sbiw	r28, 0x02	; 2
     40a:	88 23       	and	r24, r24
     40c:	21 f0       	breq	.+8      	; 0x416 <main+0x348>
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	22 96       	adiw	r28, 0x02	; 2
     412:	9f af       	std	Y+63, r25	; 0x3f
     414:	22 97       	sbiw	r28, 0x02	; 2
     416:	22 96       	adiw	r28, 0x02	; 2
     418:	9f ad       	ldd	r25, Y+63	; 0x3f
     41a:	22 97       	sbiw	r28, 0x02	; 2
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	69 2f       	mov	r22, r25
     420:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     424:	87 e3       	ldi	r24, 0x37	; 55
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	2a e3       	ldi	r18, 0x3A	; 58
     42a:	31 e0       	ldi	r19, 0x01	; 1
     42c:	b9 01       	movw	r22, r18
     42e:	0e 94 97 05 	call	0xb2e	; 0xb2e <mu2_command_eeprom>
     432:	23 96       	adiw	r28, 0x03	; 3
     434:	8f af       	std	Y+63, r24	; 0x3f
     436:	23 97       	sbiw	r28, 0x03	; 3
     438:	23 96       	adiw	r28, 0x03	; 3
     43a:	af ad       	ldd	r26, Y+63	; 0x3f
     43c:	23 97       	sbiw	r28, 0x03	; 3
     43e:	aa 23       	and	r26, r26
     440:	21 f0       	breq	.+8      	; 0x44a <main+0x37c>
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	23 96       	adiw	r28, 0x03	; 3
     446:	bf af       	std	Y+63, r27	; 0x3f
     448:	23 97       	sbiw	r28, 0x03	; 3
     44a:	23 96       	adiw	r28, 0x03	; 3
     44c:	9f ad       	ldd	r25, Y+63	; 0x3f
     44e:	23 97       	sbiw	r28, 0x03	; 3
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	69 2f       	mov	r22, r25
     454:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				wait_ms(100);
     458:	84 e6       	ldi	r24, 0x64	; 100
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	60 e9       	ldi	r22, 0x90	; 144
     466:	43 e0       	ldi	r20, 0x03	; 3
     468:	51 e0       	ldi	r21, 0x01	; 1
     46a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <uart_init>
			}
/*-------------------------------------------------------------------------*/
		// velocity = 0
		velocity = 0;
     46e:	1c 86       	std	Y+12, r1	; 0x0c
		// Ç‡ÇµÅCaÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 100;
		if( controller->detail.Button.A )
     470:	ee 85       	ldd	r30, Y+14	; 0x0e
     472:	ff 85       	ldd	r31, Y+15	; 0x0f
     474:	80 81       	ld	r24, Z
     476:	82 70       	andi	r24, 0x02	; 2
     478:	88 23       	and	r24, r24
     47a:	19 f0       	breq	.+6      	; 0x482 <main+0x3b4>
			{
				velocity = 100;
     47c:	84 e6       	ldi	r24, 0x64	; 100
     47e:	8c 87       	std	Y+12, r24	; 0x0c
     480:	1c c0       	rjmp	.+56     	; 0x4ba <main+0x3ec>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCxÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 70;
		else if( controller->detail.Button.X )
     482:	ee 85       	ldd	r30, Y+14	; 0x0e
     484:	ff 85       	ldd	r31, Y+15	; 0x0f
     486:	80 81       	ld	r24, Z
     488:	81 70       	andi	r24, 0x01	; 1
     48a:	88 23       	and	r24, r24
     48c:	19 f0       	breq	.+6      	; 0x494 <main+0x3c6>
			{
				velocity = 70;
     48e:	86 e4       	ldi	r24, 0x46	; 70
     490:	8c 87       	std	Y+12, r24	; 0x0c
     492:	13 c0       	rjmp	.+38     	; 0x4ba <main+0x3ec>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCyÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 30;
		else if( controller->detail.Button.Y )
     494:	ee 85       	ldd	r30, Y+14	; 0x0e
     496:	ff 85       	ldd	r31, Y+15	; 0x0f
     498:	80 81       	ld	r24, Z
     49a:	88 70       	andi	r24, 0x08	; 8
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <main+0x3d8>
			{
				velocity = 30;
     4a0:	8e e1       	ldi	r24, 0x1E	; 30
     4a2:	8c 87       	std	Y+12, r24	; 0x0c
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <main+0x3ec>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCbÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = -100;
		else if( controller->detail.Button.B )
     4a6:	ee 85       	ldd	r30, Y+14	; 0x0e
     4a8:	ff 85       	ldd	r31, Y+15	; 0x0f
     4aa:	80 81       	ld	r24, Z
     4ac:	84 70       	andi	r24, 0x04	; 4
     4ae:	88 23       	and	r24, r24
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <main+0x3ea>
			{
				velocity = -100;
     4b2:	8c e9       	ldi	r24, 0x9C	; 156
     4b4:	8c 87       	std	Y+12, r24	; 0x0c
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <main+0x3ec>
			}
		// ÇªÇ§Ç≈Ç»ÇØÇÍÇŒ
			// velocity = 0;
		else
			{
				velocity = 0;
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
			}
		// MotorDrive( , CW, velocity, 0);
		mDrive(&Motor, CW, velocity, 0);
     4ba:	ce 01       	movw	r24, r28
     4bc:	82 96       	adiw	r24, 0x22	; 34
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	4c 85       	ldd	r20, Y+12	; 0x0c
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	0e 94 a6 0c 	call	0x194c	; 0x194c <mDrive>
		// MotorDrive( , CW, velocity, 1);
		mDrive(&Motor, CW, velocity, 1);
     4c8:	ce 01       	movw	r24, r28
     4ca:	82 96       	adiw	r24, 0x22	; 34
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	4c 85       	ldd	r20, Y+12	; 0x0c
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	0e 94 a6 0c 	call	0x194c	; 0x194c <mDrive>

		// lAirAction = rAirAction = OFF
		lAirAction = rAirAction = OFF;
     4d6:	1a 86       	std	Y+10, r1	; 0x0a
     4d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     4da:	8b 87       	std	Y+11, r24	; 0x0b
		// zlPushed = zrPushed = rightPushed = leftPushed = false
		zlPushed = zrPushed = rightPushed = leftPushed = false;
     4dc:	1e 82       	std	Y+6, r1	; 0x06
     4de:	8e 81       	ldd	r24, Y+6	; 0x06
     4e0:	8f 83       	std	Y+7, r24	; 0x07
     4e2:	8f 81       	ldd	r24, Y+7	; 0x07
     4e4:	88 87       	std	Y+8, r24	; 0x08
     4e6:	88 85       	ldd	r24, Y+8	; 0x08
     4e8:	89 87       	std	Y+9, r24	; 0x09
		// lAirTimeCount = rAirTimeCount = 0
		lAirTimeCount = rAirTimeCount = 0;
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	8c 81       	ldd	r24, Y+4	; 0x04
     4ee:	8d 83       	std	Y+5, r24	; 0x05

		// Ç‡ÇµÅCLÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// lAirAction = ON
		if( controller->detail.Button.L )
     4f0:	ee 85       	ldd	r30, Y+14	; 0x0e
     4f2:	ff 85       	ldd	r31, Y+15	; 0x0f
     4f4:	81 81       	ldd	r24, Z+1	; 0x01
     4f6:	80 72       	andi	r24, 0x20	; 32
     4f8:	88 23       	and	r24, r24
     4fa:	19 f0       	breq	.+6      	; 0x502 <main+0x434>
			{
				lAirAction = ON;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	8b 87       	std	Y+11, r24	; 0x0b
     500:	46 c0       	rjmp	.+140    	; 0x58e <main+0x4c0>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZLÉ{É^ÉìÇ™âüâ∫ÅDÇ©Ç¬zlPushedgaãUÇ»ÇÁ
			// lAirAction = ON
			// zlPushed = ê^
			// lAirTimeCount = Å†
		else if( controller->detail.Button.ZL && ! zlPushed )
     502:	ee 85       	ldd	r30, Y+14	; 0x0e
     504:	ff 85       	ldd	r31, Y+15	; 0x0f
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	88 70       	andi	r24, 0x08	; 8
     50a:	88 23       	and	r24, r24
     50c:	71 f0       	breq	.+28     	; 0x52a <main+0x45c>
     50e:	99 85       	ldd	r25, Y+9	; 0x09
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	98 27       	eor	r25, r24
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	89 27       	eor	r24, r25
     518:	88 23       	and	r24, r24
     51a:	39 f4       	brne	.+14     	; 0x52a <main+0x45c>
			{
				lAirAction = ON;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	8b 87       	std	Y+11, r24	; 0x0b
				zlPushed = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	89 87       	std	Y+9, r24	; 0x09
				lAirTimeCount = 10;
     524:	8a e0       	ldi	r24, 0x0A	; 10
     526:	8d 83       	std	Y+5, r24	; 0x05
     528:	32 c0       	rjmp	.+100    	; 0x58e <main+0x4c0>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZLÉ{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬zlPushedÇ™ê^Ç»ÇÁ
			// zlPushed = ãU
		else if( ! controller->detail.Button.ZL && zlPushed )
     52a:	ee 85       	ldd	r30, Y+14	; 0x0e
     52c:	ff 85       	ldd	r31, Y+15	; 0x0f
     52e:	81 81       	ldd	r24, Z+1	; 0x01
     530:	88 70       	andi	r24, 0x08	; 8
     532:	88 23       	and	r24, r24
     534:	39 f4       	brne	.+14     	; 0x544 <main+0x476>
     536:	89 85       	ldd	r24, Y+9	; 0x09
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	89 27       	eor	r24, r25
     53c:	88 23       	and	r24, r24
     53e:	11 f4       	brne	.+4      	; 0x544 <main+0x476>
			{
				zlPushed = false;
     540:	19 86       	std	Y+9, r1	; 0x09
     542:	25 c0       	rjmp	.+74     	; 0x58e <main+0x4c0>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ©É{É^ÉìÇ™âüâ∫Ç≈ÅCÇ©Ç¬leftPushedÇ™ãUÇ»ÇÁ
			// lAirAction = ON
			// leftPushed = ê^
			// lAirTimeCount = Åõ
		else if( controller->detail.Button.LEFT && ! leftPushed )
     544:	ee 85       	ldd	r30, Y+14	; 0x0e
     546:	ff 85       	ldd	r31, Y+15	; 0x0f
     548:	80 81       	ld	r24, Z
     54a:	80 78       	andi	r24, 0x80	; 128
     54c:	88 23       	and	r24, r24
     54e:	71 f0       	breq	.+28     	; 0x56c <main+0x49e>
     550:	9e 81       	ldd	r25, Y+6	; 0x06
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	98 27       	eor	r25, r24
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	89 27       	eor	r24, r25
     55a:	88 23       	and	r24, r24
     55c:	39 f4       	brne	.+14     	; 0x56c <main+0x49e>
			{
				lAirAction = ON;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	8b 87       	std	Y+11, r24	; 0x0b
				leftPushed = true;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8e 83       	std	Y+6, r24	; 0x06
				lAirTimeCount = 20;
     566:	84 e1       	ldi	r24, 0x14	; 20
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	11 c0       	rjmp	.+34     	; 0x58e <main+0x4c0>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ©É{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬leftPushedÇ™ê^Ç»ÇÁ
			// leftPushed = ãU
		else if( ! controller->detail.Button.LEFT && leftPushed )
     56c:	ee 85       	ldd	r30, Y+14	; 0x0e
     56e:	ff 85       	ldd	r31, Y+15	; 0x0f
     570:	80 81       	ld	r24, Z
     572:	80 78       	andi	r24, 0x80	; 128
     574:	88 23       	and	r24, r24
     576:	39 f4       	brne	.+14     	; 0x586 <main+0x4b8>
     578:	8e 81       	ldd	r24, Y+6	; 0x06
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	89 27       	eor	r24, r25
     57e:	88 23       	and	r24, r24
     580:	11 f4       	brne	.+4      	; 0x586 <main+0x4b8>
			{
				leftPushed = false;
     582:	1e 82       	std	Y+6, r1	; 0x06
     584:	04 c0       	rjmp	.+8      	; 0x58e <main+0x4c0>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅClAirTimeCountÇ™0Ç»ÇÁ
			// lAirAction = OFF
		else if( lAirTimeCount == 0 )
     586:	8d 81       	ldd	r24, Y+5	; 0x05
     588:	88 23       	and	r24, r24
     58a:	09 f4       	brne	.+2      	; 0x58e <main+0x4c0>
			{
				lAirAction = OFF;
     58c:	1b 86       	std	Y+11, r1	; 0x0b
			}
		// Ç‡ÇµÅClAirTimeCountÇ™0Ç≈Ç»ÇØÇÍÇŒ
			// lAirTimeCountÇÉfÉNÉäÉÅÉìÉg
		if( lAirTimeCount )
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	88 23       	and	r24, r24
     592:	19 f0       	breq	.+6      	; 0x59a <main+0x4cc>
			{
				lAirTimeCount--;
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	81 50       	subi	r24, 0x01	; 1
     598:	8d 83       	std	Y+5, r24	; 0x05
			}
		// AirDrive()

		// Ç‡ÇµRÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// rAirAction = ON
		if( controller->detail.Button.R )
     59a:	ee 85       	ldd	r30, Y+14	; 0x0e
     59c:	ff 85       	ldd	r31, Y+15	; 0x0f
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	80 74       	andi	r24, 0x40	; 64
     5a2:	88 23       	and	r24, r24
     5a4:	19 f0       	breq	.+6      	; 0x5ac <main+0x4de>
			{
				rAirAction = ON;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	8a 87       	std	Y+10, r24	; 0x0a
     5aa:	48 c0       	rjmp	.+144    	; 0x63c <main+0x56e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZRÉ{É^ÉìÇ™âüâ∫ÅDÇ©Ç¬zrPushedÇ™ãUÇ»ÇÁ
			// rAirAction = ON
			// zrPushed = ê^
			// rAirTimeCount = Å†
		else if( controller->detail.Button.ZR && ! zrPushed )
     5ac:	ee 85       	ldd	r30, Y+14	; 0x0e
     5ae:	ff 85       	ldd	r31, Y+15	; 0x0f
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	80 71       	andi	r24, 0x10	; 16
     5b4:	88 23       	and	r24, r24
     5b6:	71 f0       	breq	.+28     	; 0x5d4 <main+0x506>
     5b8:	98 85       	ldd	r25, Y+8	; 0x08
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	98 27       	eor	r25, r24
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	89 27       	eor	r24, r25
     5c2:	88 23       	and	r24, r24
     5c4:	39 f4       	brne	.+14     	; 0x5d4 <main+0x506>
			{
				rAirAction = ON;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	8a 87       	std	Y+10, r24	; 0x0a
				zrPushed = true;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	88 87       	std	Y+8, r24	; 0x08
				rAirTimeCount = 10;
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
     5d0:	8c 83       	std	Y+4, r24	; 0x04
     5d2:	34 c0       	rjmp	.+104    	; 0x63c <main+0x56e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZRÉ{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅCÇ©Ç¬zrPushedÇ™ê^Ç»ÇÁ
			// zrPushed = ãU
		else if( ! controller->detail.Button.ZR && zrPushed )
     5d4:	ee 85       	ldd	r30, Y+14	; 0x0e
     5d6:	ff 85       	ldd	r31, Y+15	; 0x0f
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
     5da:	80 71       	andi	r24, 0x10	; 16
     5dc:	88 23       	and	r24, r24
     5de:	39 f4       	brne	.+14     	; 0x5ee <main+0x520>
     5e0:	88 85       	ldd	r24, Y+8	; 0x08
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	89 27       	eor	r24, r25
     5e6:	88 23       	and	r24, r24
     5e8:	11 f4       	brne	.+4      	; 0x5ee <main+0x520>
			{
				zrPushed = false;
     5ea:	18 86       	std	Y+8, r1	; 0x08
     5ec:	27 c0       	rjmp	.+78     	; 0x63c <main+0x56e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ®É{É^ÉìÇ™âüâ∫Ç≈ÅCÇ©Ç¬rightPushedÇ™ãUÇ»ÇÁ
			// rAirAction = ON
			// rightPushed = ê^
			// rAirTimeCount = Åõ
		else if( controller->detail.Button.RIGHT && ! rightPushed )
     5ee:	ee 85       	ldd	r30, Y+14	; 0x0e
     5f0:	ff 85       	ldd	r31, Y+15	; 0x0f
     5f2:	80 81       	ld	r24, Z
     5f4:	80 72       	andi	r24, 0x20	; 32
     5f6:	88 23       	and	r24, r24
     5f8:	71 f0       	breq	.+28     	; 0x616 <main+0x548>
     5fa:	9f 81       	ldd	r25, Y+7	; 0x07
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	98 27       	eor	r25, r24
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	89 27       	eor	r24, r25
     604:	88 23       	and	r24, r24
     606:	39 f4       	brne	.+14     	; 0x616 <main+0x548>
			{
				rAirAction = ON;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8a 87       	std	Y+10, r24	; 0x0a
				rightPushed = true;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	8f 83       	std	Y+7, r24	; 0x07
				rAirTimeCount = 20;
     610:	84 e1       	ldi	r24, 0x14	; 20
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	13 c0       	rjmp	.+38     	; 0x63c <main+0x56e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ®É{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬rightPushedÇ™ê^Ç»ÇÁ
			// rightPushed = ãU
		else if( ! controller->detail.Button.RIGHT && rightPushed )
     616:	ee 85       	ldd	r30, Y+14	; 0x0e
     618:	ff 85       	ldd	r31, Y+15	; 0x0f
     61a:	80 81       	ld	r24, Z
     61c:	80 72       	andi	r24, 0x20	; 32
     61e:	88 23       	and	r24, r24
     620:	39 f4       	brne	.+14     	; 0x630 <main+0x562>
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	89 27       	eor	r24, r25
     628:	88 23       	and	r24, r24
     62a:	11 f4       	brne	.+4      	; 0x630 <main+0x562>
			{
				rightPushed = false;
     62c:	1f 82       	std	Y+7, r1	; 0x07
     62e:	06 c0       	rjmp	.+12     	; 0x63c <main+0x56e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCrAirTimeCountÇ™0Ç»ÇÁ
			// rAirTimeCountÇÉfÉNÉäÉÅÉìÉg
		else if( rAirTimeCount == 0 )
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	88 23       	and	r24, r24
     634:	19 f4       	brne	.+6      	; 0x63c <main+0x56e>
			{
				rAirTimeCount--;
     636:	8c 81       	ldd	r24, Y+4	; 0x04
     638:	81 50       	subi	r24, 0x01	; 1
     63a:	8c 83       	std	Y+4, r24	; 0x04
			}
		// AirDrive()
		port = ( ( rAirAction << 3 ) | ( lAirAction << 2 ) | ( rAirAction << 1 ) | lAirAction );
     63c:	8a 85       	ldd	r24, Y+10	; 0x0a
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	28 2f       	mov	r18, r24
     650:	8b 85       	ldd	r24, Y+11	; 0x0b
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	28 2b       	or	r18, r24
     660:	8a 85       	ldd	r24, Y+10	; 0x0a
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	92 2f       	mov	r25, r18
     66c:	98 2b       	or	r25, r24
     66e:	8b 85       	ldd	r24, Y+11	; 0x0b
     670:	89 2b       	or	r24, r25
     672:	8a 83       	std	Y+2, r24	; 0x02
		aDrive(&Throw,port, ( rAirAction | lAirAction ) );
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	28 2f       	mov	r18, r24
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	88 2f       	mov	r24, r24
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 2b       	or	r24, r18
     682:	93 2b       	or	r25, r19
     684:	1d ae       	std	Y+61, r1	; 0x3d
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	11 f0       	breq	.+4      	; 0x68e <main+0x5c0>
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	8d af       	std	Y+61, r24	; 0x3d
     68e:	ce 01       	movw	r24, r28
     690:	8b 96       	adiw	r24, 0x2b	; 43
     692:	6a 81       	ldd	r22, Y+2	; 0x02
     694:	4d ad       	ldd	r20, Y+61	; 0x3d
     696:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <aDrive>
//		aDrive(&Throw,port,act);
		
#if SUPPLY_WATCHING
/*ÉoÉãÉXÉÇÅ[Éh*/
		/*ÉoÉãÉX!!!!!*/
		if(controller->detail.Button.SELECT&&controller->detail.Button.START){
     69a:	ee 85       	ldd	r30, Y+14	; 0x0e
     69c:	ff 85       	ldd	r31, Y+15	; 0x0f
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	81 70       	andi	r24, 0x01	; 1
     6a2:	88 23       	and	r24, r24
     6a4:	61 f0       	breq	.+24     	; 0x6be <main+0x5f0>
     6a6:	ee 85       	ldd	r30, Y+14	; 0x0e
     6a8:	ff 85       	ldd	r31, Y+15	; 0x0f
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	84 70       	andi	r24, 0x04	; 4
     6ae:	88 23       	and	r24, r24
     6b0:	31 f0       	breq	.+12     	; 0x6be <main+0x5f0>
			e_flag=E_ON;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	89 83       	std	Y+1, r24	; 0x01
			port&=0xCF;
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	8f 7c       	andi	r24, 0xCF	; 207
     6ba:	8a 83       	std	Y+2, r24	; 0x02
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <main+0x604>
		}
		/*ïúäà!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     6be:	ee 85       	ldd	r30, Y+14	; 0x0e
     6c0:	ff 85       	ldd	r31, Y+15	; 0x0f
     6c2:	81 81       	ldd	r24, Z+1	; 0x01
     6c4:	82 70       	andi	r24, 0x02	; 2
     6c6:	88 23       	and	r24, r24
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <main+0x602>
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <main+0x604>
		else e_flag=E_KEEP;	
     6d0:	19 82       	std	Y+1, r1	; 0x01
		i2cStatus = true;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	8b 83       	std	Y+3, r24	; 0x03
#endif

/*I2C Writeing And Check*/

		i2cStatus &= i2cWrite(&Motor); wait_us(4);  
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	08 2f       	mov	r16, r24
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	ce 01       	movw	r24, r28
     6de:	82 96       	adiw	r24, 0x22	; 34
     6e0:	0e 94 ce 09 	call	0x139c	; 0x139c <i2cWrite>
     6e4:	88 2f       	mov	r24, r24
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	80 23       	and	r24, r16
     6ea:	91 23       	and	r25, r17
     6ec:	1b 82       	std	Y+3, r1	; 0x03
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <main+0x628>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <wait_us>
#if SUPPLY_WATCHING
		i2cStatus &= Emergency(&EStop,e_flag);	
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	08 2f       	mov	r16, r24
     702:	10 e0       	ldi	r17, 0x00	; 0
     704:	29 81       	ldd	r18, Y+1	; 0x01
     706:	ce 01       	movw	r24, r28
     708:	c4 96       	adiw	r24, 0x34	; 52
     70a:	62 2f       	mov	r22, r18
     70c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <Emergency>
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	80 23       	and	r24, r16
     716:	91 23       	and	r25, r17
     718:	1b 82       	std	Y+3, r1	; 0x03
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	11 f0       	breq	.+4      	; 0x722 <main+0x654>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	8b 83       	std	Y+3, r24	; 0x03
		i2cStatus &= i2cWrite(&EStop); wait_us(4);
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	08 2f       	mov	r16, r24
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	ce 01       	movw	r24, r28
     72a:	c4 96       	adiw	r24, 0x34	; 52
     72c:	0e 94 ce 09 	call	0x139c	; 0x139c <i2cWrite>
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	80 23       	and	r24, r16
     736:	91 23       	and	r25, r17
     738:	1b 82       	std	Y+3, r1	; 0x03
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	11 f0       	breq	.+4      	; 0x742 <main+0x674>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	84 e0       	ldi	r24, 0x04	; 4
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <wait_us>
#endif
		i2cStatus &= i2cWrite(&Throw); wait_us(4);
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	08 2f       	mov	r16, r24
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	ce 01       	movw	r24, r28
     752:	8b 96       	adiw	r24, 0x2b	; 43
     754:	0e 94 ce 09 	call	0x139c	; 0x139c <i2cWrite>
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	80 23       	and	r24, r16
     75e:	91 23       	and	r25, r17
     760:	1b 82       	std	Y+3, r1	; 0x03
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	11 f0       	breq	.+4      	; 0x76a <main+0x69c>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	8b 83       	std	Y+3, r24	; 0x03
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <wait_us>
		i2cCheck(i2cStatus);
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <i2cCheck>

/********Ç±ÇÍà»ç~ÇèëÇ´ä∑Ç¶ÇÈÇ±Ç∆ÇÕêÑèßÇ≥ÇÍÇ»Ç¢ÇÊ!!!********/
		wait_ms(25);
     778:	89 e1       	ldi	r24, 0x19	; 25
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <wait_ms>
     780:	a9 cd       	rjmp	.-1198   	; 0x2d4 <main+0x206>

00000782 <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     78a:	10 92 7a 01 	sts	0x017A, r1
     78e:	15 c0       	rjmp	.+42     	; 0x7ba <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     790:	80 91 7a 01 	lds	r24, 0x017A
     794:	28 2f       	mov	r18, r24
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	80 91 7a 01 	lds	r24, 0x017A
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	e3 5c       	subi	r30, 0xC3	; 195
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	80 81       	ld	r24, Z
     7a8:	f9 01       	movw	r30, r18
     7aa:	e2 58       	subi	r30, 0x82	; 130
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     7b0:	80 91 7a 01 	lds	r24, 0x017A
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 7a 01 	sts	0x017A, r24
     7ba:	80 91 7a 01 	lds	r24, 0x017A
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	38 f3       	brcs	.-50     	; 0x790 <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     7c2:	cf 91       	pop	r28
     7c4:	df 91       	pop	r29
     7c6:	08 95       	ret

000007c8 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	cli();
     7d0:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     7d2:	10 92 7a 01 	sts	0x017A, r1
     7d6:	15 c0       	rjmp	.+42     	; 0x802 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     7d8:	80 91 7a 01 	lds	r24, 0x017A
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	80 91 7a 01 	lds	r24, 0x017A
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	e2 58       	subi	r30, 0x82	; 130
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	80 81       	ld	r24, Z
     7f0:	f9 01       	movw	r30, r18
     7f2:	ee 57       	subi	r30, 0x7E	; 126
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     7f8:	80 91 7a 01 	lds	r24, 0x017A
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 7a 01 	sts	0x017A, r24
     802:	80 91 7a 01 	lds	r24, 0x017A
     806:	84 30       	cpi	r24, 0x04	; 4
     808:	38 f3       	brcs	.-50     	; 0x7d8 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     80a:	78 94       	sei
	return &keepCtrlData;
     80c:	82 e8       	ldi	r24, 0x82	; 130
     80e:	91 e0       	ldi	r25, 0x01	; 1
}
     810:	cf 91       	pop	r28
     812:	df 91       	pop	r29
     814:	08 95       	ret

00000816 <__vector_20>:


ISR(USART0_RX_vect)
{
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	00 90 5b 00 	lds	r0, 0x005B
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     846:	e6 ec       	ldi	r30, 0xC6	; 198
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	80 93 9e 01 	sts	0x019E, r24

	if(phase){
     850:	80 91 7c 01 	lds	r24, 0x017C
     854:	88 23       	and	r24, r24
     856:	09 f4       	brne	.+2      	; 0x85a <__vector_20+0x44>
     858:	52 c0       	rjmp	.+164    	; 0x8fe <__vector_20+0xe8>
		packet[cnt] = val;
     85a:	80 91 7b 01 	lds	r24, 0x017B
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	20 91 9e 01 	lds	r18, 0x019E
     866:	fc 01       	movw	r30, r24
     868:	ea 57       	subi	r30, 0x7A	; 122
     86a:	fe 4f       	sbci	r31, 0xFE	; 254
     86c:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     86e:	80 91 7b 01 	lds	r24, 0x017B
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	b0 f4       	brcc	.+44     	; 0x8a2 <__vector_20+0x8c>
			if(val != check[cnt]){
     876:	80 91 7b 01 	lds	r24, 0x017B
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	ef 5b       	subi	r30, 0xBF	; 191
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	90 81       	ld	r25, Z
     886:	80 91 9e 01 	lds	r24, 0x019E
     88a:	98 17       	cp	r25, r24
     88c:	91 f1       	breq	.+100    	; 0x8f2 <__vector_20+0xdc>
				phase = false;
     88e:	10 92 7c 01 	sts	0x017C, r1
//				uart1_putchar('@');
				LED(0,false);
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
				beep(1);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
     8a0:	28 c0       	rjmp	.+80     	; 0x8f2 <__vector_20+0xdc>
			}
		}else if(cnt==8){
     8a2:	80 91 7b 01 	lds	r24, 0x017B
     8a6:	88 30       	cpi	r24, 0x08	; 8
     8a8:	21 f5       	brne	.+72     	; 0x8f2 <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     8aa:	80 91 8b 01 	lds	r24, 0x018B
     8ae:	80 93 7e 01 	sts	0x017E, r24
			ctrlData.buf[1] = packet[6];
     8b2:	80 91 8c 01 	lds	r24, 0x018C
     8b6:	80 93 7f 01 	sts	0x017F, r24
			ctrlData.buf[2] = packet[7];
     8ba:	80 91 8d 01 	lds	r24, 0x018D
     8be:	80 93 80 01 	sts	0x0180, r24
			ctrlData.buf[3] = packet[8];
     8c2:	80 91 8e 01 	lds	r24, 0x018E
     8c6:	80 93 81 01 	sts	0x0181, r24
			phase = false;
     8ca:	10 92 7c 01 	sts	0x017C, r1
			wdt_reset();
     8ce:	a8 95       	wdr
			LED(0,true);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
			if(EmergencyStatus()) beep(0);
     8d8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <EmergencyStatus>
     8dc:	88 23       	and	r24, r24
     8de:	19 f0       	breq	.+6      	; 0x8e6 <__vector_20+0xd0>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
			ovf_cnt = 0;
     8e6:	10 92 7d 01 	sts	0x017D, r1
			TCNT1 = 0;
     8ea:	e4 e8       	ldi	r30, 0x84	; 132
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	11 82       	std	Z+1, r1	; 0x01
     8f0:	10 82       	st	Z, r1
		}
		cnt++;
     8f2:	80 91 7b 01 	lds	r24, 0x017B
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 93 7b 01 	sts	0x017B, r24
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <__vector_20+0xfa>
	}else{
		if(val=='*'){
     8fe:	80 91 9e 01 	lds	r24, 0x019E
     902:	8a 32       	cpi	r24, 0x2A	; 42
     904:	29 f4       	brne	.+10     	; 0x910 <__vector_20+0xfa>
		cnt = 0;
     906:	10 92 7b 01 	sts	0x017B, r1
		phase = true;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 7c 01 	sts	0x017C, r24
		}
	}

}
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	00 92 5b 00 	sts	0x005B, r0
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_15>:

ISR (TIMER1_OVF_vect){
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	00 90 5b 00 	lds	r0, 0x005B
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	ef 93       	push	r30
     956:	ff 93       	push	r31
     958:	df 93       	push	r29
     95a:	cf 93       	push	r28
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     960:	80 91 7d 01 	lds	r24, 0x017D
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 7d 01 	sts	0x017D, r24
	if(ovf_cnt>150){
     96a:	80 91 7d 01 	lds	r24, 0x017D
     96e:	87 39       	cpi	r24, 0x97	; 151
     970:	f0 f0       	brcs	.+60     	; 0x9ae <__vector_15+0x72>
		ovf_cnt = 0;
     972:	10 92 7d 01 	sts	0x017D, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     976:	10 92 7a 01 	sts	0x017A, r1
     97a:	15 c0       	rjmp	.+42     	; 0x9a6 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     97c:	80 91 7a 01 	lds	r24, 0x017A
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	80 91 7a 01 	lds	r24, 0x017A
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	e3 5c       	subi	r30, 0xC3	; 195
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 81       	ld	r24, Z
     994:	f9 01       	movw	r30, r18
     996:	e2 58       	subi	r30, 0x82	; 130
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     99c:	80 91 7a 01 	lds	r24, 0x017A
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	80 93 7a 01 	sts	0x017A, r24
     9a6:	80 91 7a 01 	lds	r24, 0x017A
     9aa:	84 30       	cpi	r24, 0x04	; 4
     9ac:	38 f3       	brcs	.-50     	; 0x97c <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	00 92 5b 00 	sts	0x005B, r0
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <Byte2Str>:
/// ÉoÉCÉgÅi0x00Å`0xFFÅjÇÃêîÇ2åÖÇÃï∂éöóÒÇ…ïœä∑
/// </summary>
/// <param name="num">ïœä∑ëŒè€ÇÃêîéö</param>
/// <param name="str">ïœä∑å„ÇÃï∂éöóÒÇäiî[Ç∑ÇÈóÃàÊ</param>
void Byte2Str(unsigned char num, char *str)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <Byte2Str+0x6>
     9d4:	0f 92       	push	r0
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	7b 83       	std	Y+3, r23	; 0x03
     9de:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	82 95       	swap	r24
     9e4:	8f 70       	andi	r24, 0x0F	; 15
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	eb 5b       	subi	r30, 0xBB	; 187
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	80 81       	ld	r24, Z
     9f2:	ea 81       	ldd	r30, Y+2	; 0x02
     9f4:	fb 81       	ldd	r31, Y+3	; 0x03
     9f6:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	9b 81       	ldd	r25, Y+3	; 0x03
     9fc:	dc 01       	movw	r26, r24
     9fe:	11 96       	adiw	r26, 0x01	; 1
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	8f 70       	andi	r24, 0x0F	; 15
     a08:	90 70       	andi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	eb 5b       	subi	r30, 0xBB	; 187
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	80 81       	ld	r24, Z
     a12:	8c 93       	st	X, r24
	str[2] = '\0';
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	fc 01       	movw	r30, r24
     a1a:	32 96       	adiw	r30, 0x02	; 2
     a1c:	10 82       	st	Z, r1
}
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <mu2_command+0xa>
     a34:	00 d0       	rcall	.+0      	; 0xa36 <mu2_command+0xc>
     a36:	0f 92       	push	r0
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	9a 83       	std	Y+2, r25	; 0x02
     a3e:	89 83       	std	Y+1, r24	; 0x01
     a40:	7c 83       	std	Y+4, r23	; 0x04
     a42:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a44:	80 e4       	ldi	r24, 0x40	; 64
     a46:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a4a:	e9 81       	ldd	r30, Y+1	; 0x01
     a4c:	fa 81       	ldd	r31, Y+2	; 0x02
     a4e:	80 81       	ld	r24, Z
     a50:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	fc 01       	movw	r30, r24
     a5a:	31 96       	adiw	r30, 0x01	; 1
     a5c:	80 81       	ld	r24, Z
     a5e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a64:	eb 81       	ldd	r30, Y+3	; 0x03
     a66:	fc 81       	ldd	r31, Y+4	; 0x04
     a68:	80 81       	ld	r24, Z
     a6a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
		val++;
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a78:	eb 81       	ldd	r30, Y+3	; 0x03
     a7a:	fc 81       	ldd	r31, Y+4	; 0x04
     a7c:	80 81       	ld	r24, Z
     a7e:	88 23       	and	r24, r24
     a80:	89 f7       	brne	.-30     	; 0xa64 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(0x0a);
     a88:	8a e0       	ldi	r24, 0x0A	; 10
     a8a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	for(i=0;i<10;i++){
     a8e:	10 92 9f 01 	sts	0x019F, r1
     a92:	32 c0       	rjmp	.+100    	; 0xaf8 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     a94:	80 91 9f 01 	lds	r24, 0x019F
     a98:	08 2f       	mov	r16, r24
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0e 94 e5 06 	call	0xdca	; 0xdca <uart0_getchar>
     aa0:	f8 01       	movw	r30, r16
     aa2:	e0 56       	subi	r30, 0x60	; 96
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     aa8:	80 91 9f 01 	lds	r24, 0x019F
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	e0 56       	subi	r30, 0x60	; 96
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	80 81       	ld	r24, Z
     ab8:	0e 94 1b 07 	call	0xe36	; 0xe36 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     abc:	80 91 9f 01 	lds	r24, 0x019F
     ac0:	88 23       	and	r24, r24
     ac2:	a9 f0       	breq	.+42     	; 0xaee <mu2_command+0xc4>
     ac4:	80 91 9f 01 	lds	r24, 0x019F
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	fc 01       	movw	r30, r24
     ad0:	e0 56       	subi	r30, 0x60	; 96
     ad2:	fe 4f       	sbci	r31, 0xFE	; 254
     ad4:	80 81       	ld	r24, Z
     ad6:	8d 30       	cpi	r24, 0x0D	; 13
     ad8:	51 f4       	brne	.+20     	; 0xaee <mu2_command+0xc4>
     ada:	80 91 9f 01 	lds	r24, 0x019F
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	e0 56       	subi	r30, 0x60	; 96
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	80 81       	ld	r24, Z
     aea:	8a 30       	cpi	r24, 0x0A	; 10
     aec:	49 f0       	breq	.+18     	; 0xb00 <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     aee:	80 91 9f 01 	lds	r24, 0x019F
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	80 93 9f 01 	sts	0x019F, r24
     af8:	80 91 9f 01 	lds	r24, 0x019F
     afc:	8a 30       	cpi	r24, 0x0A	; 10
     afe:	50 f2       	brcs	.-108    	; 0xa94 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     b00:	80 91 a1 01 	lds	r24, 0x01A1
     b04:	85 34       	cpi	r24, 0x45	; 69
     b06:	39 f4       	brne	.+14     	; 0xb16 <mu2_command+0xec>
     b08:	80 91 a2 01 	lds	r24, 0x01A2
     b0c:	82 35       	cpi	r24, 0x52	; 82
     b0e:	19 f4       	brne	.+6      	; 0xb16 <mu2_command+0xec>
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	8d 83       	std	Y+5, r24	; 0x05
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <mu2_command+0xee>
	return 0;
     b16:	1d 82       	std	Y+5, r1	; 0x05
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	00 d0       	rcall	.+0      	; 0xb38 <mu2_command_eeprom+0xa>
     b38:	00 d0       	rcall	.+0      	; 0xb3a <mu2_command_eeprom+0xc>
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	7c 83       	std	Y+4, r23	; 0x04
     b46:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(cmd[0]);
     b4e:	e9 81       	ldd	r30, Y+1	; 0x01
     b50:	fa 81       	ldd	r31, Y+2	; 0x02
     b52:	80 81       	ld	r24, Z
     b54:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(cmd[1]);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	31 96       	adiw	r30, 0x01	; 1
     b60:	80 81       	ld	r24, Z
     b62:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
     b66:	0a c0       	rjmp	.+20     	; 0xb7c <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     b68:	eb 81       	ldd	r30, Y+3	; 0x03
     b6a:	fc 81       	ldd	r31, Y+4	; 0x04
     b6c:	80 81       	ld	r24, Z
     b6e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
		val++;
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	80 81       	ld	r24, Z
     b82:	88 23       	and	r24, r24
     b84:	89 f7       	brne	.-30     	; 0xb68 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     b86:	8f e2       	ldi	r24, 0x2F	; 47
     b88:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar('W');
     b8c:	87 e5       	ldi	r24, 0x57	; 87
     b8e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(0x0d);
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	uart0_putchar(0x0a);
     b98:	8a e0       	ldi	r24, 0x0A	; 10
     b9a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uart0_putchar>
	for(i=0;i<10;i++){
     b9e:	10 92 9f 01 	sts	0x019F, r1
     ba2:	32 c0       	rjmp	.+100    	; 0xc08 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     ba4:	80 91 9f 01 	lds	r24, 0x019F
     ba8:	08 2f       	mov	r16, r24
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	0e 94 e5 06 	call	0xdca	; 0xdca <uart0_getchar>
     bb0:	f8 01       	movw	r30, r16
     bb2:	e0 56       	subi	r30, 0x60	; 96
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     bb8:	80 91 9f 01 	lds	r24, 0x019F
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	fc 01       	movw	r30, r24
     bc2:	e0 56       	subi	r30, 0x60	; 96
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	80 81       	ld	r24, Z
     bc8:	0e 94 1b 07 	call	0xe36	; 0xe36 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     bcc:	80 91 9f 01 	lds	r24, 0x019F
     bd0:	88 23       	and	r24, r24
     bd2:	a9 f0       	breq	.+42     	; 0xbfe <mu2_command_eeprom+0xd0>
     bd4:	80 91 9f 01 	lds	r24, 0x019F
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	e0 56       	subi	r30, 0x60	; 96
     be2:	fe 4f       	sbci	r31, 0xFE	; 254
     be4:	80 81       	ld	r24, Z
     be6:	8d 30       	cpi	r24, 0x0D	; 13
     be8:	51 f4       	brne	.+20     	; 0xbfe <mu2_command_eeprom+0xd0>
     bea:	80 91 9f 01 	lds	r24, 0x019F
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	fc 01       	movw	r30, r24
     bf4:	e0 56       	subi	r30, 0x60	; 96
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	8a 30       	cpi	r24, 0x0A	; 10
     bfc:	49 f0       	breq	.+18     	; 0xc10 <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     bfe:	80 91 9f 01 	lds	r24, 0x019F
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	80 93 9f 01 	sts	0x019F, r24
     c08:	80 91 9f 01 	lds	r24, 0x019F
     c0c:	8a 30       	cpi	r24, 0x0A	; 10
     c0e:	50 f2       	brcs	.-108    	; 0xba4 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     c10:	80 91 a1 01 	lds	r24, 0x01A1
     c14:	85 34       	cpi	r24, 0x45	; 69
     c16:	39 f4       	brne	.+14     	; 0xc26 <mu2_command_eeprom+0xf8>
     c18:	80 91 a2 01 	lds	r24, 0x01A2
     c1c:	82 35       	cpi	r24, 0x52	; 82
     c1e:	19 f4       	brne	.+6      	; 0xc26 <mu2_command_eeprom+0xf8>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <mu2_command_eeprom+0xfa>
	return 0;
     c26:	1d 82       	std	Y+5, r1	; 0x05
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	2d 97       	sbiw	r28, 0x0d	; 13
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	9c 83       	std	Y+4, r25	; 0x04
     c54:	8b 83       	std	Y+3, r24	; 0x03
     c56:	6d 83       	std	Y+5, r22	; 0x05
     c58:	5f 83       	std	Y+7, r21	; 0x07
     c5a:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	9d 87       	std	Y+13, r25	; 0x0d
     c62:	8c 87       	std	Y+12, r24	; 0x0c
     c64:	8c 85       	ldd	r24, Y+12	; 0x0c
     c66:	9d 85       	ldd	r25, Y+13	; 0x0d
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	31 f0       	breq	.+12     	; 0xc78 <uart_init+0x3a>
     c6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	b1 f1       	breq	.+108    	; 0xce2 <uart_init+0xa4>
     c76:	64 c0       	rjmp	.+200    	; 0xd40 <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     c78:	e1 ec       	ldi	r30, 0xC1	; 193
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     c7e:	a2 ec       	ldi	r26, 0xC2	; 194
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e2 ec       	ldi	r30, 0xC2	; 194
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	86 60       	ori	r24, 0x06	; 6
     c8a:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <uart_init+0x5e>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	23 e1       	ldi	r18, 0x13	; 19
     ca2:	88 38       	cpi	r24, 0x88	; 136
     ca4:	92 07       	cpc	r25, r18
     ca6:	ac f3       	brlt	.-22     	; 0xc92 <uart_init+0x54>
			UCSR0B = option;					
     ca8:	e1 ec       	ldi	r30, 0xC1	; 193
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     cb0:	e5 ec       	ldi	r30, 0xC5	; 197
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	8e 81       	ldd	r24, Y+6	; 0x06
     cb6:	9f 81       	ldd	r25, Y+7	; 0x07
     cb8:	89 2f       	mov	r24, r25
     cba:	99 27       	eor	r25, r25
     cbc:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     cbe:	e4 ec       	ldi	r30, 0xC4	; 196
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     cc6:	e0 ec       	ldi	r30, 0xC0	; 192
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     ccc:	a0 ec       	ldi	r26, 0xC0	; 192
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 ec       	ldi	r30, 0xC0	; 192
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	83 7e       	andi	r24, 0xE3	; 227
     cd8:	8c 93       	st	X, r24
			UDR0 = 0;
     cda:	e6 ec       	ldi	r30, 0xC6	; 198
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
     ce0:	34 c0       	rjmp	.+104    	; 0xd4a <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     ce2:	ed ec       	ldi	r30, 0xCD	; 205
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	89 2f       	mov	r24, r25
     cec:	99 27       	eor	r25, r25
     cee:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     cf0:	ec ec       	ldi	r30, 0xCC	; 204
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <uart_init+0xca>
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	23 e1       	ldi	r18, 0x13	; 19
     d0e:	88 38       	cpi	r24, 0x88	; 136
     d10:	92 07       	cpc	r25, r18
     d12:	ac f3       	brlt	.-22     	; 0xcfe <uart_init+0xc0>
			UCSR1B |= option;
     d14:	a9 ec       	ldi	r26, 0xC9	; 201
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e9 ec       	ldi	r30, 0xC9	; 201
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	90 81       	ld	r25, Z
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	89 2b       	or	r24, r25
     d22:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     d24:	e8 ec       	ldi	r30, 0xC8	; 200
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     d2a:	a8 ec       	ldi	r26, 0xC8	; 200
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 ec       	ldi	r30, 0xC8	; 200
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	83 7e       	andi	r24, 0xE3	; 227
     d36:	8c 93       	st	X, r24
			UDR1 = 0;
     d38:	ee ec       	ldi	r30, 0xCE	; 206
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	10 82       	st	Z, r1
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <uart_init+0x10c>
			break;
		default:
			return -1;
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	99 87       	std	Y+9, r25	; 0x09
     d46:	88 87       	std	Y+8, r24	; 0x08
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <uart_init+0x110>
	}
	return 0;
     d4a:	19 86       	std	Y+9, r1	; 0x09
     d4c:	18 86       	std	Y+8, r1	; 0x08
     d4e:	88 85       	ldd	r24, Y+8	; 0x08
     d50:	99 85       	ldd	r25, Y+9	; 0x09
}
     d52:	2d 96       	adiw	r28, 0x0d	; 13
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <uart_setbuffer+0x6>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <uart_setbuffer+0x8>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <uart_setbuffer+0xa>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	7c 83       	std	Y+4, r23	; 0x04
     d78:	6b 83       	std	Y+3, r22	; 0x03
     d7a:	5e 83       	std	Y+6, r21	; 0x06
     d7c:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	99 23       	and	r25, r25
     d84:	cc f0       	brlt	.+50     	; 0xdb8 <uart_setbuffer+0x54>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	91 05       	cpc	r25, r1
     d8e:	a4 f4       	brge	.+40     	; 0xdb8 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     d90:	29 81       	ldd	r18, Y+1	; 0x01
     d92:	3a 81       	ldd	r19, Y+2	; 0x02
     d94:	c9 01       	movw	r24, r18
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	84 55       	subi	r24, 0x54	; 84
     da8:	9e 4f       	sbci	r25, 0xFE	; 254
     daa:	4d 81       	ldd	r20, Y+5	; 0x05
     dac:	5e 81       	ldd	r21, Y+6	; 0x06
     dae:	2b 81       	ldd	r18, Y+3	; 0x03
     db0:	3c 81       	ldd	r19, Y+4	; 0x04
     db2:	b9 01       	movw	r22, r18
     db4:	0e 94 aa 08 	call	0x1154	; 0x1154 <RingInit>
}
     db8:	26 96       	adiw	r28, 0x06	; 6
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     dd2:	e0 ec       	ldi	r30, 0xC0	; 192
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 23       	and	r24, r24
     dda:	dc f7       	brge	.-10     	; 0xdd2 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     ddc:	a0 ec       	ldi	r26, 0xC0	; 192
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e0 ec       	ldi	r30, 0xC0	; 192
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 77       	andi	r24, 0x7F	; 127
     de8:	8c 93       	st	X, r24
	return UDR0;
     dea:	e6 ec       	ldi	r30, 0xC6	; 198
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <uart0_putchar>:

int uart0_putchar(char c)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     e02:	e0 ec       	ldi	r30, 0xC0	; 192
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	80 72       	andi	r24, 0x20	; 32
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	b9 f3       	breq	.-18     	; 0xe02 <uart0_putchar+0xc>
	UDR0 = c;
     e14:	e6 ec       	ldi	r30, 0xC6	; 198
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     e1c:	a0 ec       	ldi	r26, 0xC0	; 192
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e0 ec       	ldi	r30, 0xC0	; 192
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	8c 93       	st	X, r24
	
	return 0;
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
}
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <uart1_putchar>:

int uart1_putchar(char c)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	8a 30       	cpi	r24, 0x0A	; 10
     e46:	a1 f4       	brne	.+40     	; 0xe70 <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     e48:	e8 ec       	ldi	r30, 0xC8	; 200
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	80 72       	andi	r24, 0x20	; 32
     e54:	90 70       	andi	r25, 0x00	; 0
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	b9 f3       	breq	.-18     	; 0xe48 <uart1_putchar+0x12>
		UDR1 = '\r';
     e5a:	ee ec       	ldi	r30, 0xCE	; 206
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     e62:	a8 ec       	ldi	r26, 0xC8	; 200
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e8 ec       	ldi	r30, 0xC8	; 200
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     e70:	e8 ec       	ldi	r30, 0xC8	; 200
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 72       	andi	r24, 0x20	; 32
     e7c:	90 70       	andi	r25, 0x00	; 0
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	b9 f3       	breq	.-18     	; 0xe70 <uart1_putchar+0x3a>
	UDR1 = c;
     e82:	ee ec       	ldi	r30, 0xCE	; 206
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     e8a:	a8 ec       	ldi	r26, 0xC8	; 200
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e8 ec       	ldi	r30, 0xC8	; 200
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24

	return 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
}
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <uart0_buf_putchar+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     eb2:	1a 82       	std	Y+2, r1	; 0x02
     eb4:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     eb6:	ef e5       	ldi	r30, 0x5F	; 95
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     ec0:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	8a 30       	cpi	r24, 0x0A	; 10
     ec6:	61 f4       	brne	.+24     	; 0xee0 <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     ec8:	8c ea       	ldi	r24, 0xAC	; 172
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	6d e0       	ldi	r22, 0x0D	; 13
     ece:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <RingPut>
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	29 f4       	brne	.+10     	; 0xee0 <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	12 c0       	rjmp	.+36     	; 0xf04 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     ee0:	8c ea       	ldi	r24, 0xAC	; 172
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	6b 81       	ldd	r22, Y+3	; 0x03
     ee6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <RingPut>
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	21 f4       	brne	.+8      	; 0xef6 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     ef6:	a1 ec       	ldi	r26, 0xC1	; 193
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 ec       	ldi	r30, 0xC1	; 193
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     f04:	ef e5       	ldi	r30, 0x5F	; 95
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 91 aa 01 	lds	r24, 0x01AA
     f0c:	80 83       	st	Z, r24

	return ret;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <uart1_buf_putchar+0x6>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     f2c:	1a 82       	std	Y+2, r1	; 0x02
     f2e:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     f30:	ef e5       	ldi	r30, 0x5F	; 95
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     f3a:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	8a 30       	cpi	r24, 0x0A	; 10
     f40:	61 f4       	brne	.+24     	; 0xf5a <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     f42:	85 eb       	ldi	r24, 0xB5	; 181
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	6d e0       	ldi	r22, 0x0D	; 13
     f48:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <RingPut>
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	29 f4       	brne	.+10     	; 0xf5a <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	12 c0       	rjmp	.+36     	; 0xf7e <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     f5a:	85 eb       	ldi	r24, 0xB5	; 181
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	6b 81       	ldd	r22, Y+3	; 0x03
     f60:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <RingPut>
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	21 f4       	brne	.+8      	; 0xf70 <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     f70:	a9 ec       	ldi	r26, 0xC9	; 201
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e9 ec       	ldi	r30, 0xC9	; 201
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     f7e:	ef e5       	ldi	r30, 0x5F	; 95
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 91 aa 01 	lds	r24, 0x01AA
     f86:	80 83       	st	Z, r24

	return ret;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <__vector_21>:


ISR(USART0_UDRE_vect)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	00 90 5b 00 	lds	r0, 0x005B
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     fca:	8c ea       	ldi	r24, 0xAC	; 172
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	9e 01       	movw	r18, r28
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	b9 01       	movw	r22, r18
     fd6:	0e 94 2b 09 	call	0x1256	; 0x1256 <RingGet>
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	61 f0       	breq	.+24     	; 0xff6 <__vector_21+0x5e>
		UDR0 = c;
     fde:	e6 ec       	ldi	r30, 0xC6	; 198
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREÉNÉäÉA
     fe6:	a0 ec       	ldi	r26, 0xC0	; 192
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e0 ec       	ldi	r30, 0xC0	; 192
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7d       	andi	r24, 0xDF	; 223
     ff2:	8c 93       	st	X, r24
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     ff6:	a1 ec       	ldi	r26, 0xC1	; 193
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 ec       	ldi	r30, 0xC1	; 193
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7d       	andi	r24, 0xDF	; 223
    1002:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
    1004:	a0 ec       	ldi	r26, 0xC0	; 192
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e0 ec       	ldi	r30, 0xC0	; 192
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7d       	andi	r24, 0xDF	; 223
    1010:	8c 93       	st	X, r24
	}
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	00 92 5b 00 	sts	0x005B, r0
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_29>:

ISR(USART1_UDRE_vect)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	00 90 5b 00 	lds	r0, 0x005B
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
    1072:	85 eb       	ldi	r24, 0xB5	; 181
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	9e 01       	movw	r18, r28
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	b9 01       	movw	r22, r18
    107e:	0e 94 2b 09 	call	0x1256	; 0x1256 <RingGet>
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <__vector_29+0x5e>
		UDR1 = c;
    1086:	ee ec       	ldi	r30, 0xCE	; 206
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREÉNÉäÉA
    108e:	a8 ec       	ldi	r26, 0xC8	; 200
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e8 ec       	ldi	r30, 0xC8	; 200
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	8c 93       	st	X, r24
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
    109e:	a9 ec       	ldi	r26, 0xC9	; 201
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 ec       	ldi	r30, 0xC9	; 201
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7d       	andi	r24, 0xDF	; 223
    10aa:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
    10ac:	a8 ec       	ldi	r26, 0xC8	; 200
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e8 ec       	ldi	r30, 0xC8	; 200
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 7d       	andi	r24, 0xDF	; 223
    10b8:	8c 93       	st	X, r24
	}
}
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	00 92 5b 00 	sts	0x005B, r0
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	00 90 5b 00 	lds	r0, 0x005B
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    1118:	ee ec       	ldi	r30, 0xCE	; 206
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	20 81       	ld	r18, Z
    111e:	85 eb       	ldi	r24, 0xB5	; 181
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	62 2f       	mov	r22, r18
    1124:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <RingPut>
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	00 92 5b 00 	sts	0x005B, r0
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <RingInit+0x6>
    115a:	00 d0       	rcall	.+0      	; 0x115c <RingInit+0x8>
    115c:	00 d0       	rcall	.+0      	; 0x115e <RingInit+0xa>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	7c 83       	std	Y+4, r23	; 0x04
    1168:	6b 83       	std	Y+3, r22	; 0x03
    116a:	5e 83       	std	Y+6, r21	; 0x06
    116c:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
	ring->size = size;
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	fa 81       	ldd	r31, Y+2	; 0x02
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	97 83       	std	Z+7, r25	; 0x07
    1184:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    1186:	e9 81       	ldd	r30, Y+1	; 0x01
    1188:	fa 81       	ldd	r31, Y+2	; 0x02
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	15 82       	std	Z+5, r1	; 0x05
    1194:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 87       	std	Z+8, r24	; 0x08
}
    119e:	26 96       	adiw	r28, 0x06	; 6
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <RingPut+0x6>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <RingPut+0x8>
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	80 85       	ldd	r24, Z+8	; 0x08
    11ca:	88 23       	and	r24, r24
    11cc:	71 f4       	brne	.+28     	; 0x11ea <RingPut+0x3a>
    11ce:	e9 81       	ldd	r30, Y+1	; 0x01
    11d0:	fa 81       	ldd	r31, Y+2	; 0x02
    11d2:	22 81       	ldd	r18, Z+2	; 0x02
    11d4:	33 81       	ldd	r19, Z+3	; 0x03
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	84 81       	ldd	r24, Z+4	; 0x04
    11dc:	95 81       	ldd	r25, Z+5	; 0x05
    11de:	28 17       	cp	r18, r24
    11e0:	39 07       	cpc	r19, r25
    11e2:	19 f4       	brne	.+6      	; 0x11ea <RingPut+0x3a>
		return FALSE;
    11e4:	1d 82       	std	Y+5, r1	; 0x05
    11e6:	1c 82       	std	Y+4, r1	; 0x04
    11e8:	2c c0       	rjmp	.+88     	; 0x1242 <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	20 81       	ld	r18, Z
    11f0:	31 81       	ldd	r19, Z+1	; 0x01
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	84 81       	ldd	r24, Z+4	; 0x04
    11f8:	95 81       	ldd	r25, Z+5	; 0x05
    11fa:	f9 01       	movw	r30, r18
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	80 83       	st	Z, r24
	ring->wp++;
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	84 81       	ldd	r24, Z+4	; 0x04
    120a:	95 81       	ldd	r25, Z+5	; 0x05
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	95 83       	std	Z+5, r25	; 0x05
    1214:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    1216:	e9 81       	ldd	r30, Y+1	; 0x01
    1218:	fa 81       	ldd	r31, Y+2	; 0x02
    121a:	24 81       	ldd	r18, Z+4	; 0x04
    121c:	35 81       	ldd	r19, Z+5	; 0x05
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	86 81       	ldd	r24, Z+6	; 0x06
    1224:	97 81       	ldd	r25, Z+7	; 0x07
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	21 f4       	brne	.+8      	; 0x1234 <RingPut+0x84>
    122c:	e9 81       	ldd	r30, Y+1	; 0x01
    122e:	fa 81       	ldd	r31, Y+2	; 0x02
    1230:	15 82       	std	Z+5, r1	; 0x05
    1232:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9d 83       	std	Y+5, r25	; 0x05
    1240:	8c 83       	std	Y+4, r24	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <RingGet+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <RingGet+0x8>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <RingGet+0xa>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	7c 83       	std	Y+4, r23	; 0x04
    126a:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	80 85       	ldd	r24, Z+8	; 0x08
    1272:	88 23       	and	r24, r24
    1274:	d9 f5       	brne	.+118    	; 0x12ec <RingGet+0x96>
		*value = ring->buf[ring->rp];
    1276:	e9 81       	ldd	r30, Y+1	; 0x01
    1278:	fa 81       	ldd	r31, Y+2	; 0x02
    127a:	20 81       	ld	r18, Z
    127c:	31 81       	ldd	r19, Z+1	; 0x01
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	f9 01       	movw	r30, r18
    1288:	e8 0f       	add	r30, r24
    128a:	f9 1f       	adc	r31, r25
    128c:	80 81       	ld	r24, Z
    128e:	eb 81       	ldd	r30, Y+3	; 0x03
    1290:	fc 81       	ldd	r31, Y+4	; 0x04
    1292:	80 83       	st	Z, r24
		ring->rp++;
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	fa 81       	ldd	r31, Y+2	; 0x02
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	93 83       	std	Z+3, r25	; 0x03
    12a4:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    12a6:	e9 81       	ldd	r30, Y+1	; 0x01
    12a8:	fa 81       	ldd	r31, Y+2	; 0x02
    12aa:	22 81       	ldd	r18, Z+2	; 0x02
    12ac:	33 81       	ldd	r19, Z+3	; 0x03
    12ae:	e9 81       	ldd	r30, Y+1	; 0x01
    12b0:	fa 81       	ldd	r31, Y+2	; 0x02
    12b2:	86 81       	ldd	r24, Z+6	; 0x06
    12b4:	97 81       	ldd	r25, Z+7	; 0x07
    12b6:	28 17       	cp	r18, r24
    12b8:	39 07       	cpc	r19, r25
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <RingGet+0x6e>
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	13 82       	std	Z+3, r1	; 0x03
    12c2:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	22 81       	ldd	r18, Z+2	; 0x02
    12ca:	33 81       	ldd	r19, Z+3	; 0x03
    12cc:	e9 81       	ldd	r30, Y+1	; 0x01
    12ce:	fa 81       	ldd	r31, Y+2	; 0x02
    12d0:	84 81       	ldd	r24, Z+4	; 0x04
    12d2:	95 81       	ldd	r25, Z+5	; 0x05
    12d4:	28 17       	cp	r18, r24
    12d6:	39 07       	cpc	r19, r25
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <RingGet+0x8c>
    12da:	e9 81       	ldd	r30, Y+1	; 0x01
    12dc:	fa 81       	ldd	r31, Y+2	; 0x02
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <RingGet+0xa0>
	}else{			// ÉäÉìÉOÉoÉbÉtÉ@Ç™ãÛÇÃÇ∆Ç´
		*value = 0;
    12ec:	eb 81       	ldd	r30, Y+3	; 0x03
    12ee:	fc 81       	ldd	r31, Y+4	; 0x04
    12f0:	10 82       	st	Z, r1
		return FALSE;
    12f2:	1e 82       	std	Y+6, r1	; 0x06
    12f4:	1d 82       	std	Y+5, r1	; 0x05
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    12fa:	26 96       	adiw	r28, 0x06	; 6
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <isRingEmpty+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	80 85       	ldd	r24, Z+8	; 0x08
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <initI2CMaster+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <initI2CMaster+0x8>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    133e:	88 eb       	ldi	r24, 0xB8	; 184
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	9e e4       	ldi	r25, 0x4E	; 78
    1350:	b9 01       	movw	r22, r18
    1352:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    1356:	cb 01       	movw	r24, r22
    1358:	40 97       	sbiw	r24, 0x10	; 16
    135a:	9d 83       	std	Y+5, r25	; 0x05
    135c:	8c 83       	std	Y+4, r24	; 0x04
    135e:	ec 81       	ldd	r30, Y+4	; 0x04
    1360:	fd 81       	ldd	r31, Y+5	; 0x05
    1362:	ff 23       	and	r31, r31
    1364:	2c f4       	brge	.+10     	; 0x1370 <initI2CMaster+0x42>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	9d 83       	std	Y+5, r25	; 0x05
    136e:	8c 83       	std	Y+4, r24	; 0x04
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	95 95       	asr	r25
    1376:	87 95       	ror	r24
    1378:	ea 81       	ldd	r30, Y+2	; 0x02
    137a:	fb 81       	ldd	r31, Y+3	; 0x03
    137c:	80 83       	st	Z, r24
		TWSR = 0;
    137e:	e9 eb       	ldi	r30, 0xB9	; 185
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
		TWCR = I2CEN;
    1384:	ec eb       	ldi	r30, 0xBC	; 188
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	80 83       	st	Z, r24
    }
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <i2cWrite+0x6>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    13ac:	ec eb       	ldi	r30, 0xBC	; 188
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	84 ea       	ldi	r24, 0xA4	; 164
    13b2:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13b4:	ec eb       	ldi	r30, 0xBC	; 188
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 23       	and	r24, r24
    13bc:	dc f7       	brge	.-10     	; 0x13b4 <i2cWrite+0x18>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    13be:	e9 eb       	ldi	r30, 0xB9	; 185
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	88 7f       	andi	r24, 0xF8	; 248
    13ca:	90 70       	andi	r25, 0x00	; 0
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <i2cWrite+0x38>
    13d2:	56 c0       	rjmp	.+172    	; 0x1480 <i2cWrite+0xe4>

		TWDR = (slave->addr<<1);
    13d4:	ab eb       	ldi	r26, 0xBB	; 187
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e9 81       	ldd	r30, Y+1	; 0x01
    13da:	fa 81       	ldd	r31, Y+2	; 0x02
    13dc:	80 81       	ld	r24, Z
    13de:	88 0f       	add	r24, r24
    13e0:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    13e2:	ec eb       	ldi	r30, 0xBC	; 188
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	84 e8       	ldi	r24, 0x84	; 132
    13e8:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13ea:	ec eb       	ldi	r30, 0xBC	; 188
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	88 23       	and	r24, r24
    13f2:	dc f7       	brge	.-10     	; 0x13ea <i2cWrite+0x4e>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    13f4:	e9 eb       	ldi	r30, 0xB9	; 185
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	88 7f       	andi	r24, 0xF8	; 248
    1400:	90 70       	andi	r25, 0x00	; 0
    1402:	88 31       	cpi	r24, 0x18	; 24
    1404:	91 05       	cpc	r25, r1
    1406:	e1 f5       	brne	.+120    	; 0x1480 <i2cWrite+0xe4>

		for(i=0;i<slave->write.size;i++){
    1408:	10 92 ab 01 	sts	0x01AB, r1
    140c:	27 c0       	rjmp	.+78     	; 0x145c <i2cWrite+0xc0>
			TWDR=slave->write.buf[i];
    140e:	ab eb       	ldi	r26, 0xBB	; 187
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	21 81       	ldd	r18, Z+1	; 0x01
    1418:	32 81       	ldd	r19, Z+2	; 0x02
    141a:	80 91 ab 01 	lds	r24, 0x01AB
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	f9 01       	movw	r30, r18
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	80 81       	ld	r24, Z
    142a:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    142c:	ec eb       	ldi	r30, 0xBC	; 188
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	84 e8       	ldi	r24, 0x84	; 132
    1432:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1434:	ec eb       	ldi	r30, 0xBC	; 188
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	88 23       	and	r24, r24
    143c:	dc f7       	brge	.-10     	; 0x1434 <i2cWrite+0x98>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    143e:	e9 eb       	ldi	r30, 0xB9	; 185
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	88 32       	cpi	r24, 0x28	; 40
    144e:	91 05       	cpc	r25, r1
    1450:	b9 f4       	brne	.+46     	; 0x1480 <i2cWrite+0xe4>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1452:	80 91 ab 01 	lds	r24, 0x01AB
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 ab 01 	sts	0x01AB, r24
    145c:	80 91 ab 01 	lds	r24, 0x01AB
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	83 81       	ldd	r24, Z+3	; 0x03
    146a:	94 81       	ldd	r25, Z+4	; 0x04
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	70 f2       	brcs	.-100    	; 0x140e <i2cWrite+0x72>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1472:	ec eb       	ldi	r30, 0xBC	; 188
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	84 e9       	ldi	r24, 0x94	; 148
    1478:	80 83       	st	Z, r24
		wdt_disable();

#endif

//		sei();
		return true;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	8b 83       	std	Y+3, r24	; 0x03
    147e:	05 c0       	rjmp	.+10     	; 0x148a <i2cWrite+0xee>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1480:	ec eb       	ldi	r30, 0xBC	; 188
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	84 e9       	ldi	r24, 0x94	; 148
    1486:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1488:	1b 82       	std	Y+3, r1	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <i2cRead+0x6>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    14a8:	ec eb       	ldi	r30, 0xBC	; 188
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	84 ea       	ldi	r24, 0xA4	; 164
    14ae:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14b0:	ec eb       	ldi	r30, 0xBC	; 188
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	dc f7       	brge	.-10     	; 0x14b0 <i2cRead+0x18>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    14ba:	e9 eb       	ldi	r30, 0xB9	; 185
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	88 7f       	andi	r24, 0xF8	; 248
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	91 05       	cpc	r25, r1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <i2cRead+0x38>
    14ce:	7f c0       	rjmp	.+254    	; 0x15ce <i2cRead+0x136>

		TWDR = (slave->addr<<1)|0x01;
    14d0:	ab eb       	ldi	r26, 0xBB	; 187
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	80 81       	ld	r24, Z
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    14e6:	ec eb       	ldi	r30, 0xBC	; 188
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	84 e8       	ldi	r24, 0x84	; 132
    14ec:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14ee:	ec eb       	ldi	r30, 0xBC	; 188
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 23       	and	r24, r24
    14f6:	dc f7       	brge	.-10     	; 0x14ee <i2cRead+0x56>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    14f8:	e9 eb       	ldi	r30, 0xB9	; 185
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 7f       	andi	r24, 0xF8	; 248
    1504:	90 70       	andi	r25, 0x00	; 0
    1506:	80 34       	cpi	r24, 0x40	; 64
    1508:	91 05       	cpc	r25, r1
    150a:	09 f0       	breq	.+2      	; 0x150e <i2cRead+0x76>
    150c:	60 c0       	rjmp	.+192    	; 0x15ce <i2cRead+0x136>

		for(i=0;i<slave->read.size-1;i++){
    150e:	10 92 ab 01 	sts	0x01AB, r1
    1512:	28 c0       	rjmp	.+80     	; 0x1564 <i2cRead+0xcc>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1514:	ec eb       	ldi	r30, 0xBC	; 188
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	84 ec       	ldi	r24, 0xC4	; 196
    151a:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    151c:	ec eb       	ldi	r30, 0xBC	; 188
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	88 23       	and	r24, r24
    1524:	dc f7       	brge	.-10     	; 0x151c <i2cRead+0x84>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1526:	e9 eb       	ldi	r30, 0xB9	; 185
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	88 7f       	andi	r24, 0xF8	; 248
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	80 35       	cpi	r24, 0x50	; 80
    1536:	91 05       	cpc	r25, r1
    1538:	09 f0       	breq	.+2      	; 0x153c <i2cRead+0xa4>
    153a:	49 c0       	rjmp	.+146    	; 0x15ce <i2cRead+0x136>
			slave->read.buf[i] = TWDR;
    153c:	e9 81       	ldd	r30, Y+1	; 0x01
    153e:	fa 81       	ldd	r31, Y+2	; 0x02
    1540:	25 81       	ldd	r18, Z+5	; 0x05
    1542:	36 81       	ldd	r19, Z+6	; 0x06
    1544:	80 91 ab 01 	lds	r24, 0x01AB
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	d9 01       	movw	r26, r18
    154e:	a8 0f       	add	r26, r24
    1550:	b9 1f       	adc	r27, r25
    1552:	eb eb       	ldi	r30, 0xBB	; 187
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    155a:	80 91 ab 01 	lds	r24, 0x01AB
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	80 93 ab 01 	sts	0x01AB, r24
    1564:	80 91 ab 01 	lds	r24, 0x01AB
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	e9 81       	ldd	r30, Y+1	; 0x01
    156e:	fa 81       	ldd	r31, Y+2	; 0x02
    1570:	87 81       	ldd	r24, Z+7	; 0x07
    1572:	90 85       	ldd	r25, Z+8	; 0x08
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	60 f2       	brcs	.-104    	; 0x1514 <i2cRead+0x7c>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    157c:	ec eb       	ldi	r30, 0xBC	; 188
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	84 e8       	ldi	r24, 0x84	; 132
    1582:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1584:	ec eb       	ldi	r30, 0xBC	; 188
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 23       	and	r24, r24
    158c:	dc f7       	brge	.-10     	; 0x1584 <i2cRead+0xec>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    158e:	e9 eb       	ldi	r30, 0xB9	; 185
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	88 7f       	andi	r24, 0xF8	; 248
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	88 35       	cpi	r24, 0x58	; 88
    159e:	91 05       	cpc	r25, r1
    15a0:	b1 f4       	brne	.+44     	; 0x15ce <i2cRead+0x136>
		slave->read.buf[i] = TWDR;
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	25 81       	ldd	r18, Z+5	; 0x05
    15a8:	36 81       	ldd	r19, Z+6	; 0x06
    15aa:	80 91 ab 01 	lds	r24, 0x01AB
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	d9 01       	movw	r26, r18
    15b4:	a8 0f       	add	r26, r24
    15b6:	b9 1f       	adc	r27, r25
    15b8:	eb eb       	ldi	r30, 0xBB	; 187
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    15c0:	ec eb       	ldi	r30, 0xBC	; 188
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	84 e9       	ldi	r24, 0x94	; 148
    15c6:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	8b 83       	std	Y+3, r24	; 0x03
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <i2cRead+0x140>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    15ce:	ec eb       	ldi	r30, 0xBC	; 188
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	84 e9       	ldi	r24, 0x94	; 148
    15d4:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    15d6:	1b 82       	std	Y+3, r1	; 0x03
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <i2cReadWithCommand+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <i2cReadWithCommand+0x8>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    15f8:	ec eb       	ldi	r30, 0xBC	; 188
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	84 ea       	ldi	r24, 0xA4	; 164
    15fe:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    1600:	ec eb       	ldi	r30, 0xBC	; 188
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	88 23       	and	r24, r24
    1608:	dc f7       	brge	.-10     	; 0x1600 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    160a:	ab eb       	ldi	r26, 0xBB	; 187
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	fa 81       	ldd	r31, Y+2	; 0x02
    1612:	80 81       	ld	r24, Z
    1614:	88 0f       	add	r24, r24
    1616:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1618:	ec eb       	ldi	r30, 0xBC	; 188
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	84 e8       	ldi	r24, 0x84	; 132
    161e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1620:	ec eb       	ldi	r30, 0xBC	; 188
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 23       	and	r24, r24
    1628:	dc f7       	brge	.-10     	; 0x1620 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    162a:	e9 eb       	ldi	r30, 0xB9	; 185
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	88 7f       	andi	r24, 0xF8	; 248
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	80 34       	cpi	r24, 0x40	; 64
    163a:	91 05       	cpc	r25, r1
    163c:	09 f0       	breq	.+2      	; 0x1640 <i2cReadWithCommand+0x5a>
    163e:	a0 c0       	rjmp	.+320    	; 0x1780 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1640:	eb eb       	ldi	r30, 0xBB	; 187
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1648:	ec eb       	ldi	r30, 0xBC	; 188
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	84 e8       	ldi	r24, 0x84	; 132
    164e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1650:	ec eb       	ldi	r30, 0xBC	; 188
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 23       	and	r24, r24
    1658:	dc f7       	brge	.-10     	; 0x1650 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    165a:	e9 eb       	ldi	r30, 0xB9	; 185
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	88 7f       	andi	r24, 0xF8	; 248
    1666:	90 70       	andi	r25, 0x00	; 0
    1668:	88 32       	cpi	r24, 0x28	; 40
    166a:	91 05       	cpc	r25, r1
    166c:	09 f0       	breq	.+2      	; 0x1670 <i2cReadWithCommand+0x8a>
    166e:	88 c0       	rjmp	.+272    	; 0x1780 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1670:	ec eb       	ldi	r30, 0xBC	; 188
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	84 ea       	ldi	r24, 0xA4	; 164
    1676:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1678:	ec eb       	ldi	r30, 0xBC	; 188
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	88 23       	and	r24, r24
    1680:	dc f7       	brge	.-10     	; 0x1678 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    1682:	e9 eb       	ldi	r30, 0xB9	; 185
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	88 7f       	andi	r24, 0xF8	; 248
    168e:	90 70       	andi	r25, 0x00	; 0
    1690:	80 31       	cpi	r24, 0x10	; 16
    1692:	91 05       	cpc	r25, r1
    1694:	09 f0       	breq	.+2      	; 0x1698 <i2cReadWithCommand+0xb2>
    1696:	74 c0       	rjmp	.+232    	; 0x1780 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1698:	ab eb       	ldi	r26, 0xBB	; 187
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e9 81       	ldd	r30, Y+1	; 0x01
    169e:	fa 81       	ldd	r31, Y+2	; 0x02
    16a0:	80 81       	ld	r24, Z
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    16ae:	ec eb       	ldi	r30, 0xBC	; 188
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	84 e8       	ldi	r24, 0x84	; 132
    16b4:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16b6:	ec eb       	ldi	r30, 0xBC	; 188
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	88 23       	and	r24, r24
    16be:	dc f7       	brge	.-10     	; 0x16b6 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    16c0:	10 92 ab 01 	sts	0x01AB, r1
    16c4:	28 c0       	rjmp	.+80     	; 0x1716 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    16c6:	ec eb       	ldi	r30, 0xBC	; 188
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	84 ec       	ldi	r24, 0xC4	; 196
    16cc:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    16ce:	ec eb       	ldi	r30, 0xBC	; 188
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	dc f7       	brge	.-10     	; 0x16ce <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    16d8:	e9 eb       	ldi	r30, 0xB9	; 185
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	88 7f       	andi	r24, 0xF8	; 248
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	80 35       	cpi	r24, 0x50	; 80
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f0       	breq	.+2      	; 0x16ee <i2cReadWithCommand+0x108>
    16ec:	49 c0       	rjmp	.+146    	; 0x1780 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	25 81       	ldd	r18, Z+5	; 0x05
    16f4:	36 81       	ldd	r19, Z+6	; 0x06
    16f6:	80 91 ab 01 	lds	r24, 0x01AB
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	d9 01       	movw	r26, r18
    1700:	a8 0f       	add	r26, r24
    1702:	b9 1f       	adc	r27, r25
    1704:	eb eb       	ldi	r30, 0xBB	; 187
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    170c:	80 91 ab 01 	lds	r24, 0x01AB
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 ab 01 	sts	0x01AB, r24
    1716:	80 91 ab 01 	lds	r24, 0x01AB
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	e9 81       	ldd	r30, Y+1	; 0x01
    1720:	fa 81       	ldd	r31, Y+2	; 0x02
    1722:	87 81       	ldd	r24, Z+7	; 0x07
    1724:	90 85       	ldd	r25, Z+8	; 0x08
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	28 17       	cp	r18, r24
    172a:	39 07       	cpc	r19, r25
    172c:	60 f2       	brcs	.-104    	; 0x16c6 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    172e:	ec eb       	ldi	r30, 0xBC	; 188
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	84 e8       	ldi	r24, 0x84	; 132
    1734:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1736:	ec eb       	ldi	r30, 0xBC	; 188
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	88 23       	and	r24, r24
    173e:	dc f7       	brge	.-10     	; 0x1736 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1740:	e9 eb       	ldi	r30, 0xB9	; 185
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	88 7f       	andi	r24, 0xF8	; 248
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	88 35       	cpi	r24, 0x58	; 88
    1750:	91 05       	cpc	r25, r1
    1752:	b1 f4       	brne	.+44     	; 0x1780 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	25 81       	ldd	r18, Z+5	; 0x05
    175a:	36 81       	ldd	r19, Z+6	; 0x06
    175c:	80 91 ab 01 	lds	r24, 0x01AB
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	d9 01       	movw	r26, r18
    1766:	a8 0f       	add	r26, r24
    1768:	b9 1f       	adc	r27, r25
    176a:	eb eb       	ldi	r30, 0xBB	; 187
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1772:	ec eb       	ldi	r30, 0xBC	; 188
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	84 e9       	ldi	r24, 0x94	; 148
    1778:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	8c 83       	std	Y+4, r24	; 0x04
    177e:	05 c0       	rjmp	.+10     	; 0x178a <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1780:	ec eb       	ldi	r30, 0xBC	; 188
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	84 e9       	ldi	r24, 0x94	; 148
    1786:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1788:	1c 82       	std	Y+4, r1	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <LED>:
/// LEDëÄçÏä÷êî 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->è¡ìîÅ@1->ì_ìî </param>
void LED(unsigned char target, bool status)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <LED+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	58 f5       	brcc	.+86     	; 0x1804 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 23       	and	r24, r24
    17b2:	a9 f0       	breq	.+42     	; 0x17de <LED+0x44>
    17b4:	a2 e2       	ldi	r26, 0x22	; 34
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e2 e2       	ldi	r30, 0x22	; 34
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <LED+0x38>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <LED+0x34>
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	13 c0       	rjmp	.+38     	; 0x1804 <LED+0x6a>
	else		sbi(PORTA,target);
    17de:	a2 e2       	ldi	r26, 0x22	; 34
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e2 e2       	ldi	r30, 0x22	; 34
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <LED+0x62>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <LED+0x5e>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <LEDInit>:

void LEDInit(void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    1816:	a1 e2       	ldi	r26, 0x21	; 33
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 e2       	ldi	r30, 0x21	; 33
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	87 60       	ori	r24, 0x07	; 7
    1822:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1824:	a2 e2       	ldi	r26, 0x22	; 34
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e2       	ldi	r30, 0x22	; 34
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	87 60       	ori	r24, 0x07	; 7
    1830:	8c 93       	st	X, r24
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <wait_ms>:
#include <avr/io.h>
void wait_ms(uint16_t t){
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <wait_ms+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <wait_ms+0x8>
    1840:	0f 92       	push	r0
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9b 83       	std	Y+3, r25	; 0x03
    1848:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tt;
	TCCR2A = 0;
    184a:	e0 eb       	ldi	r30, 0xB0	; 176
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	10 82       	st	Z, r1
	TCCR2B = 1;
    1850:	e1 eb       	ldi	r30, 0xB1	; 177
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 83       	st	Z, r24
	OCR2A = 200;
    1858:	e3 eb       	ldi	r30, 0xB3	; 179
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	88 ec       	ldi	r24, 0xC8	; 200
    185e:	80 83       	st	Z, r24

	for(tt=100;t--;){
    1860:	84 e6       	ldi	r24, 0x64	; 100
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	20 c0       	rjmp	.+64     	; 0x18a6 <wait_ms+0x6e>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
    1866:	e2 eb       	ldi	r30, 0xB2	; 178
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	10 82       	st	Z, r1
    186c:	e7 e3       	ldi	r30, 0x37	; 55
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	82 70       	andi	r24, 0x02	; 2
    1878:	90 70       	andi	r25, 0x00	; 0
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	b9 f3       	breq	.-18     	; 0x186c <wait_ms+0x34>
			TIFR2 |= 0x02;
    187e:	a7 e3       	ldi	r26, 0x37	; 55
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	82 60       	ori	r24, 0x02	; 2
    188a:	8c 93       	st	X, r24
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
		while(tt--){
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	88 23       	and	r24, r24
    1894:	11 f0       	breq	.+4      	; 0x189a <wait_ms+0x62>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	99 83       	std	Y+1, r25	; 0x01
    18a2:	88 23       	and	r24, r24
    18a4:	01 f7       	brne	.-64     	; 0x1866 <wait_ms+0x2e>
	uint8_t tt;
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
    18a6:	1c 82       	std	Y+4, r1	; 0x04
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <wait_ms+0x7c>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	8c 83       	std	Y+4, r24	; 0x04
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	88 23       	and	r24, r24
    18c2:	21 f7       	brne	.-56     	; 0x188c <wait_ms+0x54>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
			TIFR2 |= 0x02;
		}
	}
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <wait_us>:
void wait_us(uint16_t t){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <wait_us+0x6>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	TCCR2A = 0;
    18e4:	e0 eb       	ldi	r30, 0xB0	; 176
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
	TCCR2B = 1;
    18ea:	e1 eb       	ldi	r30, 0xB1	; 177
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 83       	st	Z, r24
	OCR2A = 20;
    18f2:	e3 eb       	ldi	r30, 0xB3	; 179
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	84 e1       	ldi	r24, 0x14	; 20
    18f8:	80 83       	st	Z, r24
    18fa:	13 c0       	rjmp	.+38     	; 0x1922 <wait_us+0x4e>
	while(t--){
		for(TCNT2=0;!(TIFR2&0x02););
    18fc:	e2 eb       	ldi	r30, 0xB2	; 178
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	10 82       	st	Z, r1
    1902:	e7 e3       	ldi	r30, 0x37	; 55
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	82 70       	andi	r24, 0x02	; 2
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	b9 f3       	breq	.-18     	; 0x1902 <wait_us+0x2e>
		TIFR2 |= 0x02;
    1914:	a7 e3       	ldi	r26, 0x37	; 55
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e7 e3       	ldi	r30, 0x37	; 55
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	82 60       	ori	r24, 0x02	; 2
    1920:	8c 93       	st	X, r24
}
void wait_us(uint16_t t){
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 20;
	while(t--){
    1922:	1b 82       	std	Y+3, r1	; 0x03
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	11 f0       	breq	.+4      	; 0x1930 <wait_us+0x5c>
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	88 23       	and	r24, r24
    193e:	f1 f6       	brne	.-68     	; 0x18fc <wait_us+0x28>
		for(TCNT2=0;!(TIFR2&0x02););
		TIFR2 |= 0x02;
	}
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <mDrive+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <mDrive+0x8>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <mDrive+0xa>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	9b 83       	std	Y+3, r25	; 0x03
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	6c 83       	std	Y+4, r22	; 0x04
    1960:	4d 83       	std	Y+5, r20	; 0x05
    1962:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1964:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	85 30       	cpi	r24, 0x05	; 5
    196a:	50 f5       	brcc	.+84     	; 0x19c0 <mDrive+0x74>
	if(duty>100) duty=100;
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	85 36       	cpi	r24, 0x65	; 101
    1970:	14 f0       	brlt	.+4      	; 0x1976 <mDrive+0x2a>
    1972:	84 e6       	ldi	r24, 0x64	; 100
    1974:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	8c 39       	cpi	r24, 0x9C	; 156
    197a:	14 f4       	brge	.+4      	; 0x1980 <mDrive+0x34>
    197c:	8c e9       	ldi	r24, 0x9C	; 156
    197e:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	21 f4       	brne	.+8      	; 0x198e <mDrive+0x42>
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	81 95       	neg	r24
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	0d c0       	rjmp	.+26     	; 0x19a8 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	88 23       	and	r24, r24
    1992:	11 f4       	brne	.+4      	; 0x1998 <mDrive+0x4c>
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	08 c0       	rjmp	.+16     	; 0x19a8 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	19 f4       	brne	.+6      	; 0x19a4 <mDrive+0x58>
    199e:	8f e7       	ldi	r24, 0x7F	; 127
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <mDrive+0x5c>
	else w_data = duty;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    19a8:	ea 81       	ldd	r30, Y+2	; 0x02
    19aa:	fb 81       	ldd	r31, Y+3	; 0x03
    19ac:	21 81       	ldd	r18, Z+1	; 0x01
    19ae:	32 81       	ldd	r19, Z+2	; 0x02
    19b0:	8e 81       	ldd	r24, Y+6	; 0x06
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	f9 01       	movw	r30, r18
    19b8:	e8 0f       	add	r30, r24
    19ba:	f9 1f       	adc	r31, r25
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	80 83       	st	Z, r24
}
    19c0:	26 96       	adiw	r28, 0x06	; 6
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <mAngle+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <mAngle+0x8>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	7c 83       	std	Y+4, r23	; 0x04
    19e6:	6b 83       	std	Y+3, r22	; 0x03
    19e8:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	88 23       	and	r24, r24
    19ee:	a9 f0       	breq	.+42     	; 0x1a1a <mAngle+0x48>
		angle/=6;
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	26 e0       	ldi	r18, 0x06	; 6
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	b9 01       	movw	r22, r18
    19fa:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    19fe:	cb 01       	movw	r24, r22
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[2] = 0x40|(angle&0x1f);
    1a04:	e9 81       	ldd	r30, Y+1	; 0x01
    1a06:	fa 81       	ldd	r31, Y+2	; 0x02
    1a08:	81 81       	ldd	r24, Z+1	; 0x01
    1a0a:	92 81       	ldd	r25, Z+2	; 0x02
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	32 96       	adiw	r30, 0x02	; 2
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	8f 71       	andi	r24, 0x1F	; 31
    1a14:	80 64       	ori	r24, 0x40	; 64
    1a16:	80 83       	st	Z, r24
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <mAngle+0x56>
		}
	else motor->write.buf[2] = 0x00;
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	81 81       	ldd	r24, Z+1	; 0x01
    1a20:	92 81       	ldd	r25, Z+2	; 0x02
    1a22:	fc 01       	movw	r30, r24
    1a24:	32 96       	adiw	r30, 0x02	; 2
    1a26:	10 82       	st	Z, r1
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <aDrive+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <aDrive+0x8>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	6b 83       	std	Y+3, r22	; 0x03
    1a4a:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    1a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4e:	88 23       	and	r24, r24
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <aDrive+0x2a>
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	01 80       	ldd	r0, Z+1	; 0x01
    1a58:	f2 81       	ldd	r31, Z+2	; 0x02
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	80 83       	st	Z, r24
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	01 80       	ldd	r0, Z+1	; 0x01
    1a68:	f2 81       	ldd	r31, Z+2	; 0x02
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	10 82       	st	Z, r1

}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1a84:	a4 e2       	ldi	r26, 0x24	; 36
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e4 e2       	ldi	r30, 0x24	; 36
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 7f       	andi	r24, 0xF0	; 240
    1a90:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1a92:	a5 e2       	ldi	r26, 0x25	; 37
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e2       	ldi	r30, 0x25	; 37
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 60       	ori	r24, 0x0F	; 15
    1a9e:	8c 93       	st	X, r24
}
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <Switch>:
/// ÉXÉCÉbÉ`íléÊìæä÷êî 
/// </summary>
/// <param name="target"> ÉÅÉCÉìäÓî’è„ÇÃÉXÉâÉCÉhÉXÉCÉbÉ`î‘çÜÅ@1Å`4 </param>
/// <return> ÉXÉCÉbÉ`ÇÃèÛë‘ ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <Switch+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1ab2:	e3 e2       	ldi	r30, 0x23	; 35
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 95       	com	r24
    1aba:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	a9 01       	movw	r20, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <Switch+0x2c>
    1ace:	55 95       	asr	r21
    1ad0:	47 95       	ror	r20
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <Switch+0x28>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	81 70       	andi	r24, 0x01	; 1
    1ae2:	90 70       	andi	r25, 0x00	; 0
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <Group>:

__inline__ unsigned char Group(void)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1af6:	e3 e2       	ldi	r30, 0x23	; 35
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 95       	com	r24
    1afe:	86 95       	lsr	r24
    1b00:	86 95       	lsr	r24
    1b02:	83 70       	andi	r24, 0x03	; 3
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <Channel>:

__inline__ unsigned char Channel(void)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1b12:	e3 e2       	ldi	r30, 0x23	; 35
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 95       	com	r24
    1b1a:	83 70       	andi	r24, 0x03	; 3
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	89 27       	eor	r24, r25
    1b34:	88 23       	and	r24, r24
    1b36:	71 f4       	brne	.+28     	; 0x1b54 <beep+0x32>
    1b38:	80 91 55 01 	lds	r24, 0x0155
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	89 27       	eor	r24, r25
    1b40:	88 23       	and	r24, r24
    1b42:	41 f4       	brne	.+16     	; 0x1b54 <beep+0x32>
    1b44:	a2 e2       	ldi	r26, 0x22	; 34
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e2 e2       	ldi	r30, 0x22	; 34
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 60       	ori	r24, 0x08	; 8
    1b50:	8c 93       	st	X, r24
    1b52:	0b c0       	rjmp	.+22     	; 0x1b6a <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1b54:	80 91 55 01 	lds	r24, 0x0155
    1b58:	88 23       	and	r24, r24
    1b5a:	39 f0       	breq	.+14     	; 0x1b6a <beep+0x48>
    1b5c:	a2 e2       	ldi	r26, 0x22	; 34
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e2 e2       	ldi	r30, 0x22	; 34
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	87 7f       	andi	r24, 0xF7	; 247
    1b68:	8c 93       	st	X, r24
}
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <BeepInit>:

void BeepInit()
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1b7a:	a1 e2       	ldi	r26, 0x21	; 33
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e1 e2       	ldi	r30, 0x21	; 33
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	88 60       	ori	r24, 0x08	; 8
    1b86:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1b88:	a2 e2       	ldi	r26, 0x22	; 34
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e2       	ldi	r30, 0x22	; 34
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	8c 93       	st	X, r24
}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <i2cCheck>:

void i2cCheck(bool flag)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	69 81       	ldd	r22, Y+1	; 0x01
    1bac:	0e 94 cd 0b 	call	0x179a	; 0x179a <LED>
	beep(!(flag));
    1bb0:	99 81       	ldd	r25, Y+1	; 0x01
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	89 27       	eor	r24, r25
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
	if(!flag){
    1bbe:	99 81       	ldd	r25, Y+1	; 0x01
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 27       	eor	r24, r25
    1bc4:	88 23       	and	r24, r24
    1bc6:	31 f0       	breq	.+12     	; 0x1bd4 <i2cCheck+0x38>
		PORTC = 0x04;
    1bc8:	e8 e2       	ldi	r30, 0x28	; 40
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	84 e0       	ldi	r24, 0x04	; 4
    1bce:	80 83       	st	Z, r24
		cli();
    1bd0:	f8 94       	cli
    1bd2:	ff cf       	rjmp	.-2      	; 0x1bd2 <i2cCheck+0x36>
		while(1);
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <Emergency+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <Emergency+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	8a 83       	std	Y+2, r24	; 0x02
    1bec:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	71 f4       	brne	.+28     	; 0x1c10 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf8:	01 80       	ldd	r0, Z+1	; 0x01
    1bfa:	f2 81       	ldd	r31, Z+2	; 0x02
    1bfc:	e0 2d       	mov	r30, r0
    1bfe:	8a e6       	ldi	r24, 0x6A	; 106
    1c00:	80 83       	st	Z, r24
		beep(1);
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
		eflag=1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 be 01 	sts	0x01BE, r24
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <Emergency+0x60>
		}
	else if(act==E_OFF){
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	69 f4       	brne	.+26     	; 0x1c30 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1c16:	ea 81       	ldd	r30, Y+2	; 0x02
    1c18:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1a:	01 80       	ldd	r0, Z+1	; 0x01
    1c1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	85 e5       	ldi	r24, 0x55	; 85
    1c22:	80 83       	st	Z, r24
		beep(0);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
		eflag=0;
    1c2a:	10 92 be 01 	sts	0x01BE, r1
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1c30:	ea 81       	ldd	r30, Y+2	; 0x02
    1c32:	fb 81       	ldd	r31, Y+3	; 0x03
    1c34:	01 80       	ldd	r0, Z+1	; 0x01
    1c36:	f2 81       	ldd	r31, Z+2	; 0x02
    1c38:	e0 2d       	mov	r30, r0
    1c3a:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	0e 94 4c 0a 	call	0x1498	; 0x1498 <i2cRead>
    1c44:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1c46:	ea 81       	ldd	r30, Y+2	; 0x02
    1c48:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4a:	05 80       	ldd	r0, Z+5	; 0x05
    1c4c:	f6 81       	ldd	r31, Z+6	; 0x06
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	80 81       	ld	r24, Z
    1c52:	8a 36       	cpi	r24, 0x6A	; 106
    1c54:	31 f4       	brne	.+12     	; 0x1c62 <Emergency+0x86>
		beep(1);
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <beep>
		eflag=1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 93 be 01 	sts	0x01BE, r24
		}
	if(*(emergency->read.buf)==0x55){
    1c62:	ea 81       	ldd	r30, Y+2	; 0x02
    1c64:	fb 81       	ldd	r31, Y+3	; 0x03
    1c66:	05 80       	ldd	r0, Z+5	; 0x05
    1c68:	f6 81       	ldd	r31, Z+6	; 0x06
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	85 35       	cpi	r24, 0x55	; 85
    1c70:	d9 f4       	brne	.+54     	; 0x1ca8 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1c72:	a0 e6       	ldi	r26, 0x60	; 96
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e0 e6       	ldi	r30, 0x60	; 96
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1c80:	a0 e6       	ldi	r26, 0x60	; 96
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e0 e6       	ldi	r30, 0x60	; 96
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7b       	andi	r24, 0xBF	; 191
    1c8c:	8c 93       	st	X, r24
		wdt_reset();
    1c8e:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1c90:	88 e1       	ldi	r24, 0x18	; 24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	28 e0       	ldi	r18, 0x08	; 8
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	a8 95       	wdr
    1c9c:	80 93 60 00 	sts	0x0060, r24
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	20 93 60 00 	sts	0x0060, r18
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <EmergencyStatus>:

bool EmergencyStatus()
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1cc2:	80 91 be 01 	lds	r24, 0x01BE
    1cc6:	88 23       	and	r24, r24
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <EmergencyStatus+0x16>
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <EmergencyStatus+0x1a>
	else return 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <__divmodhi4>:
    1cdc:	97 fb       	bst	r25, 7
    1cde:	09 2e       	mov	r0, r25
    1ce0:	07 26       	eor	r0, r23
    1ce2:	0a d0       	rcall	.+20     	; 0x1cf8 <__divmodhi4_neg1>
    1ce4:	77 fd       	sbrc	r23, 7
    1ce6:	04 d0       	rcall	.+8      	; 0x1cf0 <__divmodhi4_neg2>
    1ce8:	0c d0       	rcall	.+24     	; 0x1d02 <__udivmodhi4>
    1cea:	06 d0       	rcall	.+12     	; 0x1cf8 <__divmodhi4_neg1>
    1cec:	00 20       	and	r0, r0
    1cee:	1a f4       	brpl	.+6      	; 0x1cf6 <__divmodhi4_exit>

00001cf0 <__divmodhi4_neg2>:
    1cf0:	70 95       	com	r23
    1cf2:	61 95       	neg	r22
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255

00001cf6 <__divmodhi4_exit>:
    1cf6:	08 95       	ret

00001cf8 <__divmodhi4_neg1>:
    1cf8:	f6 f7       	brtc	.-4      	; 0x1cf6 <__divmodhi4_exit>
    1cfa:	90 95       	com	r25
    1cfc:	81 95       	neg	r24
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__udivmodhi4>:
    1d02:	aa 1b       	sub	r26, r26
    1d04:	bb 1b       	sub	r27, r27
    1d06:	51 e1       	ldi	r21, 0x11	; 17
    1d08:	07 c0       	rjmp	.+14     	; 0x1d18 <__udivmodhi4_ep>

00001d0a <__udivmodhi4_loop>:
    1d0a:	aa 1f       	adc	r26, r26
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	a6 17       	cp	r26, r22
    1d10:	b7 07       	cpc	r27, r23
    1d12:	10 f0       	brcs	.+4      	; 0x1d18 <__udivmodhi4_ep>
    1d14:	a6 1b       	sub	r26, r22
    1d16:	b7 0b       	sbc	r27, r23

00001d18 <__udivmodhi4_ep>:
    1d18:	88 1f       	adc	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	5a 95       	dec	r21
    1d1e:	a9 f7       	brne	.-22     	; 0x1d0a <__udivmodhi4_loop>
    1d20:	80 95       	com	r24
    1d22:	90 95       	com	r25
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	08 95       	ret

00001d2a <_exit>:
    1d2a:	f8 94       	cli

00001d2c <__stop_program>:
    1d2c:	ff cf       	rjmp	.-2      	; 0x1d2c <__stop_program>
