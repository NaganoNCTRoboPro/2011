
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001dda  00001e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800156  00800156  00001ec4  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001617  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000039bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015ff  00000000  00000000  0000435a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ac  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_20>
      54:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_28>
      74:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ed       	ldi	r30, 0xDA	; 218
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3b       	cpi	r26, 0xBF	; 191
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define CATCH 0x50

#define SUPPLY_WATCHING (1)

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	c4 54       	subi	r28, 0x44	; 68
      dc:	d0 40       	sbci	r29, 0x00	; 0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t _group=0,_channel=0; 
      e8:	1b 8a       	std	Y+19, r1	; 0x13
      ea:	1a 8a       	std	Y+18, r1	; 0x12

	union controller_data *controller;

	int8_t slaveBuf[16]={0},m_size=2;
      ec:	80 e1       	ldi	r24, 0x10	; 16
      ee:	fe 01       	movw	r30, r28
      f0:	74 96       	adiw	r30, 0x14	; 20
      f2:	df 01       	movw	r26, r30
      f4:	98 2f       	mov	r25, r24
      f6:	1d 92       	st	X+, r1
      f8:	9a 95       	dec	r25
      fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x28>
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	8f 87       	std	Y+15, r24	; 0x0f
	bool zlPushed, zrPushed, rightPushed, leftPushed, lPushed, rPushed;
	uint8_t lAirTimeCount, rAirTimeCount;
	bool i2cStatus;

	uint8_t port;
	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],m_size},{(int8_t*)&slaveBuf[m_size],m_size}};
     100:	8f 85       	ldd	r24, Y+15	; 0x0f
     102:	68 2f       	mov	r22, r24
     104:	77 27       	eor	r23, r23
     106:	67 fd       	sbrc	r22, 7
     108:	70 95       	com	r23
     10a:	8f 85       	ldd	r24, Y+15	; 0x0f
     10c:	99 27       	eor	r25, r25
     10e:	87 fd       	sbrc	r24, 7
     110:	90 95       	com	r25
     112:	9e 01       	movw	r18, r28
     114:	2c 5e       	subi	r18, 0xEC	; 236
     116:	3f 4f       	sbci	r19, 0xFF	; 255
     118:	28 0f       	add	r18, r24
     11a:	39 1f       	adc	r19, r25
     11c:	8f 85       	ldd	r24, Y+15	; 0x0f
     11e:	48 2f       	mov	r20, r24
     120:	55 27       	eor	r21, r21
     122:	47 fd       	sbrc	r20, 7
     124:	50 95       	com	r21
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	8c a3       	std	Y+36, r24	; 0x24
     12a:	ce 01       	movw	r24, r28
     12c:	44 96       	adiw	r24, 0x14	; 20
     12e:	9e a3       	std	Y+38, r25	; 0x26
     130:	8d a3       	std	Y+37, r24	; 0x25
     132:	78 a7       	std	Y+40, r23	; 0x28
     134:	6f a3       	std	Y+39, r22	; 0x27
     136:	3a a7       	std	Y+42, r19	; 0x2a
     138:	29 a7       	std	Y+41, r18	; 0x29
     13a:	5c a7       	std	Y+44, r21	; 0x2c
     13c:	4b a7       	std	Y+43, r20	; 0x2b
	Slave Throw = {THROW,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	8d a7       	std	Y+45, r24	; 0x2d
     142:	ce 01       	movw	r24, r28
     144:	44 96       	adiw	r24, 0x14	; 20
     146:	0a 96       	adiw	r24, 0x0a	; 10
     148:	9f a7       	std	Y+47, r25	; 0x2f
     14a:	8e a7       	std	Y+46, r24	; 0x2e
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	99 ab       	std	Y+49, r25	; 0x31
     152:	88 ab       	std	Y+48, r24	; 0x30
     154:	ce 01       	movw	r24, r28
     156:	44 96       	adiw	r24, 0x14	; 20
     158:	0b 96       	adiw	r24, 0x0b	; 11
     15a:	9b ab       	std	Y+51, r25	; 0x33
     15c:	8a ab       	std	Y+50, r24	; 0x32
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	9d ab       	std	Y+53, r25	; 0x35
     164:	8c ab       	std	Y+52, r24	; 0x34
#if SUPPLY_WATCHING
	Slave EStop = {ESTOP,{(int8_t*)&slaveBuf[12],1},{(int8_t*)&slaveBuf[13],1}};	
     166:	80 e1       	ldi	r24, 0x10	; 16
     168:	8e ab       	std	Y+54, r24	; 0x36
     16a:	ce 01       	movw	r24, r28
     16c:	44 96       	adiw	r24, 0x14	; 20
     16e:	0c 96       	adiw	r24, 0x0c	; 12
     170:	98 af       	std	Y+56, r25	; 0x38
     172:	8f ab       	std	Y+55, r24	; 0x37
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	9a af       	std	Y+58, r25	; 0x3a
     17a:	89 af       	std	Y+57, r24	; 0x39
     17c:	ce 01       	movw	r24, r28
     17e:	44 96       	adiw	r24, 0x14	; 20
     180:	0d 96       	adiw	r24, 0x0d	; 13
     182:	9c af       	std	Y+60, r25	; 0x3c
     184:	8b af       	std	Y+59, r24	; 0x3b
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9e af       	std	Y+62, r25	; 0x3e
     18c:	8d af       	std	Y+61, r24	; 0x3d
	uint8_t e_flag=0;
     18e:	19 82       	std	Y+1, r1	; 0x01
#endif

/*---------------------------------------------------------------*/
// 						èëÇ´Ç©Ç¶ÇøÇ·É_ÉÅÇÊÅI
/*---------------------------------------------------------------*/
	LEDInit();
     190:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LEDInit>
	SwitchInit();
     194:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <SwitchInit>
	BeepInit();
     198:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <BeepInit>
	initCtrlData();
     19c:	0e 94 17 04 	call	0x82e	; 0x82e <initCtrlData>
	DDRC |= 0x04;
     1a0:	a7 e2       	ldi	r26, 0x27	; 39
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e7 e2       	ldi	r30, 0x27	; 39
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	84 60       	ori	r24, 0x04	; 4
     1ac:	8c 93       	st	X, r24
	PORTC = 0x04;
     1ae:	e8 e2       	ldi	r30, 0x28	; 40
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	80 83       	st	Z, r24
	initI2CMaster(100);
     1b6:	84 e6       	ldi	r24, 0x64	; 100
     1b8:	0e 94 ed 09 	call	0x13da	; 0x13da <initI2CMaster>

	wdt_reset();
     1bc:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1be:	88 e1       	ldi	r24, 0x18	; 24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	2d e0       	ldi	r18, 0x0D	; 13
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	a8 95       	wdr
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	68 e0       	ldi	r22, 0x08	; 8
     1da:	4a e0       	ldi	r20, 0x0A	; 10
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	0e 94 75 06 	call	0xcea	; 0xcea <uart_init>
	uart_setbuffer(0,buf,36);
     1e2:	26 e5       	ldi	r18, 0x56	; 86
     1e4:	31 e0       	ldi	r19, 0x01	; 1
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	b9 01       	movw	r22, r18
     1ec:	44 e2       	ldi	r20, 0x24	; 36
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_setbuffer>
	wait_ms(100);
     1f4:	84 e6       	ldi	r24, 0x64	; 100
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	68 e1       	ldi	r22, 0x18	; 24
     202:	40 e4       	ldi	r20, 0x40	; 64
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	0e 94 75 06 	call	0xcea	; 0xcea <uart_init>
	mu2_command("GI",group[_group]);
     20a:	8b 89       	ldd	r24, Y+19	; 0x13
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	fc 01       	movw	r30, r24
     216:	e4 5f       	subi	r30, 0xF4	; 244
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	20 81       	ld	r18, Z
     21c:	31 81       	ldd	r19, Z+1	; 0x01
     21e:	88 e2       	ldi	r24, 0x28	; 40
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	b9 01       	movw	r22, r18
     224:	0e 94 6b 05 	call	0xad6	; 0xad6 <mu2_command>
	mu2_command("CH",channel[_channel]);
     228:	8a 89       	ldd	r24, Y+18	; 0x12
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	fc 01       	movw	r30, r24
     234:	e0 5e       	subi	r30, 0xE0	; 224
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	20 81       	ld	r18, Z
     23a:	31 81       	ldd	r19, Z+1	; 0x01
     23c:	8b e2       	ldi	r24, 0x2B	; 43
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	b9 01       	movw	r22, r18
     242:	0e 94 6b 05 	call	0xad6	; 0xad6 <mu2_command>
	mu2_command("EI","01");
     246:	8e e2       	ldi	r24, 0x2E	; 46
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	b9 01       	movw	r22, r18
     250:	0e 94 6b 05 	call	0xad6	; 0xad6 <mu2_command>
	mu2_command("DI","10");
     254:	81 e3       	ldi	r24, 0x31	; 49
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	24 e3       	ldi	r18, 0x34	; 52
     25a:	31 e0       	ldi	r19, 0x01	; 1
     25c:	b9 01       	movw	r22, r18
     25e:	0e 94 6b 05 	call	0xad6	; 0xad6 <mu2_command>
	mu2_command("BR","48");
     262:	87 e3       	ldi	r24, 0x37	; 55
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	2a e3       	ldi	r18, 0x3A	; 58
     268:	31 e0       	ldi	r19, 0x01	; 1
     26a:	b9 01       	movw	r22, r18
     26c:	0e 94 6b 05 	call	0xad6	; 0xad6 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	60 e9       	ldi	r22, 0x90	; 144
     276:	43 e0       	ldi	r20, 0x03	; 3
     278:	51 e0       	ldi	r21, 0x01	; 1
     27a:	0e 94 75 06 	call	0xcea	; 0xcea <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
	sei();
     296:	78 94       	sei
	wait_ms(100);
     298:	84 e6       	ldi	r24, 0x64	; 100
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <wait_ms>
	PORTC &= 0xFB;
     2a0:	a8 e2       	ldi	r26, 0x28	; 40
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	e8 e2       	ldi	r30, 0x28	; 40
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	8b 7f       	andi	r24, 0xFB	; 251
     2ac:	8c 93       	st	X, r24
	wait_ms(25);
     2ae:	89 e1       	ldi	r24, 0x19	; 25
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <wait_ms>

	TCCR1A = 0;
     2b6:	e0 e8       	ldi	r30, 0x80	; 128
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	10 82       	st	Z, r1
	TCCR1B = 5;
     2bc:	e1 e8       	ldi	r30, 0x81	; 129
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	80 83       	st	Z, r24
	TIMSK1 = 1;
     2c4:	ef e6       	ldi	r30, 0x6F	; 111
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 83       	st	Z, r24
	TCNT1 = 0;
     2cc:	e4 e8       	ldi	r30, 0x84	; 132
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	11 82       	std	Z+1, r1	; 0x01
     2d2:	10 82       	st	Z, r1

	// velocity = 0
		velocity = 0;
     2d4:	1e 86       	std	Y+14, r1	; 0x0e
	// lAirAction = rAirAction = OFF
		lAirAction = rAirAction = OFF;
     2d6:	1c 86       	std	Y+12, r1	; 0x0c
     2d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     2da:	8d 87       	std	Y+13, r24	; 0x0d
	// zlPushed = zrPushed = rightPushed = leftPushed = false
		zlPushed = zrPushed = rightPushed = leftPushed = lPushed = rPushed = false;
     2dc:	1e 82       	std	Y+6, r1	; 0x06
     2de:	8e 81       	ldd	r24, Y+6	; 0x06
     2e0:	8f 83       	std	Y+7, r24	; 0x07
     2e2:	8f 81       	ldd	r24, Y+7	; 0x07
     2e4:	88 87       	std	Y+8, r24	; 0x08
     2e6:	88 85       	ldd	r24, Y+8	; 0x08
     2e8:	89 87       	std	Y+9, r24	; 0x09
     2ea:	89 85       	ldd	r24, Y+9	; 0x09
     2ec:	8a 87       	std	Y+10, r24	; 0x0a
     2ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     2f0:	8b 87       	std	Y+11, r24	; 0x0b
	// lAirTimeCount = rAirTimeCount = 0
		lAirTimeCount = rAirTimeCount = 0;
     2f2:	1c 82       	std	Y+4, r1	; 0x04
     2f4:	8c 81       	ldd	r24, Y+4	; 0x04
     2f6:	8d 83       	std	Y+5, r24	; 0x05

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     2f8:	0e 94 3a 04 	call	0x874	; 0x874 <Toggle_RC_Rx_Buffer>
     2fc:	99 8b       	std	Y+17, r25	; 0x11
     2fe:	88 8b       	std	Y+16, r24	; 0x10
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     300:	e8 89       	ldd	r30, Y+16	; 0x10
     302:	f9 89       	ldd	r31, Y+17	; 0x11
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	82 70       	andi	r24, 0x02	; 2
     308:	88 23       	and	r24, r24
     30a:	09 f4       	brne	.+2      	; 0x30e <main+0x240>
     30c:	d2 c0       	rjmp	.+420    	; 0x4b2 <main+0x3e4>
     30e:	e8 89       	ldd	r30, Y+16	; 0x10
     310:	f9 89       	ldd	r31, Y+17	; 0x11
     312:	80 81       	ld	r24, Z
     314:	81 70       	andi	r24, 0x01	; 1
     316:	88 23       	and	r24, r24
     318:	09 f4       	brne	.+2      	; 0x31c <main+0x24e>
     31a:	cb c0       	rjmp	.+406    	; 0x4b2 <main+0x3e4>
     31c:	e8 89       	ldd	r30, Y+16	; 0x10
     31e:	f9 89       	ldd	r31, Y+17	; 0x11
     320:	80 81       	ld	r24, Z
     322:	80 71       	andi	r24, 0x10	; 16
     324:	88 23       	and	r24, r24
     326:	09 f4       	brne	.+2      	; 0x32a <main+0x25c>
     328:	c4 c0       	rjmp	.+392    	; 0x4b2 <main+0x3e4>
     32a:	e8 89       	ldd	r30, Y+16	; 0x10
     32c:	f9 89       	ldd	r31, Y+17	; 0x11
     32e:	82 81       	ldd	r24, Z+2	; 0x02
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	8d 30       	cpi	r24, 0x0D	; 13
     338:	91 05       	cpc	r25, r1
     33a:	0c f4       	brge	.+2      	; 0x33e <main+0x270>
     33c:	ba c0       	rjmp	.+372    	; 0x4b2 <main+0x3e4>
     33e:	e8 89       	ldd	r30, Y+16	; 0x10
     340:	f9 89       	ldd	r31, Y+17	; 0x11
     342:	83 81       	ldd	r24, Z+3	; 0x03
     344:	8f 70       	andi	r24, 0x0F	; 15
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	8d 30       	cpi	r24, 0x0D	; 13
     34c:	91 05       	cpc	r25, r1
     34e:	0c f4       	brge	.+2      	; 0x352 <main+0x284>
     350:	b0 c0       	rjmp	.+352    	; 0x4b2 <main+0x3e4>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	68 e1       	ldi	r22, 0x18	; 24
     370:	43 e0       	ldi	r20, 0x03	; 3
     372:	51 e0       	ldi	r21, 0x01	; 1
     374:	0e 94 75 06 	call	0xcea	; 0xcea <uart_init>
				LED(2,mu2_command_eeprom("EI","01"));
     378:	8e e2       	ldi	r24, 0x2E	; 46
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	31 e0       	ldi	r19, 0x01	; 1
     380:	b9 01       	movw	r22, r18
     382:	0e 94 ed 05 	call	0xbda	; 0xbda <mu2_command_eeprom>
     386:	21 96       	adiw	r28, 0x01	; 1
     388:	8f af       	std	Y+63, r24	; 0x3f
     38a:	21 97       	sbiw	r28, 0x01	; 1
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	af ad       	ldd	r26, Y+63	; 0x3f
     390:	21 97       	sbiw	r28, 0x01	; 1
     392:	aa 23       	and	r26, r26
     394:	21 f0       	breq	.+8      	; 0x39e <main+0x2d0>
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	21 96       	adiw	r28, 0x01	; 1
     39a:	bf af       	std	Y+63, r27	; 0x3f
     39c:	21 97       	sbiw	r28, 0x01	; 1
     39e:	21 96       	adiw	r28, 0x01	; 1
     3a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a2:	21 97       	sbiw	r28, 0x01	; 1
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	69 2f       	mov	r22, r25
     3a8:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				LED(2,mu2_command_eeprom("DI","10"));
     3ac:	81 e3       	ldi	r24, 0x31	; 49
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	24 e3       	ldi	r18, 0x34	; 52
     3b2:	31 e0       	ldi	r19, 0x01	; 1
     3b4:	b9 01       	movw	r22, r18
     3b6:	0e 94 ed 05 	call	0xbda	; 0xbda <mu2_command_eeprom>
     3ba:	22 96       	adiw	r28, 0x02	; 2
     3bc:	8f af       	std	Y+63, r24	; 0x3f
     3be:	22 97       	sbiw	r28, 0x02	; 2
     3c0:	22 96       	adiw	r28, 0x02	; 2
     3c2:	8f ad       	ldd	r24, Y+63	; 0x3f
     3c4:	22 97       	sbiw	r28, 0x02	; 2
     3c6:	88 23       	and	r24, r24
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <main+0x304>
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	22 96       	adiw	r28, 0x02	; 2
     3ce:	9f af       	std	Y+63, r25	; 0x3f
     3d0:	22 97       	sbiw	r28, 0x02	; 2
     3d2:	22 96       	adiw	r28, 0x02	; 2
     3d4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3d6:	22 97       	sbiw	r28, 0x02	; 2
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	69 2f       	mov	r22, r25
     3dc:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				LED(2,mu2_command_eeprom("GI",group[_group]));
     3e0:	8b 89       	ldd	r24, Y+19	; 0x13
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	fc 01       	movw	r30, r24
     3ec:	e4 5f       	subi	r30, 0xF4	; 244
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	20 81       	ld	r18, Z
     3f2:	31 81       	ldd	r19, Z+1	; 0x01
     3f4:	88 e2       	ldi	r24, 0x28	; 40
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	b9 01       	movw	r22, r18
     3fa:	0e 94 ed 05 	call	0xbda	; 0xbda <mu2_command_eeprom>
     3fe:	23 96       	adiw	r28, 0x03	; 3
     400:	8f af       	std	Y+63, r24	; 0x3f
     402:	23 97       	sbiw	r28, 0x03	; 3
     404:	23 96       	adiw	r28, 0x03	; 3
     406:	af ad       	ldd	r26, Y+63	; 0x3f
     408:	23 97       	sbiw	r28, 0x03	; 3
     40a:	aa 23       	and	r26, r26
     40c:	21 f0       	breq	.+8      	; 0x416 <main+0x348>
     40e:	b1 e0       	ldi	r27, 0x01	; 1
     410:	23 96       	adiw	r28, 0x03	; 3
     412:	bf af       	std	Y+63, r27	; 0x3f
     414:	23 97       	sbiw	r28, 0x03	; 3
     416:	23 96       	adiw	r28, 0x03	; 3
     418:	9f ad       	ldd	r25, Y+63	; 0x3f
     41a:	23 97       	sbiw	r28, 0x03	; 3
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	69 2f       	mov	r22, r25
     420:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				LED(2,mu2_command_eeprom("CH",channel[_channel]));
     424:	8a 89       	ldd	r24, Y+18	; 0x12
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	fc 01       	movw	r30, r24
     430:	e0 5e       	subi	r30, 0xE0	; 224
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	20 81       	ld	r18, Z
     436:	31 81       	ldd	r19, Z+1	; 0x01
     438:	8b e2       	ldi	r24, 0x2B	; 43
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	b9 01       	movw	r22, r18
     43e:	0e 94 ed 05 	call	0xbda	; 0xbda <mu2_command_eeprom>
     442:	24 96       	adiw	r28, 0x04	; 4
     444:	8f af       	std	Y+63, r24	; 0x3f
     446:	24 97       	sbiw	r28, 0x04	; 4
     448:	24 96       	adiw	r28, 0x04	; 4
     44a:	8f ad       	ldd	r24, Y+63	; 0x3f
     44c:	24 97       	sbiw	r28, 0x04	; 4
     44e:	88 23       	and	r24, r24
     450:	21 f0       	breq	.+8      	; 0x45a <main+0x38c>
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	24 96       	adiw	r28, 0x04	; 4
     456:	9f af       	std	Y+63, r25	; 0x3f
     458:	24 97       	sbiw	r28, 0x04	; 4
     45a:	24 96       	adiw	r28, 0x04	; 4
     45c:	9f ad       	ldd	r25, Y+63	; 0x3f
     45e:	24 97       	sbiw	r28, 0x04	; 4
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	69 2f       	mov	r22, r25
     464:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     468:	87 e3       	ldi	r24, 0x37	; 55
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	2a e3       	ldi	r18, 0x3A	; 58
     46e:	31 e0       	ldi	r19, 0x01	; 1
     470:	b9 01       	movw	r22, r18
     472:	0e 94 ed 05 	call	0xbda	; 0xbda <mu2_command_eeprom>
     476:	25 96       	adiw	r28, 0x05	; 5
     478:	8f af       	std	Y+63, r24	; 0x3f
     47a:	25 97       	sbiw	r28, 0x05	; 5
     47c:	25 96       	adiw	r28, 0x05	; 5
     47e:	af ad       	ldd	r26, Y+63	; 0x3f
     480:	25 97       	sbiw	r28, 0x05	; 5
     482:	aa 23       	and	r26, r26
     484:	21 f0       	breq	.+8      	; 0x48e <main+0x3c0>
     486:	b1 e0       	ldi	r27, 0x01	; 1
     488:	25 96       	adiw	r28, 0x05	; 5
     48a:	bf af       	std	Y+63, r27	; 0x3f
     48c:	25 97       	sbiw	r28, 0x05	; 5
     48e:	25 96       	adiw	r28, 0x05	; 5
     490:	9f ad       	ldd	r25, Y+63	; 0x3f
     492:	25 97       	sbiw	r28, 0x05	; 5
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	69 2f       	mov	r22, r25
     498:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				wait_ms(100);
     49c:	84 e6       	ldi	r24, 0x64	; 100
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	60 e9       	ldi	r22, 0x90	; 144
     4aa:	43 e0       	ldi	r20, 0x03	; 3
     4ac:	51 e0       	ldi	r21, 0x01	; 1
     4ae:	0e 94 75 06 	call	0xcea	; 0xcea <uart_init>
			}
/*-------------------------------------------------------------------------*/
		
		// Ç‡ÇµÅCaÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 100;
		if( controller->detail.Button.A )
     4b2:	e8 89       	ldd	r30, Y+16	; 0x10
     4b4:	f9 89       	ldd	r31, Y+17	; 0x11
     4b6:	80 81       	ld	r24, Z
     4b8:	82 70       	andi	r24, 0x02	; 2
     4ba:	88 23       	and	r24, r24
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <main+0x3f6>
			{
				velocity = 100;
     4be:	84 e6       	ldi	r24, 0x64	; 100
     4c0:	8e 87       	std	Y+14, r24	; 0x0e
     4c2:	1c c0       	rjmp	.+56     	; 0x4fc <main+0x42e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCxÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 70;
		else if( controller->detail.Button.X )
     4c4:	e8 89       	ldd	r30, Y+16	; 0x10
     4c6:	f9 89       	ldd	r31, Y+17	; 0x11
     4c8:	80 81       	ld	r24, Z
     4ca:	81 70       	andi	r24, 0x01	; 1
     4cc:	88 23       	and	r24, r24
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <main+0x408>
			{
				velocity = 55;
     4d0:	87 e3       	ldi	r24, 0x37	; 55
     4d2:	8e 87       	std	Y+14, r24	; 0x0e
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <main+0x42e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCyÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = 30;
		else if( controller->detail.Button.Y )
     4d6:	e8 89       	ldd	r30, Y+16	; 0x10
     4d8:	f9 89       	ldd	r31, Y+17	; 0x11
     4da:	80 81       	ld	r24, Z
     4dc:	88 70       	andi	r24, 0x08	; 8
     4de:	88 23       	and	r24, r24
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <main+0x41a>
			{
				velocity = -55;
     4e2:	89 ec       	ldi	r24, 0xC9	; 201
     4e4:	8e 87       	std	Y+14, r24	; 0x0e
     4e6:	0a c0       	rjmp	.+20     	; 0x4fc <main+0x42e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÇ‡ÇµÅCbÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// velocity = -100;
		else if( controller->detail.Button.B )
     4e8:	e8 89       	ldd	r30, Y+16	; 0x10
     4ea:	f9 89       	ldd	r31, Y+17	; 0x11
     4ec:	80 81       	ld	r24, Z
     4ee:	84 70       	andi	r24, 0x04	; 4
     4f0:	88 23       	and	r24, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <main+0x42c>
			{
				velocity = -100;
     4f4:	8c e9       	ldi	r24, 0x9C	; 156
     4f6:	8e 87       	std	Y+14, r24	; 0x0e
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <main+0x42e>
			}
		// ÇªÇ§Ç≈Ç»ÇØÇÍÇŒ
			// velocity = 0;
		else
			{
				velocity = 0;
     4fa:	1e 86       	std	Y+14, r1	; 0x0e
			}
		// MotorDrive( , CW, velocity, 0);
		mDrive(&Motor, CW, velocity, 0);
     4fc:	ce 01       	movw	r24, r28
     4fe:	84 96       	adiw	r24, 0x24	; 36
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	4e 85       	ldd	r20, Y+14	; 0x0e
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <mDrive>
		// MotorDrive( , CW, velocity, 1);
		mDrive(&Motor, CW, velocity, 1);
     50a:	ce 01       	movw	r24, r28
     50c:	84 96       	adiw	r24, 0x24	; 36
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	4e 85       	ldd	r20, Y+14	; 0x0e
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <mDrive>

		// Ç‡ÇµÅCLÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// lAirAction = ON
		if( controller->detail.Button.L && ! lPushed )
     518:	e8 89       	ldd	r30, Y+16	; 0x10
     51a:	f9 89       	ldd	r31, Y+17	; 0x11
     51c:	81 81       	ldd	r24, Z+1	; 0x01
     51e:	80 72       	andi	r24, 0x20	; 32
     520:	88 23       	and	r24, r24
     522:	71 f0       	breq	.+28     	; 0x540 <main+0x472>
     524:	9f 81       	ldd	r25, Y+7	; 0x07
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	98 27       	eor	r25, r24
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	89 27       	eor	r24, r25
     52e:	88 23       	and	r24, r24
     530:	39 f4       	brne	.+14     	; 0x540 <main+0x472>
			{
				lAirAction = ON;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	8d 87       	std	Y+13, r24	; 0x0d
				lPushed = true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	8f 83       	std	Y+7, r24	; 0x07
				lAirTimeCount = 23;
     53a:	87 e1       	ldi	r24, 0x17	; 23
     53c:	8d 83       	std	Y+5, r24	; 0x05
     53e:	5a c0       	rjmp	.+180    	; 0x5f4 <main+0x526>
			}
		else if( ! controller->detail.Button.L && lPushed )
     540:	e8 89       	ldd	r30, Y+16	; 0x10
     542:	f9 89       	ldd	r31, Y+17	; 0x11
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	80 72       	andi	r24, 0x20	; 32
     548:	88 23       	and	r24, r24
     54a:	39 f4       	brne	.+14     	; 0x55a <main+0x48c>
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	89 27       	eor	r24, r25
     552:	88 23       	and	r24, r24
     554:	11 f4       	brne	.+4      	; 0x55a <main+0x48c>
			{
				lPushed = false;
     556:	1f 82       	std	Y+7, r1	; 0x07
     558:	4d c0       	rjmp	.+154    	; 0x5f4 <main+0x526>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZLÉ{É^ÉìÇ™âüâ∫ÅDÇ©Ç¬zlPushedÇ™ãUÇ»ÇÁ
			// lAirAction = ON
			// zlPushed = ê^
			// lAirTimeCount = Å†
		else if( controller->detail.Button.ZL && ! zlPushed && ! lPushed)
     55a:	e8 89       	ldd	r30, Y+16	; 0x10
     55c:	f9 89       	ldd	r31, Y+17	; 0x11
     55e:	81 81       	ldd	r24, Z+1	; 0x01
     560:	88 70       	andi	r24, 0x08	; 8
     562:	88 23       	and	r24, r24
     564:	a9 f0       	breq	.+42     	; 0x590 <main+0x4c2>
     566:	9b 85       	ldd	r25, Y+11	; 0x0b
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	98 27       	eor	r25, r24
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	89 27       	eor	r24, r25
     570:	88 23       	and	r24, r24
     572:	71 f4       	brne	.+28     	; 0x590 <main+0x4c2>
     574:	9f 81       	ldd	r25, Y+7	; 0x07
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	98 27       	eor	r25, r24
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	89 27       	eor	r24, r25
     57e:	88 23       	and	r24, r24
     580:	39 f4       	brne	.+14     	; 0x590 <main+0x4c2>
			{
				lAirAction = ON;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8d 87       	std	Y+13, r24	; 0x0d
				zlPushed = true;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	8b 87       	std	Y+11, r24	; 0x0b
				lAirTimeCount = 2;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	8d 83       	std	Y+5, r24	; 0x05
     58e:	32 c0       	rjmp	.+100    	; 0x5f4 <main+0x526>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZLÉ{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬zlPushedÇ™ê^Ç»ÇÁ
			// zlPushed = ãU
		else if( ! controller->detail.Button.ZL && zlPushed )
     590:	e8 89       	ldd	r30, Y+16	; 0x10
     592:	f9 89       	ldd	r31, Y+17	; 0x11
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	88 70       	andi	r24, 0x08	; 8
     598:	88 23       	and	r24, r24
     59a:	39 f4       	brne	.+14     	; 0x5aa <main+0x4dc>
     59c:	8b 85       	ldd	r24, Y+11	; 0x0b
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	89 27       	eor	r24, r25
     5a2:	88 23       	and	r24, r24
     5a4:	11 f4       	brne	.+4      	; 0x5aa <main+0x4dc>
			{
				zlPushed = false;
     5a6:	1b 86       	std	Y+11, r1	; 0x0b
     5a8:	25 c0       	rjmp	.+74     	; 0x5f4 <main+0x526>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ©É{É^ÉìÇ™âüâ∫Ç≈ÅCÇ©Ç¬leftPushedÇ™ãUÇ»ÇÁ
			// lAirAction = ON
			// leftPushed = ê^
			// lAirTimeCount = Åõ
		else if( controller->detail.Button.LEFT && ! leftPushed )
     5aa:	e8 89       	ldd	r30, Y+16	; 0x10
     5ac:	f9 89       	ldd	r31, Y+17	; 0x11
     5ae:	80 81       	ld	r24, Z
     5b0:	80 78       	andi	r24, 0x80	; 128
     5b2:	88 23       	and	r24, r24
     5b4:	71 f0       	breq	.+28     	; 0x5d2 <main+0x504>
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	98 27       	eor	r25, r24
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	89 27       	eor	r24, r25
     5c0:	88 23       	and	r24, r24
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <main+0x504>
			{
				lAirAction = ON;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	8d 87       	std	Y+13, r24	; 0x0d
				leftPushed = true;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	88 87       	std	Y+8, r24	; 0x08
				lAirTimeCount = 10;
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	8d 83       	std	Y+5, r24	; 0x05
     5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <main+0x526>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ©É{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬leftPushedÇ™ê^Ç»ÇÁ
			// leftPushed = ãU
		else if( ! controller->detail.Button.LEFT && leftPushed )
     5d2:	e8 89       	ldd	r30, Y+16	; 0x10
     5d4:	f9 89       	ldd	r31, Y+17	; 0x11
     5d6:	80 81       	ld	r24, Z
     5d8:	80 78       	andi	r24, 0x80	; 128
     5da:	88 23       	and	r24, r24
     5dc:	39 f4       	brne	.+14     	; 0x5ec <main+0x51e>
     5de:	88 85       	ldd	r24, Y+8	; 0x08
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	89 27       	eor	r24, r25
     5e4:	88 23       	and	r24, r24
     5e6:	11 f4       	brne	.+4      	; 0x5ec <main+0x51e>
			{
				leftPushed = false;
     5e8:	18 86       	std	Y+8, r1	; 0x08
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <main+0x526>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅClAirTimeCountÇ™0Ç»ÇÁ
			// lAirAction = OFF
		else if( lAirTimeCount == 0 )
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	88 23       	and	r24, r24
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <main+0x526>
			{
				lAirAction = OFF;
     5f2:	1d 86       	std	Y+13, r1	; 0x0d
			}
		// Ç‡ÇµÅClAirTimeCountÇ™0Ç≈Ç»ÇØÇÍÇŒ
			// lAirTimeCountÇÉfÉNÉäÉÅÉìÉg
		if( lAirTimeCount != 0 )
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	88 23       	and	r24, r24
     5f8:	19 f0       	breq	.+6      	; 0x600 <main+0x532>
			{
				lAirTimeCount--;
     5fa:	8d 81       	ldd	r24, Y+5	; 0x05
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	8d 83       	std	Y+5, r24	; 0x05
			}
		// AirDrive()

		// Ç‡ÇµRÉ{É^ÉìÇ™âüâ∫Ç»ÇÁ
			// rAirAction = ON
		if( controller->detail.Button.R && ! rPushed )
     600:	e8 89       	ldd	r30, Y+16	; 0x10
     602:	f9 89       	ldd	r31, Y+17	; 0x11
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	80 74       	andi	r24, 0x40	; 64
     608:	88 23       	and	r24, r24
     60a:	71 f0       	breq	.+28     	; 0x628 <main+0x55a>
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	98 27       	eor	r25, r24
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	89 27       	eor	r24, r25
     616:	88 23       	and	r24, r24
     618:	39 f4       	brne	.+14     	; 0x628 <main+0x55a>
			{
				rAirAction = ON;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	8c 87       	std	Y+12, r24	; 0x0c
				rPushed = true;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8e 83       	std	Y+6, r24	; 0x06
				rAirTimeCount = 23;
     622:	87 e1       	ldi	r24, 0x17	; 23
     624:	8c 83       	std	Y+4, r24	; 0x04
     626:	5a c0       	rjmp	.+180    	; 0x6dc <main+0x60e>
			}
		else if( ! controller->detail.Button.R && rPushed )
     628:	e8 89       	ldd	r30, Y+16	; 0x10
     62a:	f9 89       	ldd	r31, Y+17	; 0x11
     62c:	81 81       	ldd	r24, Z+1	; 0x01
     62e:	80 74       	andi	r24, 0x40	; 64
     630:	88 23       	and	r24, r24
     632:	39 f4       	brne	.+14     	; 0x642 <main+0x574>
     634:	8e 81       	ldd	r24, Y+6	; 0x06
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	89 27       	eor	r24, r25
     63a:	88 23       	and	r24, r24
     63c:	11 f4       	brne	.+4      	; 0x642 <main+0x574>
			{
				rPushed = false;
     63e:	1e 82       	std	Y+6, r1	; 0x06
     640:	4d c0       	rjmp	.+154    	; 0x6dc <main+0x60e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZRÉ{É^ÉìÇ™âüâ∫ÅDÇ©Ç¬zrPushedÇ™ãUÇ»ÇÁ
			// rAirAction = ON
			// zrPushed = ê^
			// rAirTimeCount = Å†
		else if( controller->detail.Button.ZR && ! zrPushed  && ! rPushed )
     642:	e8 89       	ldd	r30, Y+16	; 0x10
     644:	f9 89       	ldd	r31, Y+17	; 0x11
     646:	81 81       	ldd	r24, Z+1	; 0x01
     648:	80 71       	andi	r24, 0x10	; 16
     64a:	88 23       	and	r24, r24
     64c:	a9 f0       	breq	.+42     	; 0x678 <main+0x5aa>
     64e:	9a 85       	ldd	r25, Y+10	; 0x0a
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	98 27       	eor	r25, r24
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	89 27       	eor	r24, r25
     658:	88 23       	and	r24, r24
     65a:	71 f4       	brne	.+28     	; 0x678 <main+0x5aa>
     65c:	9e 81       	ldd	r25, Y+6	; 0x06
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	98 27       	eor	r25, r24
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	89 27       	eor	r24, r25
     666:	88 23       	and	r24, r24
     668:	39 f4       	brne	.+14     	; 0x678 <main+0x5aa>
			{
				rAirAction = ON;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	8c 87       	std	Y+12, r24	; 0x0c
				zrPushed = true;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	8a 87       	std	Y+10, r24	; 0x0a
				rAirTimeCount = 2;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	8c 83       	std	Y+4, r24	; 0x04
     676:	32 c0       	rjmp	.+100    	; 0x6dc <main+0x60e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCZRÉ{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅCÇ©Ç¬zrPushedÇ™ê^Ç»ÇÁ
			// zrPushed = ãU
		else if( ! controller->detail.Button.ZR && zrPushed )
     678:	e8 89       	ldd	r30, Y+16	; 0x10
     67a:	f9 89       	ldd	r31, Y+17	; 0x11
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	80 71       	andi	r24, 0x10	; 16
     680:	88 23       	and	r24, r24
     682:	39 f4       	brne	.+14     	; 0x692 <main+0x5c4>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	89 27       	eor	r24, r25
     68a:	88 23       	and	r24, r24
     68c:	11 f4       	brne	.+4      	; 0x692 <main+0x5c4>
			{
				zrPushed = false;
     68e:	1a 86       	std	Y+10, r1	; 0x0a
     690:	25 c0       	rjmp	.+74     	; 0x6dc <main+0x60e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ®É{É^ÉìÇ™âüâ∫Ç≈ÅCÇ©Ç¬rightPushedÇ™ãUÇ»ÇÁ
			// rAirAction = ON
			// rightPushed = ê^
			// rAirTimeCount = Åõ
		else if( controller->detail.Button.RIGHT && ! rightPushed )
     692:	e8 89       	ldd	r30, Y+16	; 0x10
     694:	f9 89       	ldd	r31, Y+17	; 0x11
     696:	80 81       	ld	r24, Z
     698:	80 72       	andi	r24, 0x20	; 32
     69a:	88 23       	and	r24, r24
     69c:	71 f0       	breq	.+28     	; 0x6ba <main+0x5ec>
     69e:	99 85       	ldd	r25, Y+9	; 0x09
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	98 27       	eor	r25, r24
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	89 27       	eor	r24, r25
     6a8:	88 23       	and	r24, r24
     6aa:	39 f4       	brne	.+14     	; 0x6ba <main+0x5ec>
			{
				rAirAction = ON;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	8c 87       	std	Y+12, r24	; 0x0c
				rightPushed = true;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	89 87       	std	Y+9, r24	; 0x09
				rAirTimeCount = 10;
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	8c 83       	std	Y+4, r24	; 0x04
     6b8:	11 c0       	rjmp	.+34     	; 0x6dc <main+0x60e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCÅ®É{É^ÉìÇ™âüâ∫Ç≈Ç»Ç≠ÅDÇ©Ç¬rightPushedÇ™ê^Ç»ÇÁ
			// rightPushed = ãU
		else if( ! controller->detail.Button.RIGHT && rightPushed )
     6ba:	e8 89       	ldd	r30, Y+16	; 0x10
     6bc:	f9 89       	ldd	r31, Y+17	; 0x11
     6be:	80 81       	ld	r24, Z
     6c0:	80 72       	andi	r24, 0x20	; 32
     6c2:	88 23       	and	r24, r24
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <main+0x606>
     6c6:	89 85       	ldd	r24, Y+9	; 0x09
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	89 27       	eor	r24, r25
     6cc:	88 23       	and	r24, r24
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <main+0x606>
			{
				rightPushed = false;
     6d0:	19 86       	std	Y+9, r1	; 0x09
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <main+0x60e>
			}
		// ÇªÇ§Ç≈Ç»Ç≠ÅCrAirTimeCountÇ™0Ç»ÇÁ
			// rAirTimeCountÇÉfÉNÉäÉÅÉìÉg
		else if( rAirTimeCount == 0 )
     6d4:	8c 81       	ldd	r24, Y+4	; 0x04
     6d6:	88 23       	and	r24, r24
     6d8:	09 f4       	brne	.+2      	; 0x6dc <main+0x60e>
			{
				rAirAction = OFF;
     6da:	1c 86       	std	Y+12, r1	; 0x0c
			}
		// Ç‡ÇµÅCrAirTimeCountÇ™0Ç≈Ç»ÇØÇÍÇŒ
			// rAirTimeCountÇÉfÉNÉäÉÅÉìÉg
		if( rAirTimeCount != 0 )
     6dc:	8c 81       	ldd	r24, Y+4	; 0x04
     6de:	88 23       	and	r24, r24
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <main+0x61a>
			{
				rAirTimeCount--;
     6e2:	8c 81       	ldd	r24, Y+4	; 0x04
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	8c 83       	std	Y+4, r24	; 0x04
			}
		// AirDrive()
		port = ( ( rAirAction << 3 ) | ( lAirAction << 2 ) | ( rAirAction << 1 ) | lAirAction );
     6e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	28 2f       	mov	r18, r24
     6fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	28 2b       	or	r18, r24
     70c:	8c 85       	ldd	r24, Y+12	; 0x0c
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	92 2f       	mov	r25, r18
     718:	98 2b       	or	r25, r24
     71a:	8d 85       	ldd	r24, Y+13	; 0x0d
     71c:	89 2b       	or	r24, r25
     71e:	8a 83       	std	Y+2, r24	; 0x02
		aDrive(&Throw,port, ( rAirAction | lAirAction ) );
     720:	8c 85       	ldd	r24, Y+12	; 0x0c
     722:	28 2f       	mov	r18, r24
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	82 2b       	or	r24, r18
     72e:	93 2b       	or	r25, r19
     730:	1f ae       	std	Y+63, r1	; 0x3f
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	11 f0       	breq	.+4      	; 0x73a <main+0x66c>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	8f af       	std	Y+63, r24	; 0x3f
     73a:	ce 01       	movw	r24, r28
     73c:	8d 96       	adiw	r24, 0x2d	; 45
     73e:	6a 81       	ldd	r22, Y+2	; 0x02
     740:	4f ad       	ldd	r20, Y+63	; 0x3f
     742:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <aDrive>
//		aDrive(&Throw,port,act);
		
#if SUPPLY_WATCHING
/*ÉoÉãÉXÉÇÅ[Éh*/
		/*ÉoÉãÉX!!!!!*/
		if(controller->detail.Button.SELECT&&controller->detail.Button.START){
     746:	e8 89       	ldd	r30, Y+16	; 0x10
     748:	f9 89       	ldd	r31, Y+17	; 0x11
     74a:	81 81       	ldd	r24, Z+1	; 0x01
     74c:	81 70       	andi	r24, 0x01	; 1
     74e:	88 23       	and	r24, r24
     750:	61 f0       	breq	.+24     	; 0x76a <main+0x69c>
     752:	e8 89       	ldd	r30, Y+16	; 0x10
     754:	f9 89       	ldd	r31, Y+17	; 0x11
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	84 70       	andi	r24, 0x04	; 4
     75a:	88 23       	and	r24, r24
     75c:	31 f0       	breq	.+12     	; 0x76a <main+0x69c>
			e_flag=E_ON;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	89 83       	std	Y+1, r24	; 0x01
			port&=0xCF;
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	8f 7c       	andi	r24, 0xCF	; 207
     766:	8a 83       	std	Y+2, r24	; 0x02
     768:	0a c0       	rjmp	.+20     	; 0x77e <main+0x6b0>
		}
		/*ïúäà!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     76a:	e8 89       	ldd	r30, Y+16	; 0x10
     76c:	f9 89       	ldd	r31, Y+17	; 0x11
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	82 70       	andi	r24, 0x02	; 2
     772:	88 23       	and	r24, r24
     774:	19 f0       	breq	.+6      	; 0x77c <main+0x6ae>
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	01 c0       	rjmp	.+2      	; 0x77e <main+0x6b0>
		else e_flag=E_KEEP;	
     77c:	19 82       	std	Y+1, r1	; 0x01
		i2cStatus = true;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	8b 83       	std	Y+3, r24	; 0x03
#endif

/*I2C Writeing And Check*/

		i2cStatus &= i2cWrite(&Motor); wait_us(4);  
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	08 2f       	mov	r16, r24
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	ce 01       	movw	r24, r28
     78a:	84 96       	adiw	r24, 0x24	; 36
     78c:	0e 94 24 0a 	call	0x1448	; 0x1448 <i2cWrite>
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	80 23       	and	r24, r16
     796:	91 23       	and	r25, r17
     798:	1b 82       	std	Y+3, r1	; 0x03
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	11 f0       	breq	.+4      	; 0x7a2 <main+0x6d4>
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	8b 83       	std	Y+3, r24	; 0x03
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <wait_us>
#if SUPPLY_WATCHING
		i2cStatus &= Emergency(&EStop,e_flag);	
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	08 2f       	mov	r16, r24
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	29 81       	ldd	r18, Y+1	; 0x01
     7b2:	ce 01       	movw	r24, r28
     7b4:	c6 96       	adiw	r24, 0x36	; 54
     7b6:	62 2f       	mov	r22, r18
     7b8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <Emergency>
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	80 23       	and	r24, r16
     7c2:	91 23       	and	r25, r17
     7c4:	1b 82       	std	Y+3, r1	; 0x03
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	11 f0       	breq	.+4      	; 0x7ce <main+0x700>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8b 83       	std	Y+3, r24	; 0x03
		i2cStatus &= i2cWrite(&EStop); wait_us(4);
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	08 2f       	mov	r16, r24
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	c6 96       	adiw	r24, 0x36	; 54
     7d8:	0e 94 24 0a 	call	0x1448	; 0x1448 <i2cWrite>
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 23       	and	r24, r16
     7e2:	91 23       	and	r25, r17
     7e4:	1b 82       	std	Y+3, r1	; 0x03
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	11 f0       	breq	.+4      	; 0x7ee <main+0x720>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	8b 83       	std	Y+3, r24	; 0x03
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <wait_us>
#endif
		i2cStatus &= i2cWrite(&Throw); wait_us(4);
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	08 2f       	mov	r16, r24
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	ce 01       	movw	r24, r28
     7fe:	8d 96       	adiw	r24, 0x2d	; 45
     800:	0e 94 24 0a 	call	0x1448	; 0x1448 <i2cWrite>
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	80 23       	and	r24, r16
     80a:	91 23       	and	r25, r17
     80c:	1b 82       	std	Y+3, r1	; 0x03
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	11 f0       	breq	.+4      	; 0x816 <main+0x748>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	8b 83       	std	Y+3, r24	; 0x03
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <wait_us>
		i2cCheck(i2cStatus);
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <i2cCheck>

/********Ç±ÇÍà»ç~ÇèëÇ´ä∑Ç¶ÇÈÇ±Ç∆ÇÕêÑèßÇ≥ÇÍÇ»Ç¢ÇÊ!!!********/
		wait_ms(15);
     824:	8f e0       	ldi	r24, 0x0F	; 15
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <wait_ms>
     82c:	65 cd       	rjmp	.-1334   	; 0x2f8 <main+0x22a>

0000082e <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     836:	10 92 7a 01 	sts	0x017A, r1
     83a:	15 c0       	rjmp	.+42     	; 0x866 <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     83c:	80 91 7a 01 	lds	r24, 0x017A
     840:	28 2f       	mov	r18, r24
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	80 91 7a 01 	lds	r24, 0x017A
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	fc 01       	movw	r30, r24
     84e:	e3 5c       	subi	r30, 0xC3	; 195
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	80 81       	ld	r24, Z
     854:	f9 01       	movw	r30, r18
     856:	e2 58       	subi	r30, 0x82	; 130
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     85c:	80 91 7a 01 	lds	r24, 0x017A
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	80 93 7a 01 	sts	0x017A, r24
     866:	80 91 7a 01 	lds	r24, 0x017A
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	38 f3       	brcs	.-50     	; 0x83c <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
	cli();
     87c:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     87e:	10 92 7a 01 	sts	0x017A, r1
     882:	15 c0       	rjmp	.+42     	; 0x8ae <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     884:	80 91 7a 01 	lds	r24, 0x017A
     888:	28 2f       	mov	r18, r24
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	80 91 7a 01 	lds	r24, 0x017A
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	e2 58       	subi	r30, 0x82	; 130
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	80 81       	ld	r24, Z
     89c:	f9 01       	movw	r30, r18
     89e:	ee 57       	subi	r30, 0x7E	; 126
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     8a4:	80 91 7a 01 	lds	r24, 0x017A
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 93 7a 01 	sts	0x017A, r24
     8ae:	80 91 7a 01 	lds	r24, 0x017A
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	38 f3       	brcs	.-50     	; 0x884 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     8b6:	78 94       	sei
	return &keepCtrlData;
     8b8:	82 e8       	ldi	r24, 0x82	; 130
     8ba:	91 e0       	ldi	r25, 0x01	; 1
}
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <__vector_20>:


ISR(USART0_RX_vect)
{
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	00 90 5b 00 	lds	r0, 0x005B
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     8f2:	e6 ec       	ldi	r30, 0xC6	; 198
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	80 93 9e 01 	sts	0x019E, r24

	if(phase){
     8fc:	80 91 7c 01 	lds	r24, 0x017C
     900:	88 23       	and	r24, r24
     902:	09 f4       	brne	.+2      	; 0x906 <__vector_20+0x44>
     904:	52 c0       	rjmp	.+164    	; 0x9aa <__vector_20+0xe8>
		packet[cnt] = val;
     906:	80 91 7b 01 	lds	r24, 0x017B
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	20 91 9e 01 	lds	r18, 0x019E
     912:	fc 01       	movw	r30, r24
     914:	ea 57       	subi	r30, 0x7A	; 122
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     91a:	80 91 7b 01 	lds	r24, 0x017B
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	b0 f4       	brcc	.+44     	; 0x94e <__vector_20+0x8c>
			if(val != check[cnt]){
     922:	80 91 7b 01 	lds	r24, 0x017B
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	ef 5b       	subi	r30, 0xBF	; 191
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	90 81       	ld	r25, Z
     932:	80 91 9e 01 	lds	r24, 0x019E
     936:	98 17       	cp	r25, r24
     938:	91 f1       	breq	.+100    	; 0x99e <__vector_20+0xdc>
				phase = false;
     93a:	10 92 7c 01 	sts	0x017C, r1
//				uart1_putchar('@');
				LED(0,false);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
				beep(1);
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
     94c:	28 c0       	rjmp	.+80     	; 0x99e <__vector_20+0xdc>
			}
		}else if(cnt==8){
     94e:	80 91 7b 01 	lds	r24, 0x017B
     952:	88 30       	cpi	r24, 0x08	; 8
     954:	21 f5       	brne	.+72     	; 0x99e <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     956:	80 91 8b 01 	lds	r24, 0x018B
     95a:	80 93 7e 01 	sts	0x017E, r24
			ctrlData.buf[1] = packet[6];
     95e:	80 91 8c 01 	lds	r24, 0x018C
     962:	80 93 7f 01 	sts	0x017F, r24
			ctrlData.buf[2] = packet[7];
     966:	80 91 8d 01 	lds	r24, 0x018D
     96a:	80 93 80 01 	sts	0x0180, r24
			ctrlData.buf[3] = packet[8];
     96e:	80 91 8e 01 	lds	r24, 0x018E
     972:	80 93 81 01 	sts	0x0181, r24
			phase = false;
     976:	10 92 7c 01 	sts	0x017C, r1
			wdt_reset();
     97a:	a8 95       	wdr
			LED(0,true);
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
			if(EmergencyStatus()) beep(0);
     984:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <EmergencyStatus>
     988:	88 23       	and	r24, r24
     98a:	19 f0       	breq	.+6      	; 0x992 <__vector_20+0xd0>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
			ovf_cnt = 0;
     992:	10 92 7d 01 	sts	0x017D, r1
			TCNT1 = 0;
     996:	e4 e8       	ldi	r30, 0x84	; 132
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	11 82       	std	Z+1, r1	; 0x01
     99c:	10 82       	st	Z, r1
		}
		cnt++;
     99e:	80 91 7b 01 	lds	r24, 0x017B
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	80 93 7b 01 	sts	0x017B, r24
     9a8:	09 c0       	rjmp	.+18     	; 0x9bc <__vector_20+0xfa>
	}else{
		if(val=='*'){
     9aa:	80 91 9e 01 	lds	r24, 0x019E
     9ae:	8a 32       	cpi	r24, 0x2A	; 42
     9b0:	29 f4       	brne	.+10     	; 0x9bc <__vector_20+0xfa>
		cnt = 0;
     9b2:	10 92 7b 01 	sts	0x017B, r1
		phase = true;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 7c 01 	sts	0x017C, r24
		}
	}

}
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	ff 91       	pop	r31
     9c2:	ef 91       	pop	r30
     9c4:	bf 91       	pop	r27
     9c6:	af 91       	pop	r26
     9c8:	9f 91       	pop	r25
     9ca:	8f 91       	pop	r24
     9cc:	7f 91       	pop	r23
     9ce:	6f 91       	pop	r22
     9d0:	5f 91       	pop	r21
     9d2:	4f 91       	pop	r20
     9d4:	3f 91       	pop	r19
     9d6:	2f 91       	pop	r18
     9d8:	0f 90       	pop	r0
     9da:	00 92 5b 00 	sts	0x005B, r0
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <__vector_15>:

ISR (TIMER1_OVF_vect){
     9e8:	1f 92       	push	r1
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	0f 92       	push	r0
     9f0:	00 90 5b 00 	lds	r0, 0x005B
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     a0c:	80 91 7d 01 	lds	r24, 0x017D
     a10:	8f 5f       	subi	r24, 0xFF	; 255
     a12:	80 93 7d 01 	sts	0x017D, r24
	if(ovf_cnt>150){
     a16:	80 91 7d 01 	lds	r24, 0x017D
     a1a:	87 39       	cpi	r24, 0x97	; 151
     a1c:	f0 f0       	brcs	.+60     	; 0xa5a <__vector_15+0x72>
		ovf_cnt = 0;
     a1e:	10 92 7d 01 	sts	0x017D, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     a22:	10 92 7a 01 	sts	0x017A, r1
     a26:	15 c0       	rjmp	.+42     	; 0xa52 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     a28:	80 91 7a 01 	lds	r24, 0x017A
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	80 91 7a 01 	lds	r24, 0x017A
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	fc 01       	movw	r30, r24
     a3a:	e3 5c       	subi	r30, 0xC3	; 195
     a3c:	fe 4f       	sbci	r31, 0xFE	; 254
     a3e:	80 81       	ld	r24, Z
     a40:	f9 01       	movw	r30, r18
     a42:	e2 58       	subi	r30, 0x82	; 130
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     a48:	80 91 7a 01 	lds	r24, 0x017A
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	80 93 7a 01 	sts	0x017A, r24
     a52:	80 91 7a 01 	lds	r24, 0x017A
     a56:	84 30       	cpi	r24, 0x04	; 4
     a58:	38 f3       	brcs	.-50     	; 0xa28 <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	00 92 5b 00 	sts	0x005B, r0
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <Byte2Str>:
/// ÉoÉCÉgÅi0x00Å`0xFFÅjÇÃêîÇ2åÖÇÃï∂éöóÒÇ…ïœä∑
/// </summary>
/// <param name="num">ïœä∑ëŒè€ÇÃêîéö</param>
/// <param name="str">ïœä∑å„ÇÃï∂éöóÒÇäiî[Ç∑ÇÈóÃàÊ</param>
void Byte2Str(unsigned char num, char *str)
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <Byte2Str+0x6>
     a80:	0f 92       	push	r0
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	7b 83       	std	Y+3, r23	; 0x03
     a8a:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	82 95       	swap	r24
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	fc 01       	movw	r30, r24
     a98:	eb 5b       	subi	r30, 0xBB	; 187
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	80 81       	ld	r24, Z
     a9e:	ea 81       	ldd	r30, Y+2	; 0x02
     aa0:	fb 81       	ldd	r31, Y+3	; 0x03
     aa2:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	9b 81       	ldd	r25, Y+3	; 0x03
     aa8:	dc 01       	movw	r26, r24
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	8f 70       	andi	r24, 0x0F	; 15
     ab4:	90 70       	andi	r25, 0x00	; 0
     ab6:	fc 01       	movw	r30, r24
     ab8:	eb 5b       	subi	r30, 0xBB	; 187
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	80 81       	ld	r24, Z
     abe:	8c 93       	st	X, r24
	str[2] = '\0';
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	fc 01       	movw	r30, r24
     ac6:	32 96       	adiw	r30, 0x02	; 2
     ac8:	10 82       	st	Z, r1
}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	00 d0       	rcall	.+0      	; 0xae0 <mu2_command+0xa>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <mu2_command+0xc>
     ae2:	0f 92       	push	r0
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	7c 83       	std	Y+4, r23	; 0x04
     aee:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     af0:	80 e4       	ldi	r24, 0x40	; 64
     af2:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(cmd[0]);
     af6:	e9 81       	ldd	r30, Y+1	; 0x01
     af8:	fa 81       	ldd	r31, Y+2	; 0x02
     afa:	80 81       	ld	r24, Z
     afc:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(cmd[1]);
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	fc 01       	movw	r30, r24
     b06:	31 96       	adiw	r30, 0x01	; 1
     b08:	80 81       	ld	r24, Z
     b0a:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
     b0e:	0a c0       	rjmp	.+20     	; 0xb24 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     b10:	eb 81       	ldd	r30, Y+3	; 0x03
     b12:	fc 81       	ldd	r31, Y+4	; 0x04
     b14:	80 81       	ld	r24, Z
     b16:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
		val++;
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     b24:	eb 81       	ldd	r30, Y+3	; 0x03
     b26:	fc 81       	ldd	r31, Y+4	; 0x04
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	89 f7       	brne	.-30     	; 0xb10 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     b2e:	8d e0       	ldi	r24, 0x0D	; 13
     b30:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(0x0a);
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	for(i=0;i<10;i++){
     b3a:	10 92 9f 01 	sts	0x019F, r1
     b3e:	32 c0       	rjmp	.+100    	; 0xba4 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     b40:	80 91 9f 01 	lds	r24, 0x019F
     b44:	08 2f       	mov	r16, r24
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	0e 94 3b 07 	call	0xe76	; 0xe76 <uart0_getchar>
     b4c:	f8 01       	movw	r30, r16
     b4e:	e0 56       	subi	r30, 0x60	; 96
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     b54:	80 91 9f 01 	lds	r24, 0x019F
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	fc 01       	movw	r30, r24
     b5e:	e0 56       	subi	r30, 0x60	; 96
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	80 81       	ld	r24, Z
     b64:	0e 94 71 07 	call	0xee2	; 0xee2 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     b68:	80 91 9f 01 	lds	r24, 0x019F
     b6c:	88 23       	and	r24, r24
     b6e:	a9 f0       	breq	.+42     	; 0xb9a <mu2_command+0xc4>
     b70:	80 91 9f 01 	lds	r24, 0x019F
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	fc 01       	movw	r30, r24
     b7c:	e0 56       	subi	r30, 0x60	; 96
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	80 81       	ld	r24, Z
     b82:	8d 30       	cpi	r24, 0x0D	; 13
     b84:	51 f4       	brne	.+20     	; 0xb9a <mu2_command+0xc4>
     b86:	80 91 9f 01 	lds	r24, 0x019F
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	e0 56       	subi	r30, 0x60	; 96
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	80 81       	ld	r24, Z
     b96:	8a 30       	cpi	r24, 0x0A	; 10
     b98:	49 f0       	breq	.+18     	; 0xbac <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     b9a:	80 91 9f 01 	lds	r24, 0x019F
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 9f 01 	sts	0x019F, r24
     ba4:	80 91 9f 01 	lds	r24, 0x019F
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	50 f2       	brcs	.-108    	; 0xb40 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     bac:	80 91 a1 01 	lds	r24, 0x01A1
     bb0:	85 34       	cpi	r24, 0x45	; 69
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <mu2_command+0xec>
     bb4:	80 91 a2 01 	lds	r24, 0x01A2
     bb8:	82 35       	cpi	r24, 0x52	; 82
     bba:	19 f4       	brne	.+6      	; 0xbc2 <mu2_command+0xec>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <mu2_command+0xee>
	return 0;
     bc2:	1d 82       	std	Y+5, r1	; 0x05
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <mu2_command_eeprom+0xa>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <mu2_command_eeprom+0xc>
     be6:	0f 92       	push	r0
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	7c 83       	std	Y+4, r23	; 0x04
     bf2:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     bf4:	80 e4       	ldi	r24, 0x40	; 64
     bf6:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(cmd[0]);
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	80 81       	ld	r24, Z
     c00:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(cmd[1]);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	fc 01       	movw	r30, r24
     c0a:	31 96       	adiw	r30, 0x01	; 1
     c0c:	80 81       	ld	r24, Z
     c0e:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	80 81       	ld	r24, Z
     c1a:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
		val++;
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     c28:	eb 81       	ldd	r30, Y+3	; 0x03
     c2a:	fc 81       	ldd	r31, Y+4	; 0x04
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	89 f7       	brne	.-30     	; 0xc14 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     c32:	8f e2       	ldi	r24, 0x2F	; 47
     c34:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar('W');
     c38:	87 e5       	ldi	r24, 0x57	; 87
     c3a:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(0x0d);
     c3e:	8d e0       	ldi	r24, 0x0D	; 13
     c40:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	uart0_putchar(0x0a);
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	0e 94 51 07 	call	0xea2	; 0xea2 <uart0_putchar>
	for(i=0;i<10;i++){
     c4a:	10 92 9f 01 	sts	0x019F, r1
     c4e:	32 c0       	rjmp	.+100    	; 0xcb4 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     c50:	80 91 9f 01 	lds	r24, 0x019F
     c54:	08 2f       	mov	r16, r24
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	0e 94 3b 07 	call	0xe76	; 0xe76 <uart0_getchar>
     c5c:	f8 01       	movw	r30, r16
     c5e:	e0 56       	subi	r30, 0x60	; 96
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     c64:	80 91 9f 01 	lds	r24, 0x019F
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	fc 01       	movw	r30, r24
     c6e:	e0 56       	subi	r30, 0x60	; 96
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	80 81       	ld	r24, Z
     c74:	0e 94 71 07 	call	0xee2	; 0xee2 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     c78:	80 91 9f 01 	lds	r24, 0x019F
     c7c:	88 23       	and	r24, r24
     c7e:	a9 f0       	breq	.+42     	; 0xcaa <mu2_command_eeprom+0xd0>
     c80:	80 91 9f 01 	lds	r24, 0x019F
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	fc 01       	movw	r30, r24
     c8c:	e0 56       	subi	r30, 0x60	; 96
     c8e:	fe 4f       	sbci	r31, 0xFE	; 254
     c90:	80 81       	ld	r24, Z
     c92:	8d 30       	cpi	r24, 0x0D	; 13
     c94:	51 f4       	brne	.+20     	; 0xcaa <mu2_command_eeprom+0xd0>
     c96:	80 91 9f 01 	lds	r24, 0x019F
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	fc 01       	movw	r30, r24
     ca0:	e0 56       	subi	r30, 0x60	; 96
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	80 81       	ld	r24, Z
     ca6:	8a 30       	cpi	r24, 0x0A	; 10
     ca8:	49 f0       	breq	.+18     	; 0xcbc <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     caa:	80 91 9f 01 	lds	r24, 0x019F
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	80 93 9f 01 	sts	0x019F, r24
     cb4:	80 91 9f 01 	lds	r24, 0x019F
     cb8:	8a 30       	cpi	r24, 0x0A	; 10
     cba:	50 f2       	brcs	.-108    	; 0xc50 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     cbc:	80 91 a1 01 	lds	r24, 0x01A1
     cc0:	85 34       	cpi	r24, 0x45	; 69
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <mu2_command_eeprom+0xf8>
     cc4:	80 91 a2 01 	lds	r24, 0x01A2
     cc8:	82 35       	cpi	r24, 0x52	; 82
     cca:	19 f4       	brne	.+6      	; 0xcd2 <mu2_command_eeprom+0xf8>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <mu2_command_eeprom+0xfa>
	return 0;
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2d 97       	sbiw	r28, 0x0d	; 13
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	8b 83       	std	Y+3, r24	; 0x03
     d02:	6d 83       	std	Y+5, r22	; 0x05
     d04:	5f 83       	std	Y+7, r21	; 0x07
     d06:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	9d 87       	std	Y+13, r25	; 0x0d
     d0e:	8c 87       	std	Y+12, r24	; 0x0c
     d10:	8c 85       	ldd	r24, Y+12	; 0x0c
     d12:	9d 85       	ldd	r25, Y+13	; 0x0d
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	31 f0       	breq	.+12     	; 0xd24 <uart_init+0x3a>
     d18:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	91 05       	cpc	r25, r1
     d20:	b1 f1       	breq	.+108    	; 0xd8e <uart_init+0xa4>
     d22:	64 c0       	rjmp	.+200    	; 0xdec <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     d24:	e1 ec       	ldi	r30, 0xC1	; 193
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     d2a:	a2 ec       	ldi	r26, 0xC2	; 194
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e2 ec       	ldi	r30, 0xC2	; 194
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	86 60       	ori	r24, 0x06	; 6
     d36:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     d38:	1a 82       	std	Y+2, r1	; 0x02
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <uart_init+0x5e>
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	23 e1       	ldi	r18, 0x13	; 19
     d4e:	88 38       	cpi	r24, 0x88	; 136
     d50:	92 07       	cpc	r25, r18
     d52:	ac f3       	brlt	.-22     	; 0xd3e <uart_init+0x54>
			UCSR0B = option;					
     d54:	e1 ec       	ldi	r30, 0xC1	; 193
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     d5c:	e5 ec       	ldi	r30, 0xC5	; 197
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	9f 81       	ldd	r25, Y+7	; 0x07
     d64:	89 2f       	mov	r24, r25
     d66:	99 27       	eor	r25, r25
     d68:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     d6a:	e4 ec       	ldi	r30, 0xC4	; 196
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8e 81       	ldd	r24, Y+6	; 0x06
     d70:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     d72:	e0 ec       	ldi	r30, 0xC0	; 192
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     d78:	a0 ec       	ldi	r26, 0xC0	; 192
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e0 ec       	ldi	r30, 0xC0	; 192
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	83 7e       	andi	r24, 0xE3	; 227
     d84:	8c 93       	st	X, r24
			UDR0 = 0;
     d86:	e6 ec       	ldi	r30, 0xC6	; 198
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	10 82       	st	Z, r1
     d8c:	34 c0       	rjmp	.+104    	; 0xdf6 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     d8e:	ed ec       	ldi	r30, 0xCD	; 205
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	8e 81       	ldd	r24, Y+6	; 0x06
     d94:	9f 81       	ldd	r25, Y+7	; 0x07
     d96:	89 2f       	mov	r24, r25
     d98:	99 27       	eor	r25, r25
     d9a:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     d9c:	ec ec       	ldi	r30, 0xCC	; 204
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <uart_init+0xca>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	23 e1       	ldi	r18, 0x13	; 19
     dba:	88 38       	cpi	r24, 0x88	; 136
     dbc:	92 07       	cpc	r25, r18
     dbe:	ac f3       	brlt	.-22     	; 0xdaa <uart_init+0xc0>
			UCSR1B |= option;
     dc0:	a9 ec       	ldi	r26, 0xC9	; 201
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e9 ec       	ldi	r30, 0xC9	; 201
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	90 81       	ld	r25, Z
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	89 2b       	or	r24, r25
     dce:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     dd0:	e8 ec       	ldi	r30, 0xC8	; 200
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     dd6:	a8 ec       	ldi	r26, 0xC8	; 200
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 ec       	ldi	r30, 0xC8	; 200
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	83 7e       	andi	r24, 0xE3	; 227
     de2:	8c 93       	st	X, r24
			UDR1 = 0;
     de4:	ee ec       	ldi	r30, 0xCE	; 206
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	10 82       	st	Z, r1
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <uart_init+0x10c>
			break;
		default:
			return -1;
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	99 87       	std	Y+9, r25	; 0x09
     df2:	88 87       	std	Y+8, r24	; 0x08
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <uart_init+0x110>
	}
	return 0;
     df6:	19 86       	std	Y+9, r1	; 0x09
     df8:	18 86       	std	Y+8, r1	; 0x08
     dfa:	88 85       	ldd	r24, Y+8	; 0x08
     dfc:	99 85       	ldd	r25, Y+9	; 0x09
}
     dfe:	2d 96       	adiw	r28, 0x0d	; 13
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <uart_setbuffer+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <uart_setbuffer+0x8>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <uart_setbuffer+0xa>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	7c 83       	std	Y+4, r23	; 0x04
     e24:	6b 83       	std	Y+3, r22	; 0x03
     e26:	5e 83       	std	Y+6, r21	; 0x06
     e28:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	99 23       	and	r25, r25
     e30:	cc f0       	brlt	.+50     	; 0xe64 <uart_setbuffer+0x54>
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	91 05       	cpc	r25, r1
     e3a:	a4 f4       	brge	.+40     	; 0xe64 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     e3c:	29 81       	ldd	r18, Y+1	; 0x01
     e3e:	3a 81       	ldd	r19, Y+2	; 0x02
     e40:	c9 01       	movw	r24, r18
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	84 55       	subi	r24, 0x54	; 84
     e54:	9e 4f       	sbci	r25, 0xFE	; 254
     e56:	4d 81       	ldd	r20, Y+5	; 0x05
     e58:	5e 81       	ldd	r21, Y+6	; 0x06
     e5a:	2b 81       	ldd	r18, Y+3	; 0x03
     e5c:	3c 81       	ldd	r19, Y+4	; 0x04
     e5e:	b9 01       	movw	r22, r18
     e60:	0e 94 00 09 	call	0x1200	; 0x1200 <RingInit>
}
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     e7e:	e0 ec       	ldi	r30, 0xC0	; 192
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	dc f7       	brge	.-10     	; 0xe7e <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     e88:	a0 ec       	ldi	r26, 0xC0	; 192
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 ec       	ldi	r30, 0xC0	; 192
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	8c 93       	st	X, r24
	return UDR0;
     e96:	e6 ec       	ldi	r30, 0xC6	; 198
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <uart0_putchar>:

int uart0_putchar(char c)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     eae:	e0 ec       	ldi	r30, 0xC0	; 192
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	80 72       	andi	r24, 0x20	; 32
     eba:	90 70       	andi	r25, 0x00	; 0
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	b9 f3       	breq	.-18     	; 0xeae <uart0_putchar+0xc>
	UDR0 = c;
     ec0:	e6 ec       	ldi	r30, 0xC6	; 198
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     ec8:	a0 ec       	ldi	r26, 0xC0	; 192
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e0 ec       	ldi	r30, 0xC0	; 192
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 7d       	andi	r24, 0xDF	; 223
     ed4:	8c 93       	st	X, r24
	
	return 0;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <uart1_putchar>:

int uart1_putchar(char c)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8a 30       	cpi	r24, 0x0A	; 10
     ef2:	a1 f4       	brne	.+40     	; 0xf1c <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     ef4:	e8 ec       	ldi	r30, 0xC8	; 200
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	80 72       	andi	r24, 0x20	; 32
     f00:	90 70       	andi	r25, 0x00	; 0
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	b9 f3       	breq	.-18     	; 0xef4 <uart1_putchar+0x12>
		UDR1 = '\r';
     f06:	ee ec       	ldi	r30, 0xCE	; 206
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8d e0       	ldi	r24, 0x0D	; 13
     f0c:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     f0e:	a8 ec       	ldi	r26, 0xC8	; 200
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 ec       	ldi	r30, 0xC8	; 200
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     f1c:	e8 ec       	ldi	r30, 0xC8	; 200
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	80 72       	andi	r24, 0x20	; 32
     f28:	90 70       	andi	r25, 0x00	; 0
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	b9 f3       	breq	.-18     	; 0xf1c <uart1_putchar+0x3a>
	UDR1 = c;
     f2e:	ee ec       	ldi	r30, 0xCE	; 206
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     f36:	a8 ec       	ldi	r26, 0xC8	; 200
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 ec       	ldi	r30, 0xC8	; 200
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	8c 93       	st	X, r24

	return 0;
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
}
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <uart0_buf_putchar+0x6>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     f62:	ef e5       	ldi	r30, 0x5F	; 95
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     f6c:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	8a 30       	cpi	r24, 0x0A	; 10
     f72:	61 f4       	brne	.+24     	; 0xf8c <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     f74:	8c ea       	ldi	r24, 0xAC	; 172
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	6d e0       	ldi	r22, 0x0D	; 13
     f7a:	0e 94 2e 09 	call	0x125c	; 0x125c <RingPut>
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	29 f4       	brne	.+10     	; 0xf8c <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     f8c:	8c ea       	ldi	r24, 0xAC	; 172
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	6b 81       	ldd	r22, Y+3	; 0x03
     f92:	0e 94 2e 09 	call	0x125c	; 0x125c <RingPut>
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	21 f4       	brne	.+8      	; 0xfa2 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     fa2:	a1 ec       	ldi	r26, 0xC1	; 193
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e1 ec       	ldi	r30, 0xC1	; 193
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 62       	ori	r24, 0x20	; 32
     fae:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     fb0:	ef e5       	ldi	r30, 0x5F	; 95
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 91 aa 01 	lds	r24, 0x01AA
     fb8:	80 83       	st	Z, r24

	return ret;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <uart1_buf_putchar+0x6>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     fd8:	1a 82       	std	Y+2, r1	; 0x02
     fda:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     fdc:	ef e5       	ldi	r30, 0x5F	; 95
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     fe6:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	61 f4       	brne	.+24     	; 0x1006 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     fee:	85 eb       	ldi	r24, 0xB5	; 181
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	6d e0       	ldi	r22, 0x0D	; 13
     ff4:	0e 94 2e 09 	call	0x125c	; 0x125c <RingPut>
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f4       	brne	.+10     	; 0x1006 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f ef       	ldi	r25, 0xFF	; 255
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	12 c0       	rjmp	.+36     	; 0x102a <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
    1006:	85 eb       	ldi	r24, 0xB5	; 181
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	6b 81       	ldd	r22, Y+3	; 0x03
    100c:	0e 94 2e 09 	call	0x125c	; 0x125c <RingPut>
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	21 f4       	brne	.+8      	; 0x101c <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
    101c:	a9 ec       	ldi	r26, 0xC9	; 201
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 ec       	ldi	r30, 0xC9	; 201
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
    102a:	ef e5       	ldi	r30, 0x5F	; 95
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 91 aa 01 	lds	r24, 0x01AA
    1032:	80 83       	st	Z, r24

	return ret;
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <__vector_21>:


ISR(USART0_UDRE_vect)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	00 90 5b 00 	lds	r0, 0x005B
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
    1076:	8c ea       	ldi	r24, 0xAC	; 172
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	9e 01       	movw	r18, r28
    107c:	2f 5f       	subi	r18, 0xFF	; 255
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	b9 01       	movw	r22, r18
    1082:	0e 94 81 09 	call	0x1302	; 0x1302 <RingGet>
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 f0       	breq	.+24     	; 0x10a2 <__vector_21+0x5e>
		UDR0 = c;
    108a:	e6 ec       	ldi	r30, 0xC6	; 198
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREÉNÉäÉA
    1092:	a0 ec       	ldi	r26, 0xC0	; 192
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 ec       	ldi	r30, 0xC0	; 192
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7d       	andi	r24, 0xDF	; 223
    109e:	8c 93       	st	X, r24
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
    10a2:	a1 ec       	ldi	r26, 0xC1	; 193
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 ec       	ldi	r30, 0xC1	; 193
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7d       	andi	r24, 0xDF	; 223
    10ae:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
    10b0:	a0 ec       	ldi	r26, 0xC0	; 192
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e0 ec       	ldi	r30, 0xC0	; 192
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 7d       	andi	r24, 0xDF	; 223
    10bc:	8c 93       	st	X, r24
	}
}
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	00 92 5b 00 	sts	0x005B, r0
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_29>:

ISR(USART1_UDRE_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	00 90 5b 00 	lds	r0, 0x005B
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
    111e:	85 eb       	ldi	r24, 0xB5	; 181
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	9e 01       	movw	r18, r28
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 81 09 	call	0x1302	; 0x1302 <RingGet>
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	61 f0       	breq	.+24     	; 0x114a <__vector_29+0x5e>
		UDR1 = c;
    1132:	ee ec       	ldi	r30, 0xCE	; 206
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREÉNÉäÉA
    113a:	a8 ec       	ldi	r26, 0xC8	; 200
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e8 ec       	ldi	r30, 0xC8	; 200
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8f 7d       	andi	r24, 0xDF	; 223
    1146:	8c 93       	st	X, r24
    1148:	0e c0       	rjmp	.+28     	; 0x1166 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
    114a:	a9 ec       	ldi	r26, 0xC9	; 201
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e9 ec       	ldi	r30, 0xC9	; 201
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8f 7d       	andi	r24, 0xDF	; 223
    1156:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
    1158:	a8 ec       	ldi	r26, 0xC8	; 200
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e8 ec       	ldi	r30, 0xC8	; 200
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8f 7d       	andi	r24, 0xDF	; 223
    1164:	8c 93       	st	X, r24
	}
}
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	00 92 5b 00 	sts	0x005B, r0
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	00 90 5b 00 	lds	r0, 0x005B
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    11c4:	ee ec       	ldi	r30, 0xCE	; 206
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	20 81       	ld	r18, Z
    11ca:	85 eb       	ldi	r24, 0xB5	; 181
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	62 2f       	mov	r22, r18
    11d0:	0e 94 2e 09 	call	0x125c	; 0x125c <RingPut>
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	00 92 5b 00 	sts	0x005B, r0
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <RingInit+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <RingInit+0x8>
    1208:	00 d0       	rcall	.+0      	; 0x120a <RingInit+0xa>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	7c 83       	std	Y+4, r23	; 0x04
    1214:	6b 83       	std	Y+3, r22	; 0x03
    1216:	5e 83       	std	Y+6, r21	; 0x06
    1218:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	fa 81       	ldd	r31, Y+2	; 0x02
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
	ring->size = size;
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	97 83       	std	Z+7, r25	; 0x07
    1230:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    1232:	e9 81       	ldd	r30, Y+1	; 0x01
    1234:	fa 81       	ldd	r31, Y+2	; 0x02
    1236:	13 82       	std	Z+3, r1	; 0x03
    1238:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	15 82       	std	Z+5, r1	; 0x05
    1240:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 87       	std	Z+8, r24	; 0x08
}
    124a:	26 96       	adiw	r28, 0x06	; 6
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <RingPut+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <RingPut+0x8>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	80 85       	ldd	r24, Z+8	; 0x08
    1276:	88 23       	and	r24, r24
    1278:	71 f4       	brne	.+28     	; 0x1296 <RingPut+0x3a>
    127a:	e9 81       	ldd	r30, Y+1	; 0x01
    127c:	fa 81       	ldd	r31, Y+2	; 0x02
    127e:	22 81       	ldd	r18, Z+2	; 0x02
    1280:	33 81       	ldd	r19, Z+3	; 0x03
    1282:	e9 81       	ldd	r30, Y+1	; 0x01
    1284:	fa 81       	ldd	r31, Y+2	; 0x02
    1286:	84 81       	ldd	r24, Z+4	; 0x04
    1288:	95 81       	ldd	r25, Z+5	; 0x05
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	19 f4       	brne	.+6      	; 0x1296 <RingPut+0x3a>
		return FALSE;
    1290:	1d 82       	std	Y+5, r1	; 0x05
    1292:	1c 82       	std	Y+4, r1	; 0x04
    1294:	2c c0       	rjmp	.+88     	; 0x12ee <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	20 81       	ld	r18, Z
    129c:	31 81       	ldd	r19, Z+1	; 0x01
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	84 81       	ldd	r24, Z+4	; 0x04
    12a4:	95 81       	ldd	r25, Z+5	; 0x05
    12a6:	f9 01       	movw	r30, r18
    12a8:	e8 0f       	add	r30, r24
    12aa:	f9 1f       	adc	r31, r25
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	80 83       	st	Z, r24
	ring->wp++;
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	84 81       	ldd	r24, Z+4	; 0x04
    12b6:	95 81       	ldd	r25, Z+5	; 0x05
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	95 83       	std	Z+5, r25	; 0x05
    12c0:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	24 81       	ldd	r18, Z+4	; 0x04
    12c8:	35 81       	ldd	r19, Z+5	; 0x05
    12ca:	e9 81       	ldd	r30, Y+1	; 0x01
    12cc:	fa 81       	ldd	r31, Y+2	; 0x02
    12ce:	86 81       	ldd	r24, Z+6	; 0x06
    12d0:	97 81       	ldd	r25, Z+7	; 0x07
    12d2:	28 17       	cp	r18, r24
    12d4:	39 07       	cpc	r19, r25
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <RingPut+0x84>
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	15 82       	std	Z+5, r1	; 0x05
    12de:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    12e0:	e9 81       	ldd	r30, Y+1	; 0x01
    12e2:	fa 81       	ldd	r31, Y+2	; 0x02
    12e4:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9d 83       	std	Y+5, r25	; 0x05
    12ec:	8c 83       	std	Y+4, r24	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <RingGet+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <RingGet+0x8>
    130a:	00 d0       	rcall	.+0      	; 0x130c <RingGet+0xa>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	7c 83       	std	Y+4, r23	; 0x04
    1316:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    1318:	e9 81       	ldd	r30, Y+1	; 0x01
    131a:	fa 81       	ldd	r31, Y+2	; 0x02
    131c:	80 85       	ldd	r24, Z+8	; 0x08
    131e:	88 23       	and	r24, r24
    1320:	d9 f5       	brne	.+118    	; 0x1398 <RingGet+0x96>
		*value = ring->buf[ring->rp];
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	e9 81       	ldd	r30, Y+1	; 0x01
    132c:	fa 81       	ldd	r31, Y+2	; 0x02
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	f9 01       	movw	r30, r18
    1334:	e8 0f       	add	r30, r24
    1336:	f9 1f       	adc	r31, r25
    1338:	80 81       	ld	r24, Z
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	80 83       	st	Z, r24
		ring->rp++;
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	93 83       	std	Z+3, r25	; 0x03
    1350:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	22 81       	ldd	r18, Z+2	; 0x02
    1358:	33 81       	ldd	r19, Z+3	; 0x03
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	fa 81       	ldd	r31, Y+2	; 0x02
    135e:	86 81       	ldd	r24, Z+6	; 0x06
    1360:	97 81       	ldd	r25, Z+7	; 0x07
    1362:	28 17       	cp	r18, r24
    1364:	39 07       	cpc	r19, r25
    1366:	21 f4       	brne	.+8      	; 0x1370 <RingGet+0x6e>
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	13 82       	std	Z+3, r1	; 0x03
    136e:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    1370:	e9 81       	ldd	r30, Y+1	; 0x01
    1372:	fa 81       	ldd	r31, Y+2	; 0x02
    1374:	22 81       	ldd	r18, Z+2	; 0x02
    1376:	33 81       	ldd	r19, Z+3	; 0x03
    1378:	e9 81       	ldd	r30, Y+1	; 0x01
    137a:	fa 81       	ldd	r31, Y+2	; 0x02
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	95 81       	ldd	r25, Z+5	; 0x05
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	21 f4       	brne	.+8      	; 0x138e <RingGet+0x8c>
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <RingGet+0xa0>
	}else{			// ÉäÉìÉOÉoÉbÉtÉ@Ç™ãÛÇÃÇ∆Ç´
		*value = 0;
    1398:	eb 81       	ldd	r30, Y+3	; 0x03
    139a:	fc 81       	ldd	r31, Y+4	; 0x04
    139c:	10 82       	st	Z, r1
		return FALSE;
    139e:	1e 82       	std	Y+6, r1	; 0x06
    13a0:	1d 82       	std	Y+5, r1	; 0x05
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    13a6:	26 96       	adiw	r28, 0x06	; 6
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <isRingEmpty+0x6>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	80 85       	ldd	r24, Z+8	; 0x08
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <initI2CMaster+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <initI2CMaster+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    13ea:	88 eb       	ldi	r24, 0xB8	; 184
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9b 83       	std	Y+3, r25	; 0x03
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	9e e4       	ldi	r25, 0x4E	; 78
    13fc:	b9 01       	movw	r22, r18
    13fe:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__divmodhi4>
    1402:	cb 01       	movw	r24, r22
    1404:	40 97       	sbiw	r24, 0x10	; 16
    1406:	9d 83       	std	Y+5, r25	; 0x05
    1408:	8c 83       	std	Y+4, r24	; 0x04
    140a:	ec 81       	ldd	r30, Y+4	; 0x04
    140c:	fd 81       	ldd	r31, Y+5	; 0x05
    140e:	ff 23       	and	r31, r31
    1410:	2c f4       	brge	.+10     	; 0x141c <initI2CMaster+0x42>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	9d 83       	std	Y+5, r25	; 0x05
    141a:	8c 83       	std	Y+4, r24	; 0x04
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	95 95       	asr	r25
    1422:	87 95       	ror	r24
    1424:	ea 81       	ldd	r30, Y+2	; 0x02
    1426:	fb 81       	ldd	r31, Y+3	; 0x03
    1428:	80 83       	st	Z, r24
		TWSR = 0;
    142a:	e9 eb       	ldi	r30, 0xB9	; 185
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	10 82       	st	Z, r1
		TWCR = I2CEN;
    1430:	ec eb       	ldi	r30, 0xBC	; 188
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	80 83       	st	Z, r24
    }
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <i2cWrite+0x6>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1458:	ec eb       	ldi	r30, 0xBC	; 188
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	84 ea       	ldi	r24, 0xA4	; 164
    145e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1460:	ec eb       	ldi	r30, 0xBC	; 188
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	88 23       	and	r24, r24
    1468:	dc f7       	brge	.-10     	; 0x1460 <i2cWrite+0x18>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    146a:	e9 eb       	ldi	r30, 0xB9	; 185
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	88 7f       	andi	r24, 0xF8	; 248
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	91 05       	cpc	r25, r1
    147c:	09 f0       	breq	.+2      	; 0x1480 <i2cWrite+0x38>
    147e:	56 c0       	rjmp	.+172    	; 0x152c <i2cWrite+0xe4>

		TWDR = (slave->addr<<1);
    1480:	ab eb       	ldi	r26, 0xBB	; 187
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	80 81       	ld	r24, Z
    148a:	88 0f       	add	r24, r24
    148c:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    148e:	ec eb       	ldi	r30, 0xBC	; 188
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	84 e8       	ldi	r24, 0x84	; 132
    1494:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1496:	ec eb       	ldi	r30, 0xBC	; 188
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	88 23       	and	r24, r24
    149e:	dc f7       	brge	.-10     	; 0x1496 <i2cWrite+0x4e>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    14a0:	e9 eb       	ldi	r30, 0xB9	; 185
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 7f       	andi	r24, 0xF8	; 248
    14ac:	90 70       	andi	r25, 0x00	; 0
    14ae:	88 31       	cpi	r24, 0x18	; 24
    14b0:	91 05       	cpc	r25, r1
    14b2:	e1 f5       	brne	.+120    	; 0x152c <i2cWrite+0xe4>

		for(i=0;i<slave->write.size;i++){
    14b4:	10 92 ab 01 	sts	0x01AB, r1
    14b8:	27 c0       	rjmp	.+78     	; 0x1508 <i2cWrite+0xc0>
			TWDR=slave->write.buf[i];
    14ba:	ab eb       	ldi	r26, 0xBB	; 187
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e9 81       	ldd	r30, Y+1	; 0x01
    14c0:	fa 81       	ldd	r31, Y+2	; 0x02
    14c2:	21 81       	ldd	r18, Z+1	; 0x01
    14c4:	32 81       	ldd	r19, Z+2	; 0x02
    14c6:	80 91 ab 01 	lds	r24, 0x01AB
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	f9 01       	movw	r30, r18
    14d0:	e8 0f       	add	r30, r24
    14d2:	f9 1f       	adc	r31, r25
    14d4:	80 81       	ld	r24, Z
    14d6:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    14d8:	ec eb       	ldi	r30, 0xBC	; 188
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	84 e8       	ldi	r24, 0x84	; 132
    14de:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    14e0:	ec eb       	ldi	r30, 0xBC	; 188
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	dc f7       	brge	.-10     	; 0x14e0 <i2cWrite+0x98>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    14ea:	e9 eb       	ldi	r30, 0xB9	; 185
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	88 7f       	andi	r24, 0xF8	; 248
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	88 32       	cpi	r24, 0x28	; 40
    14fa:	91 05       	cpc	r25, r1
    14fc:	b9 f4       	brne	.+46     	; 0x152c <i2cWrite+0xe4>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    14fe:	80 91 ab 01 	lds	r24, 0x01AB
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	80 93 ab 01 	sts	0x01AB, r24
    1508:	80 91 ab 01 	lds	r24, 0x01AB
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	83 81       	ldd	r24, Z+3	; 0x03
    1516:	94 81       	ldd	r25, Z+4	; 0x04
    1518:	28 17       	cp	r18, r24
    151a:	39 07       	cpc	r19, r25
    151c:	70 f2       	brcs	.-100    	; 0x14ba <i2cWrite+0x72>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    151e:	ec eb       	ldi	r30, 0xBC	; 188
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	84 e9       	ldi	r24, 0x94	; 148
    1524:	80 83       	st	Z, r24
		wdt_disable();

#endif

//		sei();
		return true;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <i2cWrite+0xee>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    152c:	ec eb       	ldi	r30, 0xBC	; 188
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	84 e9       	ldi	r24, 0x94	; 148
    1532:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1534:	1b 82       	std	Y+3, r1	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <i2cRead+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1554:	ec eb       	ldi	r30, 0xBC	; 188
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	84 ea       	ldi	r24, 0xA4	; 164
    155a:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    155c:	ec eb       	ldi	r30, 0xBC	; 188
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 23       	and	r24, r24
    1564:	dc f7       	brge	.-10     	; 0x155c <i2cRead+0x18>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    1566:	e9 eb       	ldi	r30, 0xB9	; 185
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	88 7f       	andi	r24, 0xF8	; 248
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	91 05       	cpc	r25, r1
    1578:	09 f0       	breq	.+2      	; 0x157c <i2cRead+0x38>
    157a:	7f c0       	rjmp	.+254    	; 0x167a <i2cRead+0x136>

		TWDR = (slave->addr<<1)|0x01;
    157c:	ab eb       	ldi	r26, 0xBB	; 187
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e9 81       	ldd	r30, Y+1	; 0x01
    1582:	fa 81       	ldd	r31, Y+2	; 0x02
    1584:	80 81       	ld	r24, Z
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1592:	ec eb       	ldi	r30, 0xBC	; 188
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	84 e8       	ldi	r24, 0x84	; 132
    1598:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    159a:	ec eb       	ldi	r30, 0xBC	; 188
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 23       	and	r24, r24
    15a2:	dc f7       	brge	.-10     	; 0x159a <i2cRead+0x56>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    15a4:	e9 eb       	ldi	r30, 0xB9	; 185
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 7f       	andi	r24, 0xF8	; 248
    15b0:	90 70       	andi	r25, 0x00	; 0
    15b2:	80 34       	cpi	r24, 0x40	; 64
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <i2cRead+0x76>
    15b8:	60 c0       	rjmp	.+192    	; 0x167a <i2cRead+0x136>

		for(i=0;i<slave->read.size-1;i++){
    15ba:	10 92 ab 01 	sts	0x01AB, r1
    15be:	28 c0       	rjmp	.+80     	; 0x1610 <i2cRead+0xcc>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15c0:	ec eb       	ldi	r30, 0xBC	; 188
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	84 ec       	ldi	r24, 0xC4	; 196
    15c6:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    15c8:	ec eb       	ldi	r30, 0xBC	; 188
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	dc f7       	brge	.-10     	; 0x15c8 <i2cRead+0x84>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    15d2:	e9 eb       	ldi	r30, 0xB9	; 185
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	88 7f       	andi	r24, 0xF8	; 248
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	80 35       	cpi	r24, 0x50	; 80
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <i2cRead+0xa4>
    15e6:	49 c0       	rjmp	.+146    	; 0x167a <i2cRead+0x136>
			slave->read.buf[i] = TWDR;
    15e8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ea:	fa 81       	ldd	r31, Y+2	; 0x02
    15ec:	25 81       	ldd	r18, Z+5	; 0x05
    15ee:	36 81       	ldd	r19, Z+6	; 0x06
    15f0:	80 91 ab 01 	lds	r24, 0x01AB
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	d9 01       	movw	r26, r18
    15fa:	a8 0f       	add	r26, r24
    15fc:	b9 1f       	adc	r27, r25
    15fe:	eb eb       	ldi	r30, 0xBB	; 187
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1606:	80 91 ab 01 	lds	r24, 0x01AB
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 ab 01 	sts	0x01AB, r24
    1610:	80 91 ab 01 	lds	r24, 0x01AB
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	87 81       	ldd	r24, Z+7	; 0x07
    161e:	90 85       	ldd	r25, Z+8	; 0x08
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	28 17       	cp	r18, r24
    1624:	39 07       	cpc	r19, r25
    1626:	60 f2       	brcs	.-104    	; 0x15c0 <i2cRead+0x7c>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1628:	ec eb       	ldi	r30, 0xBC	; 188
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	84 e8       	ldi	r24, 0x84	; 132
    162e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1630:	ec eb       	ldi	r30, 0xBC	; 188
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 23       	and	r24, r24
    1638:	dc f7       	brge	.-10     	; 0x1630 <i2cRead+0xec>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    163a:	e9 eb       	ldi	r30, 0xB9	; 185
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 7f       	andi	r24, 0xF8	; 248
    1646:	90 70       	andi	r25, 0x00	; 0
    1648:	88 35       	cpi	r24, 0x58	; 88
    164a:	91 05       	cpc	r25, r1
    164c:	b1 f4       	brne	.+44     	; 0x167a <i2cRead+0x136>
		slave->read.buf[i] = TWDR;
    164e:	e9 81       	ldd	r30, Y+1	; 0x01
    1650:	fa 81       	ldd	r31, Y+2	; 0x02
    1652:	25 81       	ldd	r18, Z+5	; 0x05
    1654:	36 81       	ldd	r19, Z+6	; 0x06
    1656:	80 91 ab 01 	lds	r24, 0x01AB
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	d9 01       	movw	r26, r18
    1660:	a8 0f       	add	r26, r24
    1662:	b9 1f       	adc	r27, r25
    1664:	eb eb       	ldi	r30, 0xBB	; 187
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    166c:	ec eb       	ldi	r30, 0xBC	; 188
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	84 e9       	ldi	r24, 0x94	; 148
    1672:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <i2cRead+0x140>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    167a:	ec eb       	ldi	r30, 0xBC	; 188
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	84 e9       	ldi	r24, 0x94	; 148
    1680:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1682:	1b 82       	std	Y+3, r1	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <i2cReadWithCommand+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <i2cReadWithCommand+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    16a4:	ec eb       	ldi	r30, 0xBC	; 188
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	84 ea       	ldi	r24, 0xA4	; 164
    16aa:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    16ac:	ec eb       	ldi	r30, 0xBC	; 188
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	dc f7       	brge	.-10     	; 0x16ac <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    16b6:	ab eb       	ldi	r26, 0xBB	; 187
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e9 81       	ldd	r30, Y+1	; 0x01
    16bc:	fa 81       	ldd	r31, Y+2	; 0x02
    16be:	80 81       	ld	r24, Z
    16c0:	88 0f       	add	r24, r24
    16c2:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    16c4:	ec eb       	ldi	r30, 0xBC	; 188
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16cc:	ec eb       	ldi	r30, 0xBC	; 188
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	dc f7       	brge	.-10     	; 0x16cc <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    16d6:	e9 eb       	ldi	r30, 0xB9	; 185
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	80 34       	cpi	r24, 0x40	; 64
    16e6:	91 05       	cpc	r25, r1
    16e8:	09 f0       	breq	.+2      	; 0x16ec <i2cReadWithCommand+0x5a>
    16ea:	a0 c0       	rjmp	.+320    	; 0x182c <i2cReadWithCommand+0x19a>

		TWDR=command;
    16ec:	eb eb       	ldi	r30, 0xBB	; 187
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    16f4:	ec eb       	ldi	r30, 0xBC	; 188
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	84 e8       	ldi	r24, 0x84	; 132
    16fa:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16fc:	ec eb       	ldi	r30, 0xBC	; 188
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 23       	and	r24, r24
    1704:	dc f7       	brge	.-10     	; 0x16fc <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    1706:	e9 eb       	ldi	r30, 0xB9	; 185
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	88 7f       	andi	r24, 0xF8	; 248
    1712:	90 70       	andi	r25, 0x00	; 0
    1714:	88 32       	cpi	r24, 0x28	; 40
    1716:	91 05       	cpc	r25, r1
    1718:	09 f0       	breq	.+2      	; 0x171c <i2cReadWithCommand+0x8a>
    171a:	88 c0       	rjmp	.+272    	; 0x182c <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    171c:	ec eb       	ldi	r30, 0xBC	; 188
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	84 ea       	ldi	r24, 0xA4	; 164
    1722:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1724:	ec eb       	ldi	r30, 0xBC	; 188
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	88 23       	and	r24, r24
    172c:	dc f7       	brge	.-10     	; 0x1724 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    172e:	e9 eb       	ldi	r30, 0xB9	; 185
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	88 7f       	andi	r24, 0xF8	; 248
    173a:	90 70       	andi	r25, 0x00	; 0
    173c:	80 31       	cpi	r24, 0x10	; 16
    173e:	91 05       	cpc	r25, r1
    1740:	09 f0       	breq	.+2      	; 0x1744 <i2cReadWithCommand+0xb2>
    1742:	74 c0       	rjmp	.+232    	; 0x182c <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1744:	ab eb       	ldi	r26, 0xBB	; 187
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e9 81       	ldd	r30, Y+1	; 0x01
    174a:	fa 81       	ldd	r31, Y+2	; 0x02
    174c:	80 81       	ld	r24, Z
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    175a:	ec eb       	ldi	r30, 0xBC	; 188
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	84 e8       	ldi	r24, 0x84	; 132
    1760:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1762:	ec eb       	ldi	r30, 0xBC	; 188
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	dc f7       	brge	.-10     	; 0x1762 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    176c:	10 92 ab 01 	sts	0x01AB, r1
    1770:	28 c0       	rjmp	.+80     	; 0x17c2 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1772:	ec eb       	ldi	r30, 0xBC	; 188
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	84 ec       	ldi	r24, 0xC4	; 196
    1778:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    177a:	ec eb       	ldi	r30, 0xBC	; 188
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	dc f7       	brge	.-10     	; 0x177a <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1784:	e9 eb       	ldi	r30, 0xB9	; 185
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	88 7f       	andi	r24, 0xF8	; 248
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	80 35       	cpi	r24, 0x50	; 80
    1794:	91 05       	cpc	r25, r1
    1796:	09 f0       	breq	.+2      	; 0x179a <i2cReadWithCommand+0x108>
    1798:	49 c0       	rjmp	.+146    	; 0x182c <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    179a:	e9 81       	ldd	r30, Y+1	; 0x01
    179c:	fa 81       	ldd	r31, Y+2	; 0x02
    179e:	25 81       	ldd	r18, Z+5	; 0x05
    17a0:	36 81       	ldd	r19, Z+6	; 0x06
    17a2:	80 91 ab 01 	lds	r24, 0x01AB
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	d9 01       	movw	r26, r18
    17ac:	a8 0f       	add	r26, r24
    17ae:	b9 1f       	adc	r27, r25
    17b0:	eb eb       	ldi	r30, 0xBB	; 187
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    17b8:	80 91 ab 01 	lds	r24, 0x01AB
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	80 93 ab 01 	sts	0x01AB, r24
    17c2:	80 91 ab 01 	lds	r24, 0x01AB
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	87 81       	ldd	r24, Z+7	; 0x07
    17d0:	90 85       	ldd	r25, Z+8	; 0x08
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	28 17       	cp	r18, r24
    17d6:	39 07       	cpc	r19, r25
    17d8:	60 f2       	brcs	.-104    	; 0x1772 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    17da:	ec eb       	ldi	r30, 0xBC	; 188
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	84 e8       	ldi	r24, 0x84	; 132
    17e0:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    17e2:	ec eb       	ldi	r30, 0xBC	; 188
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	88 23       	and	r24, r24
    17ea:	dc f7       	brge	.-10     	; 0x17e2 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    17ec:	e9 eb       	ldi	r30, 0xB9	; 185
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	88 7f       	andi	r24, 0xF8	; 248
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	88 35       	cpi	r24, 0x58	; 88
    17fc:	91 05       	cpc	r25, r1
    17fe:	b1 f4       	brne	.+44     	; 0x182c <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	25 81       	ldd	r18, Z+5	; 0x05
    1806:	36 81       	ldd	r19, Z+6	; 0x06
    1808:	80 91 ab 01 	lds	r24, 0x01AB
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	d9 01       	movw	r26, r18
    1812:	a8 0f       	add	r26, r24
    1814:	b9 1f       	adc	r27, r25
    1816:	eb eb       	ldi	r30, 0xBB	; 187
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    181e:	ec eb       	ldi	r30, 0xBC	; 188
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	84 e9       	ldi	r24, 0x94	; 148
    1824:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	8c 83       	std	Y+4, r24	; 0x04
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    182c:	ec eb       	ldi	r30, 0xBC	; 188
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	84 e9       	ldi	r24, 0x94	; 148
    1832:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1834:	1c 82       	std	Y+4, r1	; 0x04
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LED>:
/// LEDëÄçÏä÷êî 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->è¡ìîÅ@1->ì_ìî </param>
void LED(unsigned char target, bool status)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LED+0x6>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	58 f5       	brcc	.+86     	; 0x18b0 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 23       	and	r24, r24
    185e:	a9 f0       	breq	.+42     	; 0x188a <LED+0x44>
    1860:	a2 e2       	ldi	r26, 0x22	; 34
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e2       	ldi	r30, 0x22	; 34
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <LED+0x38>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <LED+0x34>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	13 c0       	rjmp	.+38     	; 0x18b0 <LED+0x6a>
	else		sbi(PORTA,target);
    188a:	a2 e2       	ldi	r26, 0x22	; 34
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e2       	ldi	r30, 0x22	; 34
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <LED+0x62>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <LED+0x5e>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <LEDInit>:

void LEDInit(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    18c2:	a1 e2       	ldi	r26, 0x21	; 33
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e1 e2       	ldi	r30, 0x21	; 33
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	87 60       	ori	r24, 0x07	; 7
    18ce:	8c 93       	st	X, r24
	PORTA |= 0x07;
    18d0:	a2 e2       	ldi	r26, 0x22	; 34
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e2 e2       	ldi	r30, 0x22	; 34
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	87 60       	ori	r24, 0x07	; 7
    18dc:	8c 93       	st	X, r24
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <wait_ms>:
#include <avr/io.h>
void wait_ms(uint16_t t){
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <wait_ms+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <wait_ms+0x8>
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	9b 83       	std	Y+3, r25	; 0x03
    18f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tt;
	TCCR2A = 0;
    18f6:	e0 eb       	ldi	r30, 0xB0	; 176
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	10 82       	st	Z, r1
	TCCR2B = 1;
    18fc:	e1 eb       	ldi	r30, 0xB1	; 177
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 83       	st	Z, r24
	OCR2A = 200;
    1904:	e3 eb       	ldi	r30, 0xB3	; 179
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	80 83       	st	Z, r24

	for(tt=100;t--;){
    190c:	84 e6       	ldi	r24, 0x64	; 100
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	20 c0       	rjmp	.+64     	; 0x1952 <wait_ms+0x6e>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
    1912:	e2 eb       	ldi	r30, 0xB2	; 178
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	10 82       	st	Z, r1
    1918:	e7 e3       	ldi	r30, 0x37	; 55
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 70       	andi	r24, 0x02	; 2
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	b9 f3       	breq	.-18     	; 0x1918 <wait_ms+0x34>
			TIFR2 |= 0x02;
    192a:	a7 e3       	ldi	r26, 0x37	; 55
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e3       	ldi	r30, 0x37	; 55
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	82 60       	ori	r24, 0x02	; 2
    1936:	8c 93       	st	X, r24
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
		while(tt--){
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	88 23       	and	r24, r24
    1940:	11 f0       	breq	.+4      	; 0x1946 <wait_ms+0x62>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	99 81       	ldd	r25, Y+1	; 0x01
    194a:	91 50       	subi	r25, 0x01	; 1
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 23       	and	r24, r24
    1950:	01 f7       	brne	.-64     	; 0x1912 <wait_ms+0x2e>
	uint8_t tt;
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
    1952:	1c 82       	std	Y+4, r1	; 0x04
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	11 f0       	breq	.+4      	; 0x1960 <wait_ms+0x7c>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	8c 83       	std	Y+4, r24	; 0x04
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	9b 81       	ldd	r25, Y+3	; 0x03
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	88 23       	and	r24, r24
    196e:	21 f7       	brne	.-56     	; 0x1938 <wait_ms+0x54>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
			TIFR2 |= 0x02;
		}
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <wait_us>:
void wait_us(uint16_t t){
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <wait_us+0x6>
    1986:	0f 92       	push	r0
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
	TCCR2A = 0;
    1990:	e0 eb       	ldi	r30, 0xB0	; 176
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
	TCCR2B = 1;
    1996:	e1 eb       	ldi	r30, 0xB1	; 177
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 83       	st	Z, r24
	OCR2A = 20;
    199e:	e3 eb       	ldi	r30, 0xB3	; 179
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	84 e1       	ldi	r24, 0x14	; 20
    19a4:	80 83       	st	Z, r24
    19a6:	13 c0       	rjmp	.+38     	; 0x19ce <wait_us+0x4e>
	while(t--){
		for(TCNT2=0;!(TIFR2&0x02););
    19a8:	e2 eb       	ldi	r30, 0xB2	; 178
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	10 82       	st	Z, r1
    19ae:	e7 e3       	ldi	r30, 0x37	; 55
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	82 70       	andi	r24, 0x02	; 2
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	b9 f3       	breq	.-18     	; 0x19ae <wait_us+0x2e>
		TIFR2 |= 0x02;
    19c0:	a7 e3       	ldi	r26, 0x37	; 55
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e7 e3       	ldi	r30, 0x37	; 55
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	82 60       	ori	r24, 0x02	; 2
    19cc:	8c 93       	st	X, r24
}
void wait_us(uint16_t t){
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 20;
	while(t--){
    19ce:	1b 82       	std	Y+3, r1	; 0x03
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	11 f0       	breq	.+4      	; 0x19dc <wait_us+0x5c>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	88 23       	and	r24, r24
    19ea:	f1 f6       	brne	.-68     	; 0x19a8 <wait_us+0x28>
		for(TCNT2=0;!(TIFR2&0x02););
		TIFR2 |= 0x02;
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <mDrive+0x6>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <mDrive+0x8>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <mDrive+0xa>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9b 83       	std	Y+3, r25	; 0x03
    1a08:	8a 83       	std	Y+2, r24	; 0x02
    1a0a:	6c 83       	std	Y+4, r22	; 0x04
    1a0c:	4d 83       	std	Y+5, r20	; 0x05
    1a0e:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1a10:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	85 30       	cpi	r24, 0x05	; 5
    1a16:	50 f5       	brcc	.+84     	; 0x1a6c <mDrive+0x74>
	if(duty>100) duty=100;
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	85 36       	cpi	r24, 0x65	; 101
    1a1c:	14 f0       	brlt	.+4      	; 0x1a22 <mDrive+0x2a>
    1a1e:	84 e6       	ldi	r24, 0x64	; 100
    1a20:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	8c 39       	cpi	r24, 0x9C	; 156
    1a26:	14 f4       	brge	.+4      	; 0x1a2c <mDrive+0x34>
    1a28:	8c e9       	ldi	r24, 0x9C	; 156
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <mDrive+0x42>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	81 95       	neg	r24
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <mDrive+0x5c>
	else if(in==FREE) w_data = 0;
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	88 23       	and	r24, r24
    1a3e:	11 f4       	brne	.+4      	; 0x1a44 <mDrive+0x4c>
    1a40:	19 82       	std	Y+1, r1	; 0x01
    1a42:	08 c0       	rjmp	.+16     	; 0x1a54 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <mDrive+0x58>
    1a4a:	8f e7       	ldi	r24, 0x7F	; 127
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <mDrive+0x5c>
	else w_data = duty;
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	21 81       	ldd	r18, Z+1	; 0x01
    1a5a:	32 81       	ldd	r19, Z+2	; 0x02
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	f9 01       	movw	r30, r18
    1a64:	e8 0f       	add	r30, r24
    1a66:	f9 1f       	adc	r31, r25
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	80 83       	st	Z, r24
}
    1a6c:	26 96       	adiw	r28, 0x06	; 6
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <mAngle+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <mAngle+0x8>
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	7c 83       	std	Y+4, r23	; 0x04
    1a92:	6b 83       	std	Y+3, r22	; 0x03
    1a94:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	88 23       	and	r24, r24
    1a9a:	a9 f0       	breq	.+42     	; 0x1ac6 <mAngle+0x48>
		angle/=6;
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	26 e0       	ldi	r18, 0x06	; 6
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__divmodhi4>
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[2] = 0x40|(angle&0x1f);
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	81 81       	ldd	r24, Z+1	; 0x01
    1ab6:	92 81       	ldd	r25, Z+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	32 96       	adiw	r30, 0x02	; 2
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	8f 71       	andi	r24, 0x1F	; 31
    1ac0:	80 64       	ori	r24, 0x40	; 64
    1ac2:	80 83       	st	Z, r24
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <mAngle+0x56>
		}
	else motor->write.buf[2] = 0x00;
    1ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aca:	81 81       	ldd	r24, Z+1	; 0x01
    1acc:	92 81       	ldd	r25, Z+2	; 0x02
    1ace:	fc 01       	movw	r30, r24
    1ad0:	32 96       	adiw	r30, 0x02	; 2
    1ad2:	10 82       	st	Z, r1
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <aDrive+0x6>
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <aDrive+0x8>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	6b 83       	std	Y+3, r22	; 0x03
    1af6:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	88 23       	and	r24, r24
    1afc:	41 f0       	breq	.+16     	; 0x1b0e <aDrive+0x2a>
    1afe:	e9 81       	ldd	r30, Y+1	; 0x01
    1b00:	fa 81       	ldd	r31, Y+2	; 0x02
    1b02:	01 80       	ldd	r0, Z+1	; 0x01
    1b04:	f2 81       	ldd	r31, Z+2	; 0x02
    1b06:	e0 2d       	mov	r30, r0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	80 83       	st	Z, r24
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	01 80       	ldd	r0, Z+1	; 0x01
    1b14:	f2 81       	ldd	r31, Z+2	; 0x02
    1b16:	e0 2d       	mov	r30, r0
    1b18:	10 82       	st	Z, r1

}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1b30:	a4 e2       	ldi	r26, 0x24	; 36
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e4 e2       	ldi	r30, 0x24	; 36
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 7f       	andi	r24, 0xF0	; 240
    1b3c:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1b3e:	a5 e2       	ldi	r26, 0x25	; 37
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e2       	ldi	r30, 0x25	; 37
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 60       	ori	r24, 0x0F	; 15
    1b4a:	8c 93       	st	X, r24
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <Switch>:
/// ÉXÉCÉbÉ`íléÊìæä÷êî 
/// </summary>
/// <param name="target"> ÉÅÉCÉìäÓî’è„ÇÃÉXÉâÉCÉhÉXÉCÉbÉ`î‘çÜÅ@1Å`4 </param>
/// <return> ÉXÉCÉbÉ`ÇÃèÛë‘ ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <Switch+0x6>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1b5e:	e3 e2       	ldi	r30, 0x23	; 35
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 95       	com	r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	a9 01       	movw	r20, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <Switch+0x2c>
    1b7a:	55 95       	asr	r21
    1b7c:	47 95       	ror	r20
    1b7e:	8a 95       	dec	r24
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <Switch+0x28>
    1b82:	ca 01       	movw	r24, r20
    1b84:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	90 70       	andi	r25, 0x00	; 0
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <Group>:

__inline__ unsigned char Group(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1ba2:	e3 e2       	ldi	r30, 0x23	; 35
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 95       	com	r24
    1baa:	86 95       	lsr	r24
    1bac:	86 95       	lsr	r24
    1bae:	83 70       	andi	r24, 0x03	; 3
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Channel>:

__inline__ unsigned char Channel(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1bbe:	e3 e2       	ldi	r30, 0x23	; 35
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 95       	com	r24
    1bc6:	83 70       	andi	r24, 0x03	; 3
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	89 27       	eor	r24, r25
    1be0:	88 23       	and	r24, r24
    1be2:	71 f4       	brne	.+28     	; 0x1c00 <beep+0x32>
    1be4:	80 91 55 01 	lds	r24, 0x0155
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	89 27       	eor	r24, r25
    1bec:	88 23       	and	r24, r24
    1bee:	41 f4       	brne	.+16     	; 0x1c00 <beep+0x32>
    1bf0:	a2 e2       	ldi	r26, 0x22	; 34
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e2 e2       	ldi	r30, 0x22	; 34
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	8c 93       	st	X, r24
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1c00:	80 91 55 01 	lds	r24, 0x0155
    1c04:	88 23       	and	r24, r24
    1c06:	39 f0       	breq	.+14     	; 0x1c16 <beep+0x48>
    1c08:	a2 e2       	ldi	r26, 0x22	; 34
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e2 e2       	ldi	r30, 0x22	; 34
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	87 7f       	andi	r24, 0xF7	; 247
    1c14:	8c 93       	st	X, r24
}
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <BeepInit>:

void BeepInit()
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1c26:	a1 e2       	ldi	r26, 0x21	; 33
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e1 e2       	ldi	r30, 0x21	; 33
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1c34:	a2 e2       	ldi	r26, 0x22	; 34
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e2 e2       	ldi	r30, 0x22	; 34
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	87 7f       	andi	r24, 0xF7	; 247
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <i2cCheck>:

void i2cCheck(bool flag)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	69 81       	ldd	r22, Y+1	; 0x01
    1c58:	0e 94 23 0c 	call	0x1846	; 0x1846 <LED>
	beep(!(flag));
    1c5c:	99 81       	ldd	r25, Y+1	; 0x01
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 27       	eor	r24, r25
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
	if(!flag){
    1c6a:	99 81       	ldd	r25, Y+1	; 0x01
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 27       	eor	r24, r25
    1c70:	88 23       	and	r24, r24
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <i2cCheck+0x38>
		PORTC = 0x04;
    1c74:	e8 e2       	ldi	r30, 0x28	; 40
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	80 83       	st	Z, r24
		cli();
    1c7c:	f8 94       	cli
    1c7e:	ff cf       	rjmp	.-2      	; 0x1c7e <i2cCheck+0x36>
		while(1);
	}
}
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <Emergency+0x6>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <Emergency+0x8>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9b 83       	std	Y+3, r25	; 0x03
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    1c98:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	71 f4       	brne	.+28     	; 0x1cbc <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1ca0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca4:	01 80       	ldd	r0, Z+1	; 0x01
    1ca6:	f2 81       	ldd	r31, Z+2	; 0x02
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	8a e6       	ldi	r24, 0x6A	; 106
    1cac:	80 83       	st	Z, r24
		beep(1);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
		eflag=1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 93 be 01 	sts	0x01BE, r24
    1cba:	16 c0       	rjmp	.+44     	; 0x1ce8 <Emergency+0x60>
		}
	else if(act==E_OFF){
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	69 f4       	brne	.+26     	; 0x1cdc <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc6:	01 80       	ldd	r0, Z+1	; 0x01
    1cc8:	f2 81       	ldd	r31, Z+2	; 0x02
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	85 e5       	ldi	r24, 0x55	; 85
    1cce:	80 83       	st	Z, r24
		beep(0);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
		eflag=0;
    1cd6:	10 92 be 01 	sts	0x01BE, r1
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cde:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce0:	01 80       	ldd	r0, Z+1	; 0x01
    1ce2:	f2 81       	ldd	r31, Z+2	; 0x02
    1ce4:	e0 2d       	mov	r30, r0
    1ce6:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <i2cRead>
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf6:	05 80       	ldd	r0, Z+5	; 0x05
    1cf8:	f6 81       	ldd	r31, Z+6	; 0x06
    1cfa:	e0 2d       	mov	r30, r0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8a 36       	cpi	r24, 0x6A	; 106
    1d00:	31 f4       	brne	.+12     	; 0x1d0e <Emergency+0x86>
		beep(1);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <beep>
		eflag=1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 be 01 	sts	0x01BE, r24
		}
	if(*(emergency->read.buf)==0x55){
    1d0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d10:	fb 81       	ldd	r31, Y+3	; 0x03
    1d12:	05 80       	ldd	r0, Z+5	; 0x05
    1d14:	f6 81       	ldd	r31, Z+6	; 0x06
    1d16:	e0 2d       	mov	r30, r0
    1d18:	80 81       	ld	r24, Z
    1d1a:	85 35       	cpi	r24, 0x55	; 85
    1d1c:	d9 f4       	brne	.+54     	; 0x1d54 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1d1e:	a0 e6       	ldi	r26, 0x60	; 96
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e0 e6       	ldi	r30, 0x60	; 96
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	88 60       	ori	r24, 0x08	; 8
    1d2a:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1d2c:	a0 e6       	ldi	r26, 0x60	; 96
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e0 e6       	ldi	r30, 0x60	; 96
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 7b       	andi	r24, 0xBF	; 191
    1d38:	8c 93       	st	X, r24
		wdt_reset();
    1d3a:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1d3c:	88 e1       	ldi	r24, 0x18	; 24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	28 e0       	ldi	r18, 0x08	; 8
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	a8 95       	wdr
    1d48:	80 93 60 00 	sts	0x0060, r24
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	20 93 60 00 	sts	0x0060, r18
    1d52:	ff cf       	rjmp	.-2      	; 0x1d52 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <EmergencyStatus>:

bool EmergencyStatus()
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	0f 92       	push	r0
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1d6e:	80 91 be 01 	lds	r24, 0x01BE
    1d72:	88 23       	and	r24, r24
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <EmergencyStatus+0x16>
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <EmergencyStatus+0x1a>
	else return 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <__divmodhi4>:
    1d88:	97 fb       	bst	r25, 7
    1d8a:	09 2e       	mov	r0, r25
    1d8c:	07 26       	eor	r0, r23
    1d8e:	0a d0       	rcall	.+20     	; 0x1da4 <__divmodhi4_neg1>
    1d90:	77 fd       	sbrc	r23, 7
    1d92:	04 d0       	rcall	.+8      	; 0x1d9c <__divmodhi4_neg2>
    1d94:	0c d0       	rcall	.+24     	; 0x1dae <__udivmodhi4>
    1d96:	06 d0       	rcall	.+12     	; 0x1da4 <__divmodhi4_neg1>
    1d98:	00 20       	and	r0, r0
    1d9a:	1a f4       	brpl	.+6      	; 0x1da2 <__divmodhi4_exit>

00001d9c <__divmodhi4_neg2>:
    1d9c:	70 95       	com	r23
    1d9e:	61 95       	neg	r22
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255

00001da2 <__divmodhi4_exit>:
    1da2:	08 95       	ret

00001da4 <__divmodhi4_neg1>:
    1da4:	f6 f7       	brtc	.-4      	; 0x1da2 <__divmodhi4_exit>
    1da6:	90 95       	com	r25
    1da8:	81 95       	neg	r24
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <__udivmodhi4>:
    1dae:	aa 1b       	sub	r26, r26
    1db0:	bb 1b       	sub	r27, r27
    1db2:	51 e1       	ldi	r21, 0x11	; 17
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <__udivmodhi4_ep>

00001db6 <__udivmodhi4_loop>:
    1db6:	aa 1f       	adc	r26, r26
    1db8:	bb 1f       	adc	r27, r27
    1dba:	a6 17       	cp	r26, r22
    1dbc:	b7 07       	cpc	r27, r23
    1dbe:	10 f0       	brcs	.+4      	; 0x1dc4 <__udivmodhi4_ep>
    1dc0:	a6 1b       	sub	r26, r22
    1dc2:	b7 0b       	sbc	r27, r23

00001dc4 <__udivmodhi4_ep>:
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	5a 95       	dec	r21
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <__udivmodhi4_loop>
    1dcc:	80 95       	com	r24
    1dce:	90 95       	com	r25
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	08 95       	ret

00001dd6 <_exit>:
    1dd6:	f8 94       	cli

00001dd8 <__stop_program>:
    1dd8:	ff cf       	rjmp	.-2      	; 0x1dd8 <__stop_program>
