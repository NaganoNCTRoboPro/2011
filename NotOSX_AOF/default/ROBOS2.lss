
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001c0c  00001ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800156  00800156  00001cf6  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015c1  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  00003799  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001557  00000000  00000000  00004136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00005690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059c  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_20>
      54:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_28>
      74:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e0       	ldi	r30, 0x0C	; 12
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3b       	cpi	r26, 0xBF	; 191
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define CATCH 0x50

#define SUPPLY_WATCHING (1)

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ee 97       	sbiw	r28, 0x3e	; 62
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	uint8_t _group=0,_channel=0; 
      e6:	1e 86       	std	Y+14, r1	; 0x0e
      e8:	1d 86       	std	Y+13, r1	; 0x0d

	union controller_data *controller;

	int8_t slaveBuf[16]={0},m_size=2;
      ea:	80 e1       	ldi	r24, 0x10	; 16
      ec:	fe 01       	movw	r30, r28
      ee:	3f 96       	adiw	r30, 0x0f	; 15
      f0:	df 01       	movw	r26, r30
      f2:	98 2f       	mov	r25, r24
      f4:	1d 92       	st	X+, r1
      f6:	9a 95       	dec	r25
      f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x26>
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	8a 87       	std	Y+10, r24	; 0x0a
	bool a_flag=true;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	89 87       	std	Y+9, r24	; 0x09
	signed char duty=0;
     102:	18 86       	std	Y+8, r1	; 0x08
	uint8_t port;
	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],m_size},{(int8_t*)&slaveBuf[m_size],m_size}};
     104:	8a 85       	ldd	r24, Y+10	; 0x0a
     106:	68 2f       	mov	r22, r24
     108:	77 27       	eor	r23, r23
     10a:	67 fd       	sbrc	r22, 7
     10c:	70 95       	com	r23
     10e:	8a 85       	ldd	r24, Y+10	; 0x0a
     110:	99 27       	eor	r25, r25
     112:	87 fd       	sbrc	r24, 7
     114:	90 95       	com	r25
     116:	9e 01       	movw	r18, r28
     118:	21 5f       	subi	r18, 0xF1	; 241
     11a:	3f 4f       	sbci	r19, 0xFF	; 255
     11c:	28 0f       	add	r18, r24
     11e:	39 1f       	adc	r19, r25
     120:	8a 85       	ldd	r24, Y+10	; 0x0a
     122:	48 2f       	mov	r20, r24
     124:	55 27       	eor	r21, r21
     126:	47 fd       	sbrc	r20, 7
     128:	50 95       	com	r21
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	8f 8f       	std	Y+31, r24	; 0x1f
     12e:	ce 01       	movw	r24, r28
     130:	0f 96       	adiw	r24, 0x0f	; 15
     132:	99 a3       	std	Y+33, r25	; 0x21
     134:	88 a3       	std	Y+32, r24	; 0x20
     136:	7b a3       	std	Y+35, r23	; 0x23
     138:	6a a3       	std	Y+34, r22	; 0x22
     13a:	3d a3       	std	Y+37, r19	; 0x25
     13c:	2c a3       	std	Y+36, r18	; 0x24
     13e:	5f a3       	std	Y+39, r21	; 0x27
     140:	4e a3       	std	Y+38, r20	; 0x26
	Slave Throw = {THROW,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     142:	80 e4       	ldi	r24, 0x40	; 64
     144:	88 a7       	std	Y+40, r24	; 0x28
     146:	ce 01       	movw	r24, r28
     148:	0f 96       	adiw	r24, 0x0f	; 15
     14a:	0a 96       	adiw	r24, 0x0a	; 10
     14c:	9a a7       	std	Y+42, r25	; 0x2a
     14e:	89 a7       	std	Y+41, r24	; 0x29
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	9c a7       	std	Y+44, r25	; 0x2c
     156:	8b a7       	std	Y+43, r24	; 0x2b
     158:	ce 01       	movw	r24, r28
     15a:	0f 96       	adiw	r24, 0x0f	; 15
     15c:	0b 96       	adiw	r24, 0x0b	; 11
     15e:	9e a7       	std	Y+46, r25	; 0x2e
     160:	8d a7       	std	Y+45, r24	; 0x2d
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	98 ab       	std	Y+48, r25	; 0x30
     168:	8f a7       	std	Y+47, r24	; 0x2f
#if SUPPLY_WATCHING
	Slave EStop = {ESTOP,{(int8_t*)&slaveBuf[12],1},{(int8_t*)&slaveBuf[13],1}};		
     16a:	80 e1       	ldi	r24, 0x10	; 16
     16c:	89 ab       	std	Y+49, r24	; 0x31
     16e:	ce 01       	movw	r24, r28
     170:	0f 96       	adiw	r24, 0x0f	; 15
     172:	0c 96       	adiw	r24, 0x0c	; 12
     174:	9b ab       	std	Y+51, r25	; 0x33
     176:	8a ab       	std	Y+50, r24	; 0x32
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	9d ab       	std	Y+53, r25	; 0x35
     17e:	8c ab       	std	Y+52, r24	; 0x34
     180:	ce 01       	movw	r24, r28
     182:	0f 96       	adiw	r24, 0x0f	; 15
     184:	0d 96       	adiw	r24, 0x0d	; 13
     186:	9f ab       	std	Y+55, r25	; 0x37
     188:	8e ab       	std	Y+54, r24	; 0x36
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	99 af       	std	Y+57, r25	; 0x39
     190:	88 af       	std	Y+56, r24	; 0x38
	uint8_t e_flag=0;
     192:	1e 82       	std	Y+6, r1	; 0x06
#endif
	int i;
	uint8_t action;
	bool act=false,i2cStatus;
     194:	1a 82       	std	Y+2, r1	; 0x02

/*---------------------------------------------------------------*/
// 						èëÇ´Ç©Ç¶ÇøÇ·É_ÉÅÇÊÅI
/*---------------------------------------------------------------*/
	LEDInit();
     196:	0e 94 76 0b 	call	0x16ec	; 0x16ec <LEDInit>
	SwitchInit();
     19a:	0e 94 ad 0c 	call	0x195a	; 0x195a <SwitchInit>
	BeepInit();
     19e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <BeepInit>
	initCtrlData();
     1a2:	0e 94 30 03 	call	0x660	; 0x660 <initCtrlData>
	DDRC |= 0x04;
     1a6:	a7 e2       	ldi	r26, 0x27	; 39
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e7 e2       	ldi	r30, 0x27	; 39
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	84 60       	ori	r24, 0x04	; 4
     1b2:	8c 93       	st	X, r24
	PORTC = 0x04;
     1b4:	e8 e2       	ldi	r30, 0x28	; 40
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	80 83       	st	Z, r24
	initI2CMaster(100);
     1bc:	84 e6       	ldi	r24, 0x64	; 100
     1be:	0e 94 06 09 	call	0x120c	; 0x120c <initI2CMaster>

	wdt_reset();
     1c2:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2d e0       	ldi	r18, 0x0D	; 13
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	a8 95       	wdr
     1d0:	80 93 60 00 	sts	0x0060, r24
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	68 e0       	ldi	r22, 0x08	; 8
     1e0:	4a e0       	ldi	r20, 0x0A	; 10
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
	uart_setbuffer(0,buf,36);
     1e8:	26 e5       	ldi	r18, 0x56	; 86
     1ea:	31 e0       	ldi	r19, 0x01	; 1
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	b9 01       	movw	r22, r18
     1f2:	44 e2       	ldi	r20, 0x24	; 36
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	0e 94 21 06 	call	0xc42	; 0xc42 <uart_setbuffer>
	wait_ms(100);
     1fa:	84 e6       	ldi	r24, 0x64	; 100
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 8b 0b 	call	0x1716	; 0x1716 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	68 e1       	ldi	r22, 0x18	; 24
     208:	40 e4       	ldi	r20, 0x40	; 64
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
	mu2_command("GI",group[_group]);
     210:	8e 85       	ldd	r24, Y+14	; 0x0e
     212:	88 2f       	mov	r24, r24
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	fc 01       	movw	r30, r24
     21c:	e4 5f       	subi	r30, 0xF4	; 244
     21e:	fe 4f       	sbci	r31, 0xFE	; 254
     220:	20 81       	ld	r18, Z
     222:	31 81       	ldd	r19, Z+1	; 0x01
     224:	88 e2       	ldi	r24, 0x28	; 40
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 84 04 	call	0x908	; 0x908 <mu2_command>
	mu2_command("CH",channel[_channel]);
     22e:	8d 85       	ldd	r24, Y+13	; 0x0d
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	fc 01       	movw	r30, r24
     23a:	e0 5e       	subi	r30, 0xE0	; 224
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	20 81       	ld	r18, Z
     240:	31 81       	ldd	r19, Z+1	; 0x01
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	b9 01       	movw	r22, r18
     248:	0e 94 84 04 	call	0x908	; 0x908 <mu2_command>
	mu2_command("EI","01");
     24c:	8e e2       	ldi	r24, 0x2E	; 46
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	31 e0       	ldi	r19, 0x01	; 1
     254:	b9 01       	movw	r22, r18
     256:	0e 94 84 04 	call	0x908	; 0x908 <mu2_command>
	mu2_command("DI","10");
     25a:	81 e3       	ldi	r24, 0x31	; 49
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	24 e3       	ldi	r18, 0x34	; 52
     260:	31 e0       	ldi	r19, 0x01	; 1
     262:	b9 01       	movw	r22, r18
     264:	0e 94 84 04 	call	0x908	; 0x908 <mu2_command>
	mu2_command("BR","48");
     268:	87 e3       	ldi	r24, 0x37	; 55
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	2a e3       	ldi	r18, 0x3A	; 58
     26e:	31 e0       	ldi	r19, 0x01	; 1
     270:	b9 01       	movw	r22, r18
     272:	0e 94 84 04 	call	0x908	; 0x908 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	60 e9       	ldi	r22, 0x90	; 144
     27c:	43 e0       	ldi	r20, 0x03	; 3
     27e:	51 e0       	ldi	r21, 0x01	; 1
     280:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
	sei();
     29c:	78 94       	sei
	wait_ms(100);
     29e:	84 e6       	ldi	r24, 0x64	; 100
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <wait_ms>
	PORTC &= 0xFB;
     2a6:	a8 e2       	ldi	r26, 0x28	; 40
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e8 e2       	ldi	r30, 0x28	; 40
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	8b 7f       	andi	r24, 0xFB	; 251
     2b2:	8c 93       	st	X, r24
	wait_ms(25);
     2b4:	89 e1       	ldi	r24, 0x19	; 25
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <wait_ms>

	TCCR1A = 0;
     2bc:	e0 e8       	ldi	r30, 0x80	; 128
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	10 82       	st	Z, r1
	TCCR1B = 5;
     2c2:	e1 e8       	ldi	r30, 0x81	; 129
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	85 e0       	ldi	r24, 0x05	; 5
     2c8:	80 83       	st	Z, r24
	TIMSK1 = 1;
     2ca:	ef e6       	ldi	r30, 0x6F	; 111
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 83       	st	Z, r24
	TCNT1 = 0;
     2d2:	e4 e8       	ldi	r30, 0x84	; 132
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	11 82       	std	Z+1, r1	; 0x01
     2d8:	10 82       	st	Z, r1

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     2da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Toggle_RC_Rx_Buffer>
     2de:	9c 87       	std	Y+12, r25	; 0x0c
     2e0:	8b 87       	std	Y+11, r24	; 0x0b
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     2e2:	eb 85       	ldd	r30, Y+11	; 0x0b
     2e4:	fc 85       	ldd	r31, Y+12	; 0x0c
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	82 70       	andi	r24, 0x02	; 2
     2ea:	88 23       	and	r24, r24
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <main+0x222>
     2ee:	aa c0       	rjmp	.+340    	; 0x444 <main+0x376>
     2f0:	eb 85       	ldd	r30, Y+11	; 0x0b
     2f2:	fc 85       	ldd	r31, Y+12	; 0x0c
     2f4:	80 81       	ld	r24, Z
     2f6:	81 70       	andi	r24, 0x01	; 1
     2f8:	88 23       	and	r24, r24
     2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x230>
     2fc:	a3 c0       	rjmp	.+326    	; 0x444 <main+0x376>
     2fe:	eb 85       	ldd	r30, Y+11	; 0x0b
     300:	fc 85       	ldd	r31, Y+12	; 0x0c
     302:	80 81       	ld	r24, Z
     304:	80 71       	andi	r24, 0x10	; 16
     306:	88 23       	and	r24, r24
     308:	09 f4       	brne	.+2      	; 0x30c <main+0x23e>
     30a:	9c c0       	rjmp	.+312    	; 0x444 <main+0x376>
     30c:	eb 85       	ldd	r30, Y+11	; 0x0b
     30e:	fc 85       	ldd	r31, Y+12	; 0x0c
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	8d 30       	cpi	r24, 0x0D	; 13
     31a:	91 05       	cpc	r25, r1
     31c:	0c f4       	brge	.+2      	; 0x320 <main+0x252>
     31e:	92 c0       	rjmp	.+292    	; 0x444 <main+0x376>
     320:	eb 85       	ldd	r30, Y+11	; 0x0b
     322:	fc 85       	ldd	r31, Y+12	; 0x0c
     324:	83 81       	ldd	r24, Z+3	; 0x03
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	8d 30       	cpi	r24, 0x0D	; 13
     32e:	91 05       	cpc	r25, r1
     330:	0c f4       	brge	.+2      	; 0x334 <main+0x266>
     332:	88 c0       	rjmp	.+272    	; 0x444 <main+0x376>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	68 e1       	ldi	r22, 0x18	; 24
     352:	43 e0       	ldi	r20, 0x03	; 3
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
				LED(2,mu2_command_eeprom("EI","01"));
     35a:	8e e2       	ldi	r24, 0x2E	; 46
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	31 e0       	ldi	r19, 0x01	; 1
     362:	b9 01       	movw	r22, r18
     364:	0e 94 06 05 	call	0xa0c	; 0xa0c <mu2_command_eeprom>
     368:	8a af       	std	Y+58, r24	; 0x3a
     36a:	aa ad       	ldd	r26, Y+58	; 0x3a
     36c:	aa 23       	and	r26, r26
     36e:	11 f0       	breq	.+4      	; 0x374 <main+0x2a6>
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	ba af       	std	Y+58, r27	; 0x3a
     374:	9a ad       	ldd	r25, Y+58	; 0x3a
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	69 2f       	mov	r22, r25
     37a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				LED(2,mu2_command_eeprom("DI","10"));
     37e:	81 e3       	ldi	r24, 0x31	; 49
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	24 e3       	ldi	r18, 0x34	; 52
     384:	31 e0       	ldi	r19, 0x01	; 1
     386:	b9 01       	movw	r22, r18
     388:	0e 94 06 05 	call	0xa0c	; 0xa0c <mu2_command_eeprom>
     38c:	8b af       	std	Y+59, r24	; 0x3b
     38e:	8b ad       	ldd	r24, Y+59	; 0x3b
     390:	88 23       	and	r24, r24
     392:	11 f0       	breq	.+4      	; 0x398 <main+0x2ca>
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	9b af       	std	Y+59, r25	; 0x3b
     398:	9b ad       	ldd	r25, Y+59	; 0x3b
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	69 2f       	mov	r22, r25
     39e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				LED(2,mu2_command_eeprom("GI",group[_group]));
     3a2:	8e 85       	ldd	r24, Y+14	; 0x0e
     3a4:	88 2f       	mov	r24, r24
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	fc 01       	movw	r30, r24
     3ae:	e4 5f       	subi	r30, 0xF4	; 244
     3b0:	fe 4f       	sbci	r31, 0xFE	; 254
     3b2:	20 81       	ld	r18, Z
     3b4:	31 81       	ldd	r19, Z+1	; 0x01
     3b6:	88 e2       	ldi	r24, 0x28	; 40
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	b9 01       	movw	r22, r18
     3bc:	0e 94 06 05 	call	0xa0c	; 0xa0c <mu2_command_eeprom>
     3c0:	8c af       	std	Y+60, r24	; 0x3c
     3c2:	ac ad       	ldd	r26, Y+60	; 0x3c
     3c4:	aa 23       	and	r26, r26
     3c6:	11 f0       	breq	.+4      	; 0x3cc <main+0x2fe>
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	bc af       	std	Y+60, r27	; 0x3c
     3cc:	9c ad       	ldd	r25, Y+60	; 0x3c
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	69 2f       	mov	r22, r25
     3d2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				LED(2,mu2_command_eeprom("CH",channel[_channel]));
     3d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	fc 01       	movw	r30, r24
     3e2:	e0 5e       	subi	r30, 0xE0	; 224
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	20 81       	ld	r18, Z
     3e8:	31 81       	ldd	r19, Z+1	; 0x01
     3ea:	8b e2       	ldi	r24, 0x2B	; 43
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	b9 01       	movw	r22, r18
     3f0:	0e 94 06 05 	call	0xa0c	; 0xa0c <mu2_command_eeprom>
     3f4:	8d af       	std	Y+61, r24	; 0x3d
     3f6:	8d ad       	ldd	r24, Y+61	; 0x3d
     3f8:	88 23       	and	r24, r24
     3fa:	11 f0       	breq	.+4      	; 0x400 <main+0x332>
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9d af       	std	Y+61, r25	; 0x3d
     400:	9d ad       	ldd	r25, Y+61	; 0x3d
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	69 2f       	mov	r22, r25
     406:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     40a:	87 e3       	ldi	r24, 0x37	; 55
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	2a e3       	ldi	r18, 0x3A	; 58
     410:	31 e0       	ldi	r19, 0x01	; 1
     412:	b9 01       	movw	r22, r18
     414:	0e 94 06 05 	call	0xa0c	; 0xa0c <mu2_command_eeprom>
     418:	8e af       	std	Y+62, r24	; 0x3e
     41a:	ae ad       	ldd	r26, Y+62	; 0x3e
     41c:	aa 23       	and	r26, r26
     41e:	11 f0       	breq	.+4      	; 0x424 <main+0x356>
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	be af       	std	Y+62, r27	; 0x3e
     424:	9e ad       	ldd	r25, Y+62	; 0x3e
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	69 2f       	mov	r22, r25
     42a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				wait_ms(100);
     42e:	84 e6       	ldi	r24, 0x64	; 100
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 8b 0b 	call	0x1716	; 0x1716 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	60 e9       	ldi	r22, 0x90	; 144
     43c:	43 e0       	ldi	r20, 0x03	; 3
     43e:	51 e0       	ldi	r21, 0x01	; 1
     440:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
			}
/*-------------------------------------------------------------------------*/

/*AIR*/
		if(a_flag){
     444:	89 85       	ldd	r24, Y+9	; 0x09
     446:	88 23       	and	r24, r24
     448:	a9 f1       	breq	.+106    	; 0x4b4 <main+0x3e6>
	/*AIR ON*/
			port=0x00;
     44a:	1f 82       	std	Y+7, r1	; 0x07
			if(controller->detail.Button.L) port|=0x01;
     44c:	eb 85       	ldd	r30, Y+11	; 0x0b
     44e:	fc 85       	ldd	r31, Y+12	; 0x0c
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	80 72       	andi	r24, 0x20	; 32
     454:	88 23       	and	r24, r24
     456:	21 f0       	breq	.+8      	; 0x460 <main+0x392>
     458:	8f 81       	ldd	r24, Y+7	; 0x07
     45a:	81 60       	ori	r24, 0x01	; 1
     45c:	8f 83       	std	Y+7, r24	; 0x07
     45e:	03 c0       	rjmp	.+6      	; 0x466 <main+0x398>
			else port&=~0x01;
     460:	8f 81       	ldd	r24, Y+7	; 0x07
     462:	8e 7f       	andi	r24, 0xFE	; 254
     464:	8f 83       	std	Y+7, r24	; 0x07
			if(controller->detail.Button.R) port|=0x02;
     466:	eb 85       	ldd	r30, Y+11	; 0x0b
     468:	fc 85       	ldd	r31, Y+12	; 0x0c
     46a:	81 81       	ldd	r24, Z+1	; 0x01
     46c:	80 74       	andi	r24, 0x40	; 64
     46e:	88 23       	and	r24, r24
     470:	21 f0       	breq	.+8      	; 0x47a <main+0x3ac>
     472:	8f 81       	ldd	r24, Y+7	; 0x07
     474:	82 60       	ori	r24, 0x02	; 2
     476:	8f 83       	std	Y+7, r24	; 0x07
     478:	03 c0       	rjmp	.+6      	; 0x480 <main+0x3b2>
			else port&=~0x02;
     47a:	8f 81       	ldd	r24, Y+7	; 0x07
     47c:	8d 7f       	andi	r24, 0xFD	; 253
     47e:	8f 83       	std	Y+7, r24	; 0x07
	/*àÍèuÉGÉAON(6ms)*/
			if(controller->detail.Button.ZL) port|=0x10;
     480:	eb 85       	ldd	r30, Y+11	; 0x0b
     482:	fc 85       	ldd	r31, Y+12	; 0x0c
     484:	81 81       	ldd	r24, Z+1	; 0x01
     486:	88 70       	andi	r24, 0x08	; 8
     488:	88 23       	and	r24, r24
     48a:	21 f0       	breq	.+8      	; 0x494 <main+0x3c6>
     48c:	8f 81       	ldd	r24, Y+7	; 0x07
     48e:	80 61       	ori	r24, 0x10	; 16
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	03 c0       	rjmp	.+6      	; 0x49a <main+0x3cc>
			else port&=~0x10;
     494:	8f 81       	ldd	r24, Y+7	; 0x07
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	8f 83       	std	Y+7, r24	; 0x07
			if(controller->detail.Button.ZR) port|=0x20;
     49a:	eb 85       	ldd	r30, Y+11	; 0x0b
     49c:	fc 85       	ldd	r31, Y+12	; 0x0c
     49e:	81 81       	ldd	r24, Z+1	; 0x01
     4a0:	80 71       	andi	r24, 0x10	; 16
     4a2:	88 23       	and	r24, r24
     4a4:	21 f0       	breq	.+8      	; 0x4ae <main+0x3e0>
     4a6:	8f 81       	ldd	r24, Y+7	; 0x07
     4a8:	80 62       	ori	r24, 0x20	; 32
     4aa:	8f 83       	std	Y+7, r24	; 0x07
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <main+0x3e6>
			else port&=~0x20;
     4ae:	8f 81       	ldd	r24, Y+7	; 0x07
     4b0:	8f 7d       	andi	r24, 0xDF	; 223
     4b2:	8f 83       	std	Y+7, r24	; 0x07
			}
	/*ç≈èâÇ…ï–ï˚ÇæÇØÇ†Ç∞ÇΩÇ‹Ç‹Ç…Ç∑ÇÈ&ñﬂÇ∑*/
		if(controller->detail.Button.UP)  {port=0x02;a_flag=0;}
     4b4:	eb 85       	ldd	r30, Y+11	; 0x0b
     4b6:	fc 85       	ldd	r31, Y+12	; 0x0c
     4b8:	80 81       	ld	r24, Z
     4ba:	80 71       	andi	r24, 0x10	; 16
     4bc:	88 23       	and	r24, r24
     4be:	19 f0       	breq	.+6      	; 0x4c6 <main+0x3f8>
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	8f 83       	std	Y+7, r24	; 0x07
     4c4:	19 86       	std	Y+9, r1	; 0x09
		if(controller->detail.Button.DOWN){port=0x00;a_flag=1;}
     4c6:	eb 85       	ldd	r30, Y+11	; 0x0b
     4c8:	fc 85       	ldd	r31, Y+12	; 0x0c
     4ca:	80 81       	ld	r24, Z
     4cc:	80 74       	andi	r24, 0x40	; 64
     4ce:	88 23       	and	r24, r24
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <main+0x40a>
     4d2:	1f 82       	std	Y+7, r1	; 0x07
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	89 87       	std	Y+9, r24	; 0x09
		if(port) act=1;
     4d8:	8f 81       	ldd	r24, Y+7	; 0x07
     4da:	88 23       	and	r24, r24
     4dc:	19 f0       	breq	.+6      	; 0x4e4 <main+0x416>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	8a 83       	std	Y+2, r24	; 0x02
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <main+0x418>
		else act=0;
     4e4:	1a 82       	std	Y+2, r1	; 0x02
		LED(2,act);
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	6a 81       	ldd	r22, Y+2	; 0x02
     4ea:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
		
#if SUPPLY_WATCHING
/*ÉoÉãÉXÉÇÅ[Éh*/
		/*ÉoÉãÉX!!!!!*/
		if(controller->detail.Button.SELECT&&controller->detail.Button.START){
     4ee:	eb 85       	ldd	r30, Y+11	; 0x0b
     4f0:	fc 85       	ldd	r31, Y+12	; 0x0c
     4f2:	81 81       	ldd	r24, Z+1	; 0x01
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	88 23       	and	r24, r24
     4f8:	61 f0       	breq	.+24     	; 0x512 <main+0x444>
     4fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     4fc:	fc 85       	ldd	r31, Y+12	; 0x0c
     4fe:	81 81       	ldd	r24, Z+1	; 0x01
     500:	84 70       	andi	r24, 0x04	; 4
     502:	88 23       	and	r24, r24
     504:	31 f0       	breq	.+12     	; 0x512 <main+0x444>
			e_flag=E_ON;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	8e 83       	std	Y+6, r24	; 0x06
			port&=0xCF;
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	8f 7c       	andi	r24, 0xCF	; 207
     50e:	8f 83       	std	Y+7, r24	; 0x07
     510:	0a c0       	rjmp	.+20     	; 0x526 <main+0x458>
		}
		/*ïúäà!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     512:	eb 85       	ldd	r30, Y+11	; 0x0b
     514:	fc 85       	ldd	r31, Y+12	; 0x0c
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	82 70       	andi	r24, 0x02	; 2
     51a:	88 23       	and	r24, r24
     51c:	19 f0       	breq	.+6      	; 0x524 <main+0x456>
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	8e 83       	std	Y+6, r24	; 0x06
     522:	01 c0       	rjmp	.+2      	; 0x526 <main+0x458>
		else e_flag=E_KEEP;	
     524:	1e 82       	std	Y+6, r1	; 0x06
#endif	
		aDrive(&Throw,port,act);
     526:	ce 01       	movw	r24, r28
     528:	88 96       	adiw	r24, 0x28	; 40
     52a:	6f 81       	ldd	r22, Y+7	; 0x07
     52c:	4a 81       	ldd	r20, Y+2	; 0x02
     52e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <aDrive>
/*ï‡çs*/		
		duty=100;
     532:	84 e6       	ldi	r24, 0x64	; 100
     534:	88 87       	std	Y+8, r24	; 0x08
		if(controller->detail.Button.A) action=CW;
     536:	eb 85       	ldd	r30, Y+11	; 0x0b
     538:	fc 85       	ldd	r31, Y+12	; 0x0c
     53a:	80 81       	ld	r24, Z
     53c:	82 70       	andi	r24, 0x02	; 2
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <main+0x47a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	0b c0       	rjmp	.+22     	; 0x55e <main+0x490>
		else if(controller->detail.Button.B) action=CCW;
     548:	eb 85       	ldd	r30, Y+11	; 0x0b
     54a:	fc 85       	ldd	r31, Y+12	; 0x0c
     54c:	80 81       	ld	r24, Z
     54e:	84 70       	andi	r24, 0x04	; 4
     550:	88 23       	and	r24, r24
     552:	19 f0       	breq	.+6      	; 0x55a <main+0x48c>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	02 c0       	rjmp	.+4      	; 0x55e <main+0x490>
		else action=BRAKE;
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	8b 83       	std	Y+3, r24	; 0x03
/*í·ë¨ÉÇÅ[Éh*/
		if(controller->detail.Button.X){duty=70;action=CW;}
     55e:	eb 85       	ldd	r30, Y+11	; 0x0b
     560:	fc 85       	ldd	r31, Y+12	; 0x0c
     562:	80 81       	ld	r24, Z
     564:	81 70       	andi	r24, 0x01	; 1
     566:	88 23       	and	r24, r24
     568:	29 f0       	breq	.+10     	; 0x574 <main+0x4a6>
     56a:	86 e4       	ldi	r24, 0x46	; 70
     56c:	88 87       	std	Y+8, r24	; 0x08
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	8b 83       	std	Y+3, r24	; 0x03
     572:	0a c0       	rjmp	.+20     	; 0x588 <main+0x4ba>
		else if(controller->detail.Button.Y){duty=35;action=CW;}
     574:	eb 85       	ldd	r30, Y+11	; 0x0b
     576:	fc 85       	ldd	r31, Y+12	; 0x0c
     578:	80 81       	ld	r24, Z
     57a:	88 70       	andi	r24, 0x08	; 8
     57c:	88 23       	and	r24, r24
     57e:	21 f0       	breq	.+8      	; 0x588 <main+0x4ba>
     580:	83 e2       	ldi	r24, 0x23	; 35
     582:	88 87       	std	Y+8, r24	; 0x08
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	8b 83       	std	Y+3, r24	; 0x03
/*I2CÉfÅ[É^ÇÃê∂ê¨*/
		for(i=0;i<2;i++) mDrive(&Motor,action,duty,i);			
     588:	1d 82       	std	Y+5, r1	; 0x05
     58a:	1c 82       	std	Y+4, r1	; 0x04
     58c:	0c c0       	rjmp	.+24     	; 0x5a6 <main+0x4d8>
     58e:	2c 81       	ldd	r18, Y+4	; 0x04
     590:	ce 01       	movw	r24, r28
     592:	4f 96       	adiw	r24, 0x1f	; 31
     594:	6b 81       	ldd	r22, Y+3	; 0x03
     596:	48 85       	ldd	r20, Y+8	; 0x08
     598:	0e 94 15 0c 	call	0x182a	; 0x182a <mDrive>
     59c:	8c 81       	ldd	r24, Y+4	; 0x04
     59e:	9d 81       	ldd	r25, Y+5	; 0x05
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	9d 83       	std	Y+5, r25	; 0x05
     5a4:	8c 83       	std	Y+4, r24	; 0x04
     5a6:	8c 81       	ldd	r24, Y+4	; 0x04
     5a8:	9d 81       	ldd	r25, Y+5	; 0x05
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	91 05       	cpc	r25, r1
     5ae:	7c f3       	brlt	.-34     	; 0x58e <main+0x4c0>

/*I2C Writeing And Check*/
		i2cStatus = true;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(4);  
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	08 2f       	mov	r16, r24
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	ce 01       	movw	r24, r28
     5bc:	4f 96       	adiw	r24, 0x1f	; 31
     5be:	0e 94 3d 09 	call	0x127a	; 0x127a <i2cWrite>
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	80 23       	and	r24, r16
     5c8:	91 23       	and	r25, r17
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <main+0x506>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <wait_us>
#if SUPPLY_WATCHING
		i2cStatus &= Emergency(&EStop,e_flag);	
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	08 2f       	mov	r16, r24
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	2e 81       	ldd	r18, Y+6	; 0x06
     5e4:	ce 01       	movw	r24, r28
     5e6:	c1 96       	adiw	r24, 0x31	; 49
     5e8:	62 2f       	mov	r22, r18
     5ea:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <Emergency>
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	80 23       	and	r24, r16
     5f4:	91 23       	and	r25, r17
     5f6:	19 82       	std	Y+1, r1	; 0x01
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	11 f0       	breq	.+4      	; 0x600 <main+0x532>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&EStop); wait_us(4);
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	08 2f       	mov	r16, r24
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	ce 01       	movw	r24, r28
     608:	c1 96       	adiw	r24, 0x31	; 49
     60a:	0e 94 3d 09 	call	0x127a	; 0x127a <i2cWrite>
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	80 23       	and	r24, r16
     614:	91 23       	and	r25, r17
     616:	19 82       	std	Y+1, r1	; 0x01
     618:	00 97       	sbiw	r24, 0x00	; 0
     61a:	11 f0       	breq	.+4      	; 0x620 <main+0x552>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	89 83       	std	Y+1, r24	; 0x01
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <wait_us>
#endif
		i2cStatus &= i2cWrite(&Throw); wait_us(4);
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	08 2f       	mov	r16, r24
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	ce 01       	movw	r24, r28
     630:	88 96       	adiw	r24, 0x28	; 40
     632:	0e 94 3d 09 	call	0x127a	; 0x127a <i2cWrite>
     636:	88 2f       	mov	r24, r24
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	80 23       	and	r24, r16
     63c:	91 23       	and	r25, r17
     63e:	19 82       	std	Y+1, r1	; 0x01
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	11 f0       	breq	.+4      	; 0x648 <main+0x57a>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <wait_us>
		i2cCheck(i2cStatus);
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <i2cCheck>

/********Ç±ÇÍà»ç~ÇèëÇ´ä∑Ç¶ÇÈÇ±Ç∆ÇÕêÑèßÇ≥ÇÍÇ»Ç¢ÇÊ!!!********/
		wait_ms(25);
     656:	89 e1       	ldi	r24, 0x19	; 25
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <wait_ms>
     65e:	3d ce       	rjmp	.-902    	; 0x2da <main+0x20c>

00000660 <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     668:	10 92 7a 01 	sts	0x017A, r1
     66c:	15 c0       	rjmp	.+42     	; 0x698 <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     66e:	80 91 7a 01 	lds	r24, 0x017A
     672:	28 2f       	mov	r18, r24
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	80 91 7a 01 	lds	r24, 0x017A
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	e3 5c       	subi	r30, 0xC3	; 195
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	80 81       	ld	r24, Z
     686:	f9 01       	movw	r30, r18
     688:	e2 58       	subi	r30, 0x82	; 130
     68a:	fe 4f       	sbci	r31, 0xFE	; 254
     68c:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     68e:	80 91 7a 01 	lds	r24, 0x017A
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	80 93 7a 01 	sts	0x017A, r24
     698:	80 91 7a 01 	lds	r24, 0x017A
     69c:	84 30       	cpi	r24, 0x04	; 4
     69e:	38 f3       	brcs	.-50     	; 0x66e <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
	cli();
     6ae:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     6b0:	10 92 7a 01 	sts	0x017A, r1
     6b4:	15 c0       	rjmp	.+42     	; 0x6e0 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     6b6:	80 91 7a 01 	lds	r24, 0x017A
     6ba:	28 2f       	mov	r18, r24
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	80 91 7a 01 	lds	r24, 0x017A
     6c2:	88 2f       	mov	r24, r24
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	e2 58       	subi	r30, 0x82	; 130
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	80 81       	ld	r24, Z
     6ce:	f9 01       	movw	r30, r18
     6d0:	ee 57       	subi	r30, 0x7E	; 126
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     6d6:	80 91 7a 01 	lds	r24, 0x017A
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	80 93 7a 01 	sts	0x017A, r24
     6e0:	80 91 7a 01 	lds	r24, 0x017A
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	38 f3       	brcs	.-50     	; 0x6b6 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     6e8:	78 94       	sei
	return &keepCtrlData;
     6ea:	82 e8       	ldi	r24, 0x82	; 130
     6ec:	91 e0       	ldi	r25, 0x01	; 1
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <__vector_20>:


ISR(USART0_RX_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	00 90 5b 00 	lds	r0, 0x005B
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     724:	e6 ec       	ldi	r30, 0xC6	; 198
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	80 93 9e 01 	sts	0x019E, r24

	if(phase){
     72e:	80 91 7c 01 	lds	r24, 0x017C
     732:	88 23       	and	r24, r24
     734:	09 f4       	brne	.+2      	; 0x738 <__vector_20+0x44>
     736:	52 c0       	rjmp	.+164    	; 0x7dc <__vector_20+0xe8>
		packet[cnt] = val;
     738:	80 91 7b 01 	lds	r24, 0x017B
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	20 91 9e 01 	lds	r18, 0x019E
     744:	fc 01       	movw	r30, r24
     746:	ea 57       	subi	r30, 0x7A	; 122
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     74c:	80 91 7b 01 	lds	r24, 0x017B
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	b0 f4       	brcc	.+44     	; 0x780 <__vector_20+0x8c>
			if(val != check[cnt]){
     754:	80 91 7b 01 	lds	r24, 0x017B
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	ef 5b       	subi	r30, 0xBF	; 191
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	90 81       	ld	r25, Z
     764:	80 91 9e 01 	lds	r24, 0x019E
     768:	98 17       	cp	r25, r24
     76a:	91 f1       	breq	.+100    	; 0x7d0 <__vector_20+0xdc>
				phase = false;
     76c:	10 92 7c 01 	sts	0x017C, r1
//				uart1_putchar('@');
				LED(0,false);
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
				beep(1);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
     77e:	28 c0       	rjmp	.+80     	; 0x7d0 <__vector_20+0xdc>
			}
		}else if(cnt==8){
     780:	80 91 7b 01 	lds	r24, 0x017B
     784:	88 30       	cpi	r24, 0x08	; 8
     786:	21 f5       	brne	.+72     	; 0x7d0 <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     788:	80 91 8b 01 	lds	r24, 0x018B
     78c:	80 93 7e 01 	sts	0x017E, r24
			ctrlData.buf[1] = packet[6];
     790:	80 91 8c 01 	lds	r24, 0x018C
     794:	80 93 7f 01 	sts	0x017F, r24
			ctrlData.buf[2] = packet[7];
     798:	80 91 8d 01 	lds	r24, 0x018D
     79c:	80 93 80 01 	sts	0x0180, r24
			ctrlData.buf[3] = packet[8];
     7a0:	80 91 8e 01 	lds	r24, 0x018E
     7a4:	80 93 81 01 	sts	0x0181, r24
			phase = false;
     7a8:	10 92 7c 01 	sts	0x017C, r1
			wdt_reset();
     7ac:	a8 95       	wdr
			LED(0,true);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
			if(EmergencyStatus()) beep(0);
     7b6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <EmergencyStatus>
     7ba:	88 23       	and	r24, r24
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <__vector_20+0xd0>
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
			ovf_cnt = 0;
     7c4:	10 92 7d 01 	sts	0x017D, r1
			TCNT1 = 0;
     7c8:	e4 e8       	ldi	r30, 0x84	; 132
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	11 82       	std	Z+1, r1	; 0x01
     7ce:	10 82       	st	Z, r1
		}
		cnt++;
     7d0:	80 91 7b 01 	lds	r24, 0x017B
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 7b 01 	sts	0x017B, r24
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__vector_20+0xfa>
	}else{
		if(val=='*'){
     7dc:	80 91 9e 01 	lds	r24, 0x019E
     7e0:	8a 32       	cpi	r24, 0x2A	; 42
     7e2:	29 f4       	brne	.+10     	; 0x7ee <__vector_20+0xfa>
		cnt = 0;
     7e4:	10 92 7b 01 	sts	0x017B, r1
		phase = true;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 7c 01 	sts	0x017C, r24
		}
	}

}
     7ee:	cf 91       	pop	r28
     7f0:	df 91       	pop	r29
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	00 92 5b 00 	sts	0x005B, r0
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_15>:

ISR (TIMER1_OVF_vect){
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	00 90 5b 00 	lds	r0, 0x005B
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     83e:	80 91 7d 01 	lds	r24, 0x017D
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	80 93 7d 01 	sts	0x017D, r24
	if(ovf_cnt>150){
     848:	80 91 7d 01 	lds	r24, 0x017D
     84c:	87 39       	cpi	r24, 0x97	; 151
     84e:	f0 f0       	brcs	.+60     	; 0x88c <__vector_15+0x72>
		ovf_cnt = 0;
     850:	10 92 7d 01 	sts	0x017D, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     854:	10 92 7a 01 	sts	0x017A, r1
     858:	15 c0       	rjmp	.+42     	; 0x884 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     85a:	80 91 7a 01 	lds	r24, 0x017A
     85e:	28 2f       	mov	r18, r24
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	80 91 7a 01 	lds	r24, 0x017A
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	e3 5c       	subi	r30, 0xC3	; 195
     86e:	fe 4f       	sbci	r31, 0xFE	; 254
     870:	80 81       	ld	r24, Z
     872:	f9 01       	movw	r30, r18
     874:	e2 58       	subi	r30, 0x82	; 130
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     87a:	80 91 7a 01 	lds	r24, 0x017A
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	80 93 7a 01 	sts	0x017A, r24
     884:	80 91 7a 01 	lds	r24, 0x017A
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	38 f3       	brcs	.-50     	; 0x85a <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	3f 91       	pop	r19
     89a:	2f 91       	pop	r18
     89c:	0f 90       	pop	r0
     89e:	00 92 5b 00 	sts	0x005B, r0
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <Byte2Str>:
/// ÉoÉCÉgÅi0x00Å`0xFFÅjÇÃêîÇ2åÖÇÃï∂éöóÒÇ…ïœä∑
/// </summary>
/// <param name="num">ïœä∑ëŒè€ÇÃêîéö</param>
/// <param name="str">ïœä∑å„ÇÃï∂éöóÒÇäiî[Ç∑ÇÈóÃàÊ</param>
void Byte2Str(unsigned char num, char *str)
{
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <Byte2Str+0x6>
     8b2:	0f 92       	push	r0
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	89 83       	std	Y+1, r24	; 0x01
     8ba:	7b 83       	std	Y+3, r23	; 0x03
     8bc:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	82 95       	swap	r24
     8c2:	8f 70       	andi	r24, 0x0F	; 15
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	fc 01       	movw	r30, r24
     8ca:	eb 5b       	subi	r30, 0xBB	; 187
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	80 81       	ld	r24, Z
     8d0:	ea 81       	ldd	r30, Y+2	; 0x02
     8d2:	fb 81       	ldd	r31, Y+3	; 0x03
     8d4:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     8d6:	8a 81       	ldd	r24, Y+2	; 0x02
     8d8:	9b 81       	ldd	r25, Y+3	; 0x03
     8da:	dc 01       	movw	r26, r24
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	8f 70       	andi	r24, 0x0F	; 15
     8e6:	90 70       	andi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	eb 5b       	subi	r30, 0xBB	; 187
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	80 81       	ld	r24, Z
     8f0:	8c 93       	st	X, r24
	str[2] = '\0';
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	9b 81       	ldd	r25, Y+3	; 0x03
     8f6:	fc 01       	movw	r30, r24
     8f8:	32 96       	adiw	r30, 0x02	; 2
     8fa:	10 82       	st	Z, r1
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	08 95       	ret

00000908 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	00 d0       	rcall	.+0      	; 0x912 <mu2_command+0xa>
     912:	00 d0       	rcall	.+0      	; 0x914 <mu2_command+0xc>
     914:	0f 92       	push	r0
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	7c 83       	std	Y+4, r23	; 0x04
     920:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(cmd[0]);
     928:	e9 81       	ldd	r30, Y+1	; 0x01
     92a:	fa 81       	ldd	r31, Y+2	; 0x02
     92c:	80 81       	ld	r24, Z
     92e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(cmd[1]);
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	fc 01       	movw	r30, r24
     938:	31 96       	adiw	r30, 0x01	; 1
     93a:	80 81       	ld	r24, Z
     93c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
     940:	0a c0       	rjmp	.+20     	; 0x956 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     942:	eb 81       	ldd	r30, Y+3	; 0x03
     944:	fc 81       	ldd	r31, Y+4	; 0x04
     946:	80 81       	ld	r24, Z
     948:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
		val++;
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	9c 83       	std	Y+4, r25	; 0x04
     954:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     956:	eb 81       	ldd	r30, Y+3	; 0x03
     958:	fc 81       	ldd	r31, Y+4	; 0x04
     95a:	80 81       	ld	r24, Z
     95c:	88 23       	and	r24, r24
     95e:	89 f7       	brne	.-30     	; 0x942 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     960:	8d e0       	ldi	r24, 0x0D	; 13
     962:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(0x0a);
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	for(i=0;i<10;i++){
     96c:	10 92 9f 01 	sts	0x019F, r1
     970:	32 c0       	rjmp	.+100    	; 0x9d6 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     972:	80 91 9f 01 	lds	r24, 0x019F
     976:	08 2f       	mov	r16, r24
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	0e 94 54 06 	call	0xca8	; 0xca8 <uart0_getchar>
     97e:	f8 01       	movw	r30, r16
     980:	e0 56       	subi	r30, 0x60	; 96
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     986:	80 91 9f 01 	lds	r24, 0x019F
     98a:	88 2f       	mov	r24, r24
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	fc 01       	movw	r30, r24
     990:	e0 56       	subi	r30, 0x60	; 96
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	80 81       	ld	r24, Z
     996:	0e 94 8a 06 	call	0xd14	; 0xd14 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     99a:	80 91 9f 01 	lds	r24, 0x019F
     99e:	88 23       	and	r24, r24
     9a0:	a9 f0       	breq	.+42     	; 0x9cc <mu2_command+0xc4>
     9a2:	80 91 9f 01 	lds	r24, 0x019F
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	fc 01       	movw	r30, r24
     9ae:	e0 56       	subi	r30, 0x60	; 96
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	80 81       	ld	r24, Z
     9b4:	8d 30       	cpi	r24, 0x0D	; 13
     9b6:	51 f4       	brne	.+20     	; 0x9cc <mu2_command+0xc4>
     9b8:	80 91 9f 01 	lds	r24, 0x019F
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	e0 56       	subi	r30, 0x60	; 96
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	80 81       	ld	r24, Z
     9c8:	8a 30       	cpi	r24, 0x0A	; 10
     9ca:	49 f0       	breq	.+18     	; 0x9de <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     9cc:	80 91 9f 01 	lds	r24, 0x019F
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	80 93 9f 01 	sts	0x019F, r24
     9d6:	80 91 9f 01 	lds	r24, 0x019F
     9da:	8a 30       	cpi	r24, 0x0A	; 10
     9dc:	50 f2       	brcs	.-108    	; 0x972 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     9de:	80 91 a1 01 	lds	r24, 0x01A1
     9e2:	85 34       	cpi	r24, 0x45	; 69
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <mu2_command+0xec>
     9e6:	80 91 a2 01 	lds	r24, 0x01A2
     9ea:	82 35       	cpi	r24, 0x52	; 82
     9ec:	19 f4       	brne	.+6      	; 0x9f4 <mu2_command+0xec>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	8d 83       	std	Y+5, r24	; 0x05
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <mu2_command+0xee>
	return 0;
     9f4:	1d 82       	std	Y+5, r1	; 0x05
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	00 d0       	rcall	.+0      	; 0xa16 <mu2_command_eeprom+0xa>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <mu2_command_eeprom+0xc>
     a18:	0f 92       	push	r0
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	7c 83       	std	Y+4, r23	; 0x04
     a24:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a26:	80 e4       	ldi	r24, 0x40	; 64
     a28:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a2c:	e9 81       	ldd	r30, Y+1	; 0x01
     a2e:	fa 81       	ldd	r31, Y+2	; 0x02
     a30:	80 81       	ld	r24, Z
     a32:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	fc 01       	movw	r30, r24
     a3c:	31 96       	adiw	r30, 0x01	; 1
     a3e:	80 81       	ld	r24, Z
     a40:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a46:	eb 81       	ldd	r30, Y+3	; 0x03
     a48:	fc 81       	ldd	r31, Y+4	; 0x04
     a4a:	80 81       	ld	r24, Z
     a4c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
		val++;
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	9c 83       	std	Y+4, r25	; 0x04
     a58:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a5a:	eb 81       	ldd	r30, Y+3	; 0x03
     a5c:	fc 81       	ldd	r31, Y+4	; 0x04
     a5e:	80 81       	ld	r24, Z
     a60:	88 23       	and	r24, r24
     a62:	89 f7       	brne	.-30     	; 0xa46 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     a64:	8f e2       	ldi	r24, 0x2F	; 47
     a66:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar('W');
     a6a:	87 e5       	ldi	r24, 0x57	; 87
     a6c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(0x0d);
     a70:	8d e0       	ldi	r24, 0x0D	; 13
     a72:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	uart0_putchar(0x0a);
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart0_putchar>
	for(i=0;i<10;i++){
     a7c:	10 92 9f 01 	sts	0x019F, r1
     a80:	32 c0       	rjmp	.+100    	; 0xae6 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     a82:	80 91 9f 01 	lds	r24, 0x019F
     a86:	08 2f       	mov	r16, r24
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	0e 94 54 06 	call	0xca8	; 0xca8 <uart0_getchar>
     a8e:	f8 01       	movw	r30, r16
     a90:	e0 56       	subi	r30, 0x60	; 96
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     a96:	80 91 9f 01 	lds	r24, 0x019F
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	e0 56       	subi	r30, 0x60	; 96
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	80 81       	ld	r24, Z
     aa6:	0e 94 8a 06 	call	0xd14	; 0xd14 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     aaa:	80 91 9f 01 	lds	r24, 0x019F
     aae:	88 23       	and	r24, r24
     ab0:	a9 f0       	breq	.+42     	; 0xadc <mu2_command_eeprom+0xd0>
     ab2:	80 91 9f 01 	lds	r24, 0x019F
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	fc 01       	movw	r30, r24
     abe:	e0 56       	subi	r30, 0x60	; 96
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	8d 30       	cpi	r24, 0x0D	; 13
     ac6:	51 f4       	brne	.+20     	; 0xadc <mu2_command_eeprom+0xd0>
     ac8:	80 91 9f 01 	lds	r24, 0x019F
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	e0 56       	subi	r30, 0x60	; 96
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	80 81       	ld	r24, Z
     ad8:	8a 30       	cpi	r24, 0x0A	; 10
     ada:	49 f0       	breq	.+18     	; 0xaee <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     adc:	80 91 9f 01 	lds	r24, 0x019F
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	80 93 9f 01 	sts	0x019F, r24
     ae6:	80 91 9f 01 	lds	r24, 0x019F
     aea:	8a 30       	cpi	r24, 0x0A	; 10
     aec:	50 f2       	brcs	.-108    	; 0xa82 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     aee:	80 91 a1 01 	lds	r24, 0x01A1
     af2:	85 34       	cpi	r24, 0x45	; 69
     af4:	39 f4       	brne	.+14     	; 0xb04 <mu2_command_eeprom+0xf8>
     af6:	80 91 a2 01 	lds	r24, 0x01A2
     afa:	82 35       	cpi	r24, 0x52	; 82
     afc:	19 f4       	brne	.+6      	; 0xb04 <mu2_command_eeprom+0xf8>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <mu2_command_eeprom+0xfa>
	return 0;
     b04:	1d 82       	std	Y+5, r1	; 0x05
     b06:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	cf 91       	pop	r28
     b14:	df 91       	pop	r29
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	2d 97       	sbiw	r28, 0x0d	; 13
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	8b 83       	std	Y+3, r24	; 0x03
     b34:	6d 83       	std	Y+5, r22	; 0x05
     b36:	5f 83       	std	Y+7, r21	; 0x07
     b38:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	9d 87       	std	Y+13, r25	; 0x0d
     b40:	8c 87       	std	Y+12, r24	; 0x0c
     b42:	8c 85       	ldd	r24, Y+12	; 0x0c
     b44:	9d 85       	ldd	r25, Y+13	; 0x0d
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	31 f0       	breq	.+12     	; 0xb56 <uart_init+0x3a>
     b4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	91 05       	cpc	r25, r1
     b52:	b1 f1       	breq	.+108    	; 0xbc0 <uart_init+0xa4>
     b54:	64 c0       	rjmp	.+200    	; 0xc1e <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     b56:	e1 ec       	ldi	r30, 0xC1	; 193
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     b5c:	a2 ec       	ldi	r26, 0xC2	; 194
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e2 ec       	ldi	r30, 0xC2	; 194
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	86 60       	ori	r24, 0x06	; 6
     b68:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     b6a:	1a 82       	std	Y+2, r1	; 0x02
     b6c:	19 82       	std	Y+1, r1	; 0x01
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <uart_init+0x5e>
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	23 e1       	ldi	r18, 0x13	; 19
     b80:	88 38       	cpi	r24, 0x88	; 136
     b82:	92 07       	cpc	r25, r18
     b84:	ac f3       	brlt	.-22     	; 0xb70 <uart_init+0x54>
			UCSR0B = option;					
     b86:	e1 ec       	ldi	r30, 0xC1	; 193
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     b8e:	e5 ec       	ldi	r30, 0xC5	; 197
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	9f 81       	ldd	r25, Y+7	; 0x07
     b96:	89 2f       	mov	r24, r25
     b98:	99 27       	eor	r25, r25
     b9a:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     b9c:	e4 ec       	ldi	r30, 0xC4	; 196
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8e 81       	ldd	r24, Y+6	; 0x06
     ba2:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     ba4:	e0 ec       	ldi	r30, 0xC0	; 192
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     baa:	a0 ec       	ldi	r26, 0xC0	; 192
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e0 ec       	ldi	r30, 0xC0	; 192
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	83 7e       	andi	r24, 0xE3	; 227
     bb6:	8c 93       	st	X, r24
			UDR0 = 0;
     bb8:	e6 ec       	ldi	r30, 0xC6	; 198
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	10 82       	st	Z, r1
     bbe:	34 c0       	rjmp	.+104    	; 0xc28 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     bc0:	ed ec       	ldi	r30, 0xCD	; 205
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	8e 81       	ldd	r24, Y+6	; 0x06
     bc6:	9f 81       	ldd	r25, Y+7	; 0x07
     bc8:	89 2f       	mov	r24, r25
     bca:	99 27       	eor	r25, r25
     bcc:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     bce:	ec ec       	ldi	r30, 0xCC	; 204
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	8e 81       	ldd	r24, Y+6	; 0x06
     bd4:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	19 82       	std	Y+1, r1	; 0x01
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <uart_init+0xca>
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	9a 83       	std	Y+2, r25	; 0x02
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	23 e1       	ldi	r18, 0x13	; 19
     bec:	88 38       	cpi	r24, 0x88	; 136
     bee:	92 07       	cpc	r25, r18
     bf0:	ac f3       	brlt	.-22     	; 0xbdc <uart_init+0xc0>
			UCSR1B |= option;
     bf2:	a9 ec       	ldi	r26, 0xC9	; 201
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e9 ec       	ldi	r30, 0xC9	; 201
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	90 81       	ld	r25, Z
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	89 2b       	or	r24, r25
     c00:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     c02:	e8 ec       	ldi	r30, 0xC8	; 200
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     c08:	a8 ec       	ldi	r26, 0xC8	; 200
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e8 ec       	ldi	r30, 0xC8	; 200
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	83 7e       	andi	r24, 0xE3	; 227
     c14:	8c 93       	st	X, r24
			UDR1 = 0;
     c16:	ee ec       	ldi	r30, 0xCE	; 206
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	10 82       	st	Z, r1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <uart_init+0x10c>
			break;
		default:
			return -1;
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	99 87       	std	Y+9, r25	; 0x09
     c24:	88 87       	std	Y+8, r24	; 0x08
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <uart_init+0x110>
	}
	return 0;
     c28:	19 86       	std	Y+9, r1	; 0x09
     c2a:	18 86       	std	Y+8, r1	; 0x08
     c2c:	88 85       	ldd	r24, Y+8	; 0x08
     c2e:	99 85       	ldd	r25, Y+9	; 0x09
}
     c30:	2d 96       	adiw	r28, 0x0d	; 13
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	00 d0       	rcall	.+0      	; 0xc48 <uart_setbuffer+0x6>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <uart_setbuffer+0x8>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <uart_setbuffer+0xa>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	7c 83       	std	Y+4, r23	; 0x04
     c56:	6b 83       	std	Y+3, r22	; 0x03
     c58:	5e 83       	std	Y+6, r21	; 0x06
     c5a:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	99 23       	and	r25, r25
     c62:	cc f0       	brlt	.+50     	; 0xc96 <uart_setbuffer+0x54>
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	91 05       	cpc	r25, r1
     c6c:	a4 f4       	brge	.+40     	; 0xc96 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     c6e:	29 81       	ldd	r18, Y+1	; 0x01
     c70:	3a 81       	ldd	r19, Y+2	; 0x02
     c72:	c9 01       	movw	r24, r18
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	84 55       	subi	r24, 0x54	; 84
     c86:	9e 4f       	sbci	r25, 0xFE	; 254
     c88:	4d 81       	ldd	r20, Y+5	; 0x05
     c8a:	5e 81       	ldd	r21, Y+6	; 0x06
     c8c:	2b 81       	ldd	r18, Y+3	; 0x03
     c8e:	3c 81       	ldd	r19, Y+4	; 0x04
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 19 08 	call	0x1032	; 0x1032 <RingInit>
}
     c96:	26 96       	adiw	r28, 0x06	; 6
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     cb0:	e0 ec       	ldi	r30, 0xC0	; 192
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	dc f7       	brge	.-10     	; 0xcb0 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     cba:	a0 ec       	ldi	r26, 0xC0	; 192
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e0 ec       	ldi	r30, 0xC0	; 192
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 77       	andi	r24, 0x7F	; 127
     cc6:	8c 93       	st	X, r24
	return UDR0;
     cc8:	e6 ec       	ldi	r30, 0xC6	; 198
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <uart0_putchar>:

int uart0_putchar(char c)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     ce0:	e0 ec       	ldi	r30, 0xC0	; 192
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	80 72       	andi	r24, 0x20	; 32
     cec:	90 70       	andi	r25, 0x00	; 0
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	b9 f3       	breq	.-18     	; 0xce0 <uart0_putchar+0xc>
	UDR0 = c;
     cf2:	e6 ec       	ldi	r30, 0xC6	; 198
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     cfa:	a0 ec       	ldi	r26, 0xC0	; 192
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e0 ec       	ldi	r30, 0xC0	; 192
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	8c 93       	st	X, r24
	
	return 0;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
}
     d0c:	0f 90       	pop	r0
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <uart1_putchar>:

int uart1_putchar(char c)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8a 30       	cpi	r24, 0x0A	; 10
     d24:	a1 f4       	brne	.+40     	; 0xd4e <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     d26:	e8 ec       	ldi	r30, 0xC8	; 200
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	80 72       	andi	r24, 0x20	; 32
     d32:	90 70       	andi	r25, 0x00	; 0
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	b9 f3       	breq	.-18     	; 0xd26 <uart1_putchar+0x12>
		UDR1 = '\r';
     d38:	ee ec       	ldi	r30, 0xCE	; 206
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	8d e0       	ldi	r24, 0x0D	; 13
     d3e:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     d40:	a8 ec       	ldi	r26, 0xC8	; 200
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e8 ec       	ldi	r30, 0xC8	; 200
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7d       	andi	r24, 0xDF	; 223
     d4c:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     d4e:	e8 ec       	ldi	r30, 0xC8	; 200
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 72       	andi	r24, 0x20	; 32
     d5a:	90 70       	andi	r25, 0x00	; 0
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	b9 f3       	breq	.-18     	; 0xd4e <uart1_putchar+0x3a>
	UDR1 = c;
     d60:	ee ec       	ldi	r30, 0xCE	; 206
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     d68:	a8 ec       	ldi	r26, 0xC8	; 200
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e8 ec       	ldi	r30, 0xC8	; 200
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8c 93       	st	X, r24

	return 0;
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
}
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <uart0_buf_putchar+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     d90:	1a 82       	std	Y+2, r1	; 0x02
     d92:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     d94:	ef e5       	ldi	r30, 0x5F	; 95
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     d9e:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	8a 30       	cpi	r24, 0x0A	; 10
     da4:	61 f4       	brne	.+24     	; 0xdbe <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     da6:	8c ea       	ldi	r24, 0xAC	; 172
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	6d e0       	ldi	r22, 0x0D	; 13
     dac:	0e 94 47 08 	call	0x108e	; 0x108e <RingPut>
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	29 f4       	brne	.+10     	; 0xdbe <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	12 c0       	rjmp	.+36     	; 0xde2 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     dbe:	8c ea       	ldi	r24, 0xAC	; 172
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	6b 81       	ldd	r22, Y+3	; 0x03
     dc4:	0e 94 47 08 	call	0x108e	; 0x108e <RingPut>
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	21 f4       	brne	.+8      	; 0xdd4 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	9f ef       	ldi	r25, 0xFF	; 255
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     dd4:	a1 ec       	ldi	r26, 0xC1	; 193
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e1 ec       	ldi	r30, 0xC1	; 193
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 62       	ori	r24, 0x20	; 32
     de0:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     de2:	ef e5       	ldi	r30, 0x5F	; 95
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 91 aa 01 	lds	r24, 0x01AA
     dea:	80 83       	st	Z, r24

	return ret;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <uart1_buf_putchar+0x6>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     e0a:	1a 82       	std	Y+2, r1	; 0x02
     e0c:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     e0e:	ef e5       	ldi	r30, 0x5F	; 95
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 93 aa 01 	sts	0x01AA, r24
	cli();
     e18:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	8a 30       	cpi	r24, 0x0A	; 10
     e1e:	61 f4       	brne	.+24     	; 0xe38 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     e20:	85 eb       	ldi	r24, 0xB5	; 181
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	6d e0       	ldi	r22, 0x0D	; 13
     e26:	0e 94 47 08 	call	0x108e	; 0x108e <RingPut>
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	29 f4       	brne	.+10     	; 0xe38 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	12 c0       	rjmp	.+36     	; 0xe5c <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     e38:	85 eb       	ldi	r24, 0xB5	; 181
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	6b 81       	ldd	r22, Y+3	; 0x03
     e3e:	0e 94 47 08 	call	0x108e	; 0x108e <RingPut>
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	21 f4       	brne	.+8      	; 0xe4e <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f ef       	ldi	r25, 0xFF	; 255
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     e4e:	a9 ec       	ldi	r26, 0xC9	; 201
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e9 ec       	ldi	r30, 0xC9	; 201
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     e5c:	ef e5       	ldi	r30, 0x5F	; 95
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 91 aa 01 	lds	r24, 0x01AA
     e64:	80 83       	st	Z, r24

	return ret;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <__vector_21>:


ISR(USART0_UDRE_vect)
{
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	00 90 5b 00 	lds	r0, 0x005B
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     ea8:	8c ea       	ldi	r24, 0xAC	; 172
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	9e 01       	movw	r18, r28
     eae:	2f 5f       	subi	r18, 0xFF	; 255
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	b9 01       	movw	r22, r18
     eb4:	0e 94 9a 08 	call	0x1134	; 0x1134 <RingGet>
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	61 f0       	breq	.+24     	; 0xed4 <__vector_21+0x5e>
		UDR0 = c;
     ebc:	e6 ec       	ldi	r30, 0xC6	; 198
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREÉNÉäÉA
     ec4:	a0 ec       	ldi	r26, 0xC0	; 192
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 ec       	ldi	r30, 0xC0	; 192
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 7d       	andi	r24, 0xDF	; 223
     ed0:	8c 93       	st	X, r24
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     ed4:	a1 ec       	ldi	r26, 0xC1	; 193
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 ec       	ldi	r30, 0xC1	; 193
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 7d       	andi	r24, 0xDF	; 223
     ee0:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     ee2:	a0 ec       	ldi	r26, 0xC0	; 192
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e0 ec       	ldi	r30, 0xC0	; 192
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 7d       	andi	r24, 0xDF	; 223
     eee:	8c 93       	st	X, r24
	}
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	00 92 5b 00 	sts	0x005B, r0
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_29>:

ISR(USART1_UDRE_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	00 90 5b 00 	lds	r0, 0x005B
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
     f50:	85 eb       	ldi	r24, 0xB5	; 181
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	9e 01       	movw	r18, r28
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	b9 01       	movw	r22, r18
     f5c:	0e 94 9a 08 	call	0x1134	; 0x1134 <RingGet>
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	61 f0       	breq	.+24     	; 0xf7c <__vector_29+0x5e>
		UDR1 = c;
     f64:	ee ec       	ldi	r30, 0xCE	; 206
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREÉNÉäÉA
     f6c:	a8 ec       	ldi	r26, 0xC8	; 200
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 ec       	ldi	r30, 0xC8	; 200
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	8c 93       	st	X, r24
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
     f7c:	a9 ec       	ldi	r26, 0xC9	; 201
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 ec       	ldi	r30, 0xC9	; 201
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
     f8a:	a8 ec       	ldi	r26, 0xC8	; 200
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 ec       	ldi	r30, 0xC8	; 200
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7d       	andi	r24, 0xDF	; 223
     f96:	8c 93       	st	X, r24
	}
}
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	bf 91       	pop	r27
     fa4:	af 91       	pop	r26
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	7f 91       	pop	r23
     fac:	6f 91       	pop	r22
     fae:	5f 91       	pop	r21
     fb0:	4f 91       	pop	r20
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	00 92 5b 00 	sts	0x005B, r0
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	00 90 5b 00 	lds	r0, 0x005B
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
     ff6:	ee ec       	ldi	r30, 0xCE	; 206
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	20 81       	ld	r18, Z
     ffc:	85 eb       	ldi	r24, 0xB5	; 181
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	62 2f       	mov	r22, r18
    1002:	0e 94 47 08 	call	0x108e	; 0x108e <RingPut>
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	00 92 5b 00 	sts	0x005B, r0
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <RingInit>:
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <RingInit+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <RingInit+0x8>
    103a:	00 d0       	rcall	.+0      	; 0x103c <RingInit+0xa>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	7c 83       	std	Y+4, r23	; 0x04
    1046:	6b 83       	std	Y+3, r22	; 0x03
    1048:	5e 83       	std	Y+6, r21	; 0x06
    104a:	4d 83       	std	Y+5, r20	; 0x05
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	97 83       	std	Z+7, r25	; 0x07
    1062:	86 83       	std	Z+6, r24	; 0x06
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	13 82       	std	Z+3, r1	; 0x03
    106a:	12 82       	std	Z+2, r1	; 0x02
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	15 82       	std	Z+5, r1	; 0x05
    1072:	14 82       	std	Z+4, r1	; 0x04
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 87       	std	Z+8, r24	; 0x08
    107c:	26 96       	adiw	r28, 0x06	; 6
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <RingPut>:
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <RingPut+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <RingPut+0x8>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6b 83       	std	Y+3, r22	; 0x03
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	80 85       	ldd	r24, Z+8	; 0x08
    10a8:	88 23       	and	r24, r24
    10aa:	71 f4       	brne	.+28     	; 0x10c8 <RingPut+0x3a>
    10ac:	e9 81       	ldd	r30, Y+1	; 0x01
    10ae:	fa 81       	ldd	r31, Y+2	; 0x02
    10b0:	22 81       	ldd	r18, Z+2	; 0x02
    10b2:	33 81       	ldd	r19, Z+3	; 0x03
    10b4:	e9 81       	ldd	r30, Y+1	; 0x01
    10b6:	fa 81       	ldd	r31, Y+2	; 0x02
    10b8:	84 81       	ldd	r24, Z+4	; 0x04
    10ba:	95 81       	ldd	r25, Z+5	; 0x05
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <RingPut+0x3a>
    10c2:	1d 82       	std	Y+5, r1	; 0x05
    10c4:	1c 82       	std	Y+4, r1	; 0x04
    10c6:	2c c0       	rjmp	.+88     	; 0x1120 <RingPut+0x92>
    10c8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ca:	fa 81       	ldd	r31, Y+2	; 0x02
    10cc:	20 81       	ld	r18, Z
    10ce:	31 81       	ldd	r19, Z+1	; 0x01
    10d0:	e9 81       	ldd	r30, Y+1	; 0x01
    10d2:	fa 81       	ldd	r31, Y+2	; 0x02
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	95 81       	ldd	r25, Z+5	; 0x05
    10d8:	f9 01       	movw	r30, r18
    10da:	e8 0f       	add	r30, r24
    10dc:	f9 1f       	adc	r31, r25
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	80 83       	st	Z, r24
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	84 81       	ldd	r24, Z+4	; 0x04
    10e8:	95 81       	ldd	r25, Z+5	; 0x05
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	95 83       	std	Z+5, r25	; 0x05
    10f2:	84 83       	std	Z+4, r24	; 0x04
    10f4:	e9 81       	ldd	r30, Y+1	; 0x01
    10f6:	fa 81       	ldd	r31, Y+2	; 0x02
    10f8:	24 81       	ldd	r18, Z+4	; 0x04
    10fa:	35 81       	ldd	r19, Z+5	; 0x05
    10fc:	e9 81       	ldd	r30, Y+1	; 0x01
    10fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1100:	86 81       	ldd	r24, Z+6	; 0x06
    1102:	97 81       	ldd	r25, Z+7	; 0x07
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	21 f4       	brne	.+8      	; 0x1112 <RingPut+0x84>
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	15 82       	std	Z+5, r1	; 0x05
    1110:	14 82       	std	Z+4, r1	; 0x04
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	10 86       	std	Z+8, r1	; 0x08
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9d 83       	std	Y+5, r25	; 0x05
    111e:	8c 83       	std	Y+4, r24	; 0x04
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <RingGet>:
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <RingGet+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <RingGet+0x8>
    113c:	00 d0       	rcall	.+0      	; 0x113e <RingGet+0xa>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	7c 83       	std	Y+4, r23	; 0x04
    1148:	6b 83       	std	Y+3, r22	; 0x03
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 85       	ldd	r24, Z+8	; 0x08
    1150:	88 23       	and	r24, r24
    1152:	d9 f5       	brne	.+118    	; 0x11ca <RingGet+0x96>
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	20 81       	ld	r18, Z
    115a:	31 81       	ldd	r19, Z+1	; 0x01
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	f9 01       	movw	r30, r18
    1166:	e8 0f       	add	r30, r24
    1168:	f9 1f       	adc	r31, r25
    116a:	80 81       	ld	r24, Z
    116c:	eb 81       	ldd	r30, Y+3	; 0x03
    116e:	fc 81       	ldd	r31, Y+4	; 0x04
    1170:	80 83       	st	Z, r24
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	93 83       	std	Z+3, r25	; 0x03
    1182:	82 83       	std	Z+2, r24	; 0x02
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	22 81       	ldd	r18, Z+2	; 0x02
    118a:	33 81       	ldd	r19, Z+3	; 0x03
    118c:	e9 81       	ldd	r30, Y+1	; 0x01
    118e:	fa 81       	ldd	r31, Y+2	; 0x02
    1190:	86 81       	ldd	r24, Z+6	; 0x06
    1192:	97 81       	ldd	r25, Z+7	; 0x07
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	21 f4       	brne	.+8      	; 0x11a2 <RingGet+0x6e>
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	13 82       	std	Z+3, r1	; 0x03
    11a0:	12 82       	std	Z+2, r1	; 0x02
    11a2:	e9 81       	ldd	r30, Y+1	; 0x01
    11a4:	fa 81       	ldd	r31, Y+2	; 0x02
    11a6:	22 81       	ldd	r18, Z+2	; 0x02
    11a8:	33 81       	ldd	r19, Z+3	; 0x03
    11aa:	e9 81       	ldd	r30, Y+1	; 0x01
    11ac:	fa 81       	ldd	r31, Y+2	; 0x02
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	28 17       	cp	r18, r24
    11b4:	39 07       	cpc	r19, r25
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <RingGet+0x8c>
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 87       	std	Z+8, r24	; 0x08
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <RingGet+0xa0>
    11ca:	eb 81       	ldd	r30, Y+3	; 0x03
    11cc:	fc 81       	ldd	r31, Y+4	; 0x04
    11ce:	10 82       	st	Z, r1
    11d0:	1e 82       	std	Y+6, r1	; 0x06
    11d2:	1d 82       	std	Y+5, r1	; 0x05
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	26 96       	adiw	r28, 0x06	; 6
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <isRingEmpty>:
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <isRingEmpty+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	80 85       	ldd	r24, Z+8	; 0x08
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <initI2CMaster+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <initI2CMaster+0x8>
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    121c:	88 eb       	ldi	r24, 0xB8	; 184
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	80 e2       	ldi	r24, 0x20	; 32
    122c:	9e e4       	ldi	r25, 0x4E	; 78
    122e:	b9 01       	movw	r22, r18
    1230:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__divmodhi4>
    1234:	cb 01       	movw	r24, r22
    1236:	40 97       	sbiw	r24, 0x10	; 16
    1238:	9d 83       	std	Y+5, r25	; 0x05
    123a:	8c 83       	std	Y+4, r24	; 0x04
    123c:	ec 81       	ldd	r30, Y+4	; 0x04
    123e:	fd 81       	ldd	r31, Y+5	; 0x05
    1240:	ff 23       	and	r31, r31
    1242:	2c f4       	brge	.+10     	; 0x124e <initI2CMaster+0x42>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	95 95       	asr	r25
    1254:	87 95       	ror	r24
    1256:	ea 81       	ldd	r30, Y+2	; 0x02
    1258:	fb 81       	ldd	r31, Y+3	; 0x03
    125a:	80 83       	st	Z, r24
		TWSR = 0;
    125c:	e9 eb       	ldi	r30, 0xB9	; 185
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	10 82       	st	Z, r1
		TWCR = I2CEN;
    1262:	ec eb       	ldi	r30, 0xBC	; 188
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	84 e0       	ldi	r24, 0x04	; 4
    1268:	80 83       	st	Z, r24
    }
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <i2cWrite+0x6>
    1280:	0f 92       	push	r0
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    128a:	ec eb       	ldi	r30, 0xBC	; 188
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	84 ea       	ldi	r24, 0xA4	; 164
    1290:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1292:	ec eb       	ldi	r30, 0xBC	; 188
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 23       	and	r24, r24
    129a:	dc f7       	brge	.-10     	; 0x1292 <i2cWrite+0x18>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    129c:	e9 eb       	ldi	r30, 0xB9	; 185
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	90 70       	andi	r25, 0x00	; 0
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <i2cWrite+0x38>
    12b0:	56 c0       	rjmp	.+172    	; 0x135e <i2cWrite+0xe4>

		TWDR = (slave->addr<<1);
    12b2:	ab eb       	ldi	r26, 0xBB	; 187
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 81       	ldd	r30, Y+1	; 0x01
    12b8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ba:	80 81       	ld	r24, Z
    12bc:	88 0f       	add	r24, r24
    12be:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    12c0:	ec eb       	ldi	r30, 0xBC	; 188
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    12c8:	ec eb       	ldi	r30, 0xBC	; 188
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	88 23       	and	r24, r24
    12d0:	dc f7       	brge	.-10     	; 0x12c8 <i2cWrite+0x4e>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    12d2:	e9 eb       	ldi	r30, 0xB9	; 185
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	88 7f       	andi	r24, 0xF8	; 248
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	88 31       	cpi	r24, 0x18	; 24
    12e2:	91 05       	cpc	r25, r1
    12e4:	e1 f5       	brne	.+120    	; 0x135e <i2cWrite+0xe4>

		for(i=0;i<slave->write.size;i++){
    12e6:	10 92 ab 01 	sts	0x01AB, r1
    12ea:	27 c0       	rjmp	.+78     	; 0x133a <i2cWrite+0xc0>
			TWDR=slave->write.buf[i];
    12ec:	ab eb       	ldi	r26, 0xBB	; 187
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	21 81       	ldd	r18, Z+1	; 0x01
    12f6:	32 81       	ldd	r19, Z+2	; 0x02
    12f8:	80 91 ab 01 	lds	r24, 0x01AB
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	e8 0f       	add	r30, r24
    1304:	f9 1f       	adc	r31, r25
    1306:	80 81       	ld	r24, Z
    1308:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    130a:	ec eb       	ldi	r30, 0xBC	; 188
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	84 e8       	ldi	r24, 0x84	; 132
    1310:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1312:	ec eb       	ldi	r30, 0xBC	; 188
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	88 23       	and	r24, r24
    131a:	dc f7       	brge	.-10     	; 0x1312 <i2cWrite+0x98>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    131c:	e9 eb       	ldi	r30, 0xB9	; 185
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	88 7f       	andi	r24, 0xF8	; 248
    1328:	90 70       	andi	r25, 0x00	; 0
    132a:	88 32       	cpi	r24, 0x28	; 40
    132c:	91 05       	cpc	r25, r1
    132e:	b9 f4       	brne	.+46     	; 0x135e <i2cWrite+0xe4>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1330:	80 91 ab 01 	lds	r24, 0x01AB
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 ab 01 	sts	0x01AB, r24
    133a:	80 91 ab 01 	lds	r24, 0x01AB
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	e9 81       	ldd	r30, Y+1	; 0x01
    1344:	fa 81       	ldd	r31, Y+2	; 0x02
    1346:	83 81       	ldd	r24, Z+3	; 0x03
    1348:	94 81       	ldd	r25, Z+4	; 0x04
    134a:	28 17       	cp	r18, r24
    134c:	39 07       	cpc	r19, r25
    134e:	70 f2       	brcs	.-100    	; 0x12ec <i2cWrite+0x72>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1350:	ec eb       	ldi	r30, 0xBC	; 188
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	84 e9       	ldi	r24, 0x94	; 148
    1356:	80 83       	st	Z, r24
		wdt_disable();

#endif

//		sei();
		return true;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <i2cWrite+0xee>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    135e:	ec eb       	ldi	r30, 0xBC	; 188
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	84 e9       	ldi	r24, 0x94	; 148
    1364:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1366:	1b 82       	std	Y+3, r1	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <i2cRead+0x6>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1386:	ec eb       	ldi	r30, 0xBC	; 188
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	84 ea       	ldi	r24, 0xA4	; 164
    138c:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    138e:	ec eb       	ldi	r30, 0xBC	; 188
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 23       	and	r24, r24
    1396:	dc f7       	brge	.-10     	; 0x138e <i2cRead+0x18>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    1398:	e9 eb       	ldi	r30, 0xB9	; 185
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <i2cRead+0x38>
    13ac:	7f c0       	rjmp	.+254    	; 0x14ac <i2cRead+0x136>

		TWDR = (slave->addr<<1)|0x01;
    13ae:	ab eb       	ldi	r26, 0xBB	; 187
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e9 81       	ldd	r30, Y+1	; 0x01
    13b4:	fa 81       	ldd	r31, Y+2	; 0x02
    13b6:	80 81       	ld	r24, Z
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    13c4:	ec eb       	ldi	r30, 0xBC	; 188
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	84 e8       	ldi	r24, 0x84	; 132
    13ca:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13cc:	ec eb       	ldi	r30, 0xBC	; 188
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 23       	and	r24, r24
    13d4:	dc f7       	brge	.-10     	; 0x13cc <i2cRead+0x56>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    13d6:	e9 eb       	ldi	r30, 0xB9	; 185
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 7f       	andi	r24, 0xF8	; 248
    13e2:	90 70       	andi	r25, 0x00	; 0
    13e4:	80 34       	cpi	r24, 0x40	; 64
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <i2cRead+0x76>
    13ea:	60 c0       	rjmp	.+192    	; 0x14ac <i2cRead+0x136>

		for(i=0;i<slave->read.size-1;i++){
    13ec:	10 92 ab 01 	sts	0x01AB, r1
    13f0:	28 c0       	rjmp	.+80     	; 0x1442 <i2cRead+0xcc>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    13f2:	ec eb       	ldi	r30, 0xBC	; 188
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	84 ec       	ldi	r24, 0xC4	; 196
    13f8:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    13fa:	ec eb       	ldi	r30, 0xBC	; 188
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	88 23       	and	r24, r24
    1402:	dc f7       	brge	.-10     	; 0x13fa <i2cRead+0x84>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1404:	e9 eb       	ldi	r30, 0xB9	; 185
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	90 70       	andi	r25, 0x00	; 0
    1412:	80 35       	cpi	r24, 0x50	; 80
    1414:	91 05       	cpc	r25, r1
    1416:	09 f0       	breq	.+2      	; 0x141a <i2cRead+0xa4>
    1418:	49 c0       	rjmp	.+146    	; 0x14ac <i2cRead+0x136>
			slave->read.buf[i] = TWDR;
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	25 81       	ldd	r18, Z+5	; 0x05
    1420:	36 81       	ldd	r19, Z+6	; 0x06
    1422:	80 91 ab 01 	lds	r24, 0x01AB
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	d9 01       	movw	r26, r18
    142c:	a8 0f       	add	r26, r24
    142e:	b9 1f       	adc	r27, r25
    1430:	eb eb       	ldi	r30, 0xBB	; 187
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1438:	80 91 ab 01 	lds	r24, 0x01AB
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	80 93 ab 01 	sts	0x01AB, r24
    1442:	80 91 ab 01 	lds	r24, 0x01AB
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	e9 81       	ldd	r30, Y+1	; 0x01
    144c:	fa 81       	ldd	r31, Y+2	; 0x02
    144e:	87 81       	ldd	r24, Z+7	; 0x07
    1450:	90 85       	ldd	r25, Z+8	; 0x08
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	60 f2       	brcs	.-104    	; 0x13f2 <i2cRead+0x7c>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    145a:	ec eb       	ldi	r30, 0xBC	; 188
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	84 e8       	ldi	r24, 0x84	; 132
    1460:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1462:	ec eb       	ldi	r30, 0xBC	; 188
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	dc f7       	brge	.-10     	; 0x1462 <i2cRead+0xec>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    146c:	e9 eb       	ldi	r30, 0xB9	; 185
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	88 7f       	andi	r24, 0xF8	; 248
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	88 35       	cpi	r24, 0x58	; 88
    147c:	91 05       	cpc	r25, r1
    147e:	b1 f4       	brne	.+44     	; 0x14ac <i2cRead+0x136>
		slave->read.buf[i] = TWDR;
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	25 81       	ldd	r18, Z+5	; 0x05
    1486:	36 81       	ldd	r19, Z+6	; 0x06
    1488:	80 91 ab 01 	lds	r24, 0x01AB
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	d9 01       	movw	r26, r18
    1492:	a8 0f       	add	r26, r24
    1494:	b9 1f       	adc	r27, r25
    1496:	eb eb       	ldi	r30, 0xBB	; 187
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    149e:	ec eb       	ldi	r30, 0xBC	; 188
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	84 e9       	ldi	r24, 0x94	; 148
    14a4:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	8b 83       	std	Y+3, r24	; 0x03
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <i2cRead+0x140>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14ac:	ec eb       	ldi	r30, 0xBC	; 188
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	84 e9       	ldi	r24, 0x94	; 148
    14b2:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    14b4:	1b 82       	std	Y+3, r1	; 0x03
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <i2cReadWithCommand+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <i2cReadWithCommand+0x8>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    14d6:	ec eb       	ldi	r30, 0xBC	; 188
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	84 ea       	ldi	r24, 0xA4	; 164
    14dc:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14de:	ec eb       	ldi	r30, 0xBC	; 188
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	dc f7       	brge	.-10     	; 0x14de <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    14e8:	ab eb       	ldi	r26, 0xBB	; 187
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	80 81       	ld	r24, Z
    14f2:	88 0f       	add	r24, r24
    14f4:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    14f6:	ec eb       	ldi	r30, 0xBC	; 188
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	84 e8       	ldi	r24, 0x84	; 132
    14fc:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14fe:	ec eb       	ldi	r30, 0xBC	; 188
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 23       	and	r24, r24
    1506:	dc f7       	brge	.-10     	; 0x14fe <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    1508:	e9 eb       	ldi	r30, 0xB9	; 185
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	88 7f       	andi	r24, 0xF8	; 248
    1514:	90 70       	andi	r25, 0x00	; 0
    1516:	80 34       	cpi	r24, 0x40	; 64
    1518:	91 05       	cpc	r25, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <i2cReadWithCommand+0x5a>
    151c:	a0 c0       	rjmp	.+320    	; 0x165e <i2cReadWithCommand+0x19a>

		TWDR=command;
    151e:	eb eb       	ldi	r30, 0xBB	; 187
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1526:	ec eb       	ldi	r30, 0xBC	; 188
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	84 e8       	ldi	r24, 0x84	; 132
    152c:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    152e:	ec eb       	ldi	r30, 0xBC	; 188
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	88 23       	and	r24, r24
    1536:	dc f7       	brge	.-10     	; 0x152e <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    1538:	e9 eb       	ldi	r30, 0xB9	; 185
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	88 7f       	andi	r24, 0xF8	; 248
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	88 32       	cpi	r24, 0x28	; 40
    1548:	91 05       	cpc	r25, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <i2cReadWithCommand+0x8a>
    154c:	88 c0       	rjmp	.+272    	; 0x165e <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    154e:	ec eb       	ldi	r30, 0xBC	; 188
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	84 ea       	ldi	r24, 0xA4	; 164
    1554:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1556:	ec eb       	ldi	r30, 0xBC	; 188
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	dc f7       	brge	.-10     	; 0x1556 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    1560:	e9 eb       	ldi	r30, 0xB9	; 185
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	88 7f       	andi	r24, 0xF8	; 248
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	80 31       	cpi	r24, 0x10	; 16
    1570:	91 05       	cpc	r25, r1
    1572:	09 f0       	breq	.+2      	; 0x1576 <i2cReadWithCommand+0xb2>
    1574:	74 c0       	rjmp	.+232    	; 0x165e <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1576:	ab eb       	ldi	r26, 0xBB	; 187
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	80 81       	ld	r24, Z
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	81 60       	ori	r24, 0x01	; 1
    158a:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    158c:	ec eb       	ldi	r30, 0xBC	; 188
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	84 e8       	ldi	r24, 0x84	; 132
    1592:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1594:	ec eb       	ldi	r30, 0xBC	; 188
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 23       	and	r24, r24
    159c:	dc f7       	brge	.-10     	; 0x1594 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    159e:	10 92 ab 01 	sts	0x01AB, r1
    15a2:	28 c0       	rjmp	.+80     	; 0x15f4 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15a4:	ec eb       	ldi	r30, 0xBC	; 188
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	84 ec       	ldi	r24, 0xC4	; 196
    15aa:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    15ac:	ec eb       	ldi	r30, 0xBC	; 188
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 23       	and	r24, r24
    15b4:	dc f7       	brge	.-10     	; 0x15ac <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    15b6:	e9 eb       	ldi	r30, 0xB9	; 185
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	88 7f       	andi	r24, 0xF8	; 248
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	80 35       	cpi	r24, 0x50	; 80
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <i2cReadWithCommand+0x108>
    15ca:	49 c0       	rjmp	.+146    	; 0x165e <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    15cc:	e9 81       	ldd	r30, Y+1	; 0x01
    15ce:	fa 81       	ldd	r31, Y+2	; 0x02
    15d0:	25 81       	ldd	r18, Z+5	; 0x05
    15d2:	36 81       	ldd	r19, Z+6	; 0x06
    15d4:	80 91 ab 01 	lds	r24, 0x01AB
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	d9 01       	movw	r26, r18
    15de:	a8 0f       	add	r26, r24
    15e0:	b9 1f       	adc	r27, r25
    15e2:	eb eb       	ldi	r30, 0xBB	; 187
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    15ea:	80 91 ab 01 	lds	r24, 0x01AB
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	80 93 ab 01 	sts	0x01AB, r24
    15f4:	80 91 ab 01 	lds	r24, 0x01AB
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	87 81       	ldd	r24, Z+7	; 0x07
    1602:	90 85       	ldd	r25, Z+8	; 0x08
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	60 f2       	brcs	.-104    	; 0x15a4 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    160c:	ec eb       	ldi	r30, 0xBC	; 188
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	84 e8       	ldi	r24, 0x84	; 132
    1612:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1614:	ec eb       	ldi	r30, 0xBC	; 188
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	dc f7       	brge	.-10     	; 0x1614 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    161e:	e9 eb       	ldi	r30, 0xB9	; 185
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	88 7f       	andi	r24, 0xF8	; 248
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	88 35       	cpi	r24, 0x58	; 88
    162e:	91 05       	cpc	r25, r1
    1630:	b1 f4       	brne	.+44     	; 0x165e <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1632:	e9 81       	ldd	r30, Y+1	; 0x01
    1634:	fa 81       	ldd	r31, Y+2	; 0x02
    1636:	25 81       	ldd	r18, Z+5	; 0x05
    1638:	36 81       	ldd	r19, Z+6	; 0x06
    163a:	80 91 ab 01 	lds	r24, 0x01AB
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	d9 01       	movw	r26, r18
    1644:	a8 0f       	add	r26, r24
    1646:	b9 1f       	adc	r27, r25
    1648:	eb eb       	ldi	r30, 0xBB	; 187
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1650:	ec eb       	ldi	r30, 0xBC	; 188
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	84 e9       	ldi	r24, 0x94	; 148
    1656:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	8c 83       	std	Y+4, r24	; 0x04
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    165e:	ec eb       	ldi	r30, 0xBC	; 188
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	84 e9       	ldi	r24, 0x94	; 148
    1664:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1666:	1c 82       	std	Y+4, r1	; 0x04
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <LED>:
/// LEDëÄçÏä÷êî 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->è¡ìîÅ@1->ì_ìî </param>
void LED(unsigned char target, bool status)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <LED+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	58 f5       	brcc	.+86     	; 0x16e2 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	88 23       	and	r24, r24
    1690:	a9 f0       	breq	.+42     	; 0x16bc <LED+0x44>
    1692:	a2 e2       	ldi	r26, 0x22	; 34
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e2       	ldi	r30, 0x22	; 34
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <LED+0x38>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <LED+0x34>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	13 c0       	rjmp	.+38     	; 0x16e2 <LED+0x6a>
	else		sbi(PORTA,target);
    16bc:	a2 e2       	ldi	r26, 0x22	; 34
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e2 e2       	ldi	r30, 0x22	; 34
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <LED+0x62>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <LED+0x5e>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <LEDInit>:

void LEDInit(void)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    16f4:	a1 e2       	ldi	r26, 0x21	; 33
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e1 e2       	ldi	r30, 0x21	; 33
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	87 60       	ori	r24, 0x07	; 7
    1700:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1702:	a2 e2       	ldi	r26, 0x22	; 34
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e2       	ldi	r30, 0x22	; 34
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	87 60       	ori	r24, 0x07	; 7
    170e:	8c 93       	st	X, r24
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <wait_ms>:
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <wait_ms+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <wait_ms+0x8>
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	e0 eb       	ldi	r30, 0xB0	; 176
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
    172e:	e1 eb       	ldi	r30, 0xB1	; 177
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	80 83       	st	Z, r24
    1736:	e3 eb       	ldi	r30, 0xB3	; 179
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	80 83       	st	Z, r24
    173e:	84 e6       	ldi	r24, 0x64	; 100
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	20 c0       	rjmp	.+64     	; 0x1784 <wait_ms+0x6e>
    1744:	e2 eb       	ldi	r30, 0xB2	; 178
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
    174a:	e7 e3       	ldi	r30, 0x37	; 55
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	82 70       	andi	r24, 0x02	; 2
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	b9 f3       	breq	.-18     	; 0x174a <wait_ms+0x34>
    175c:	a7 e3       	ldi	r26, 0x37	; 55
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e7 e3       	ldi	r30, 0x37	; 55
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	82 60       	ori	r24, 0x02	; 2
    1768:	8c 93       	st	X, r24
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	88 23       	and	r24, r24
    1772:	11 f0       	breq	.+4      	; 0x1778 <wait_ms+0x62>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	99 81       	ldd	r25, Y+1	; 0x01
    177c:	91 50       	subi	r25, 0x01	; 1
    177e:	99 83       	std	Y+1, r25	; 0x01
    1780:	88 23       	and	r24, r24
    1782:	01 f7       	brne	.-64     	; 0x1744 <wait_ms+0x2e>
    1784:	1c 82       	std	Y+4, r1	; 0x04
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	11 f0       	breq	.+4      	; 0x1792 <wait_ms+0x7c>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	8c 83       	std	Y+4, r24	; 0x04
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9b 83       	std	Y+3, r25	; 0x03
    179a:	8a 83       	std	Y+2, r24	; 0x02
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	88 23       	and	r24, r24
    17a0:	21 f7       	brne	.-56     	; 0x176a <wait_ms+0x54>
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <wait_us>:
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <wait_us+0x6>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	e0 eb       	ldi	r30, 0xB0	; 176
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	10 82       	st	Z, r1
    17c8:	e1 eb       	ldi	r30, 0xB1	; 177
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 83       	st	Z, r24
    17d0:	e3 eb       	ldi	r30, 0xB3	; 179
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	84 e1       	ldi	r24, 0x14	; 20
    17d6:	80 83       	st	Z, r24
    17d8:	13 c0       	rjmp	.+38     	; 0x1800 <wait_us+0x4e>
    17da:	e2 eb       	ldi	r30, 0xB2	; 178
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	10 82       	st	Z, r1
    17e0:	e7 e3       	ldi	r30, 0x37	; 55
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	82 70       	andi	r24, 0x02	; 2
    17ec:	90 70       	andi	r25, 0x00	; 0
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	b9 f3       	breq	.-18     	; 0x17e0 <wait_us+0x2e>
    17f2:	a7 e3       	ldi	r26, 0x37	; 55
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	82 60       	ori	r24, 0x02	; 2
    17fe:	8c 93       	st	X, r24
    1800:	1b 82       	std	Y+3, r1	; 0x03
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	11 f0       	breq	.+4      	; 0x180e <wait_us+0x5c>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	88 23       	and	r24, r24
    181c:	f1 f6       	brne	.-68     	; 0x17da <wait_us+0x28>
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <mDrive+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <mDrive+0x8>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <mDrive+0xa>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9b 83       	std	Y+3, r25	; 0x03
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6c 83       	std	Y+4, r22	; 0x04
    183e:	4d 83       	std	Y+5, r20	; 0x05
    1840:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1842:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	85 30       	cpi	r24, 0x05	; 5
    1848:	50 f5       	brcc	.+84     	; 0x189e <mDrive+0x74>
	if(duty>100) duty=100;
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	85 36       	cpi	r24, 0x65	; 101
    184e:	14 f0       	brlt	.+4      	; 0x1854 <mDrive+0x2a>
    1850:	84 e6       	ldi	r24, 0x64	; 100
    1852:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	8c 39       	cpi	r24, 0x9C	; 156
    1858:	14 f4       	brge	.+4      	; 0x185e <mDrive+0x34>
    185a:	8c e9       	ldi	r24, 0x9C	; 156
    185c:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	21 f4       	brne	.+8      	; 0x186c <mDrive+0x42>
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	81 95       	neg	r24
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	88 23       	and	r24, r24
    1870:	11 f4       	brne	.+4      	; 0x1876 <mDrive+0x4c>
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	19 f4       	brne	.+6      	; 0x1882 <mDrive+0x58>
    187c:	8f e7       	ldi	r24, 0x7F	; 127
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <mDrive+0x5c>
	else w_data = duty;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    1886:	ea 81       	ldd	r30, Y+2	; 0x02
    1888:	fb 81       	ldd	r31, Y+3	; 0x03
    188a:	21 81       	ldd	r18, Z+1	; 0x01
    188c:	32 81       	ldd	r19, Z+2	; 0x02
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	f9 01       	movw	r30, r18
    1896:	e8 0f       	add	r30, r24
    1898:	f9 1f       	adc	r31, r25
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	80 83       	st	Z, r24
}
    189e:	26 96       	adiw	r28, 0x06	; 6
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <mAngle+0x6>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <mAngle+0x8>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	7c 83       	std	Y+4, r23	; 0x04
    18c4:	6b 83       	std	Y+3, r22	; 0x03
    18c6:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	88 23       	and	r24, r24
    18cc:	a9 f0       	breq	.+42     	; 0x18f8 <mAngle+0x48>
		angle/=6;
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	26 e0       	ldi	r18, 0x06	; 6
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	b9 01       	movw	r22, r18
    18d8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__divmodhi4>
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[2] = 0x40|(angle&0x1f);
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	81 81       	ldd	r24, Z+1	; 0x01
    18e8:	92 81       	ldd	r25, Z+2	; 0x02
    18ea:	fc 01       	movw	r30, r24
    18ec:	32 96       	adiw	r30, 0x02	; 2
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	8f 71       	andi	r24, 0x1F	; 31
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	80 83       	st	Z, r24
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <mAngle+0x56>
		}
	else motor->write.buf[2] = 0x00;
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	81 81       	ldd	r24, Z+1	; 0x01
    18fe:	92 81       	ldd	r25, Z+2	; 0x02
    1900:	fc 01       	movw	r30, r24
    1902:	32 96       	adiw	r30, 0x02	; 2
    1904:	10 82       	st	Z, r1
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <aDrive+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <aDrive+0x8>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6b 83       	std	Y+3, r22	; 0x03
    1928:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	88 23       	and	r24, r24
    192e:	41 f0       	breq	.+16     	; 0x1940 <aDrive+0x2a>
    1930:	e9 81       	ldd	r30, Y+1	; 0x01
    1932:	fa 81       	ldd	r31, Y+2	; 0x02
    1934:	01 80       	ldd	r0, Z+1	; 0x01
    1936:	f2 81       	ldd	r31, Z+2	; 0x02
    1938:	e0 2d       	mov	r30, r0
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	80 83       	st	Z, r24
    193e:	06 c0       	rjmp	.+12     	; 0x194c <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1940:	e9 81       	ldd	r30, Y+1	; 0x01
    1942:	fa 81       	ldd	r31, Y+2	; 0x02
    1944:	01 80       	ldd	r0, Z+1	; 0x01
    1946:	f2 81       	ldd	r31, Z+2	; 0x02
    1948:	e0 2d       	mov	r30, r0
    194a:	10 82       	st	Z, r1

}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1962:	a4 e2       	ldi	r26, 0x24	; 36
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e4 e2       	ldi	r30, 0x24	; 36
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 7f       	andi	r24, 0xF0	; 240
    196e:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1970:	a5 e2       	ldi	r26, 0x25	; 37
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e2       	ldi	r30, 0x25	; 37
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8f 60       	ori	r24, 0x0F	; 15
    197c:	8c 93       	st	X, r24
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <Switch>:
/// ÉXÉCÉbÉ`íléÊìæä÷êî 
/// </summary>
/// <param name="target"> ÉÅÉCÉìäÓî’è„ÇÃÉXÉâÉCÉhÉXÉCÉbÉ`î‘çÜÅ@1Å`4 </param>
/// <return> ÉXÉCÉbÉ`ÇÃèÛë‘ ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <Switch+0x6>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1990:	e3 e2       	ldi	r30, 0x23	; 35
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 95       	com	r24
    1998:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	a9 01       	movw	r20, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <Switch+0x2c>
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <Switch+0x28>
    19b4:	ca 01       	movw	r24, r20
    19b6:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	90 70       	andi	r25, 0x00	; 0
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <Group>:

__inline__ unsigned char Group(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    19d4:	e3 e2       	ldi	r30, 0x23	; 35
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 95       	com	r24
    19dc:	86 95       	lsr	r24
    19de:	86 95       	lsr	r24
    19e0:	83 70       	andi	r24, 0x03	; 3
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <Channel>:

__inline__ unsigned char Channel(void)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    19f0:	e3 e2       	ldi	r30, 0x23	; 35
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 95       	com	r24
    19f8:	83 70       	andi	r24, 0x03	; 3
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	89 27       	eor	r24, r25
    1a12:	88 23       	and	r24, r24
    1a14:	71 f4       	brne	.+28     	; 0x1a32 <beep+0x32>
    1a16:	80 91 55 01 	lds	r24, 0x0155
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	89 27       	eor	r24, r25
    1a1e:	88 23       	and	r24, r24
    1a20:	41 f4       	brne	.+16     	; 0x1a32 <beep+0x32>
    1a22:	a2 e2       	ldi	r26, 0x22	; 34
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e2 e2       	ldi	r30, 0x22	; 34
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	8c 93       	st	X, r24
    1a30:	0b c0       	rjmp	.+22     	; 0x1a48 <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1a32:	80 91 55 01 	lds	r24, 0x0155
    1a36:	88 23       	and	r24, r24
    1a38:	39 f0       	breq	.+14     	; 0x1a48 <beep+0x48>
    1a3a:	a2 e2       	ldi	r26, 0x22	; 34
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e2 e2       	ldi	r30, 0x22	; 34
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	87 7f       	andi	r24, 0xF7	; 247
    1a46:	8c 93       	st	X, r24
}
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <BeepInit>:

void BeepInit()
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1a58:	a1 e2       	ldi	r26, 0x21	; 33
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e1 e2       	ldi	r30, 0x21	; 33
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	88 60       	ori	r24, 0x08	; 8
    1a64:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1a66:	a2 e2       	ldi	r26, 0x22	; 34
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e2 e2       	ldi	r30, 0x22	; 34
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	87 7f       	andi	r24, 0xF7	; 247
    1a72:	8c 93       	st	X, r24
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <i2cCheck>:

void i2cCheck(bool flag)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	69 81       	ldd	r22, Y+1	; 0x01
    1a8a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LED>
	beep(!(flag));
    1a8e:	99 81       	ldd	r25, Y+1	; 0x01
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	89 27       	eor	r24, r25
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
	if(!flag){
    1a9c:	99 81       	ldd	r25, Y+1	; 0x01
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 27       	eor	r24, r25
    1aa2:	88 23       	and	r24, r24
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <i2cCheck+0x38>
		PORTC = 0x04;
    1aa6:	e8 e2       	ldi	r30, 0x28	; 40
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	80 83       	st	Z, r24
		cli();
    1aae:	f8 94       	cli
    1ab0:	ff cf       	rjmp	.-2      	; 0x1ab0 <i2cCheck+0x36>
		while(1);
	}
}
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <Emergency+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <Emergency+0x8>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	71 f4       	brne	.+28     	; 0x1aee <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad6:	01 80       	ldd	r0, Z+1	; 0x01
    1ad8:	f2 81       	ldd	r31, Z+2	; 0x02
    1ada:	e0 2d       	mov	r30, r0
    1adc:	8a e6       	ldi	r24, 0x6A	; 106
    1ade:	80 83       	st	Z, r24
		beep(1);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
		eflag=1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 be 01 	sts	0x01BE, r24
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <Emergency+0x60>
		}
	else if(act==E_OFF){
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	69 f4       	brne	.+26     	; 0x1b0e <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1af4:	ea 81       	ldd	r30, Y+2	; 0x02
    1af6:	fb 81       	ldd	r31, Y+3	; 0x03
    1af8:	01 80       	ldd	r0, Z+1	; 0x01
    1afa:	f2 81       	ldd	r31, Z+2	; 0x02
    1afc:	e0 2d       	mov	r30, r0
    1afe:	85 e5       	ldi	r24, 0x55	; 85
    1b00:	80 83       	st	Z, r24
		beep(0);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
		eflag=0;
    1b08:	10 92 be 01 	sts	0x01BE, r1
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1b0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b10:	fb 81       	ldd	r31, Y+3	; 0x03
    1b12:	01 80       	ldd	r0, Z+1	; 0x01
    1b14:	f2 81       	ldd	r31, Z+2	; 0x02
    1b16:	e0 2d       	mov	r30, r0
    1b18:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	0e 94 bb 09 	call	0x1376	; 0x1376 <i2cRead>
    1b22:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1b24:	ea 81       	ldd	r30, Y+2	; 0x02
    1b26:	fb 81       	ldd	r31, Y+3	; 0x03
    1b28:	05 80       	ldd	r0, Z+5	; 0x05
    1b2a:	f6 81       	ldd	r31, Z+6	; 0x06
    1b2c:	e0 2d       	mov	r30, r0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8a 36       	cpi	r24, 0x6A	; 106
    1b32:	31 f4       	brne	.+12     	; 0x1b40 <Emergency+0x86>
		beep(1);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <beep>
		eflag=1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 be 01 	sts	0x01BE, r24
		}
	if(*(emergency->read.buf)==0x55){
    1b40:	ea 81       	ldd	r30, Y+2	; 0x02
    1b42:	fb 81       	ldd	r31, Y+3	; 0x03
    1b44:	05 80       	ldd	r0, Z+5	; 0x05
    1b46:	f6 81       	ldd	r31, Z+6	; 0x06
    1b48:	e0 2d       	mov	r30, r0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	85 35       	cpi	r24, 0x55	; 85
    1b4e:	d9 f4       	brne	.+54     	; 0x1b86 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1b50:	a0 e6       	ldi	r26, 0x60	; 96
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e0 e6       	ldi	r30, 0x60	; 96
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 60       	ori	r24, 0x08	; 8
    1b5c:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1b5e:	a0 e6       	ldi	r26, 0x60	; 96
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e0 e6       	ldi	r30, 0x60	; 96
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7b       	andi	r24, 0xBF	; 191
    1b6a:	8c 93       	st	X, r24
		wdt_reset();
    1b6c:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1b6e:	88 e1       	ldi	r24, 0x18	; 24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	28 e0       	ldi	r18, 0x08	; 8
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	a8 95       	wdr
    1b7a:	80 93 60 00 	sts	0x0060, r24
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	20 93 60 00 	sts	0x0060, r18
    1b84:	ff cf       	rjmp	.-2      	; 0x1b84 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <EmergencyStatus>:

bool EmergencyStatus()
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	0f 92       	push	r0
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1ba0:	80 91 be 01 	lds	r24, 0x01BE
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <EmergencyStatus+0x16>
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <EmergencyStatus+0x1a>
	else return 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb2:	0f 90       	pop	r0
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <__divmodhi4>:
    1bba:	97 fb       	bst	r25, 7
    1bbc:	09 2e       	mov	r0, r25
    1bbe:	07 26       	eor	r0, r23
    1bc0:	0a d0       	rcall	.+20     	; 0x1bd6 <__divmodhi4_neg1>
    1bc2:	77 fd       	sbrc	r23, 7
    1bc4:	04 d0       	rcall	.+8      	; 0x1bce <__divmodhi4_neg2>
    1bc6:	0c d0       	rcall	.+24     	; 0x1be0 <__udivmodhi4>
    1bc8:	06 d0       	rcall	.+12     	; 0x1bd6 <__divmodhi4_neg1>
    1bca:	00 20       	and	r0, r0
    1bcc:	1a f4       	brpl	.+6      	; 0x1bd4 <__divmodhi4_exit>

00001bce <__divmodhi4_neg2>:
    1bce:	70 95       	com	r23
    1bd0:	61 95       	neg	r22
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255

00001bd4 <__divmodhi4_exit>:
    1bd4:	08 95       	ret

00001bd6 <__divmodhi4_neg1>:
    1bd6:	f6 f7       	brtc	.-4      	; 0x1bd4 <__divmodhi4_exit>
    1bd8:	90 95       	com	r25
    1bda:	81 95       	neg	r24
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	08 95       	ret

00001be0 <__udivmodhi4>:
    1be0:	aa 1b       	sub	r26, r26
    1be2:	bb 1b       	sub	r27, r27
    1be4:	51 e1       	ldi	r21, 0x11	; 17
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <__udivmodhi4_ep>

00001be8 <__udivmodhi4_loop>:
    1be8:	aa 1f       	adc	r26, r26
    1bea:	bb 1f       	adc	r27, r27
    1bec:	a6 17       	cp	r26, r22
    1bee:	b7 07       	cpc	r27, r23
    1bf0:	10 f0       	brcs	.+4      	; 0x1bf6 <__udivmodhi4_ep>
    1bf2:	a6 1b       	sub	r26, r22
    1bf4:	b7 0b       	sbc	r27, r23

00001bf6 <__udivmodhi4_ep>:
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	5a 95       	dec	r21
    1bfc:	a9 f7       	brne	.-22     	; 0x1be8 <__udivmodhi4_loop>
    1bfe:	80 95       	com	r24
    1c00:	90 95       	com	r25
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	08 95       	ret

00001c08 <_exit>:
    1c08:	f8 94       	cli

00001c0a <__stop_program>:
    1c0a:	ff cf       	rjmp	.-2      	; 0x1c0a <__stop_program>
