
supply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000a3e  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  00000bdc  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ed  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122d  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b0f  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c94  00000000  00000000  00002c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000038bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b9  00000000  00000000  00003da6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	03 c1       	rjmp	.+518    	; 0x20a <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	20 c0       	rjmp	.+64     	; 0x6c <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	46 c1       	rjmp	.+652    	; 0x2be <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e3       	ldi	r30, 0x3E	; 62
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	fc d0       	rcall	.+504    	; 0x260 <main>
  68:	e8 c4       	rjmp	.+2512   	; 0xa3a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_21>:
			}
		wait(250);
		}
}
ISR(ADC_vect)
{	
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	1f 93       	push	r17
  78:	2f 93       	push	r18
  7a:	3f 93       	push	r19
  7c:	4f 93       	push	r20
  7e:	5f 93       	push	r21
  80:	6f 93       	push	r22
  82:	7f 93       	push	r23
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
  88:	af 93       	push	r26
  8a:	bf 93       	push	r27
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	adc_value=ADC+adc_value;  
  90:	80 91 78 00 	lds	r24, 0x0078
  94:	90 91 79 00 	lds	r25, 0x0079
  98:	20 91 0a 02 	lds	r18, 0x020A
  9c:	30 91 0b 02 	lds	r19, 0x020B
  a0:	28 0f       	add	r18, r24
  a2:	39 1f       	adc	r19, r25
  a4:	30 93 0b 02 	sts	0x020B, r19
  a8:	20 93 0a 02 	sts	0x020A, r18
	if(cnt==10){
  ac:	80 91 09 01 	lds	r24, 0x0109
  b0:	8a 30       	cpi	r24, 0x0A	; 10
  b2:	09 f0       	breq	.+2      	; 0xb6 <__vector_21+0x4a>
  b4:	4d c0       	rjmp	.+154    	; 0x150 <__vector_21+0xe4>
		adc_value=adc_value/10;
  b6:	80 91 0a 02 	lds	r24, 0x020A
  ba:	90 91 0b 02 	lds	r25, 0x020B
  be:	6a e0       	ldi	r22, 0x0A	; 10
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	70 d4       	rcall	.+2272   	; 0x9a4 <__udivmodhi4>
  c4:	70 93 0b 02 	sts	0x020B, r23
  c8:	60 93 0a 02 	sts	0x020A, r22
		if(510+(5*(Ampere)*0.9)<=adc_value){
  cc:	60 91 0a 02 	lds	r22, 0x020A
  d0:	70 91 0b 02 	lds	r23, 0x020B
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fb d1       	rcall	.+1014   	; 0x4d0 <__floatunsisf>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e7       	ldi	r20, 0x70	; 112
  e0:	54 e4       	ldi	r21, 0x44	; 68
  e2:	cb d1       	rcall	.+918    	; 0x47a <__gesf2>
  e4:	88 23       	and	r24, r24
  e6:	64 f1       	brlt	.+88     	; 0x140 <__vector_21+0xd4>
			wait(500);
  e8:	84 ef       	ldi	r24, 0xF4	; 244
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	b5 d1       	rcall	.+874    	; 0x458 <wait>
  ee:	10 e0       	ldi	r17, 0x00	; 0
            uint8_t i;
           for(i=0;i<10;i++){
				adc_value=0;
  f0:	10 92 0b 02 	sts	0x020B, r1
  f4:	10 92 0a 02 	sts	0x020A, r1
				loop_until_bit_is_set(ADCSRA,ADIF);
  f8:	80 91 7a 00 	lds	r24, 0x007A
  fc:	84 ff       	sbrs	r24, 4
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <__vector_21+0x8c>
				adc_value=ADC;
 100:	80 91 78 00 	lds	r24, 0x0078
 104:	90 91 79 00 	lds	r25, 0x0079
 108:	90 93 0b 02 	sts	0x020B, r25
 10c:	80 93 0a 02 	sts	0x020A, r24
            	if(510+(5*(Ampere)*0.9)<=adc_value) w_cnt++;
 110:	60 91 0a 02 	lds	r22, 0x020A
 114:	70 91 0b 02 	lds	r23, 0x020B
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	d9 d1       	rcall	.+946    	; 0x4d0 <__floatunsisf>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e7       	ldi	r20, 0x70	; 112
 124:	54 e4       	ldi	r21, 0x44	; 68
 126:	a9 d1       	rcall	.+850    	; 0x47a <__gesf2>
 128:	88 23       	and	r24, r24
 12a:	2c f0       	brlt	.+10     	; 0x136 <__vector_21+0xca>
 12c:	80 91 0c 02 	lds	r24, 0x020C
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 0c 02 	sts	0x020C, r24
	if(cnt==10){
		adc_value=adc_value/10;
		if(510+(5*(Ampere)*0.9)<=adc_value){
			wait(500);
            uint8_t i;
           for(i=0;i<10;i++){
 136:	1f 5f       	subi	r17, 0xFF	; 255
 138:	1a 30       	cpi	r17, 0x0A	; 10
 13a:	d1 f6       	brne	.-76     	; 0xf0 <__vector_21+0x84>
				adc_value=0;
				loop_until_bit_is_set(ADCSRA,ADIF);
				adc_value=ADC;
            	if(510+(5*(Ampere)*0.9)<=adc_value) w_cnt++;
            	}
			if(7<=w_cnt) ;//Emergency_Stop();	
 13c:	80 91 0c 02 	lds	r24, 0x020C
			}
        w_cnt=0;
 140:	10 92 0c 02 	sts	0x020C, r1
		cnt=0;
 144:	10 92 09 01 	sts	0x0109, r1
		adc_value=0;
 148:	10 92 0b 02 	sts	0x020B, r1
 14c:	10 92 0a 02 	sts	0x020A, r1
		}   	
	cnt++;
 150:	80 91 09 01 	lds	r24, 0x0109
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 09 01 	sts	0x0109, r24
}	
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	1f 91       	pop	r17
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <Emergency_Stop>:
		}
	return 0;
}

void Emergency_Stop()
{
 17e:	1f 93       	push	r17
	sei();
 180:	78 94       	sei
	*(data.read.buf)=0x00;
 182:	e0 91 05 01 	lds	r30, 0x0105
 186:	f0 91 06 01 	lds	r31, 0x0106
 18a:	10 82       	st	Z, r1
	while(1){
		*(data.read.buf)=0x6A;
 18c:	1a e6       	ldi	r17, 0x6A	; 106
 18e:	e0 91 05 01 	lds	r30, 0x0105
 192:	f0 91 06 01 	lds	r31, 0x0106
 196:	10 83       	st	Z, r17
		cbi(PORTC,1);
 198:	41 98       	cbi	0x08, 1	; 8
		sbi(PINB,0);
 19a:	18 9a       	sbi	0x03, 0	; 3
		sbi(PINB,1);
 19c:	19 9a       	sbi	0x03, 1	; 3
		sbi(PINB,2);
 19e:	1a 9a       	sbi	0x03, 2	; 3
		sbi(PIND,7);
 1a0:	4f 9a       	sbi	0x09, 7	; 9
		if(*(data.write.buf)==0x55){
 1a2:	e0 91 01 01 	lds	r30, 0x0101
 1a6:	f0 91 02 01 	lds	r31, 0x0102
 1aa:	80 81       	ld	r24, Z
 1ac:	85 35       	cpi	r24, 0x55	; 85
 1ae:	49 f5       	brne	.+82     	; 0x202 <Emergency_Stop+0x84>
			*(data.read.buf)=0x55;
 1b0:	e0 91 05 01 	lds	r30, 0x0105
 1b4:	f0 91 06 01 	lds	r31, 0x0106
 1b8:	80 83       	st	Z, r24
			sbi(PORTC,1);
 1ba:	41 9a       	sbi	0x08, 1	; 8
			sbi(PORTB,0);
 1bc:	28 9a       	sbi	0x05, 0	; 5
			sbi(PORTB,1);
 1be:	29 9a       	sbi	0x05, 1	; 5
			sbi(PORTB,2);
 1c0:	2a 9a       	sbi	0x05, 2	; 5
			sbi(PORTD,7);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
			while(i2cComFlag);
 1c4:	80 91 10 02 	lds	r24, 0x0210
 1c8:	88 23       	and	r24, r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <Emergency_Stop+0x46>
			while(!i2cComFlag);
 1cc:	80 91 10 02 	lds	r24, 0x0210
 1d0:	88 23       	and	r24, r24
 1d2:	e1 f3       	breq	.-8      	; 0x1cc <Emergency_Stop+0x4e>
			WDTCSR |= 0x08;
 1d4:	80 91 60 00 	lds	r24, 0x0060
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	80 93 60 00 	sts	0x0060, r24
			WDTCSR &= 0xBF;
 1de:	80 91 60 00 	lds	r24, 0x0060
 1e2:	8f 7b       	andi	r24, 0xBF	; 191
 1e4:	80 93 60 00 	sts	0x0060, r24
			wdt_reset();
 1e8:	a8 95       	wdr
			wdt_enable(WDTO_15MS);
 1ea:	28 e0       	ldi	r18, 0x08	; 8
 1ec:	88 e1       	ldi	r24, 0x18	; 24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	a8 95       	wdr
 1f6:	80 93 60 00 	sts	0x0060, r24
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	20 93 60 00 	sts	0x0060, r18
 200:	ff cf       	rjmp	.-2      	; 0x200 <Emergency_Stop+0x82>
			while(1);
			}
		wait(250);
 202:	8a ef       	ldi	r24, 0xFA	; 250
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	28 d1       	rcall	.+592    	; 0x458 <wait>
 208:	c2 cf       	rjmp	.-124    	; 0x18e <Emergency_Stop+0x10>

0000020a <__vector_1>:
	cnt++;
}	


ISR(INT0_vect)
{	
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if(bit_is_clear(PIND,PD2)){
 22c:	4a 99       	sbic	0x09, 2	; 9
 22e:	07 c0       	rjmp	.+14     	; 0x23e <__vector_1+0x34>
		wait(50);
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	11 d1       	rcall	.+546    	; 0x458 <wait>
		if(bit_is_clear(PIND,PD2)){
 236:	4a 99       	sbic	0x09, 2	; 9
 238:	02 c0       	rjmp	.+4      	; 0x23e <__vector_1+0x34>
			sbi(PORTB,4);
 23a:	2c 9a       	sbi	0x05, 4	; 5
			Emergency_Stop();
 23c:	a0 df       	rcall	.-192    	; 0x17e <Emergency_Stop>
			}
	}
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <main>:
volatile uint16_t adc_value=0;
volatile uint8_t cnt=1,w_cnt=0;

int main(void)
{
	initI2CSlave(&data);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e d0       	rcall	.+28     	; 0x282 <initI2CSlave>
	setup();
 266:	ca d0       	rcall	.+404    	; 0x3fc <setup>
	sei();
 268:	78 94       	sei
	while(1){
		if(*(data.write.buf)==0x6A) Emergency_Stop();
 26a:	e0 91 01 01 	lds	r30, 0x0101
 26e:	f0 91 02 01 	lds	r31, 0x0102
 272:	80 81       	ld	r24, Z
 274:	8a 36       	cpi	r24, 0x6A	; 106
 276:	09 f4       	brne	.+2      	; 0x27a <main+0x1a>
 278:	82 df       	rcall	.-252    	; 0x17e <Emergency_Stop>
		wait(25);
 27a:	89 e1       	ldi	r24, 0x19	; 25
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ec d0       	rcall	.+472    	; 0x458 <wait>
 280:	f4 cf       	rjmp	.-24     	; 0x26a <main+0xa>

00000282 <initI2CSlave>:
    }
#endif

#if SLAVE_COMPILE
void initI2CSlave(Slave *_own)
	{
 282:	fc 01       	movw	r30, r24
		own = _own;
 284:	90 93 13 02 	sts	0x0213, r25
 288:	80 93 12 02 	sts	0x0212, r24
		TWAR = (own->addr)<<=1;
 28c:	80 81       	ld	r24, Z
 28e:	88 0f       	add	r24, r24
 290:	80 83       	st	Z, r24
 292:	ea eb       	ldi	r30, 0xBA	; 186
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 83       	st	Z, r24
		TWAR |= 1;
 298:	80 81       	ld	r24, Z
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	80 83       	st	Z, r24
		TWCR = 0x45;
 29e:	85 e4       	ldi	r24, 0x45	; 69
 2a0:	80 93 bc 00 	sts	0x00BC, r24
	#if WDT_RESET_IN_I2C
		wdt_reset();
 2a4:	a8 95       	wdr

		wdt_enable(WDT_RESET_TIME);
 2a6:	28 e0       	ldi	r18, 0x08	; 8
 2a8:	88 e1       	ldi	r24, 0x18	; 24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	a8 95       	wdr
 2b2:	80 93 60 00 	sts	0x0060, r24
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	20 93 60 00 	sts	0x0060, r18

	#endif
	}
 2bc:	08 95       	ret

000002be <__vector_24>:


#if SLAVE_COMPILE

ISR (TWI_vect)
	{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
		cli();
 2d0:	f8 94       	cli
	    switch(TWSR)                            
 2d2:	80 91 b9 00 	lds	r24, 0x00B9
 2d6:	80 39       	cpi	r24, 0x90	; 144
 2d8:	19 f1       	breq	.+70     	; 0x320 <__vector_24+0x62>
 2da:	81 39       	cpi	r24, 0x91	; 145
 2dc:	48 f4       	brcc	.+18     	; 0x2f0 <__vector_24+0x32>
 2de:	80 37       	cpi	r24, 0x70	; 112
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <__vector_24+0x26>
 2e2:	64 c0       	rjmp	.+200    	; 0x3ac <__vector_24+0xee>
 2e4:	80 38       	cpi	r24, 0x80	; 128
 2e6:	f9 f0       	breq	.+62     	; 0x326 <__vector_24+0x68>
 2e8:	80 36       	cpi	r24, 0x60	; 96
 2ea:	09 f0       	breq	.+2      	; 0x2ee <__vector_24+0x30>
 2ec:	67 c0       	rjmp	.+206    	; 0x3bc <__vector_24+0xfe>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <__vector_24+0x4a>
 2f0:	88 3a       	cpi	r24, 0xA8	; 168
 2f2:	41 f1       	breq	.+80     	; 0x344 <__vector_24+0x86>
 2f4:	89 3a       	cpi	r24, 0xA9	; 169
 2f6:	20 f4       	brcc	.+8      	; 0x300 <__vector_24+0x42>
 2f8:	80 3a       	cpi	r24, 0xA0	; 160
 2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_24+0x40>
 2fc:	5f c0       	rjmp	.+190    	; 0x3bc <__vector_24+0xfe>
 2fe:	50 c0       	rjmp	.+160    	; 0x3a0 <__vector_24+0xe2>
 300:	88 3b       	cpi	r24, 0xB8	; 184
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_24+0x48>
 304:	5b c0       	rjmp	.+182    	; 0x3bc <__vector_24+0xfe>
 306:	39 c0       	rjmp	.+114    	; 0x37a <__vector_24+0xbc>
			{
				case 0x60:						
					count = 0;
 308:	10 92 11 02 	sts	0x0211, r1
					TWCR |= 0x80;	
 30c:	80 91 bc 00 	lds	r24, 0x00BC
 310:	80 68       	ori	r24, 0x80	; 128
 312:	80 93 bc 00 	sts	0x00BC, r24
					i2cComFlag = true;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 10 02 	sts	0x0210, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 31c:	a8 95       	wdr
 31e:	55 c0       	rjmp	.+170    	; 0x3ca <__vector_24+0x10c>

					#endif
					break;
	            case 0x90:
	                emergency = true;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 0f 02 	sts	0x020F, r24
				case 0x80:                      
					*(own->write.buf+count) = TWDR;	   
 326:	80 91 11 02 	lds	r24, 0x0211
 32a:	90 91 bb 00 	lds	r25, 0x00BB
 32e:	e0 91 12 02 	lds	r30, 0x0212
 332:	f0 91 13 02 	lds	r31, 0x0213
 336:	01 80       	ldd	r0, Z+1	; 0x01
 338:	f2 81       	ldd	r31, Z+2	; 0x02
 33a:	e0 2d       	mov	r30, r0
 33c:	e8 0f       	add	r30, r24
 33e:	f1 1d       	adc	r31, r1
 340:	90 83       	st	Z, r25
 342:	29 c0       	rjmp	.+82     	; 0x396 <__vector_24+0xd8>
					break;
				case 0xA0:
					TWCR |= 0x80;
					break;				
	            case 0xA8:
					i2cComFlag = true;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 10 02 	sts	0x0210, r24
					count = 0;
 34a:	10 92 11 02 	sts	0x0211, r1
					TWDR = *own->read.buf;				
 34e:	e0 91 12 02 	lds	r30, 0x0212
 352:	f0 91 13 02 	lds	r31, 0x0213
 356:	05 80       	ldd	r0, Z+5	; 0x05
 358:	f6 81       	ldd	r31, Z+6	; 0x06
 35a:	e0 2d       	mov	r30, r0
 35c:	80 81       	ld	r24, Z
 35e:	80 93 bb 00 	sts	0x00BB, r24
					count++;					
 362:	80 91 11 02 	lds	r24, 0x0211
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 11 02 	sts	0x0211, r24
					TWCR |= 0x80;
 36c:	80 91 bc 00 	lds	r24, 0x00BC
 370:	80 68       	ori	r24, 0x80	; 128
 372:	80 93 bc 00 	sts	0x00BC, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 376:	a8 95       	wdr
 378:	28 c0       	rjmp	.+80     	; 0x3ca <__vector_24+0x10c>

					#endif				
					break;
				case 0xB8:						
					TWDR = *(own->read.buf + count);	
 37a:	80 91 11 02 	lds	r24, 0x0211
 37e:	e0 91 12 02 	lds	r30, 0x0212
 382:	f0 91 13 02 	lds	r31, 0x0213
 386:	05 80       	ldd	r0, Z+5	; 0x05
 388:	f6 81       	ldd	r31, Z+6	; 0x06
 38a:	e0 2d       	mov	r30, r0
 38c:	e8 0f       	add	r30, r24
 38e:	f1 1d       	adc	r31, r1
 390:	80 81       	ld	r24, Z
 392:	80 93 bb 00 	sts	0x00BB, r24
					count++;					
 396:	80 91 11 02 	lds	r24, 0x0211
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 11 02 	sts	0x0211, r24
					TWCR |= 0x80;				
 3a0:	80 91 bc 00 	lds	r24, 0x00BC
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	80 93 bc 00 	sts	0x00BC, r24
 3aa:	0f c0       	rjmp	.+30     	; 0x3ca <__vector_24+0x10c>
					break;
			    case 0x70:                      
	                *own->read.buf = 0;
 3ac:	e0 91 12 02 	lds	r30, 0x0212
 3b0:	f0 91 13 02 	lds	r31, 0x0213
 3b4:	05 80       	ldd	r0, Z+5	; 0x05
 3b6:	f6 81       	ldd	r31, Z+6	; 0x06
 3b8:	e0 2d       	mov	r30, r0
 3ba:	10 82       	st	Z, r1
				case 0xC0:   
					TWCR |= 0x80;
					i2cComFlag = false;
					break;					
				default:
					TWCR |= 0x80;
 3bc:	80 91 bc 00 	lds	r24, 0x00BC
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	80 93 bc 00 	sts	0x00BC, r24
					i2cComFlag = false;				
 3c6:	10 92 10 02 	sts	0x0210, r1
					break;
			}
			sei();
 3ca:	78 94       	sei
	}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <init_adc>:
#include <avr/wdt.h>
#include "supply.h"

void init_adc()
{
	ADMUX=0b01000000;
 3de:	80 e4       	ldi	r24, 0x40	; 64
 3e0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0b10101110;
 3e4:	8e ea       	ldi	r24, 0xAE	; 174
 3e6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB=0b00000000;
 3ea:	10 92 7b 00 	sts	0x007B, r1
}
 3ee:	08 95       	ret

000003f0 <init_INT0>:

void init_INT0()
{
	EICRA=0b00000100;
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	80 93 69 00 	sts	0x0069, r24
	EIMSK=0b00000001;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	8d bb       	out	0x1d, r24	; 29
}
 3fa:	08 95       	ret

000003fc <setup>:

void setup()
{
	DDRC=0xca;
 3fc:	8a ec       	ldi	r24, 0xCA	; 202
 3fe:	87 b9       	out	0x07, r24	; 7
	DDRD=0xfb;
 400:	8b ef       	ldi	r24, 0xFB	; 251
 402:	8a b9       	out	0x0a, r24	; 10
	DDRB=0xff;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	84 b9       	out	0x04, r24	; 4
	PORTD=0x04;
 408:	34 e0       	ldi	r19, 0x04	; 4
 40a:	3b b9       	out	0x0b, r19	; 11
	PORTD |= 0xC0;
 40c:	8b b1       	in	r24, 0x0b	; 11
 40e:	80 6c       	ori	r24, 0xC0	; 192
 410:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0x07;
 412:	85 b1       	in	r24, 0x05	; 5
 414:	87 60       	ori	r24, 0x07	; 7
 416:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 418:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
 41a:	2d e0       	ldi	r18, 0x0D	; 13
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	a8 95       	wdr
 426:	80 93 60 00 	sts	0x0060, r24
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	20 93 60 00 	sts	0x0060, r18
	cbi(PORTD,6);	
 430:	5e 98       	cbi	0x0b, 6	; 11
	cbi(PORTC,0);
 432:	40 98       	cbi	0x08, 0	; 8
#include <avr/wdt.h>
#include "supply.h"

void init_adc()
{
	ADMUX=0b01000000;
 434:	80 e4       	ldi	r24, 0x40	; 64
 436:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0b10101110;
 43a:	ea e7       	ldi	r30, 0x7A	; 122
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	8e ea       	ldi	r24, 0xAE	; 174
 440:	80 83       	st	Z, r24
	ADCSRB=0b00000000;
 442:	10 92 7b 00 	sts	0x007B, r1
}

void init_INT0()
{
	EICRA=0b00000100;
 446:	30 93 69 00 	sts	0x0069, r19
	EIMSK=0b00000001;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	8d bb       	out	0x1d, r24	; 29
	wdt_enable(WDTO_500MS);
	cbi(PORTD,6);	
	cbi(PORTC,0);
	init_adc();
	init_INT0();
	sbi(PORTC,1);
 44e:	41 9a       	sbi	0x08, 1	; 8
	sbi(ADCSRA,ADSC);
 450:	80 81       	ld	r24, Z
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 83       	st	Z, r24
}
 456:	08 95       	ret

00000458 <wait>:

void wait(uint16_t ms)
{          
 458:	ac 01       	movw	r20, r24
	uint16_t i;
	TCCR2B= 0x03;       
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	80 93 b1 00 	sts	0x00B1, r24
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
	for( i=0;i<ms;i++ ){                          
		while( bit_is_clear(TIFR2,TOV2));               
		TIFR2  = _BV(TOV2); 
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	05 c0       	rjmp	.+10     	; 0x472 <wait+0x1a>
void wait(uint16_t ms)
{          
	uint16_t i;
	TCCR2B= 0x03;       
	for( i=0;i<ms;i++ ){                          
		while( bit_is_clear(TIFR2,TOV2));               
 468:	b8 9b       	sbis	0x17, 0	; 23
 46a:	fe cf       	rjmp	.-4      	; 0x468 <wait+0x10>
		TIFR2  = _BV(TOV2); 
 46c:	87 bb       	out	0x17, r24	; 23

void wait(uint16_t ms)
{          
	uint16_t i;
	TCCR2B= 0x03;       
	for( i=0;i<ms;i++ ){                          
 46e:	2f 5f       	subi	r18, 0xFF	; 255
 470:	3f 4f       	sbci	r19, 0xFF	; 255
 472:	24 17       	cp	r18, r20
 474:	35 07       	cpc	r19, r21
 476:	c0 f3       	brcs	.-16     	; 0x468 <wait+0x10>
		while( bit_is_clear(TIFR2,TOV2));               
		TIFR2  = _BV(TOV2); 
		}
}
 478:	08 95       	ret

0000047a <__gesf2>:
 47a:	a8 e1       	ldi	r26, 0x18	; 24
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e2 e4       	ldi	r30, 0x42	; 66
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	b0 c2       	rjmp	.+1376   	; 0x9e4 <__prologue_saves__+0x18>
 484:	69 83       	std	Y+1, r22	; 0x01
 486:	7a 83       	std	Y+2, r23	; 0x02
 488:	8b 83       	std	Y+3, r24	; 0x03
 48a:	9c 83       	std	Y+4, r25	; 0x04
 48c:	2d 83       	std	Y+5, r18	; 0x05
 48e:	3e 83       	std	Y+6, r19	; 0x06
 490:	4f 83       	std	Y+7, r20	; 0x07
 492:	58 87       	std	Y+8, r21	; 0x08
 494:	89 e0       	ldi	r24, 0x09	; 9
 496:	e8 2e       	mov	r14, r24
 498:	f1 2c       	mov	r15, r1
 49a:	ec 0e       	add	r14, r28
 49c:	fd 1e       	adc	r15, r29
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	b7 01       	movw	r22, r14
 4a4:	ae d1       	rcall	.+860    	; 0x802 <__unpack_f>
 4a6:	8e 01       	movw	r16, r28
 4a8:	0f 5e       	subi	r16, 0xEF	; 239
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	ce 01       	movw	r24, r28
 4ae:	05 96       	adiw	r24, 0x05	; 5
 4b0:	b8 01       	movw	r22, r16
 4b2:	a7 d1       	rcall	.+846    	; 0x802 <__unpack_f>
 4b4:	89 85       	ldd	r24, Y+9	; 0x09
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <__gesf2+0x4e>
 4ba:	89 89       	ldd	r24, Y+17	; 0x11
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	20 f0       	brcs	.+8      	; 0x4c8 <__gesf2+0x4e>
 4c0:	c7 01       	movw	r24, r14
 4c2:	b8 01       	movw	r22, r16
 4c4:	16 d2       	rcall	.+1068   	; 0x8f2 <__fpcmp_parts_f>
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <__gesf2+0x50>
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	68 96       	adiw	r28, 0x18	; 24
 4cc:	e6 e0       	ldi	r30, 0x06	; 6
 4ce:	a6 c2       	rjmp	.+1356   	; 0xa1c <__epilogue_restores__+0x18>

000004d0 <__floatunsisf>:
 4d0:	a8 e0       	ldi	r26, 0x08	; 8
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	ed e6       	ldi	r30, 0x6D	; 109
 4d6:	f2 e0       	ldi	r31, 0x02	; 2
 4d8:	81 c2       	rjmp	.+1282   	; 0x9dc <__prologue_saves__+0x10>
 4da:	7b 01       	movw	r14, r22
 4dc:	8c 01       	movw	r16, r24
 4de:	61 15       	cp	r22, r1
 4e0:	71 05       	cpc	r23, r1
 4e2:	81 05       	cpc	r24, r1
 4e4:	91 05       	cpc	r25, r1
 4e6:	19 f4       	brne	.+6      	; 0x4ee <__floatunsisf+0x1e>
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	89 83       	std	Y+1, r24	; 0x01
 4ec:	5f c0       	rjmp	.+190    	; 0x5ac <__stack+0xad>
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	8e e1       	ldi	r24, 0x1E	; 30
 4f4:	c8 2e       	mov	r12, r24
 4f6:	d1 2c       	mov	r13, r1
 4f8:	dc 82       	std	Y+4, r13	; 0x04
 4fa:	cb 82       	std	Y+3, r12	; 0x03
 4fc:	ed 82       	std	Y+5, r14	; 0x05
 4fe:	fe 82       	std	Y+6, r15	; 0x06
 500:	0f 83       	std	Y+7, r16	; 0x07
 502:	18 87       	std	Y+8, r17	; 0x08
 504:	c8 01       	movw	r24, r16
 506:	b7 01       	movw	r22, r14
 508:	58 d0       	rcall	.+176    	; 0x5ba <__clzsi2>
 50a:	fc 01       	movw	r30, r24
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	f7 ff       	sbrs	r31, 7
 510:	3b c0       	rjmp	.+118    	; 0x588 <__stack+0x89>
 512:	22 27       	eor	r18, r18
 514:	33 27       	eor	r19, r19
 516:	2e 1b       	sub	r18, r30
 518:	3f 0b       	sbc	r19, r31
 51a:	57 01       	movw	r10, r14
 51c:	68 01       	movw	r12, r16
 51e:	02 2e       	mov	r0, r18
 520:	04 c0       	rjmp	.+8      	; 0x52a <__stack+0x2b>
 522:	d6 94       	lsr	r13
 524:	c7 94       	ror	r12
 526:	b7 94       	ror	r11
 528:	a7 94       	ror	r10
 52a:	0a 94       	dec	r0
 52c:	d2 f7       	brpl	.-12     	; 0x522 <__stack+0x23>
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	a0 e0       	ldi	r26, 0x00	; 0
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	04 c0       	rjmp	.+8      	; 0x548 <__stack+0x49>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	aa 1f       	adc	r26, r26
 546:	bb 1f       	adc	r27, r27
 548:	2a 95       	dec	r18
 54a:	d2 f7       	brpl	.-12     	; 0x540 <__stack+0x41>
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	a1 09       	sbc	r26, r1
 550:	b1 09       	sbc	r27, r1
 552:	8e 21       	and	r24, r14
 554:	9f 21       	and	r25, r15
 556:	a0 23       	and	r26, r16
 558:	b1 23       	and	r27, r17
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	a1 05       	cpc	r26, r1
 55e:	b1 05       	cpc	r27, r1
 560:	21 f0       	breq	.+8      	; 0x56a <__stack+0x6b>
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	4a 29       	or	r20, r10
 56c:	5b 29       	or	r21, r11
 56e:	6c 29       	or	r22, r12
 570:	7d 29       	or	r23, r13
 572:	4d 83       	std	Y+5, r20	; 0x05
 574:	5e 83       	std	Y+6, r21	; 0x06
 576:	6f 83       	std	Y+7, r22	; 0x07
 578:	78 87       	std	Y+8, r23	; 0x08
 57a:	8e e1       	ldi	r24, 0x1E	; 30
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	8e 1b       	sub	r24, r30
 580:	9f 0b       	sbc	r25, r31
 582:	9c 83       	std	Y+4, r25	; 0x04
 584:	8b 83       	std	Y+3, r24	; 0x03
 586:	12 c0       	rjmp	.+36     	; 0x5ac <__stack+0xad>
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	81 f0       	breq	.+32     	; 0x5ac <__stack+0xad>
 58c:	0e 2e       	mov	r0, r30
 58e:	04 c0       	rjmp	.+8      	; 0x598 <__stack+0x99>
 590:	ee 0c       	add	r14, r14
 592:	ff 1c       	adc	r15, r15
 594:	00 1f       	adc	r16, r16
 596:	11 1f       	adc	r17, r17
 598:	0a 94       	dec	r0
 59a:	d2 f7       	brpl	.-12     	; 0x590 <__stack+0x91>
 59c:	ed 82       	std	Y+5, r14	; 0x05
 59e:	fe 82       	std	Y+6, r15	; 0x06
 5a0:	0f 83       	std	Y+7, r16	; 0x07
 5a2:	18 87       	std	Y+8, r17	; 0x08
 5a4:	ce 1a       	sub	r12, r30
 5a6:	df 0a       	sbc	r13, r31
 5a8:	dc 82       	std	Y+4, r13	; 0x04
 5aa:	cb 82       	std	Y+3, r12	; 0x03
 5ac:	1a 82       	std	Y+2, r1	; 0x02
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	52 d0       	rcall	.+164    	; 0x658 <__pack_f>
 5b4:	28 96       	adiw	r28, 0x08	; 8
 5b6:	ea e0       	ldi	r30, 0x0A	; 10
 5b8:	2d c2       	rjmp	.+1114   	; 0xa14 <__epilogue_restores__+0x10>

000005ba <__clzsi2>:
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	7b 01       	movw	r14, r22
 5c4:	8c 01       	movw	r16, r24
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	e8 16       	cp	r14, r24
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	f8 06       	cpc	r15, r24
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	08 07       	cpc	r16, r24
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	18 07       	cpc	r17, r24
 5d6:	88 f4       	brcc	.+34     	; 0x5fa <__clzsi2+0x40>
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	e8 16       	cp	r14, r24
 5dc:	f1 04       	cpc	r15, r1
 5de:	01 05       	cpc	r16, r1
 5e0:	11 05       	cpc	r17, r1
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <__clzsi2+0x36>
 5e4:	28 f0       	brcs	.+10     	; 0x5f0 <__clzsi2+0x36>
 5e6:	88 e0       	ldi	r24, 0x08	; 8
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a0 e0       	ldi	r26, 0x00	; 0
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	17 c0       	rjmp	.+46     	; 0x61e <__clzsi2+0x64>
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	12 c0       	rjmp	.+36     	; 0x61e <__clzsi2+0x64>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	e8 16       	cp	r14, r24
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	f8 06       	cpc	r15, r24
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 07       	cpc	r16, r24
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	18 07       	cpc	r17, r24
 60a:	28 f0       	brcs	.+10     	; 0x616 <__clzsi2+0x5c>
 60c:	88 e1       	ldi	r24, 0x18	; 24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	a0 e0       	ldi	r26, 0x00	; 0
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	04 c0       	rjmp	.+8      	; 0x61e <__clzsi2+0x64>
 616:	80 e1       	ldi	r24, 0x10	; 16
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a0 e0       	ldi	r26, 0x00	; 0
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	20 e2       	ldi	r18, 0x20	; 32
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	28 1b       	sub	r18, r24
 628:	39 0b       	sbc	r19, r25
 62a:	4a 0b       	sbc	r20, r26
 62c:	5b 0b       	sbc	r21, r27
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__clzsi2+0x7e>
 630:	16 95       	lsr	r17
 632:	07 95       	ror	r16
 634:	f7 94       	ror	r15
 636:	e7 94       	ror	r14
 638:	8a 95       	dec	r24
 63a:	d2 f7       	brpl	.-12     	; 0x630 <__clzsi2+0x76>
 63c:	f7 01       	movw	r30, r14
 63e:	e6 5f       	subi	r30, 0xF6	; 246
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	80 81       	ld	r24, Z
 644:	28 1b       	sub	r18, r24
 646:	31 09       	sbc	r19, r1
 648:	41 09       	sbc	r20, r1
 64a:	51 09       	sbc	r21, r1
 64c:	c9 01       	movw	r24, r18
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	08 95       	ret

00000658 <__pack_f>:
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	fc 01       	movw	r30, r24
 664:	e4 80       	ldd	r14, Z+4	; 0x04
 666:	f5 80       	ldd	r15, Z+5	; 0x05
 668:	06 81       	ldd	r16, Z+6	; 0x06
 66a:	17 81       	ldd	r17, Z+7	; 0x07
 66c:	d1 80       	ldd	r13, Z+1	; 0x01
 66e:	80 81       	ld	r24, Z
 670:	82 30       	cpi	r24, 0x02	; 2
 672:	48 f4       	brcc	.+18     	; 0x686 <__pack_f+0x2e>
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	a0 e1       	ldi	r26, 0x10	; 16
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e8 2a       	or	r14, r24
 67e:	f9 2a       	or	r15, r25
 680:	0a 2b       	or	r16, r26
 682:	1b 2b       	or	r17, r27
 684:	a5 c0       	rjmp	.+330    	; 0x7d0 <__pack_f+0x178>
 686:	84 30       	cpi	r24, 0x04	; 4
 688:	09 f4       	brne	.+2      	; 0x68c <__pack_f+0x34>
 68a:	9f c0       	rjmp	.+318    	; 0x7ca <__pack_f+0x172>
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	21 f4       	brne	.+8      	; 0x698 <__pack_f+0x40>
 690:	ee 24       	eor	r14, r14
 692:	ff 24       	eor	r15, r15
 694:	87 01       	movw	r16, r14
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <__pack_f+0x4a>
 698:	e1 14       	cp	r14, r1
 69a:	f1 04       	cpc	r15, r1
 69c:	01 05       	cpc	r16, r1
 69e:	11 05       	cpc	r17, r1
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <__pack_f+0x50>
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	96 c0       	rjmp	.+300    	; 0x7d4 <__pack_f+0x17c>
 6a8:	62 81       	ldd	r22, Z+2	; 0x02
 6aa:	73 81       	ldd	r23, Z+3	; 0x03
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	62 38       	cpi	r22, 0x82	; 130
 6b0:	79 07       	cpc	r23, r25
 6b2:	0c f0       	brlt	.+2      	; 0x6b6 <__pack_f+0x5e>
 6b4:	5b c0       	rjmp	.+182    	; 0x76c <__pack_f+0x114>
 6b6:	22 e8       	ldi	r18, 0x82	; 130
 6b8:	3f ef       	ldi	r19, 0xFF	; 255
 6ba:	26 1b       	sub	r18, r22
 6bc:	37 0b       	sbc	r19, r23
 6be:	2a 31       	cpi	r18, 0x1A	; 26
 6c0:	31 05       	cpc	r19, r1
 6c2:	2c f0       	brlt	.+10     	; 0x6ce <__pack_f+0x76>
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	2a c0       	rjmp	.+84     	; 0x722 <__pack_f+0xca>
 6ce:	b8 01       	movw	r22, r16
 6d0:	a7 01       	movw	r20, r14
 6d2:	02 2e       	mov	r0, r18
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__pack_f+0x86>
 6d6:	76 95       	lsr	r23
 6d8:	67 95       	ror	r22
 6da:	57 95       	ror	r21
 6dc:	47 95       	ror	r20
 6de:	0a 94       	dec	r0
 6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__pack_f+0x7e>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	a0 e0       	ldi	r26, 0x00	; 0
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__pack_f+0x9c>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	aa 1f       	adc	r26, r26
 6f2:	bb 1f       	adc	r27, r27
 6f4:	2a 95       	dec	r18
 6f6:	d2 f7       	brpl	.-12     	; 0x6ec <__pack_f+0x94>
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	a1 09       	sbc	r26, r1
 6fc:	b1 09       	sbc	r27, r1
 6fe:	8e 21       	and	r24, r14
 700:	9f 21       	and	r25, r15
 702:	a0 23       	and	r26, r16
 704:	b1 23       	and	r27, r17
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	a1 05       	cpc	r26, r1
 70a:	b1 05       	cpc	r27, r1
 70c:	21 f0       	breq	.+8      	; 0x716 <__pack_f+0xbe>
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	a0 e0       	ldi	r26, 0x00	; 0
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	9a 01       	movw	r18, r20
 718:	ab 01       	movw	r20, r22
 71a:	28 2b       	or	r18, r24
 71c:	39 2b       	or	r19, r25
 71e:	4a 2b       	or	r20, r26
 720:	5b 2b       	or	r21, r27
 722:	da 01       	movw	r26, r20
 724:	c9 01       	movw	r24, r18
 726:	8f 77       	andi	r24, 0x7F	; 127
 728:	90 70       	andi	r25, 0x00	; 0
 72a:	a0 70       	andi	r26, 0x00	; 0
 72c:	b0 70       	andi	r27, 0x00	; 0
 72e:	80 34       	cpi	r24, 0x40	; 64
 730:	91 05       	cpc	r25, r1
 732:	a1 05       	cpc	r26, r1
 734:	b1 05       	cpc	r27, r1
 736:	39 f4       	brne	.+14     	; 0x746 <__pack_f+0xee>
 738:	27 ff       	sbrs	r18, 7
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__pack_f+0xf6>
 73c:	20 5c       	subi	r18, 0xC0	; 192
 73e:	3f 4f       	sbci	r19, 0xFF	; 255
 740:	4f 4f       	sbci	r20, 0xFF	; 255
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	04 c0       	rjmp	.+8      	; 0x74e <__pack_f+0xf6>
 746:	21 5c       	subi	r18, 0xC1	; 193
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	4f 4f       	sbci	r20, 0xFF	; 255
 74c:	5f 4f       	sbci	r21, 0xFF	; 255
 74e:	e0 e0       	ldi	r30, 0x00	; 0
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	20 30       	cpi	r18, 0x00	; 0
 754:	a0 e0       	ldi	r26, 0x00	; 0
 756:	3a 07       	cpc	r19, r26
 758:	a0 e0       	ldi	r26, 0x00	; 0
 75a:	4a 07       	cpc	r20, r26
 75c:	a0 e4       	ldi	r26, 0x40	; 64
 75e:	5a 07       	cpc	r21, r26
 760:	10 f0       	brcs	.+4      	; 0x766 <__pack_f+0x10e>
 762:	e1 e0       	ldi	r30, 0x01	; 1
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	79 01       	movw	r14, r18
 768:	8a 01       	movw	r16, r20
 76a:	27 c0       	rjmp	.+78     	; 0x7ba <__pack_f+0x162>
 76c:	60 38       	cpi	r22, 0x80	; 128
 76e:	71 05       	cpc	r23, r1
 770:	64 f5       	brge	.+88     	; 0x7ca <__pack_f+0x172>
 772:	fb 01       	movw	r30, r22
 774:	e1 58       	subi	r30, 0x81	; 129
 776:	ff 4f       	sbci	r31, 0xFF	; 255
 778:	d8 01       	movw	r26, r16
 77a:	c7 01       	movw	r24, r14
 77c:	8f 77       	andi	r24, 0x7F	; 127
 77e:	90 70       	andi	r25, 0x00	; 0
 780:	a0 70       	andi	r26, 0x00	; 0
 782:	b0 70       	andi	r27, 0x00	; 0
 784:	80 34       	cpi	r24, 0x40	; 64
 786:	91 05       	cpc	r25, r1
 788:	a1 05       	cpc	r26, r1
 78a:	b1 05       	cpc	r27, r1
 78c:	39 f4       	brne	.+14     	; 0x79c <__pack_f+0x144>
 78e:	e7 fe       	sbrs	r14, 7
 790:	0d c0       	rjmp	.+26     	; 0x7ac <__pack_f+0x154>
 792:	80 e4       	ldi	r24, 0x40	; 64
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	a0 e0       	ldi	r26, 0x00	; 0
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__pack_f+0x14c>
 79c:	8f e3       	ldi	r24, 0x3F	; 63
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	a0 e0       	ldi	r26, 0x00	; 0
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	e8 0e       	add	r14, r24
 7a6:	f9 1e       	adc	r15, r25
 7a8:	0a 1f       	adc	r16, r26
 7aa:	1b 1f       	adc	r17, r27
 7ac:	17 ff       	sbrs	r17, 7
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__pack_f+0x162>
 7b0:	16 95       	lsr	r17
 7b2:	07 95       	ror	r16
 7b4:	f7 94       	ror	r15
 7b6:	e7 94       	ror	r14
 7b8:	31 96       	adiw	r30, 0x01	; 1
 7ba:	87 e0       	ldi	r24, 0x07	; 7
 7bc:	16 95       	lsr	r17
 7be:	07 95       	ror	r16
 7c0:	f7 94       	ror	r15
 7c2:	e7 94       	ror	r14
 7c4:	8a 95       	dec	r24
 7c6:	d1 f7       	brne	.-12     	; 0x7bc <__pack_f+0x164>
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <__pack_f+0x17c>
 7ca:	ee 24       	eor	r14, r14
 7cc:	ff 24       	eor	r15, r15
 7ce:	87 01       	movw	r16, r14
 7d0:	ef ef       	ldi	r30, 0xFF	; 255
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	6e 2f       	mov	r22, r30
 7d6:	67 95       	ror	r22
 7d8:	66 27       	eor	r22, r22
 7da:	67 95       	ror	r22
 7dc:	90 2f       	mov	r25, r16
 7de:	9f 77       	andi	r25, 0x7F	; 127
 7e0:	d7 94       	ror	r13
 7e2:	dd 24       	eor	r13, r13
 7e4:	d7 94       	ror	r13
 7e6:	8e 2f       	mov	r24, r30
 7e8:	86 95       	lsr	r24
 7ea:	49 2f       	mov	r20, r25
 7ec:	46 2b       	or	r20, r22
 7ee:	58 2f       	mov	r21, r24
 7f0:	5d 29       	or	r21, r13
 7f2:	b7 01       	movw	r22, r14
 7f4:	ca 01       	movw	r24, r20
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	ff 90       	pop	r15
 7fc:	ef 90       	pop	r14
 7fe:	df 90       	pop	r13
 800:	08 95       	ret

00000802 <__unpack_f>:
 802:	fc 01       	movw	r30, r24
 804:	db 01       	movw	r26, r22
 806:	40 81       	ld	r20, Z
 808:	51 81       	ldd	r21, Z+1	; 0x01
 80a:	22 81       	ldd	r18, Z+2	; 0x02
 80c:	62 2f       	mov	r22, r18
 80e:	6f 77       	andi	r22, 0x7F	; 127
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	22 1f       	adc	r18, r18
 814:	22 27       	eor	r18, r18
 816:	22 1f       	adc	r18, r18
 818:	93 81       	ldd	r25, Z+3	; 0x03
 81a:	89 2f       	mov	r24, r25
 81c:	88 0f       	add	r24, r24
 81e:	82 2b       	or	r24, r18
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	99 1f       	adc	r25, r25
 826:	99 27       	eor	r25, r25
 828:	99 1f       	adc	r25, r25
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	9c 93       	st	X, r25
 82e:	11 97       	sbiw	r26, 0x01	; 1
 830:	21 15       	cp	r18, r1
 832:	31 05       	cpc	r19, r1
 834:	a9 f5       	brne	.+106    	; 0x8a0 <__unpack_f+0x9e>
 836:	41 15       	cp	r20, r1
 838:	51 05       	cpc	r21, r1
 83a:	61 05       	cpc	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	11 f4       	brne	.+4      	; 0x844 <__unpack_f+0x42>
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	37 c0       	rjmp	.+110    	; 0x8b2 <__unpack_f+0xb0>
 844:	82 e8       	ldi	r24, 0x82	; 130
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	13 96       	adiw	r26, 0x03	; 3
 84a:	9c 93       	st	X, r25
 84c:	8e 93       	st	-X, r24
 84e:	12 97       	sbiw	r26, 0x02	; 2
 850:	9a 01       	movw	r18, r20
 852:	ab 01       	movw	r20, r22
 854:	67 e0       	ldi	r22, 0x07	; 7
 856:	22 0f       	add	r18, r18
 858:	33 1f       	adc	r19, r19
 85a:	44 1f       	adc	r20, r20
 85c:	55 1f       	adc	r21, r21
 85e:	6a 95       	dec	r22
 860:	d1 f7       	brne	.-12     	; 0x856 <__unpack_f+0x54>
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	8c 93       	st	X, r24
 866:	0d c0       	rjmp	.+26     	; 0x882 <__unpack_f+0x80>
 868:	22 0f       	add	r18, r18
 86a:	33 1f       	adc	r19, r19
 86c:	44 1f       	adc	r20, r20
 86e:	55 1f       	adc	r21, r21
 870:	12 96       	adiw	r26, 0x02	; 2
 872:	8d 91       	ld	r24, X+
 874:	9c 91       	ld	r25, X
 876:	13 97       	sbiw	r26, 0x03	; 3
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	13 96       	adiw	r26, 0x03	; 3
 87c:	9c 93       	st	X, r25
 87e:	8e 93       	st	-X, r24
 880:	12 97       	sbiw	r26, 0x02	; 2
 882:	20 30       	cpi	r18, 0x00	; 0
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	38 07       	cpc	r19, r24
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	48 07       	cpc	r20, r24
 88c:	80 e4       	ldi	r24, 0x40	; 64
 88e:	58 07       	cpc	r21, r24
 890:	58 f3       	brcs	.-42     	; 0x868 <__unpack_f+0x66>
 892:	14 96       	adiw	r26, 0x04	; 4
 894:	2d 93       	st	X+, r18
 896:	3d 93       	st	X+, r19
 898:	4d 93       	st	X+, r20
 89a:	5c 93       	st	X, r21
 89c:	17 97       	sbiw	r26, 0x07	; 7
 89e:	08 95       	ret
 8a0:	2f 3f       	cpi	r18, 0xFF	; 255
 8a2:	31 05       	cpc	r19, r1
 8a4:	79 f4       	brne	.+30     	; 0x8c4 <__unpack_f+0xc2>
 8a6:	41 15       	cp	r20, r1
 8a8:	51 05       	cpc	r21, r1
 8aa:	61 05       	cpc	r22, r1
 8ac:	71 05       	cpc	r23, r1
 8ae:	19 f4       	brne	.+6      	; 0x8b6 <__unpack_f+0xb4>
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	8c 93       	st	X, r24
 8b4:	08 95       	ret
 8b6:	64 ff       	sbrs	r22, 4
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__unpack_f+0xbe>
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	8c 93       	st	X, r24
 8be:	12 c0       	rjmp	.+36     	; 0x8e4 <__unpack_f+0xe2>
 8c0:	1c 92       	st	X, r1
 8c2:	10 c0       	rjmp	.+32     	; 0x8e4 <__unpack_f+0xe2>
 8c4:	2f 57       	subi	r18, 0x7F	; 127
 8c6:	30 40       	sbci	r19, 0x00	; 0
 8c8:	13 96       	adiw	r26, 0x03	; 3
 8ca:	3c 93       	st	X, r19
 8cc:	2e 93       	st	-X, r18
 8ce:	12 97       	sbiw	r26, 0x02	; 2
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	8c 93       	st	X, r24
 8d4:	87 e0       	ldi	r24, 0x07	; 7
 8d6:	44 0f       	add	r20, r20
 8d8:	55 1f       	adc	r21, r21
 8da:	66 1f       	adc	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	8a 95       	dec	r24
 8e0:	d1 f7       	brne	.-12     	; 0x8d6 <__unpack_f+0xd4>
 8e2:	70 64       	ori	r23, 0x40	; 64
 8e4:	14 96       	adiw	r26, 0x04	; 4
 8e6:	4d 93       	st	X+, r20
 8e8:	5d 93       	st	X+, r21
 8ea:	6d 93       	st	X+, r22
 8ec:	7c 93       	st	X, r23
 8ee:	17 97       	sbiw	r26, 0x07	; 7
 8f0:	08 95       	ret

000008f2 <__fpcmp_parts_f>:
 8f2:	1f 93       	push	r17
 8f4:	dc 01       	movw	r26, r24
 8f6:	fb 01       	movw	r30, r22
 8f8:	9c 91       	ld	r25, X
 8fa:	92 30       	cpi	r25, 0x02	; 2
 8fc:	08 f4       	brcc	.+2      	; 0x900 <__fpcmp_parts_f+0xe>
 8fe:	47 c0       	rjmp	.+142    	; 0x98e <__fpcmp_parts_f+0x9c>
 900:	80 81       	ld	r24, Z
 902:	82 30       	cpi	r24, 0x02	; 2
 904:	08 f4       	brcc	.+2      	; 0x908 <__fpcmp_parts_f+0x16>
 906:	43 c0       	rjmp	.+134    	; 0x98e <__fpcmp_parts_f+0x9c>
 908:	94 30       	cpi	r25, 0x04	; 4
 90a:	51 f4       	brne	.+20     	; 0x920 <__fpcmp_parts_f+0x2e>
 90c:	11 96       	adiw	r26, 0x01	; 1
 90e:	1c 91       	ld	r17, X
 910:	84 30       	cpi	r24, 0x04	; 4
 912:	99 f5       	brne	.+102    	; 0x97a <__fpcmp_parts_f+0x88>
 914:	81 81       	ldd	r24, Z+1	; 0x01
 916:	68 2f       	mov	r22, r24
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	61 1b       	sub	r22, r17
 91c:	71 09       	sbc	r23, r1
 91e:	3f c0       	rjmp	.+126    	; 0x99e <__fpcmp_parts_f+0xac>
 920:	84 30       	cpi	r24, 0x04	; 4
 922:	21 f0       	breq	.+8      	; 0x92c <__fpcmp_parts_f+0x3a>
 924:	92 30       	cpi	r25, 0x02	; 2
 926:	31 f4       	brne	.+12     	; 0x934 <__fpcmp_parts_f+0x42>
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	b9 f1       	breq	.+110    	; 0x99a <__fpcmp_parts_f+0xa8>
 92c:	81 81       	ldd	r24, Z+1	; 0x01
 92e:	88 23       	and	r24, r24
 930:	89 f1       	breq	.+98     	; 0x994 <__fpcmp_parts_f+0xa2>
 932:	2d c0       	rjmp	.+90     	; 0x98e <__fpcmp_parts_f+0x9c>
 934:	11 96       	adiw	r26, 0x01	; 1
 936:	1c 91       	ld	r17, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	82 30       	cpi	r24, 0x02	; 2
 93c:	f1 f0       	breq	.+60     	; 0x97a <__fpcmp_parts_f+0x88>
 93e:	81 81       	ldd	r24, Z+1	; 0x01
 940:	18 17       	cp	r17, r24
 942:	d9 f4       	brne	.+54     	; 0x97a <__fpcmp_parts_f+0x88>
 944:	12 96       	adiw	r26, 0x02	; 2
 946:	2d 91       	ld	r18, X+
 948:	3c 91       	ld	r19, X
 94a:	13 97       	sbiw	r26, 0x03	; 3
 94c:	82 81       	ldd	r24, Z+2	; 0x02
 94e:	93 81       	ldd	r25, Z+3	; 0x03
 950:	82 17       	cp	r24, r18
 952:	93 07       	cpc	r25, r19
 954:	94 f0       	brlt	.+36     	; 0x97a <__fpcmp_parts_f+0x88>
 956:	28 17       	cp	r18, r24
 958:	39 07       	cpc	r19, r25
 95a:	bc f0       	brlt	.+46     	; 0x98a <__fpcmp_parts_f+0x98>
 95c:	14 96       	adiw	r26, 0x04	; 4
 95e:	8d 91       	ld	r24, X+
 960:	9d 91       	ld	r25, X+
 962:	0d 90       	ld	r0, X+
 964:	bc 91       	ld	r27, X
 966:	a0 2d       	mov	r26, r0
 968:	24 81       	ldd	r18, Z+4	; 0x04
 96a:	35 81       	ldd	r19, Z+5	; 0x05
 96c:	46 81       	ldd	r20, Z+6	; 0x06
 96e:	57 81       	ldd	r21, Z+7	; 0x07
 970:	28 17       	cp	r18, r24
 972:	39 07       	cpc	r19, r25
 974:	4a 07       	cpc	r20, r26
 976:	5b 07       	cpc	r21, r27
 978:	18 f4       	brcc	.+6      	; 0x980 <__fpcmp_parts_f+0x8e>
 97a:	11 23       	and	r17, r17
 97c:	41 f0       	breq	.+16     	; 0x98e <__fpcmp_parts_f+0x9c>
 97e:	0a c0       	rjmp	.+20     	; 0x994 <__fpcmp_parts_f+0xa2>
 980:	82 17       	cp	r24, r18
 982:	93 07       	cpc	r25, r19
 984:	a4 07       	cpc	r26, r20
 986:	b5 07       	cpc	r27, r21
 988:	40 f4       	brcc	.+16     	; 0x99a <__fpcmp_parts_f+0xa8>
 98a:	11 23       	and	r17, r17
 98c:	19 f0       	breq	.+6      	; 0x994 <__fpcmp_parts_f+0xa2>
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	05 c0       	rjmp	.+10     	; 0x99e <__fpcmp_parts_f+0xac>
 994:	6f ef       	ldi	r22, 0xFF	; 255
 996:	7f ef       	ldi	r23, 0xFF	; 255
 998:	02 c0       	rjmp	.+4      	; 0x99e <__fpcmp_parts_f+0xac>
 99a:	60 e0       	ldi	r22, 0x00	; 0
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	cb 01       	movw	r24, r22
 9a0:	1f 91       	pop	r17
 9a2:	08 95       	ret

000009a4 <__udivmodhi4>:
 9a4:	aa 1b       	sub	r26, r26
 9a6:	bb 1b       	sub	r27, r27
 9a8:	51 e1       	ldi	r21, 0x11	; 17
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <__udivmodhi4_ep>

000009ac <__udivmodhi4_loop>:
 9ac:	aa 1f       	adc	r26, r26
 9ae:	bb 1f       	adc	r27, r27
 9b0:	a6 17       	cp	r26, r22
 9b2:	b7 07       	cpc	r27, r23
 9b4:	10 f0       	brcs	.+4      	; 0x9ba <__udivmodhi4_ep>
 9b6:	a6 1b       	sub	r26, r22
 9b8:	b7 0b       	sbc	r27, r23

000009ba <__udivmodhi4_ep>:
 9ba:	88 1f       	adc	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	5a 95       	dec	r21
 9c0:	a9 f7       	brne	.-22     	; 0x9ac <__udivmodhi4_loop>
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	bc 01       	movw	r22, r24
 9c8:	cd 01       	movw	r24, r26
 9ca:	08 95       	ret

000009cc <__prologue_saves__>:
 9cc:	2f 92       	push	r2
 9ce:	3f 92       	push	r3
 9d0:	4f 92       	push	r4
 9d2:	5f 92       	push	r5
 9d4:	6f 92       	push	r6
 9d6:	7f 92       	push	r7
 9d8:	8f 92       	push	r8
 9da:	9f 92       	push	r9
 9dc:	af 92       	push	r10
 9de:	bf 92       	push	r11
 9e0:	cf 92       	push	r12
 9e2:	df 92       	push	r13
 9e4:	ef 92       	push	r14
 9e6:	ff 92       	push	r15
 9e8:	0f 93       	push	r16
 9ea:	1f 93       	push	r17
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
 9f4:	ca 1b       	sub	r28, r26
 9f6:	db 0b       	sbc	r29, r27
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	09 94       	ijmp

00000a04 <__epilogue_restores__>:
 a04:	2a 88       	ldd	r2, Y+18	; 0x12
 a06:	39 88       	ldd	r3, Y+17	; 0x11
 a08:	48 88       	ldd	r4, Y+16	; 0x10
 a0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a10:	8c 84       	ldd	r8, Y+12	; 0x0c
 a12:	9b 84       	ldd	r9, Y+11	; 0x0b
 a14:	aa 84       	ldd	r10, Y+10	; 0x0a
 a16:	b9 84       	ldd	r11, Y+9	; 0x09
 a18:	c8 84       	ldd	r12, Y+8	; 0x08
 a1a:	df 80       	ldd	r13, Y+7	; 0x07
 a1c:	ee 80       	ldd	r14, Y+6	; 0x06
 a1e:	fd 80       	ldd	r15, Y+5	; 0x05
 a20:	0c 81       	ldd	r16, Y+4	; 0x04
 a22:	1b 81       	ldd	r17, Y+3	; 0x03
 a24:	aa 81       	ldd	r26, Y+2	; 0x02
 a26:	b9 81       	ldd	r27, Y+1	; 0x01
 a28:	ce 0f       	add	r28, r30
 a2a:	d1 1d       	adc	r29, r1
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	ed 01       	movw	r28, r26
 a38:	08 95       	ret

00000a3a <_exit>:
 a3a:	f8 94       	cli

00000a3c <__stop_program>:
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <__stop_program>
