
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001c7e  00001d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800138  00800138  00001d4a  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001596  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000037c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015a9  00000000  00000000  0000415f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00005708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c3  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_20>
      54:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_28>
      74:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e7       	ldi	r30, 0x7E	; 126
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 33       	cpi	r26, 0x38	; 56
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a8 e3       	ldi	r26, 0x38	; 56
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3a       	cpi	r26, 0xA2	; 162
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	c4 54       	subi	r28, 0x44	; 68
      dc:	d0 40       	sbci	r29, 0x00	; 0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e8:	8c e0       	ldi	r24, 0x0C	; 12
      ea:	fe 01       	movw	r30, r28
      ec:	74 96       	adiw	r30, 0x14	; 20
      ee:	df 01       	movw	r26, r30
      f0:	28 2f       	mov	r18, r24
      f2:	1d 92       	st	X+, r1
      f4:	2a 95       	dec	r18
      f6:	e9 f7       	brne	.-6      	; 0xf2 <main+0x24>
	int16_t blueDuty;
	int16_t orangeDuty;
	int16_t count = 0;
*/

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	88 a3       	std	Y+32, r24	; 0x20
      fc:	ce 01       	movw	r24, r28
      fe:	44 96       	adiw	r24, 0x14	; 20
     100:	9a a3       	std	Y+34, r25	; 0x22
     102:	89 a3       	std	Y+33, r24	; 0x21
     104:	84 e0       	ldi	r24, 0x04	; 4
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	9c a3       	std	Y+36, r25	; 0x24
     10a:	8b a3       	std	Y+35, r24	; 0x23
     10c:	ce 01       	movw	r24, r28
     10e:	44 96       	adiw	r24, 0x14	; 20
     110:	04 96       	adiw	r24, 0x04	; 4
     112:	9e a3       	std	Y+38, r25	; 0x26
     114:	8d a3       	std	Y+37, r24	; 0x25
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	98 a7       	std	Y+40, r25	; 0x28
     11c:	8f a3       	std	Y+39, r24	; 0x27
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     11e:	80 e4       	ldi	r24, 0x40	; 64
     120:	89 a7       	std	Y+41, r24	; 0x29
     122:	ce 01       	movw	r24, r28
     124:	44 96       	adiw	r24, 0x14	; 20
     126:	08 96       	adiw	r24, 0x08	; 8
     128:	9b a7       	std	Y+43, r25	; 0x2b
     12a:	8a a7       	std	Y+42, r24	; 0x2a
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	9d a7       	std	Y+45, r25	; 0x2d
     132:	8c a7       	std	Y+44, r24	; 0x2c
     134:	ce 01       	movw	r24, r28
     136:	44 96       	adiw	r24, 0x14	; 20
     138:	09 96       	adiw	r24, 0x09	; 9
     13a:	9f a7       	std	Y+47, r25	; 0x2f
     13c:	8e a7       	std	Y+46, r24	; 0x2e
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	99 ab       	std	Y+49, r25	; 0x31
     144:	88 ab       	std	Y+48, r24	; 0x30
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	8a ab       	std	Y+50, r24	; 0x32
     14a:	ce 01       	movw	r24, r28
     14c:	44 96       	adiw	r24, 0x14	; 20
     14e:	0a 96       	adiw	r24, 0x0a	; 10
     150:	9c ab       	std	Y+52, r25	; 0x34
     152:	8b ab       	std	Y+51, r24	; 0x33
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	9e ab       	std	Y+54, r25	; 0x36
     15a:	8d ab       	std	Y+53, r24	; 0x35
     15c:	ce 01       	movw	r24, r28
     15e:	44 96       	adiw	r24, 0x14	; 20
     160:	0b 96       	adiw	r24, 0x0b	; 11
     162:	98 af       	std	Y+56, r25	; 0x38
     164:	8f ab       	std	Y+55, r24	; 0x37
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	9a af       	std	Y+58, r25	; 0x3a
     16c:	89 af       	std	Y+57, r24	; 0x39

	/*この辺にi2c関連の初期化をすればいいと思う*/

	bool i2cStatus;
	initCtrlData();
     16e:	0e 94 b4 03 	call	0x768	; 0x768 <initCtrlData>

	TCCR2A = 0;
     172:	e0 eb       	ldi	r30, 0xB0	; 176
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	10 82       	st	Z, r1
	TCCR2B = 1;
     178:	e1 eb       	ldi	r30, 0xB1	; 177
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 83       	st	Z, r24
/*---------------------------------------------------------------*/
// 						書きかえちゃダメよ！
/*---------------------------------------------------------------*/
	LEDInit();
     180:	0e 94 01 0c 	call	0x1802	; 0x1802 <LEDInit>
	SwitchInit();
     184:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <SwitchInit>
	BeepInit();
     188:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <BeepInit>
	DDRC |= 0x04;
     18c:	a7 e2       	ldi	r26, 0x27	; 39
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e7 e2       	ldi	r30, 0x27	; 39
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	84 60       	ori	r24, 0x04	; 4
     198:	8c 93       	st	X, r24
	PORTC = 0x04;
     19a:	e8 e2       	ldi	r30, 0x28	; 40
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	80 83       	st	Z, r24
	
		
	initI2CMaster(100);
     1a2:	84 e6       	ldi	r24, 0x64	; 100
     1a4:	0e 94 8a 09 	call	0x1314	; 0x1314 <initI2CMaster>

	wdt_reset();
     1a8:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1aa:	88 e1       	ldi	r24, 0x18	; 24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2d e0       	ldi	r18, 0x0D	; 13
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	a8 95       	wdr
     1b6:	80 93 60 00 	sts	0x0060, r24
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	68 e0       	ldi	r22, 0x08	; 8
     1c6:	4a e0       	ldi	r20, 0x0A	; 10
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_init>
	uart_setbuffer(0,buf,36);
     1ce:	28 e3       	ldi	r18, 0x38	; 56
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	b9 01       	movw	r22, r18
     1d8:	44 e2       	ldi	r20, 0x24	; 36
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart_setbuffer>
	wait_ms(100);
     1e0:	84 e6       	ldi	r24, 0x64	; 100
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	68 e1       	ldi	r22, 0x18	; 24
     1ee:	40 e4       	ldi	r20, 0x40	; 64
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_init>
	mu2_command("EI","08");
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	23 e0       	ldi	r18, 0x03	; 3
     1fc:	31 e0       	ldi	r19, 0x01	; 1
     1fe:	b9 01       	movw	r22, r18
     200:	0e 94 08 05 	call	0xa10	; 0xa10 <mu2_command>
	mu2_command("DI","80");
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	29 e0       	ldi	r18, 0x09	; 9
     20a:	31 e0       	ldi	r19, 0x01	; 1
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 08 05 	call	0xa10	; 0xa10 <mu2_command>
	mu2_command("GI","04");
     212:	8c e0       	ldi	r24, 0x0C	; 12
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	2f e0       	ldi	r18, 0x0F	; 15
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	b9 01       	movw	r22, r18
     21c:	0e 94 08 05 	call	0xa10	; 0xa10 <mu2_command>
	mu2_command("CH","2E");
     220:	82 e1       	ldi	r24, 0x12	; 18
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	25 e1       	ldi	r18, 0x15	; 21
     226:	31 e0       	ldi	r19, 0x01	; 1
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 08 05 	call	0xa10	; 0xa10 <mu2_command>
	mu2_command("BR","48");
     22e:	88 e1       	ldi	r24, 0x18	; 24
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	2b e1       	ldi	r18, 0x1B	; 27
     234:	31 e0       	ldi	r19, 0x01	; 1
     236:	b9 01       	movw	r22, r18
     238:	0e 94 08 05 	call	0xa10	; 0xa10 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	60 e9       	ldi	r22, 0x90	; 144
     242:	43 e0       	ldi	r20, 0x03	; 3
     244:	51 e0       	ldi	r21, 0x01	; 1
     246:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
	sei();
     262:	78 94       	sei
	wait_ms(1500);
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	95 e0       	ldi	r25, 0x05	; 5
     268:	0e 94 2c 0c 	call	0x1858	; 0x1858 <wait_ms>
	PORTC &= 0xFB;
     26c:	a8 e2       	ldi	r26, 0x28	; 40
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e8 e2       	ldi	r30, 0x28	; 40
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	8b 7f       	andi	r24, 0xFB	; 251
     278:	8c 93       	st	X, r24
//	wait_ms(25);
	TCCR1A = 0;
     27a:	e0 e8       	ldi	r30, 0x80	; 128
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
	TCCR1B = 5;
     280:	e1 e8       	ldi	r30, 0x81	; 129
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	80 83       	st	Z, r24
	TIMSK1 = 1;
     288:	ef e6       	ldi	r30, 0x6F	; 111
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 83       	st	Z, r24
	TCNT1 = 0;
     290:	e4 e8       	ldi	r30, 0x84	; 132
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	11 82       	std	Z+1, r1	; 0x01
     296:	10 82       	st	Z, r1

// Entry
// 	carveEnable = false
	carveEnable = false;
     298:	19 8a       	std	Y+17, r1	; 0x11
// 	carveEnableCount = 0
	carveEnableCount = 0;
     29a:	18 8a       	std	Y+16, r1	; 0x10
     29c:	1f 86       	std	Y+15, r1	; 0x0f
//	timeCount = 0
	timeCount = 0;
     29e:	1e 86       	std	Y+14, r1	; 0x0e
     2a0:	1d 86       	std	Y+13, r1	; 0x0d

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     2a2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <Toggle_RC_Rx_Buffer>
     2a6:	9b 8b       	std	Y+19, r25	; 0x13
     2a8:	8a 8b       	std	Y+18, r24	; 0x12
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	82 70       	andi	r24, 0x02	; 2
     2b2:	88 23       	and	r24, r24
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0x1ea>
     2b6:	ba c0       	rjmp	.+372    	; 0x42c <main+0x35e>
     2b8:	ea 89       	ldd	r30, Y+18	; 0x12
     2ba:	fb 89       	ldd	r31, Y+19	; 0x13
     2bc:	80 81       	ld	r24, Z
     2be:	81 70       	andi	r24, 0x01	; 1
     2c0:	88 23       	and	r24, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x1f8>
     2c4:	b3 c0       	rjmp	.+358    	; 0x42c <main+0x35e>
     2c6:	ea 89       	ldd	r30, Y+18	; 0x12
     2c8:	fb 89       	ldd	r31, Y+19	; 0x13
     2ca:	80 81       	ld	r24, Z
     2cc:	80 71       	andi	r24, 0x10	; 16
     2ce:	88 23       	and	r24, r24
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x206>
     2d2:	ac c0       	rjmp	.+344    	; 0x42c <main+0x35e>
     2d4:	ea 89       	ldd	r30, Y+18	; 0x12
     2d6:	fb 89       	ldd	r31, Y+19	; 0x13
     2d8:	82 81       	ldd	r24, Z+2	; 0x02
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	8d 30       	cpi	r24, 0x0D	; 13
     2e2:	91 05       	cpc	r25, r1
     2e4:	0c f4       	brge	.+2      	; 0x2e8 <main+0x21a>
     2e6:	a2 c0       	rjmp	.+324    	; 0x42c <main+0x35e>
     2e8:	ea 89       	ldd	r30, Y+18	; 0x12
     2ea:	fb 89       	ldd	r31, Y+19	; 0x13
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	8d 30       	cpi	r24, 0x0D	; 13
     2f6:	91 05       	cpc	r25, r1
     2f8:	0c f4       	brge	.+2      	; 0x2fc <main+0x22e>
     2fa:	98 c0       	rjmp	.+304    	; 0x42c <main+0x35e>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	68 e1       	ldi	r22, 0x18	; 24
     31a:	43 e0       	ldi	r20, 0x03	; 3
     31c:	51 e0       	ldi	r21, 0x01	; 1
     31e:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	23 e0       	ldi	r18, 0x03	; 3
     328:	31 e0       	ldi	r19, 0x01	; 1
     32a:	b9 01       	movw	r22, r18
     32c:	0e 94 8a 05 	call	0xb14	; 0xb14 <mu2_command_eeprom>
     330:	8f af       	std	Y+63, r24	; 0x3f
     332:	8f ad       	ldd	r24, Y+63	; 0x3f
     334:	88 23       	and	r24, r24
     336:	11 f0       	breq	.+4      	; 0x33c <main+0x26e>
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	9f af       	std	Y+63, r25	; 0x3f
     33c:	9f ad       	ldd	r25, Y+63	; 0x3f
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	69 2f       	mov	r22, r25
     342:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	29 e0       	ldi	r18, 0x09	; 9
     34c:	31 e0       	ldi	r19, 0x01	; 1
     34e:	b9 01       	movw	r22, r18
     350:	0e 94 8a 05 	call	0xb14	; 0xb14 <mu2_command_eeprom>
     354:	21 96       	adiw	r28, 0x01	; 1
     356:	8f af       	std	Y+63, r24	; 0x3f
     358:	21 97       	sbiw	r28, 0x01	; 1
     35a:	21 96       	adiw	r28, 0x01	; 1
     35c:	af ad       	ldd	r26, Y+63	; 0x3f
     35e:	21 97       	sbiw	r28, 0x01	; 1
     360:	aa 23       	and	r26, r26
     362:	21 f0       	breq	.+8      	; 0x36c <main+0x29e>
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	21 96       	adiw	r28, 0x01	; 1
     368:	bf af       	std	Y+63, r27	; 0x3f
     36a:	21 97       	sbiw	r28, 0x01	; 1
     36c:	21 96       	adiw	r28, 0x01	; 1
     36e:	9f ad       	ldd	r25, Y+63	; 0x3f
     370:	21 97       	sbiw	r28, 0x01	; 1
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	69 2f       	mov	r22, r25
     376:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     37a:	8c e0       	ldi	r24, 0x0C	; 12
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	2f e0       	ldi	r18, 0x0F	; 15
     380:	31 e0       	ldi	r19, 0x01	; 1
     382:	b9 01       	movw	r22, r18
     384:	0e 94 8a 05 	call	0xb14	; 0xb14 <mu2_command_eeprom>
     388:	22 96       	adiw	r28, 0x02	; 2
     38a:	8f af       	std	Y+63, r24	; 0x3f
     38c:	22 97       	sbiw	r28, 0x02	; 2
     38e:	22 96       	adiw	r28, 0x02	; 2
     390:	2f ad       	ldd	r18, Y+63	; 0x3f
     392:	22 97       	sbiw	r28, 0x02	; 2
     394:	22 23       	and	r18, r18
     396:	21 f0       	breq	.+8      	; 0x3a0 <main+0x2d2>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	22 96       	adiw	r28, 0x02	; 2
     39c:	8f af       	std	Y+63, r24	; 0x3f
     39e:	22 97       	sbiw	r28, 0x02	; 2
     3a0:	22 96       	adiw	r28, 0x02	; 2
     3a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a4:	22 97       	sbiw	r28, 0x02	; 2
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	69 2f       	mov	r22, r25
     3aa:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     3ae:	82 e1       	ldi	r24, 0x12	; 18
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	25 e1       	ldi	r18, 0x15	; 21
     3b4:	31 e0       	ldi	r19, 0x01	; 1
     3b6:	b9 01       	movw	r22, r18
     3b8:	0e 94 8a 05 	call	0xb14	; 0xb14 <mu2_command_eeprom>
     3bc:	23 96       	adiw	r28, 0x03	; 3
     3be:	8f af       	std	Y+63, r24	; 0x3f
     3c0:	23 97       	sbiw	r28, 0x03	; 3
     3c2:	23 96       	adiw	r28, 0x03	; 3
     3c4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3c6:	23 97       	sbiw	r28, 0x03	; 3
     3c8:	99 23       	and	r25, r25
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <main+0x306>
     3cc:	a1 e0       	ldi	r26, 0x01	; 1
     3ce:	23 96       	adiw	r28, 0x03	; 3
     3d0:	af af       	std	Y+63, r26	; 0x3f
     3d2:	23 97       	sbiw	r28, 0x03	; 3
     3d4:	23 96       	adiw	r28, 0x03	; 3
     3d6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3d8:	23 97       	sbiw	r28, 0x03	; 3
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	69 2f       	mov	r22, r25
     3de:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     3e2:	88 e1       	ldi	r24, 0x18	; 24
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	2b e1       	ldi	r18, 0x1B	; 27
     3e8:	31 e0       	ldi	r19, 0x01	; 1
     3ea:	b9 01       	movw	r22, r18
     3ec:	0e 94 8a 05 	call	0xb14	; 0xb14 <mu2_command_eeprom>
     3f0:	24 96       	adiw	r28, 0x04	; 4
     3f2:	8f af       	std	Y+63, r24	; 0x3f
     3f4:	24 97       	sbiw	r28, 0x04	; 4
     3f6:	24 96       	adiw	r28, 0x04	; 4
     3f8:	bf ad       	ldd	r27, Y+63	; 0x3f
     3fa:	24 97       	sbiw	r28, 0x04	; 4
     3fc:	bb 23       	and	r27, r27
     3fe:	21 f0       	breq	.+8      	; 0x408 <main+0x33a>
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	24 96       	adiw	r28, 0x04	; 4
     404:	2f af       	std	Y+63, r18	; 0x3f
     406:	24 97       	sbiw	r28, 0x04	; 4
     408:	24 96       	adiw	r28, 0x04	; 4
     40a:	9f ad       	ldd	r25, Y+63	; 0x3f
     40c:	24 97       	sbiw	r28, 0x04	; 4
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	69 2f       	mov	r22, r25
     412:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				wait_ms(100);
     416:	84 e6       	ldi	r24, 0x64	; 100
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	60 e9       	ldi	r22, 0x90	; 144
     424:	43 e0       	ldi	r20, 0x03	; 3
     426:	51 e0       	ldi	r21, 0x01	; 1
     428:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_init>
		/*ここにプログラムを記述するとよろしいのではないのかと思われます*/
/* 新式 */

// Do
// もし上ボタンが押されていないなら
	if( ! controller->detail.Button.UP )
     42c:	ea 89       	ldd	r30, Y+18	; 0x12
     42e:	fb 89       	ldd	r31, Y+19	; 0x13
     430:	80 81       	ld	r24, Z
     432:	80 71       	andi	r24, 0x10	; 16
     434:	88 23       	and	r24, r24
     436:	09 f0       	breq	.+2      	; 0x43a <main+0x36c>
     438:	6d c0       	rjmp	.+218    	; 0x514 <main+0x446>
		{
			// もしcarveEnableCountが○未満ならcarveEnableCountをインクリメント
			// そうでなければcarveEnableを真にする
				if( carveEnableCount < 40 )
     43a:	8f 85       	ldd	r24, Y+15	; 0x0f
     43c:	98 89       	ldd	r25, Y+16	; 0x10
     43e:	88 32       	cpi	r24, 0x28	; 40
     440:	91 05       	cpc	r25, r1
     442:	34 f4       	brge	.+12     	; 0x450 <main+0x382>
					{			
						carveEnableCount++;
     444:	8f 85       	ldd	r24, Y+15	; 0x0f
     446:	98 89       	ldd	r25, Y+16	; 0x10
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	98 8b       	std	Y+16, r25	; 0x10
     44c:	8f 87       	std	Y+15, r24	; 0x0f
     44e:	02 c0       	rjmp	.+4      	; 0x454 <main+0x386>
					}
				else
					{
						carveEnable = true;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	89 8b       	std	Y+17, r24	; 0x11
					}
			// motorDutyをBボタンが押されていたら30,そうでなければ100
				motorDuty = ( controller->detail.Button.B ) ? 30:100;
     454:	ea 89       	ldd	r30, Y+18	; 0x12
     456:	fb 89       	ldd	r31, Y+19	; 0x13
     458:	80 81       	ld	r24, Z
     45a:	84 70       	andi	r24, 0x04	; 4
     45c:	88 23       	and	r24, r24
     45e:	29 f0       	breq	.+10     	; 0x46a <main+0x39c>
     460:	8e e1       	ldi	r24, 0x1E	; 30
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9e af       	std	Y+62, r25	; 0x3e
     466:	8d af       	std	Y+61, r24	; 0x3d
     468:	04 c0       	rjmp	.+8      	; 0x472 <main+0x3a4>
     46a:	a4 e6       	ldi	r26, 0x64	; 100
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	be af       	std	Y+62, r27	; 0x3e
     470:	ad af       	std	Y+61, r26	; 0x3d
     472:	8d ad       	ldd	r24, Y+61	; 0x3d
     474:	9e ad       	ldd	r25, Y+62	; 0x3e
     476:	9c 87       	std	Y+12, r25	; 0x0c
     478:	8b 87       	std	Y+11, r24	; 0x0b
			
			// もしLボタンが押されていたら、全駆動体に+motorDutyをセット
				if( controller->detail.Button.L )
     47a:	ea 89       	ldd	r30, Y+18	; 0x12
     47c:	fb 89       	ldd	r31, Y+19	; 0x13
     47e:	81 81       	ldd	r24, Z+1	; 0x01
     480:	80 72       	andi	r24, 0x20	; 32
     482:	88 23       	and	r24, r24
     484:	49 f0       	breq	.+18     	; 0x498 <main+0x3ca>
					{
						blueDuty = +motorDuty;
     486:	8b 85       	ldd	r24, Y+11	; 0x0b
     488:	9c 85       	ldd	r25, Y+12	; 0x0c
     48a:	9a 87       	std	Y+10, r25	; 0x0a
     48c:	89 87       	std	Y+9, r24	; 0x09
						orangeDuty = +motorDuty;
     48e:	8b 85       	ldd	r24, Y+11	; 0x0b
     490:	9c 85       	ldd	r25, Y+12	; 0x0c
     492:	98 87       	std	Y+8, r25	; 0x08
     494:	8f 83       	std	Y+7, r24	; 0x07
     496:	81 c0       	rjmp	.+258    	; 0x59a <main+0x4cc>
					}
			// そうでなくRボタンが押されていたら、全駆動体に-motorDutyをセット
				else if( controller->detail.Button.R )
     498:	ea 89       	ldd	r30, Y+18	; 0x12
     49a:	fb 89       	ldd	r31, Y+19	; 0x13
     49c:	81 81       	ldd	r24, Z+1	; 0x01
     49e:	80 74       	andi	r24, 0x40	; 64
     4a0:	88 23       	and	r24, r24
     4a2:	79 f0       	breq	.+30     	; 0x4c2 <main+0x3f4>
					{
						blueDuty = -motorDuty;
     4a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a8:	90 95       	com	r25
     4aa:	81 95       	neg	r24
     4ac:	9f 4f       	sbci	r25, 0xFF	; 255
     4ae:	9a 87       	std	Y+10, r25	; 0x0a
     4b0:	89 87       	std	Y+9, r24	; 0x09
						orangeDuty = -motorDuty;
     4b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     4b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     4b6:	90 95       	com	r25
     4b8:	81 95       	neg	r24
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	98 87       	std	Y+8, r25	; 0x08
     4be:	8f 83       	std	Y+7, r24	; 0x07
     4c0:	6c c0       	rjmp	.+216    	; 0x59a <main+0x4cc>
					}
			// そうでなく←ボタンが押されていたら、青の駆動体は正、橙の駆動体は負にmotorDutyをセット
				else if( controller->detail.Button.LEFT )
     4c2:	ea 89       	ldd	r30, Y+18	; 0x12
     4c4:	fb 89       	ldd	r31, Y+19	; 0x13
     4c6:	80 81       	ld	r24, Z
     4c8:	80 78       	andi	r24, 0x80	; 128
     4ca:	88 23       	and	r24, r24
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <main+0x418>
					{
						blueDuty = +motorDuty;
     4ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4d2:	9a 87       	std	Y+10, r25	; 0x0a
     4d4:	89 87       	std	Y+9, r24	; 0x09
						orangeDuty = -motorDuty;
     4d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4da:	90 95       	com	r25
     4dc:	81 95       	neg	r24
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	98 87       	std	Y+8, r25	; 0x08
     4e2:	8f 83       	std	Y+7, r24	; 0x07
     4e4:	5a c0       	rjmp	.+180    	; 0x59a <main+0x4cc>
					}
			// そうでなく→ボタンが押されていたら、青の駆動体は負、橙の駆動体は正にmotorDutyをセット
				else if( controller->detail.Button.RIGHT )
     4e6:	ea 89       	ldd	r30, Y+18	; 0x12
     4e8:	fb 89       	ldd	r31, Y+19	; 0x13
     4ea:	80 81       	ld	r24, Z
     4ec:	80 72       	andi	r24, 0x20	; 32
     4ee:	88 23       	and	r24, r24
     4f0:	61 f0       	breq	.+24     	; 0x50a <main+0x43c>
					{
						blueDuty = -motorDuty;
     4f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     4f6:	90 95       	com	r25
     4f8:	81 95       	neg	r24
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	9a 87       	std	Y+10, r25	; 0x0a
     4fe:	89 87       	std	Y+9, r24	; 0x09
						orangeDuty = +motorDuty;
     500:	8b 85       	ldd	r24, Y+11	; 0x0b
     502:	9c 85       	ldd	r25, Y+12	; 0x0c
     504:	98 87       	std	Y+8, r25	; 0x08
     506:	8f 83       	std	Y+7, r24	; 0x07
     508:	48 c0       	rjmp	.+144    	; 0x59a <main+0x4cc>
					}
			// そうでなければ、停止
				else
					{
						blueDuty = 0;
     50a:	1a 86       	std	Y+10, r1	; 0x0a
     50c:	19 86       	std	Y+9, r1	; 0x09
						orangeDuty = 0;
     50e:	18 86       	std	Y+8, r1	; 0x08
     510:	1f 82       	std	Y+7, r1	; 0x07
     512:	43 c0       	rjmp	.+134    	; 0x59a <main+0x4cc>
					}
		}

// そうでなければ (↑ボタンが押下） かつ carveEnable が真なら
	else if( carveEnable )
     514:	89 89       	ldd	r24, Y+17	; 0x11
     516:	88 23       	and	r24, r24
     518:	e1 f1       	breq	.+120    	; 0x592 <main+0x4c4>
		{
			// もし timeCount が□未満なら
				if( timeCount < 105 )
     51a:	8d 85       	ldd	r24, Y+13	; 0x0d
     51c:	9e 85       	ldd	r25, Y+14	; 0x0e
     51e:	89 36       	cpi	r24, 0x69	; 105
     520:	91 05       	cpc	r25, r1
     522:	94 f5       	brge	.+100    	; 0x588 <main+0x4ba>
					{
						// もしtimeCount が△未満なら、全駆動体を-motorDutyにセット
						// そうでなければ、徐々に曲げる
							if( timeCount < 20 )
     524:	8d 85       	ldd	r24, Y+13	; 0x0d
     526:	9e 85       	ldd	r25, Y+14	; 0x0e
     528:	84 31       	cpi	r24, 0x14	; 20
     52a:	91 05       	cpc	r25, r1
     52c:	4c f4       	brge	.+18     	; 0x540 <main+0x472>
								{
									blueDuty = -100;
     52e:	8c e9       	ldi	r24, 0x9C	; 156
     530:	9f ef       	ldi	r25, 0xFF	; 255
     532:	9a 87       	std	Y+10, r25	; 0x0a
     534:	89 87       	std	Y+9, r24	; 0x09
									orangeDuty = -100;
     536:	8c e9       	ldi	r24, 0x9C	; 156
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	98 87       	std	Y+8, r25	; 0x08
     53c:	8f 83       	std	Y+7, r24	; 0x07
     53e:	1e c0       	rjmp	.+60     	; 0x57c <main+0x4ae>
								}
							else
								{
									blueDuty = -100;
     540:	8c e9       	ldi	r24, 0x9C	; 156
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	9a 87       	std	Y+10, r25	; 0x0a
     546:	89 87       	std	Y+9, r24	; 0x09
									orangeDuty = 70+timeCount;
     548:	8d 85       	ldd	r24, Y+13	; 0x0d
     54a:	9e 85       	ldd	r25, Y+14	; 0x0e
     54c:	8a 5b       	subi	r24, 0xBA	; 186
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	98 87       	std	Y+8, r25	; 0x08
     552:	8f 83       	std	Y+7, r24	; 0x07
									if( orangeDuty < -100 ) orangeDuty = -100;
     554:	8f 81       	ldd	r24, Y+7	; 0x07
     556:	98 85       	ldd	r25, Y+8	; 0x08
     558:	af ef       	ldi	r26, 0xFF	; 255
     55a:	8c 39       	cpi	r24, 0x9C	; 156
     55c:	9a 07       	cpc	r25, r26
     55e:	2c f4       	brge	.+10     	; 0x56a <main+0x49c>
     560:	8c e9       	ldi	r24, 0x9C	; 156
     562:	9f ef       	ldi	r25, 0xFF	; 255
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	8f 83       	std	Y+7, r24	; 0x07
     568:	09 c0       	rjmp	.+18     	; 0x57c <main+0x4ae>
									else if( orangeDuty > 100 ) orangeDuty = 100;
     56a:	8f 81       	ldd	r24, Y+7	; 0x07
     56c:	98 85       	ldd	r25, Y+8	; 0x08
     56e:	85 36       	cpi	r24, 0x65	; 101
     570:	91 05       	cpc	r25, r1
     572:	24 f0       	brlt	.+8      	; 0x57c <main+0x4ae>
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	98 87       	std	Y+8, r25	; 0x08
     57a:	8f 83       	std	Y+7, r24	; 0x07
								}
						// timeCountをインクリメント
							timeCount++;
     57c:	8d 85       	ldd	r24, Y+13	; 0x0d
     57e:	9e 85       	ldd	r25, Y+14	; 0x0e
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	9e 87       	std	Y+14, r25	; 0x0e
     584:	8d 87       	std	Y+13, r24	; 0x0d
     586:	09 c0       	rjmp	.+18     	; 0x59a <main+0x4cc>
					}
			// そうでなければ(timeCount が□以上)、停止
				else
					{
						blueDuty = 0;
     588:	1a 86       	std	Y+10, r1	; 0x0a
     58a:	19 86       	std	Y+9, r1	; 0x09
						orangeDuty = 0;
     58c:	18 86       	std	Y+8, r1	; 0x08
     58e:	1f 82       	std	Y+7, r1	; 0x07
     590:	04 c0       	rjmp	.+8      	; 0x59a <main+0x4cc>
					}
		}
// そうでなければ (↑ボタンが押下 かつ carveEnable が偽)、停止
	else 
		{
			blueDuty = 0;
     592:	1a 86       	std	Y+10, r1	; 0x0a
     594:	19 86       	std	Y+9, r1	; 0x09
			orangeDuty = 0;
     596:	18 86       	std	Y+8, r1	; 0x08
     598:	1f 82       	std	Y+7, r1	; 0x07
		}

// もし blueDuty が0なら、青の駆動体をブレーキ、そうでなければCW
	blueAct = ( blueDuty == 0 || blueDuty == -0 ) ? BRAKE : CW;
     59a:	89 85       	ldd	r24, Y+9	; 0x09
     59c:	9a 85       	ldd	r25, Y+10	; 0x0a
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	21 f0       	breq	.+8      	; 0x5aa <main+0x4dc>
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	19 f4       	brne	.+6      	; 0x5b0 <main+0x4e2>
     5aa:	b3 e0       	ldi	r27, 0x03	; 3
     5ac:	bc af       	std	Y+60, r27	; 0x3c
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <main+0x4e6>
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	2c af       	std	Y+60, r18	; 0x3c
     5b4:	8c ad       	ldd	r24, Y+60	; 0x3c
     5b6:	8e 83       	std	Y+6, r24	; 0x06

// もし orangeDuty が0なら、橙の駆動体をブレーキ、そうでなければCCW
	orangeAct = ( orangeDuty == 0 || orangeDuty == -0 ) ? BRAKE : CCW;
     5b8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ba:	98 85       	ldd	r25, Y+8	; 0x08
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	21 f0       	breq	.+8      	; 0x5c8 <main+0x4fa>
     5c0:	8f 81       	ldd	r24, Y+7	; 0x07
     5c2:	98 85       	ldd	r25, Y+8	; 0x08
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	19 f4       	brne	.+6      	; 0x5ce <main+0x500>
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	9b af       	std	Y+59, r25	; 0x3b
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <main+0x504>
     5ce:	a2 e0       	ldi	r26, 0x02	; 2
     5d0:	ab af       	std	Y+59, r26	; 0x3b
     5d2:	bb ad       	ldd	r27, Y+59	; 0x3b
     5d4:	bd 83       	std	Y+5, r27	; 0x05

//	モータドライブ関数をコール
	mDrive(&Motor, blueAct, blueDuty, 0);
     5d6:	29 85       	ldd	r18, Y+9	; 0x09
     5d8:	ce 01       	movw	r24, r28
     5da:	80 96       	adiw	r24, 0x20	; 32
     5dc:	6e 81       	ldd	r22, Y+6	; 0x06
     5de:	42 2f       	mov	r20, r18
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <mDrive>
	mDrive(&Motor, blueAct, blueDuty, 1);
     5e6:	29 85       	ldd	r18, Y+9	; 0x09
     5e8:	ce 01       	movw	r24, r28
     5ea:	80 96       	adiw	r24, 0x20	; 32
     5ec:	6e 81       	ldd	r22, Y+6	; 0x06
     5ee:	42 2f       	mov	r20, r18
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	0e 94 4e 0c 	call	0x189c	; 0x189c <mDrive>
	mDrive(&Motor, orangeAct, orangeDuty, 2);
     5f6:	2f 81       	ldd	r18, Y+7	; 0x07
     5f8:	ce 01       	movw	r24, r28
     5fa:	80 96       	adiw	r24, 0x20	; 32
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	42 2f       	mov	r20, r18
     600:	22 e0       	ldi	r18, 0x02	; 2
     602:	0e 94 4e 0c 	call	0x189c	; 0x189c <mDrive>
	mDrive(&Motor, orangeAct, orangeDuty, 3);
     606:	2f 81       	ldd	r18, Y+7	; 0x07
     608:	ce 01       	movw	r24, r28
     60a:	80 96       	adiw	r24, 0x20	; 32
     60c:	6d 81       	ldd	r22, Y+5	; 0x05
     60e:	42 2f       	mov	r20, r18
     610:	23 e0       	ldi	r18, 0x03	; 3
     612:	0e 94 4e 0c 	call	0x189c	; 0x189c <mDrive>
			mDrive(&Motor,dAction,(int8_t)dDuty,2);	//ORANGE
			mDrive(&Motor,dAction,(int8_t)dDuty,3);	//ORANGE
		}
*/
/*-------------------------------------------------------------------------------------------------------------------------*/
		airAct = FREE;
     616:	1c 82       	std	Y+4, r1	; 0x04
		if(controller->detail.Button.Y)
     618:	ea 89       	ldd	r30, Y+18	; 0x12
     61a:	fb 89       	ldd	r31, Y+19	; 0x13
     61c:	80 81       	ld	r24, Z
     61e:	88 70       	andi	r24, 0x08	; 8
     620:	88 23       	and	r24, r24
     622:	29 f0       	breq	.+10     	; 0x62e <main+0x560>
			{
				airAct = CW;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	8c 83       	std	Y+4, r24	; 0x04
				airPort = 0x03;
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	15 c0       	rjmp	.+42     	; 0x658 <main+0x58a>
			}
		else if(controller->detail.Button.ZL)
     62e:	ea 89       	ldd	r30, Y+18	; 0x12
     630:	fb 89       	ldd	r31, Y+19	; 0x13
     632:	81 81       	ldd	r24, Z+1	; 0x01
     634:	88 70       	andi	r24, 0x08	; 8
     636:	88 23       	and	r24, r24
     638:	29 f0       	breq	.+10     	; 0x644 <main+0x576>
			{
				airAct = CW;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	8c 83       	std	Y+4, r24	; 0x04
				airPort = 0x01;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	8b 83       	std	Y+3, r24	; 0x03
     642:	0a c0       	rjmp	.+20     	; 0x658 <main+0x58a>
			}
		else if(controller->detail.Button.ZR)
     644:	ea 89       	ldd	r30, Y+18	; 0x12
     646:	fb 89       	ldd	r31, Y+19	; 0x13
     648:	81 81       	ldd	r24, Z+1	; 0x01
     64a:	80 71       	andi	r24, 0x10	; 16
     64c:	88 23       	and	r24, r24
     64e:	21 f0       	breq	.+8      	; 0x658 <main+0x58a>
			{
				airAct = CW;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	8c 83       	std	Y+4, r24	; 0x04
				airPort = 0x02;
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	8b 83       	std	Y+3, r24	; 0x03
			}
		aDrive(&Air, airPort, airAct);
     658:	2c 81       	ldd	r18, Y+4	; 0x04
     65a:	25 96       	adiw	r28, 0x05	; 5
     65c:	2f af       	std	Y+63, r18	; 0x3f
     65e:	25 97       	sbiw	r28, 0x05	; 5
     660:	25 96       	adiw	r28, 0x05	; 5
     662:	8f ad       	ldd	r24, Y+63	; 0x3f
     664:	25 97       	sbiw	r28, 0x05	; 5
     666:	88 23       	and	r24, r24
     668:	21 f0       	breq	.+8      	; 0x672 <main+0x5a4>
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	25 96       	adiw	r28, 0x05	; 5
     66e:	9f af       	std	Y+63, r25	; 0x3f
     670:	25 97       	sbiw	r28, 0x05	; 5
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	2f ad       	ldd	r18, Y+63	; 0x3f
     676:	25 97       	sbiw	r28, 0x05	; 5
     678:	ce 01       	movw	r24, r28
     67a:	89 96       	adiw	r24, 0x29	; 41
     67c:	6b 81       	ldd	r22, Y+3	; 0x03
     67e:	42 2f       	mov	r20, r18
     680:	0e 94 c4 0c 	call	0x1988	; 0x1988 <aDrive>
/*-------------------------------------------------------------------------------------------------------------------------*/
		/*バルスモード*/
		/*バルス!!!!!*/
		if(controller->detail.Button.SELECT&&controller->detail.Button.START) e_flag=E_ON;
     684:	ea 89       	ldd	r30, Y+18	; 0x12
     686:	fb 89       	ldd	r31, Y+19	; 0x13
     688:	81 81       	ldd	r24, Z+1	; 0x01
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	88 23       	and	r24, r24
     68e:	49 f0       	breq	.+18     	; 0x6a2 <main+0x5d4>
     690:	ea 89       	ldd	r30, Y+18	; 0x12
     692:	fb 89       	ldd	r31, Y+19	; 0x13
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	84 70       	andi	r24, 0x04	; 4
     698:	88 23       	and	r24, r24
     69a:	19 f0       	breq	.+6      	; 0x6a2 <main+0x5d4>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	8a 83       	std	Y+2, r24	; 0x02
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <main+0x5f2>
		/*復活!!!!!!!*/
		else if(controller->detail.Button.HOME){
     6a2:	ea 89       	ldd	r30, Y+18	; 0x12
     6a4:	fb 89       	ldd	r31, Y+19	; 0x13
     6a6:	81 81       	ldd	r24, Z+1	; 0x01
     6a8:	82 70       	andi	r24, 0x02	; 2
     6aa:	88 23       	and	r24, r24
     6ac:	41 f0       	breq	.+16     	; 0x6be <main+0x5f0>
			e_flag=E_OFF;
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	8a 83       	std	Y+2, r24	; 0x02
			carveEnable = false;
     6b2:	19 8a       	std	Y+17, r1	; 0x11
			carveEnableCount = 0;
     6b4:	18 8a       	std	Y+16, r1	; 0x10
     6b6:	1f 86       	std	Y+15, r1	; 0x0f
			timeCount = 0;
     6b8:	1e 86       	std	Y+14, r1	; 0x0e
     6ba:	1d 86       	std	Y+13, r1	; 0x0d
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <main+0x5f2>
		}
		else e_flag=E_KEEP;	
     6be:	1a 82       	std	Y+2, r1	; 0x02

		i2cStatus = true;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	08 2f       	mov	r16, r24
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	2a 81       	ldd	r18, Y+2	; 0x02
     6cc:	ce 01       	movw	r24, r28
     6ce:	c2 96       	adiw	r24, 0x32	; 50
     6d0:	62 2f       	mov	r22, r18
     6d2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <Emergency>
     6d6:	88 2f       	mov	r24, r24
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	80 23       	and	r24, r16
     6dc:	91 23       	and	r25, r17
     6de:	19 82       	std	Y+1, r1	; 0x01
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <main+0x61a>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(10);
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	08 2f       	mov	r16, r24
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	ce 01       	movw	r24, r28
     6f0:	80 96       	adiw	r24, 0x20	; 32
     6f2:	0e 94 c1 09 	call	0x1382	; 0x1382 <i2cWrite>
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 23       	and	r24, r16
     6fc:	91 23       	and	r25, r17
     6fe:	19 82       	std	Y+1, r1	; 0x01
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	11 f0       	breq	.+4      	; 0x708 <main+0x63a>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(10);
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	08 2f       	mov	r16, r24
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	ce 01       	movw	r24, r28
     718:	89 96       	adiw	r24, 0x29	; 41
     71a:	0e 94 c1 09 	call	0x1382	; 0x1382 <i2cWrite>
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	80 23       	and	r24, r16
     724:	91 23       	and	r25, r17
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	11 f0       	breq	.+4      	; 0x730 <main+0x662>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	8a e0       	ldi	r24, 0x0A	; 10
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	08 2f       	mov	r16, r24
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	ce 01       	movw	r24, r28
     740:	c2 96       	adiw	r24, 0x32	; 50
     742:	0e 94 c1 09 	call	0x1382	; 0x1382 <i2cWrite>
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 23       	and	r24, r16
     74c:	91 23       	and	r25, r17
     74e:	19 82       	std	Y+1, r1	; 0x01
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	11 f0       	breq	.+4      	; 0x758 <main+0x68a>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <i2cCheck>
		wait_ms(25);
     75e:	89 e1       	ldi	r24, 0x19	; 25
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 2c 0c 	call	0x1858	; 0x1858 <wait_ms>
     766:	9d cd       	rjmp	.-1222   	; 0x2a2 <main+0x1d4>

00000768 <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     770:	10 92 5c 01 	sts	0x015C, r1
     774:	15 c0       	rjmp	.+42     	; 0x7a0 <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     776:	80 91 5c 01 	lds	r24, 0x015C
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	80 91 5c 01 	lds	r24, 0x015C
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	fc 01       	movw	r30, r24
     788:	e2 5e       	subi	r30, 0xE2	; 226
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	80 81       	ld	r24, Z
     78e:	f9 01       	movw	r30, r18
     790:	e0 5a       	subi	r30, 0xA0	; 160
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     796:	80 91 5c 01 	lds	r24, 0x015C
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	80 93 5c 01 	sts	0x015C, r24
     7a0:	80 91 5c 01 	lds	r24, 0x015C
     7a4:	84 30       	cpi	r24, 0x04	; 4
     7a6:	38 f3       	brcs	.-50     	; 0x776 <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     7a8:	cf 91       	pop	r28
     7aa:	df 91       	pop	r29
     7ac:	08 95       	ret

000007ae <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
	cli();
     7b6:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     7b8:	10 92 5c 01 	sts	0x015C, r1
     7bc:	15 c0       	rjmp	.+42     	; 0x7e8 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     7be:	80 91 5c 01 	lds	r24, 0x015C
     7c2:	28 2f       	mov	r18, r24
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	80 91 5c 01 	lds	r24, 0x015C
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	fc 01       	movw	r30, r24
     7d0:	e0 5a       	subi	r30, 0xA0	; 160
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	80 81       	ld	r24, Z
     7d6:	f9 01       	movw	r30, r18
     7d8:	ec 59       	subi	r30, 0x9C	; 156
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     7de:	80 91 5c 01 	lds	r24, 0x015C
     7e2:	8f 5f       	subi	r24, 0xFF	; 255
     7e4:	80 93 5c 01 	sts	0x015C, r24
     7e8:	80 91 5c 01 	lds	r24, 0x015C
     7ec:	84 30       	cpi	r24, 0x04	; 4
     7ee:	38 f3       	brcs	.-50     	; 0x7be <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     7f0:	78 94       	sei
	return &keepCtrlData;
     7f2:	84 e6       	ldi	r24, 0x64	; 100
     7f4:	91 e0       	ldi	r25, 0x01	; 1
}
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret

000007fc <__vector_20>:


ISR(USART0_RX_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	00 90 5b 00 	lds	r0, 0x005B
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	2f 93       	push	r18
     80e:	3f 93       	push	r19
     810:	4f 93       	push	r20
     812:	5f 93       	push	r21
     814:	6f 93       	push	r22
     816:	7f 93       	push	r23
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	ef 93       	push	r30
     822:	ff 93       	push	r31
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     82c:	e6 ec       	ldi	r30, 0xC6	; 198
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	80 93 80 01 	sts	0x0180, r24

	if(phase){
     836:	80 91 5e 01 	lds	r24, 0x015E
     83a:	88 23       	and	r24, r24
     83c:	09 f4       	brne	.+2      	; 0x840 <__vector_20+0x44>
     83e:	52 c0       	rjmp	.+164    	; 0x8e4 <__vector_20+0xe8>
		packet[cnt] = val;
     840:	80 91 5d 01 	lds	r24, 0x015D
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	20 91 80 01 	lds	r18, 0x0180
     84c:	fc 01       	movw	r30, r24
     84e:	e8 59       	subi	r30, 0x98	; 152
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     854:	80 91 5d 01 	lds	r24, 0x015D
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	b0 f4       	brcc	.+44     	; 0x888 <__vector_20+0x8c>
			if(val != check[cnt]){
     85c:	80 91 5d 01 	lds	r24, 0x015D
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	ee 5d       	subi	r30, 0xDE	; 222
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	90 81       	ld	r25, Z
     86c:	80 91 80 01 	lds	r24, 0x0180
     870:	98 17       	cp	r25, r24
     872:	91 f1       	breq	.+100    	; 0x8d8 <__vector_20+0xdc>
				phase = false;
     874:	10 92 5e 01 	sts	0x015E, r1
//				uart1_putchar('@');
				LED(0,false);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
				beep(1);
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
     886:	28 c0       	rjmp	.+80     	; 0x8d8 <__vector_20+0xdc>
			}
		}else if(cnt==8){
     888:	80 91 5d 01 	lds	r24, 0x015D
     88c:	88 30       	cpi	r24, 0x08	; 8
     88e:	21 f5       	brne	.+72     	; 0x8d8 <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     890:	80 91 6d 01 	lds	r24, 0x016D
     894:	80 93 60 01 	sts	0x0160, r24
			ctrlData.buf[1] = packet[6];
     898:	80 91 6e 01 	lds	r24, 0x016E
     89c:	80 93 61 01 	sts	0x0161, r24
			ctrlData.buf[2] = packet[7];
     8a0:	80 91 6f 01 	lds	r24, 0x016F
     8a4:	80 93 62 01 	sts	0x0162, r24
			ctrlData.buf[3] = packet[8];
     8a8:	80 91 70 01 	lds	r24, 0x0170
     8ac:	80 93 63 01 	sts	0x0163, r24
			phase = false;
     8b0:	10 92 5e 01 	sts	0x015E, r1
			wdt_reset();
     8b4:	a8 95       	wdr
			LED(0,true);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
			if(EmergencyStatus()) beep(0);
     8be:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <EmergencyStatus>
     8c2:	88 23       	and	r24, r24
     8c4:	19 f0       	breq	.+6      	; 0x8cc <__vector_20+0xd0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
			ovf_cnt = 0;
     8cc:	10 92 5f 01 	sts	0x015F, r1
			TCNT1 = 0;
     8d0:	e4 e8       	ldi	r30, 0x84	; 132
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	10 82       	st	Z, r1
		}
		cnt++;
     8d8:	80 91 5d 01 	lds	r24, 0x015D
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 93 5d 01 	sts	0x015D, r24
     8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__vector_20+0xfa>
	}else{
		if(val=='*'){
     8e4:	80 91 80 01 	lds	r24, 0x0180
     8e8:	8a 32       	cpi	r24, 0x2A	; 42
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <__vector_20+0xfa>
		cnt = 0;
     8ec:	10 92 5d 01 	sts	0x015D, r1
		phase = true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 5e 01 	sts	0x015E, r24
		}
	}

}
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	00 92 5b 00 	sts	0x005B, r0
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_15>:

ISR (TIMER1_OVF_vect){
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	00 90 5b 00 	lds	r0, 0x005B
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     946:	80 91 5f 01 	lds	r24, 0x015F
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 5f 01 	sts	0x015F, r24
	if(ovf_cnt>150){
     950:	80 91 5f 01 	lds	r24, 0x015F
     954:	87 39       	cpi	r24, 0x97	; 151
     956:	f0 f0       	brcs	.+60     	; 0x994 <__vector_15+0x72>
		ovf_cnt = 0;
     958:	10 92 5f 01 	sts	0x015F, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     95c:	10 92 5c 01 	sts	0x015C, r1
     960:	15 c0       	rjmp	.+42     	; 0x98c <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     962:	80 91 5c 01 	lds	r24, 0x015C
     966:	28 2f       	mov	r18, r24
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	80 91 5c 01 	lds	r24, 0x015C
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	fc 01       	movw	r30, r24
     974:	e2 5e       	subi	r30, 0xE2	; 226
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	80 81       	ld	r24, Z
     97a:	f9 01       	movw	r30, r18
     97c:	e0 5a       	subi	r30, 0xA0	; 160
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     982:	80 91 5c 01 	lds	r24, 0x015C
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	80 93 5c 01 	sts	0x015C, r24
     98c:	80 91 5c 01 	lds	r24, 0x015C
     990:	84 30       	cpi	r24, 0x04	; 4
     992:	38 f3       	brcs	.-50     	; 0x962 <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	00 92 5b 00 	sts	0x005B, r0
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <Byte2Str>:
/// バイト（0x00〜0xFF）の数を2桁の文字列に変換
/// </summary>
/// <param name="num">変換対象の数字</param>
/// <param name="str">変換後の文字列を格納する領域</param>
void Byte2Str(unsigned char num, char *str)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <Byte2Str+0x6>
     9ba:	0f 92       	push	r0
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	7b 83       	std	Y+3, r23	; 0x03
     9c4:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	82 95       	swap	r24
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	fc 01       	movw	r30, r24
     9d2:	ea 5d       	subi	r30, 0xDA	; 218
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	80 81       	ld	r24, Z
     9d8:	ea 81       	ldd	r30, Y+2	; 0x02
     9da:	fb 81       	ldd	r31, Y+3	; 0x03
     9dc:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	9b 81       	ldd	r25, Y+3	; 0x03
     9e2:	dc 01       	movw	r26, r24
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	8f 70       	andi	r24, 0x0F	; 15
     9ee:	90 70       	andi	r25, 0x00	; 0
     9f0:	fc 01       	movw	r30, r24
     9f2:	ea 5d       	subi	r30, 0xDA	; 218
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	8c 93       	st	X, r24
	str[2] = '\0';
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	9b 81       	ldd	r25, Y+3	; 0x03
     9fe:	fc 01       	movw	r30, r24
     a00:	32 96       	adiw	r30, 0x02	; 2
     a02:	10 82       	st	Z, r1
}
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	df 93       	push	r29
     a16:	cf 93       	push	r28
     a18:	00 d0       	rcall	.+0      	; 0xa1a <mu2_command+0xa>
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <mu2_command+0xc>
     a1c:	0f 92       	push	r0
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	7c 83       	std	Y+4, r23	; 0x04
     a28:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(cmd[0]);
     a30:	e9 81       	ldd	r30, Y+1	; 0x01
     a32:	fa 81       	ldd	r31, Y+2	; 0x02
     a34:	80 81       	ld	r24, Z
     a36:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(cmd[1]);
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
     a3e:	fc 01       	movw	r30, r24
     a40:	31 96       	adiw	r30, 0x01	; 1
     a42:	80 81       	ld	r24, Z
     a44:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	80 81       	ld	r24, Z
     a50:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
		val++;
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	9c 83       	std	Y+4, r25	; 0x04
     a5c:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a5e:	eb 81       	ldd	r30, Y+3	; 0x03
     a60:	fc 81       	ldd	r31, Y+4	; 0x04
     a62:	80 81       	ld	r24, Z
     a64:	88 23       	and	r24, r24
     a66:	89 f7       	brne	.-30     	; 0xa4a <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(0x0a);
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	for(i=0;i<10;i++){
     a74:	10 92 81 01 	sts	0x0181, r1
     a78:	32 c0       	rjmp	.+100    	; 0xade <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     a7a:	80 91 81 01 	lds	r24, 0x0181
     a7e:	08 2f       	mov	r16, r24
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_getchar>
     a86:	f8 01       	movw	r30, r16
     a88:	ee 57       	subi	r30, 0x7E	; 126
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     a8e:	80 91 81 01 	lds	r24, 0x0181
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	fc 01       	movw	r30, r24
     a98:	ee 57       	subi	r30, 0x7E	; 126
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	80 81       	ld	r24, Z
     a9e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     aa2:	80 91 81 01 	lds	r24, 0x0181
     aa6:	88 23       	and	r24, r24
     aa8:	a9 f0       	breq	.+42     	; 0xad4 <mu2_command+0xc4>
     aaa:	80 91 81 01 	lds	r24, 0x0181
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	fc 01       	movw	r30, r24
     ab6:	ee 57       	subi	r30, 0x7E	; 126
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	80 81       	ld	r24, Z
     abc:	8d 30       	cpi	r24, 0x0D	; 13
     abe:	51 f4       	brne	.+20     	; 0xad4 <mu2_command+0xc4>
     ac0:	80 91 81 01 	lds	r24, 0x0181
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	ee 57       	subi	r30, 0x7E	; 126
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 81       	ld	r24, Z
     ad0:	8a 30       	cpi	r24, 0x0A	; 10
     ad2:	49 f0       	breq	.+18     	; 0xae6 <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     ad4:	80 91 81 01 	lds	r24, 0x0181
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 81 01 	sts	0x0181, r24
     ade:	80 91 81 01 	lds	r24, 0x0181
     ae2:	8a 30       	cpi	r24, 0x0A	; 10
     ae4:	50 f2       	brcs	.-108    	; 0xa7a <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     ae6:	80 91 83 01 	lds	r24, 0x0183
     aea:	85 34       	cpi	r24, 0x45	; 69
     aec:	39 f4       	brne	.+14     	; 0xafc <mu2_command+0xec>
     aee:	80 91 84 01 	lds	r24, 0x0184
     af2:	82 35       	cpi	r24, 0x52	; 82
     af4:	19 f4       	brne	.+6      	; 0xafc <mu2_command+0xec>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8d 83       	std	Y+5, r24	; 0x05
     afa:	01 c0       	rjmp	.+2      	; 0xafe <mu2_command+0xee>
	return 0;
     afc:	1d 82       	std	Y+5, r1	; 0x05
     afe:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <mu2_command_eeprom+0xa>
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <mu2_command_eeprom+0xc>
     b20:	0f 92       	push	r0
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	7c 83       	std	Y+4, r23	; 0x04
     b2c:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     b2e:	80 e4       	ldi	r24, 0x40	; 64
     b30:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(cmd[0]);
     b34:	e9 81       	ldd	r30, Y+1	; 0x01
     b36:	fa 81       	ldd	r31, Y+2	; 0x02
     b38:	80 81       	ld	r24, Z
     b3a:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(cmd[1]);
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
     b42:	fc 01       	movw	r30, r24
     b44:	31 96       	adiw	r30, 0x01	; 1
     b46:	80 81       	ld	r24, Z
     b48:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
     b4c:	0a c0       	rjmp	.+20     	; 0xb62 <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     b4e:	eb 81       	ldd	r30, Y+3	; 0x03
     b50:	fc 81       	ldd	r31, Y+4	; 0x04
     b52:	80 81       	ld	r24, Z
     b54:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
		val++;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     b62:	eb 81       	ldd	r30, Y+3	; 0x03
     b64:	fc 81       	ldd	r31, Y+4	; 0x04
     b66:	80 81       	ld	r24, Z
     b68:	88 23       	and	r24, r24
     b6a:	89 f7       	brne	.-30     	; 0xb4e <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     b6c:	8f e2       	ldi	r24, 0x2F	; 47
     b6e:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar('W');
     b72:	87 e5       	ldi	r24, 0x57	; 87
     b74:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(0x0d);
     b78:	8d e0       	ldi	r24, 0x0D	; 13
     b7a:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	uart0_putchar(0x0a);
     b7e:	8a e0       	ldi	r24, 0x0A	; 10
     b80:	0e 94 ee 06 	call	0xddc	; 0xddc <uart0_putchar>
	for(i=0;i<10;i++){
     b84:	10 92 81 01 	sts	0x0181, r1
     b88:	32 c0       	rjmp	.+100    	; 0xbee <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     b8a:	80 91 81 01 	lds	r24, 0x0181
     b8e:	08 2f       	mov	r16, r24
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_getchar>
     b96:	f8 01       	movw	r30, r16
     b98:	ee 57       	subi	r30, 0x7E	; 126
     b9a:	fe 4f       	sbci	r31, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     b9e:	80 91 81 01 	lds	r24, 0x0181
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	ee 57       	subi	r30, 0x7E	; 126
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	80 81       	ld	r24, Z
     bae:	0e 94 0e 07 	call	0xe1c	; 0xe1c <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     bb2:	80 91 81 01 	lds	r24, 0x0181
     bb6:	88 23       	and	r24, r24
     bb8:	a9 f0       	breq	.+42     	; 0xbe4 <mu2_command_eeprom+0xd0>
     bba:	80 91 81 01 	lds	r24, 0x0181
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	fc 01       	movw	r30, r24
     bc6:	ee 57       	subi	r30, 0x7E	; 126
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 81       	ld	r24, Z
     bcc:	8d 30       	cpi	r24, 0x0D	; 13
     bce:	51 f4       	brne	.+20     	; 0xbe4 <mu2_command_eeprom+0xd0>
     bd0:	80 91 81 01 	lds	r24, 0x0181
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	ee 57       	subi	r30, 0x7E	; 126
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	8a 30       	cpi	r24, 0x0A	; 10
     be2:	49 f0       	breq	.+18     	; 0xbf6 <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     be4:	80 91 81 01 	lds	r24, 0x0181
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	80 93 81 01 	sts	0x0181, r24
     bee:	80 91 81 01 	lds	r24, 0x0181
     bf2:	8a 30       	cpi	r24, 0x0A	; 10
     bf4:	50 f2       	brcs	.-108    	; 0xb8a <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     bf6:	80 91 83 01 	lds	r24, 0x0183
     bfa:	85 34       	cpi	r24, 0x45	; 69
     bfc:	39 f4       	brne	.+14     	; 0xc0c <mu2_command_eeprom+0xf8>
     bfe:	80 91 84 01 	lds	r24, 0x0184
     c02:	82 35       	cpi	r24, 0x52	; 82
     c04:	19 f4       	brne	.+6      	; 0xc0c <mu2_command_eeprom+0xf8>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <mu2_command_eeprom+0xfa>
	return 0;
     c0c:	1d 82       	std	Y+5, r1	; 0x05
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	08 95       	ret

00000c24 <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	2d 97       	sbiw	r28, 0x0d	; 13
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	6d 83       	std	Y+5, r22	; 0x05
     c3e:	5f 83       	std	Y+7, r21	; 0x07
     c40:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	9d 87       	std	Y+13, r25	; 0x0d
     c48:	8c 87       	std	Y+12, r24	; 0x0c
     c4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	31 f0       	breq	.+12     	; 0xc5e <uart_init+0x3a>
     c52:	8c 85       	ldd	r24, Y+12	; 0x0c
     c54:	9d 85       	ldd	r25, Y+13	; 0x0d
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	b1 f1       	breq	.+108    	; 0xcc8 <uart_init+0xa4>
     c5c:	64 c0       	rjmp	.+200    	; 0xd26 <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     c5e:	e1 ec       	ldi	r30, 0xC1	; 193
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     c64:	a2 ec       	ldi	r26, 0xC2	; 194
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e2 ec       	ldi	r30, 0xC2	; 194
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	86 60       	ori	r24, 0x06	; 6
     c70:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     c72:	1a 82       	std	Y+2, r1	; 0x02
     c74:	19 82       	std	Y+1, r1	; 0x01
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <uart_init+0x5e>
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	23 e1       	ldi	r18, 0x13	; 19
     c88:	88 38       	cpi	r24, 0x88	; 136
     c8a:	92 07       	cpc	r25, r18
     c8c:	ac f3       	brlt	.-22     	; 0xc78 <uart_init+0x54>
			UCSR0B = option;					
     c8e:	e1 ec       	ldi	r30, 0xC1	; 193
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     c96:	e5 ec       	ldi	r30, 0xC5	; 197
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8e 81       	ldd	r24, Y+6	; 0x06
     c9c:	9f 81       	ldd	r25, Y+7	; 0x07
     c9e:	89 2f       	mov	r24, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     ca4:	e4 ec       	ldi	r30, 0xC4	; 196
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8e 81       	ldd	r24, Y+6	; 0x06
     caa:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     cac:	e0 ec       	ldi	r30, 0xC0	; 192
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     cb2:	a0 ec       	ldi	r26, 0xC0	; 192
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e0 ec       	ldi	r30, 0xC0	; 192
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	83 7e       	andi	r24, 0xE3	; 227
     cbe:	8c 93       	st	X, r24
			UDR0 = 0;
     cc0:	e6 ec       	ldi	r30, 0xC6	; 198
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
     cc6:	34 c0       	rjmp	.+104    	; 0xd30 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     cc8:	ed ec       	ldi	r30, 0xCD	; 205
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	89 2f       	mov	r24, r25
     cd2:	99 27       	eor	r25, r25
     cd4:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     cd6:	ec ec       	ldi	r30, 0xCC	; 204
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	8e 81       	ldd	r24, Y+6	; 0x06
     cdc:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     cde:	1a 82       	std	Y+2, r1	; 0x02
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <uart_init+0xca>
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	23 e1       	ldi	r18, 0x13	; 19
     cf4:	88 38       	cpi	r24, 0x88	; 136
     cf6:	92 07       	cpc	r25, r18
     cf8:	ac f3       	brlt	.-22     	; 0xce4 <uart_init+0xc0>
			UCSR1B |= option;
     cfa:	a9 ec       	ldi	r26, 0xC9	; 201
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 ec       	ldi	r30, 0xC9	; 201
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	90 81       	ld	r25, Z
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	89 2b       	or	r24, r25
     d08:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     d0a:	e8 ec       	ldi	r30, 0xC8	; 200
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     d10:	a8 ec       	ldi	r26, 0xC8	; 200
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 ec       	ldi	r30, 0xC8	; 200
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	83 7e       	andi	r24, 0xE3	; 227
     d1c:	8c 93       	st	X, r24
			UDR1 = 0;
     d1e:	ee ec       	ldi	r30, 0xCE	; 206
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	10 82       	st	Z, r1
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <uart_init+0x10c>
			break;
		default:
			return -1;
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	99 87       	std	Y+9, r25	; 0x09
     d2c:	88 87       	std	Y+8, r24	; 0x08
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <uart_init+0x110>
	}
	return 0;
     d30:	19 86       	std	Y+9, r1	; 0x09
     d32:	18 86       	std	Y+8, r1	; 0x08
     d34:	88 85       	ldd	r24, Y+8	; 0x08
     d36:	99 85       	ldd	r25, Y+9	; 0x09
}
     d38:	2d 96       	adiw	r28, 0x0d	; 13
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <uart_setbuffer+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <uart_setbuffer+0x8>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <uart_setbuffer+0xa>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	7c 83       	std	Y+4, r23	; 0x04
     d5e:	6b 83       	std	Y+3, r22	; 0x03
     d60:	5e 83       	std	Y+6, r21	; 0x06
     d62:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	99 23       	and	r25, r25
     d6a:	cc f0       	brlt	.+50     	; 0xd9e <uart_setbuffer+0x54>
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	91 05       	cpc	r25, r1
     d74:	a4 f4       	brge	.+40     	; 0xd9e <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     d76:	29 81       	ldd	r18, Y+1	; 0x01
     d78:	3a 81       	ldd	r19, Y+2	; 0x02
     d7a:	c9 01       	movw	r24, r18
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	81 57       	subi	r24, 0x71	; 113
     d8e:	9e 4f       	sbci	r25, 0xFE	; 254
     d90:	4d 81       	ldd	r20, Y+5	; 0x05
     d92:	5e 81       	ldd	r21, Y+6	; 0x06
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	b9 01       	movw	r22, r18
     d9a:	0e 94 9d 08 	call	0x113a	; 0x113a <RingInit>
}
     d9e:	26 96       	adiw	r28, 0x06	; 6
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     db8:	e0 ec       	ldi	r30, 0xC0	; 192
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	dc f7       	brge	.-10     	; 0xdb8 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     dc2:	a0 ec       	ldi	r26, 0xC0	; 192
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e0 ec       	ldi	r30, 0xC0	; 192
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 77       	andi	r24, 0x7F	; 127
     dce:	8c 93       	st	X, r24
	return UDR0;
     dd0:	e6 ec       	ldi	r30, 0xC6	; 198
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <uart0_putchar>:

int uart0_putchar(char c)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     de8:	e0 ec       	ldi	r30, 0xC0	; 192
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	80 72       	andi	r24, 0x20	; 32
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	b9 f3       	breq	.-18     	; 0xde8 <uart0_putchar+0xc>
	UDR0 = c;
     dfa:	e6 ec       	ldi	r30, 0xC6	; 198
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     e02:	a0 ec       	ldi	r26, 0xC0	; 192
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e0 ec       	ldi	r30, 0xC0	; 192
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	8c 93       	st	X, r24
	
	return 0;
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
}
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <uart1_putchar>:

int uart1_putchar(char c)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	8a 30       	cpi	r24, 0x0A	; 10
     e2c:	a1 f4       	brne	.+40     	; 0xe56 <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     e2e:	e8 ec       	ldi	r30, 0xC8	; 200
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	80 72       	andi	r24, 0x20	; 32
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	b9 f3       	breq	.-18     	; 0xe2e <uart1_putchar+0x12>
		UDR1 = '\r';
     e40:	ee ec       	ldi	r30, 0xCE	; 206
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8d e0       	ldi	r24, 0x0D	; 13
     e46:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     e48:	a8 ec       	ldi	r26, 0xC8	; 200
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 ec       	ldi	r30, 0xC8	; 200
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 7d       	andi	r24, 0xDF	; 223
     e54:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     e56:	e8 ec       	ldi	r30, 0xC8	; 200
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	80 72       	andi	r24, 0x20	; 32
     e62:	90 70       	andi	r25, 0x00	; 0
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	b9 f3       	breq	.-18     	; 0xe56 <uart1_putchar+0x3a>
	UDR1 = c;
     e68:	ee ec       	ldi	r30, 0xCE	; 206
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     e70:	a8 ec       	ldi	r26, 0xC8	; 200
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e8 ec       	ldi	r30, 0xC8	; 200
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 7d       	andi	r24, 0xDF	; 223
     e7c:	8c 93       	st	X, r24

	return 0;
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
}
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <uart0_buf_putchar+0x6>
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     e98:	1a 82       	std	Y+2, r1	; 0x02
     e9a:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     e9c:	ef e5       	ldi	r30, 0x5F	; 95
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 93 8c 01 	sts	0x018C, r24
	cli();
     ea6:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	8a 30       	cpi	r24, 0x0A	; 10
     eac:	61 f4       	brne	.+24     	; 0xec6 <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     eae:	8f e8       	ldi	r24, 0x8F	; 143
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	6d e0       	ldi	r22, 0x0D	; 13
     eb4:	0e 94 cb 08 	call	0x1196	; 0x1196 <RingPut>
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	29 f4       	brne	.+10     	; 0xec6 <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	9f ef       	ldi	r25, 0xFF	; 255
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     ec6:	8f e8       	ldi	r24, 0x8F	; 143
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	6b 81       	ldd	r22, Y+3	; 0x03
     ecc:	0e 94 cb 08 	call	0x1196	; 0x1196 <RingPut>
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	21 f4       	brne	.+8      	; 0xedc <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     edc:	a1 ec       	ldi	r26, 0xC1	; 193
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e1 ec       	ldi	r30, 0xC1	; 193
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 62       	ori	r24, 0x20	; 32
     ee8:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     eea:	ef e5       	ldi	r30, 0x5F	; 95
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 91 8c 01 	lds	r24, 0x018C
     ef2:	80 83       	st	Z, r24

	return ret;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <uart1_buf_putchar+0x6>
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     f16:	ef e5       	ldi	r30, 0x5F	; 95
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 93 8c 01 	sts	0x018C, r24
	cli();
     f20:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	61 f4       	brne	.+24     	; 0xf40 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     f28:	88 e9       	ldi	r24, 0x98	; 152
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	6d e0       	ldi	r22, 0x0D	; 13
     f2e:	0e 94 cb 08 	call	0x1196	; 0x1196 <RingPut>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	29 f4       	brne	.+10     	; 0xf40 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     f40:	88 e9       	ldi	r24, 0x98	; 152
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	6b 81       	ldd	r22, Y+3	; 0x03
     f46:	0e 94 cb 08 	call	0x1196	; 0x1196 <RingPut>
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	21 f4       	brne	.+8      	; 0xf56 <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     f56:	a9 ec       	ldi	r26, 0xC9	; 201
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e9 ec       	ldi	r30, 0xC9	; 201
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 62       	ori	r24, 0x20	; 32
     f62:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     f64:	ef e5       	ldi	r30, 0x5F	; 95
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 91 8c 01 	lds	r24, 0x018C
     f6c:	80 83       	st	Z, r24

	return ret;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <__vector_21>:


ISR(USART0_UDRE_vect)
{
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	00 90 5b 00 	lds	r0, 0x005B
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     fb0:	8f e8       	ldi	r24, 0x8F	; 143
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	9e 01       	movw	r18, r28
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	b9 01       	movw	r22, r18
     fbc:	0e 94 1e 09 	call	0x123c	; 0x123c <RingGet>
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	61 f0       	breq	.+24     	; 0xfdc <__vector_21+0x5e>
		UDR0 = c;
     fc4:	e6 ec       	ldi	r30, 0xC6	; 198
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREクリア
     fcc:	a0 ec       	ldi	r26, 0xC0	; 192
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e0 ec       	ldi	r30, 0xC0	; 192
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	8c 93       	st	X, r24
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     fdc:	a1 ec       	ldi	r26, 0xC1	; 193
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 ec       	ldi	r30, 0xC1	; 193
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     fea:	a0 ec       	ldi	r26, 0xC0	; 192
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e0 ec       	ldi	r30, 0xC0	; 192
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8f 7d       	andi	r24, 0xDF	; 223
     ff6:	8c 93       	st	X, r24
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	00 92 5b 00 	sts	0x005B, r0
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_29>:

ISR(USART1_UDRE_vect)
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	00 90 5b 00 	lds	r0, 0x005B
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
    1058:	88 e9       	ldi	r24, 0x98	; 152
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	9e 01       	movw	r18, r28
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 1e 09 	call	0x123c	; 0x123c <RingGet>
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <__vector_29+0x5e>
		UDR1 = c;
    106c:	ee ec       	ldi	r30, 0xCE	; 206
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREクリア
    1074:	a8 ec       	ldi	r26, 0xC8	; 200
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 ec       	ldi	r30, 0xC8	; 200
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8f 7d       	andi	r24, 0xDF	; 223
    1080:	8c 93       	st	X, r24
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
    1084:	a9 ec       	ldi	r26, 0xC9	; 201
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 ec       	ldi	r30, 0xC9	; 201
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 7d       	andi	r24, 0xDF	; 223
    1090:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
    1092:	a8 ec       	ldi	r26, 0xC8	; 200
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 ec       	ldi	r30, 0xC8	; 200
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7d       	andi	r24, 0xDF	; 223
    109e:	8c 93       	st	X, r24
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	00 92 5b 00 	sts	0x005B, r0
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	00 90 5b 00 	lds	r0, 0x005B
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    10fe:	ee ec       	ldi	r30, 0xCE	; 206
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	20 81       	ld	r18, Z
    1104:	88 e9       	ldi	r24, 0x98	; 152
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	62 2f       	mov	r22, r18
    110a:	0e 94 cb 08 	call	0x1196	; 0x1196 <RingPut>
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	00 92 5b 00 	sts	0x005B, r0
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <RingInit+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <RingInit+0x8>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <RingInit+0xa>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	7c 83       	std	Y+4, r23	; 0x04
    114e:	6b 83       	std	Y+3, r22	; 0x03
    1150:	5e 83       	std	Y+6, r21	; 0x06
    1152:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
	ring->size = size;
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	97 83       	std	Z+7, r25	; 0x07
    116a:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    116c:	e9 81       	ldd	r30, Y+1	; 0x01
    116e:	fa 81       	ldd	r31, Y+2	; 0x02
    1170:	13 82       	std	Z+3, r1	; 0x03
    1172:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	15 82       	std	Z+5, r1	; 0x05
    117a:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 87       	std	Z+8, r24	; 0x08
}
    1184:	26 96       	adiw	r28, 0x06	; 6
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <RingPut+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <RingPut+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    11aa:	e9 81       	ldd	r30, Y+1	; 0x01
    11ac:	fa 81       	ldd	r31, Y+2	; 0x02
    11ae:	80 85       	ldd	r24, Z+8	; 0x08
    11b0:	88 23       	and	r24, r24
    11b2:	71 f4       	brne	.+28     	; 0x11d0 <RingPut+0x3a>
    11b4:	e9 81       	ldd	r30, Y+1	; 0x01
    11b6:	fa 81       	ldd	r31, Y+2	; 0x02
    11b8:	22 81       	ldd	r18, Z+2	; 0x02
    11ba:	33 81       	ldd	r19, Z+3	; 0x03
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	84 81       	ldd	r24, Z+4	; 0x04
    11c2:	95 81       	ldd	r25, Z+5	; 0x05
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <RingPut+0x3a>
		return FALSE;
    11ca:	1d 82       	std	Y+5, r1	; 0x05
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	2c c0       	rjmp	.+88     	; 0x1228 <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	84 81       	ldd	r24, Z+4	; 0x04
    11de:	95 81       	ldd	r25, Z+5	; 0x05
    11e0:	f9 01       	movw	r30, r18
    11e2:	e8 0f       	add	r30, r24
    11e4:	f9 1f       	adc	r31, r25
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	80 83       	st	Z, r24
	ring->wp++;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	84 81       	ldd	r24, Z+4	; 0x04
    11f0:	95 81       	ldd	r25, Z+5	; 0x05
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	95 83       	std	Z+5, r25	; 0x05
    11fa:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	24 81       	ldd	r18, Z+4	; 0x04
    1202:	35 81       	ldd	r19, Z+5	; 0x05
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	86 81       	ldd	r24, Z+6	; 0x06
    120a:	97 81       	ldd	r25, Z+7	; 0x07
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	21 f4       	brne	.+8      	; 0x121a <RingPut+0x84>
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	15 82       	std	Z+5, r1	; 0x05
    1218:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	fa 81       	ldd	r31, Y+2	; 0x02
    121e:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9d 83       	std	Y+5, r25	; 0x05
    1226:	8c 83       	std	Y+4, r24	; 0x04
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <RingGet+0x6>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <RingGet+0x8>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <RingGet+0xa>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	7c 83       	std	Y+4, r23	; 0x04
    1250:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	80 85       	ldd	r24, Z+8	; 0x08
    1258:	88 23       	and	r24, r24
    125a:	d9 f5       	brne	.+118    	; 0x12d2 <RingGet+0x96>
		*value = ring->buf[ring->rp];
    125c:	e9 81       	ldd	r30, Y+1	; 0x01
    125e:	fa 81       	ldd	r31, Y+2	; 0x02
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	f9 01       	movw	r30, r18
    126e:	e8 0f       	add	r30, r24
    1270:	f9 1f       	adc	r31, r25
    1272:	80 81       	ld	r24, Z
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	80 83       	st	Z, r24
		ring->rp++;
    127a:	e9 81       	ldd	r30, Y+1	; 0x01
    127c:	fa 81       	ldd	r31, Y+2	; 0x02
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	93 83       	std	Z+3, r25	; 0x03
    128a:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    128c:	e9 81       	ldd	r30, Y+1	; 0x01
    128e:	fa 81       	ldd	r31, Y+2	; 0x02
    1290:	22 81       	ldd	r18, Z+2	; 0x02
    1292:	33 81       	ldd	r19, Z+3	; 0x03
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	fa 81       	ldd	r31, Y+2	; 0x02
    1298:	86 81       	ldd	r24, Z+6	; 0x06
    129a:	97 81       	ldd	r25, Z+7	; 0x07
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	21 f4       	brne	.+8      	; 0x12aa <RingGet+0x6e>
    12a2:	e9 81       	ldd	r30, Y+1	; 0x01
    12a4:	fa 81       	ldd	r31, Y+2	; 0x02
    12a6:	13 82       	std	Z+3, r1	; 0x03
    12a8:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    12aa:	e9 81       	ldd	r30, Y+1	; 0x01
    12ac:	fa 81       	ldd	r31, Y+2	; 0x02
    12ae:	22 81       	ldd	r18, Z+2	; 0x02
    12b0:	33 81       	ldd	r19, Z+3	; 0x03
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	84 81       	ldd	r24, Z+4	; 0x04
    12b8:	95 81       	ldd	r25, Z+5	; 0x05
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	21 f4       	brne	.+8      	; 0x12c8 <RingGet+0x8c>
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <RingGet+0xa0>
	}else{			// リングバッファが空のとき
		*value = 0;
    12d2:	eb 81       	ldd	r30, Y+3	; 0x03
    12d4:	fc 81       	ldd	r31, Y+4	; 0x04
    12d6:	10 82       	st	Z, r1
		return FALSE;
    12d8:	1e 82       	std	Y+6, r1	; 0x06
    12da:	1d 82       	std	Y+5, r1	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    12e0:	26 96       	adiw	r28, 0x06	; 6
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <isRingEmpty+0x6>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    1300:	e9 81       	ldd	r30, Y+1	; 0x01
    1302:	fa 81       	ldd	r31, Y+2	; 0x02
    1304:	80 85       	ldd	r24, Z+8	; 0x08
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <initI2CMaster+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <initI2CMaster+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    1324:	88 eb       	ldi	r24, 0xB8	; 184
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9b 83       	std	Y+3, r25	; 0x03
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	80 e2       	ldi	r24, 0x20	; 32
    1334:	9e e4       	ldi	r25, 0x4E	; 78
    1336:	b9 01       	movw	r22, r18
    1338:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__divmodhi4>
    133c:	cb 01       	movw	r24, r22
    133e:	40 97       	sbiw	r24, 0x10	; 16
    1340:	9d 83       	std	Y+5, r25	; 0x05
    1342:	8c 83       	std	Y+4, r24	; 0x04
    1344:	ec 81       	ldd	r30, Y+4	; 0x04
    1346:	fd 81       	ldd	r31, Y+5	; 0x05
    1348:	ff 23       	and	r31, r31
    134a:	2c f4       	brge	.+10     	; 0x1356 <initI2CMaster+0x42>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	9d 83       	std	Y+5, r25	; 0x05
    1354:	8c 83       	std	Y+4, r24	; 0x04
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	95 95       	asr	r25
    135c:	87 95       	ror	r24
    135e:	ea 81       	ldd	r30, Y+2	; 0x02
    1360:	fb 81       	ldd	r31, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
		TWSR = 0;
    1364:	e9 eb       	ldi	r30, 0xB9	; 185
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
		TWCR = I2CEN;
    136a:	ec eb       	ldi	r30, 0xBC	; 188
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	80 83       	st	Z, r24
    }
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <i2cWrite+0x6>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
			cli();
    1392:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1394:	ec eb       	ldi	r30, 0xBC	; 188
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	84 ea       	ldi	r24, 0xA4	; 164
    139a:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    139c:	ec eb       	ldi	r30, 0xBC	; 188
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	dc f7       	brge	.-10     	; 0x139c <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    13a6:	e9 eb       	ldi	r30, 0xB9	; 185
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 7f       	andi	r24, 0xF8	; 248
    13b2:	90 70       	andi	r25, 0x00	; 0
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <i2cWrite+0x3a>
    13ba:	58 c0       	rjmp	.+176    	; 0x146c <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    13bc:	ab eb       	ldi	r26, 0xBB	; 187
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e9 81       	ldd	r30, Y+1	; 0x01
    13c2:	fa 81       	ldd	r31, Y+2	; 0x02
    13c4:	80 81       	ld	r24, Z
    13c6:	88 0f       	add	r24, r24
    13c8:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    13ca:	ec eb       	ldi	r30, 0xBC	; 188
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	84 e8       	ldi	r24, 0x84	; 132
    13d0:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13d2:	ec eb       	ldi	r30, 0xBC	; 188
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 23       	and	r24, r24
    13da:	dc f7       	brge	.-10     	; 0x13d2 <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    13dc:	e9 eb       	ldi	r30, 0xB9	; 185
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	88 7f       	andi	r24, 0xF8	; 248
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	88 31       	cpi	r24, 0x18	; 24
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <i2cWrite+0x70>
    13f0:	3d c0       	rjmp	.+122    	; 0x146c <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    13f2:	10 92 8d 01 	sts	0x018D, r1
    13f6:	27 c0       	rjmp	.+78     	; 0x1446 <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    13f8:	ab eb       	ldi	r26, 0xBB	; 187
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	21 81       	ldd	r18, Z+1	; 0x01
    1402:	32 81       	ldd	r19, Z+2	; 0x02
    1404:	80 91 8d 01 	lds	r24, 0x018D
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	f9 01       	movw	r30, r18
    140e:	e8 0f       	add	r30, r24
    1410:	f9 1f       	adc	r31, r25
    1412:	80 81       	ld	r24, Z
    1414:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    1416:	ec eb       	ldi	r30, 0xBC	; 188
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	84 e8       	ldi	r24, 0x84	; 132
    141c:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    141e:	ec eb       	ldi	r30, 0xBC	; 188
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 23       	and	r24, r24
    1426:	dc f7       	brge	.-10     	; 0x141e <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    1428:	e9 eb       	ldi	r30, 0xB9	; 185
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 7f       	andi	r24, 0xF8	; 248
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	88 32       	cpi	r24, 0x28	; 40
    1438:	91 05       	cpc	r25, r1
    143a:	c1 f4       	brne	.+48     	; 0x146c <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    143c:	80 91 8d 01 	lds	r24, 0x018D
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	80 93 8d 01 	sts	0x018D, r24
    1446:	80 91 8d 01 	lds	r24, 0x018D
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	83 81       	ldd	r24, Z+3	; 0x03
    1454:	94 81       	ldd	r25, Z+4	; 0x04
    1456:	28 17       	cp	r18, r24
    1458:	39 07       	cpc	r19, r25
    145a:	70 f2       	brcs	.-100    	; 0x13f8 <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    145c:	ec eb       	ldi	r30, 0xBC	; 188
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	84 e9       	ldi	r24, 0x94	; 148
    1462:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    1464:	78 94       	sei
		return true;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    146c:	ec eb       	ldi	r30, 0xBC	; 188
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	84 e9       	ldi	r24, 0x94	; 148
    1472:	80 83       	st	Z, r24
		sei();
    1474:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1476:	1b 82       	std	Y+3, r1	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <i2cRead+0x6>
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
		cli();
    1496:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1498:	ec eb       	ldi	r30, 0xBC	; 188
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	84 ea       	ldi	r24, 0xA4	; 164
    149e:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14a0:	ec eb       	ldi	r30, 0xBC	; 188
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 23       	and	r24, r24
    14a8:	dc f7       	brge	.-10     	; 0x14a0 <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    14aa:	e9 eb       	ldi	r30, 0xB9	; 185
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	88 7f       	andi	r24, 0xF8	; 248
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	91 05       	cpc	r25, r1
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <i2cRead+0x3a>
    14be:	80 c0       	rjmp	.+256    	; 0x15c0 <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    14c0:	ab eb       	ldi	r26, 0xBB	; 187
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	80 81       	ld	r24, Z
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    14d6:	ec eb       	ldi	r30, 0xBC	; 188
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	84 e8       	ldi	r24, 0x84	; 132
    14dc:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14de:	ec eb       	ldi	r30, 0xBC	; 188
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	dc f7       	brge	.-10     	; 0x14de <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    14e8:	e9 eb       	ldi	r30, 0xB9	; 185
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 7f       	andi	r24, 0xF8	; 248
    14f4:	90 70       	andi	r25, 0x00	; 0
    14f6:	80 34       	cpi	r24, 0x40	; 64
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <i2cRead+0x78>
    14fc:	61 c0       	rjmp	.+194    	; 0x15c0 <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    14fe:	10 92 8d 01 	sts	0x018D, r1
    1502:	28 c0       	rjmp	.+80     	; 0x1554 <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1504:	ec eb       	ldi	r30, 0xBC	; 188
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	84 ec       	ldi	r24, 0xC4	; 196
    150a:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    150c:	ec eb       	ldi	r30, 0xBC	; 188
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	88 23       	and	r24, r24
    1514:	dc f7       	brge	.-10     	; 0x150c <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1516:	e9 eb       	ldi	r30, 0xB9	; 185
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 7f       	andi	r24, 0xF8	; 248
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	80 35       	cpi	r24, 0x50	; 80
    1526:	91 05       	cpc	r25, r1
    1528:	09 f0       	breq	.+2      	; 0x152c <i2cRead+0xa6>
    152a:	4a c0       	rjmp	.+148    	; 0x15c0 <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	25 81       	ldd	r18, Z+5	; 0x05
    1532:	36 81       	ldd	r19, Z+6	; 0x06
    1534:	80 91 8d 01 	lds	r24, 0x018D
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	d9 01       	movw	r26, r18
    153e:	a8 0f       	add	r26, r24
    1540:	b9 1f       	adc	r27, r25
    1542:	eb eb       	ldi	r30, 0xBB	; 187
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    154a:	80 91 8d 01 	lds	r24, 0x018D
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	80 93 8d 01 	sts	0x018D, r24
    1554:	80 91 8d 01 	lds	r24, 0x018D
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	87 81       	ldd	r24, Z+7	; 0x07
    1562:	90 85       	ldd	r25, Z+8	; 0x08
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	60 f2       	brcs	.-104    	; 0x1504 <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    156c:	ec eb       	ldi	r30, 0xBC	; 188
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	84 e8       	ldi	r24, 0x84	; 132
    1572:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1574:	ec eb       	ldi	r30, 0xBC	; 188
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	88 23       	and	r24, r24
    157c:	dc f7       	brge	.-10     	; 0x1574 <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    157e:	e9 eb       	ldi	r30, 0xB9	; 185
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	88 7f       	andi	r24, 0xF8	; 248
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	88 35       	cpi	r24, 0x58	; 88
    158e:	91 05       	cpc	r25, r1
    1590:	b9 f4       	brne	.+46     	; 0x15c0 <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    1592:	e9 81       	ldd	r30, Y+1	; 0x01
    1594:	fa 81       	ldd	r31, Y+2	; 0x02
    1596:	25 81       	ldd	r18, Z+5	; 0x05
    1598:	36 81       	ldd	r19, Z+6	; 0x06
    159a:	80 91 8d 01 	lds	r24, 0x018D
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	d9 01       	movw	r26, r18
    15a4:	a8 0f       	add	r26, r24
    15a6:	b9 1f       	adc	r27, r25
    15a8:	eb eb       	ldi	r30, 0xBB	; 187
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    15b0:	ec eb       	ldi	r30, 0xBC	; 188
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	84 e9       	ldi	r24, 0x94	; 148
    15b6:	80 83       	st	Z, r24
		sei();
    15b8:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    15c0:	ec eb       	ldi	r30, 0xBC	; 188
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	84 e9       	ldi	r24, 0x94	; 148
    15c6:	80 83       	st	Z, r24
		sei();
    15c8:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    15ca:	1b 82       	std	Y+3, r1	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <i2cReadWithCommand+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <i2cReadWithCommand+0x8>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    15ec:	ec eb       	ldi	r30, 0xBC	; 188
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	84 ea       	ldi	r24, 0xA4	; 164
    15f2:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    15f4:	ec eb       	ldi	r30, 0xBC	; 188
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	dc f7       	brge	.-10     	; 0x15f4 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    15fe:	ab eb       	ldi	r26, 0xBB	; 187
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e9 81       	ldd	r30, Y+1	; 0x01
    1604:	fa 81       	ldd	r31, Y+2	; 0x02
    1606:	80 81       	ld	r24, Z
    1608:	88 0f       	add	r24, r24
    160a:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    160c:	ec eb       	ldi	r30, 0xBC	; 188
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	84 e8       	ldi	r24, 0x84	; 132
    1612:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1614:	ec eb       	ldi	r30, 0xBC	; 188
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	dc f7       	brge	.-10     	; 0x1614 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    161e:	e9 eb       	ldi	r30, 0xB9	; 185
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	88 7f       	andi	r24, 0xF8	; 248
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	80 34       	cpi	r24, 0x40	; 64
    162e:	91 05       	cpc	r25, r1
    1630:	09 f0       	breq	.+2      	; 0x1634 <i2cReadWithCommand+0x5a>
    1632:	a0 c0       	rjmp	.+320    	; 0x1774 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1634:	eb eb       	ldi	r30, 0xBB	; 187
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    163c:	ec eb       	ldi	r30, 0xBC	; 188
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	84 e8       	ldi	r24, 0x84	; 132
    1642:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1644:	ec eb       	ldi	r30, 0xBC	; 188
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	88 23       	and	r24, r24
    164c:	dc f7       	brge	.-10     	; 0x1644 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    164e:	e9 eb       	ldi	r30, 0xB9	; 185
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	88 7f       	andi	r24, 0xF8	; 248
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	88 32       	cpi	r24, 0x28	; 40
    165e:	91 05       	cpc	r25, r1
    1660:	09 f0       	breq	.+2      	; 0x1664 <i2cReadWithCommand+0x8a>
    1662:	88 c0       	rjmp	.+272    	; 0x1774 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1664:	ec eb       	ldi	r30, 0xBC	; 188
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	84 ea       	ldi	r24, 0xA4	; 164
    166a:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    166c:	ec eb       	ldi	r30, 0xBC	; 188
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	88 23       	and	r24, r24
    1674:	dc f7       	brge	.-10     	; 0x166c <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    1676:	e9 eb       	ldi	r30, 0xB9	; 185
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	88 7f       	andi	r24, 0xF8	; 248
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	80 31       	cpi	r24, 0x10	; 16
    1686:	91 05       	cpc	r25, r1
    1688:	09 f0       	breq	.+2      	; 0x168c <i2cReadWithCommand+0xb2>
    168a:	74 c0       	rjmp	.+232    	; 0x1774 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    168c:	ab eb       	ldi	r26, 0xBB	; 187
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	80 81       	ld	r24, Z
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    16a2:	ec eb       	ldi	r30, 0xBC	; 188
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	84 e8       	ldi	r24, 0x84	; 132
    16a8:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16aa:	ec eb       	ldi	r30, 0xBC	; 188
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	88 23       	and	r24, r24
    16b2:	dc f7       	brge	.-10     	; 0x16aa <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    16b4:	10 92 8d 01 	sts	0x018D, r1
    16b8:	28 c0       	rjmp	.+80     	; 0x170a <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    16ba:	ec eb       	ldi	r30, 0xBC	; 188
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	84 ec       	ldi	r24, 0xC4	; 196
    16c0:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    16c2:	ec eb       	ldi	r30, 0xBC	; 188
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	88 23       	and	r24, r24
    16ca:	dc f7       	brge	.-10     	; 0x16c2 <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    16cc:	e9 eb       	ldi	r30, 0xB9	; 185
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	88 7f       	andi	r24, 0xF8	; 248
    16d8:	90 70       	andi	r25, 0x00	; 0
    16da:	80 35       	cpi	r24, 0x50	; 80
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <i2cReadWithCommand+0x108>
    16e0:	49 c0       	rjmp	.+146    	; 0x1774 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    16e2:	e9 81       	ldd	r30, Y+1	; 0x01
    16e4:	fa 81       	ldd	r31, Y+2	; 0x02
    16e6:	25 81       	ldd	r18, Z+5	; 0x05
    16e8:	36 81       	ldd	r19, Z+6	; 0x06
    16ea:	80 91 8d 01 	lds	r24, 0x018D
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	d9 01       	movw	r26, r18
    16f4:	a8 0f       	add	r26, r24
    16f6:	b9 1f       	adc	r27, r25
    16f8:	eb eb       	ldi	r30, 0xBB	; 187
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1700:	80 91 8d 01 	lds	r24, 0x018D
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	80 93 8d 01 	sts	0x018D, r24
    170a:	80 91 8d 01 	lds	r24, 0x018D
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	87 81       	ldd	r24, Z+7	; 0x07
    1718:	90 85       	ldd	r25, Z+8	; 0x08
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	28 17       	cp	r18, r24
    171e:	39 07       	cpc	r19, r25
    1720:	60 f2       	brcs	.-104    	; 0x16ba <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1722:	ec eb       	ldi	r30, 0xBC	; 188
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	84 e8       	ldi	r24, 0x84	; 132
    1728:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    172a:	ec eb       	ldi	r30, 0xBC	; 188
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	88 23       	and	r24, r24
    1732:	dc f7       	brge	.-10     	; 0x172a <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1734:	e9 eb       	ldi	r30, 0xB9	; 185
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	88 7f       	andi	r24, 0xF8	; 248
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	88 35       	cpi	r24, 0x58	; 88
    1744:	91 05       	cpc	r25, r1
    1746:	b1 f4       	brne	.+44     	; 0x1774 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1748:	e9 81       	ldd	r30, Y+1	; 0x01
    174a:	fa 81       	ldd	r31, Y+2	; 0x02
    174c:	25 81       	ldd	r18, Z+5	; 0x05
    174e:	36 81       	ldd	r19, Z+6	; 0x06
    1750:	80 91 8d 01 	lds	r24, 0x018D
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	d9 01       	movw	r26, r18
    175a:	a8 0f       	add	r26, r24
    175c:	b9 1f       	adc	r27, r25
    175e:	eb eb       	ldi	r30, 0xBB	; 187
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1766:	ec eb       	ldi	r30, 0xBC	; 188
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	84 e9       	ldi	r24, 0x94	; 148
    176c:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	8c 83       	std	Y+4, r24	; 0x04
    1772:	05 c0       	rjmp	.+10     	; 0x177e <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1774:	ec eb       	ldi	r30, 0xBC	; 188
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	84 e9       	ldi	r24, 0x94	; 148
    177a:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    177c:	1c 82       	std	Y+4, r1	; 0x04
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <LED>:
/// LED操作関数 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->消灯　1->点灯 </param>
void LED(unsigned char target, bool status)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <LED+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	58 f5       	brcc	.+86     	; 0x17f8 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	88 23       	and	r24, r24
    17a6:	a9 f0       	breq	.+42     	; 0x17d2 <LED+0x44>
    17a8:	a2 e2       	ldi	r26, 0x22	; 34
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e2       	ldi	r30, 0x22	; 34
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <LED+0x38>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <LED+0x34>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	13 c0       	rjmp	.+38     	; 0x17f8 <LED+0x6a>
	else		sbi(PORTA,target);
    17d2:	a2 e2       	ldi	r26, 0x22	; 34
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e2       	ldi	r30, 0x22	; 34
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <LED+0x62>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <LED+0x5e>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <LEDInit>:

void LEDInit(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    180a:	a1 e2       	ldi	r26, 0x21	; 33
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e2       	ldi	r30, 0x21	; 33
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	87 60       	ori	r24, 0x07	; 7
    1816:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1818:	a2 e2       	ldi	r26, 0x22	; 34
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e2       	ldi	r30, 0x22	; 34
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	87 60       	ori	r24, 0x07	; 7
    1824:	8c 93       	st	X, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <wait_us>:
#include <avr/io.h>
void wait_us(uint16_t t){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <wait_us+0x6>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
  static unsigned char lpcnt;
  __asm__ __volatile__("\n"
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02

0000183e <CPU_wait_entry10>:
    183e:	24 e0       	ldi	r18, 0x04	; 4

00001840 <CPU_wait_lp10>:
    1840:	00 00       	nop
    1842:	2a 95       	dec	r18
    1844:	e9 f7       	brne	.-6      	; 0x1840 <CPU_wait_lp10>
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	d1 f7       	brne	.-12     	; 0x183e <CPU_wait_entry10>
    184a:	20 93 8e 01 	sts	0x018E, r18
    "sbiw %1,1\n\t"
    "brne CPU_wait_entry%=\n\t"
    :"=&a"(lpcnt)
    :"w"(t)
  );
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <wait_ms>:
void wait_ms(uint16_t t){
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <wait_ms+0x6>
    185e:	0f 92       	push	r0
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	04 c0       	rjmp	.+8      	; 0x1872 <wait_ms+0x1a>
	while(t--) wait_us(1000);
    186a:	88 ee       	ldi	r24, 0xE8	; 232
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_us>
    1872:	1b 82       	std	Y+3, r1	; 0x03
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	11 f0       	breq	.+4      	; 0x1880 <wait_ms+0x28>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 23       	and	r24, r24
    188e:	69 f7       	brne	.-38     	; 0x186a <wait_ms+0x12>
	
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <mDrive+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <mDrive+0x8>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <mDrive+0xa>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	9b 83       	std	Y+3, r25	; 0x03
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	6c 83       	std	Y+4, r22	; 0x04
    18b0:	4d 83       	std	Y+5, r20	; 0x05
    18b2:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    18b4:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	85 30       	cpi	r24, 0x05	; 5
    18ba:	50 f5       	brcc	.+84     	; 0x1910 <mDrive+0x74>
	if(duty>100) duty=100;
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	85 36       	cpi	r24, 0x65	; 101
    18c0:	14 f0       	brlt	.+4      	; 0x18c6 <mDrive+0x2a>
    18c2:	84 e6       	ldi	r24, 0x64	; 100
    18c4:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	8c 39       	cpi	r24, 0x9C	; 156
    18ca:	14 f4       	brge	.+4      	; 0x18d0 <mDrive+0x34>
    18cc:	8c e9       	ldi	r24, 0x9C	; 156
    18ce:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	21 f4       	brne	.+8      	; 0x18de <mDrive+0x42>
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	81 95       	neg	r24
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	88 23       	and	r24, r24
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <mDrive+0x4c>
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	08 c0       	rjmp	.+16     	; 0x18f8 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <mDrive+0x58>
    18ee:	8f e7       	ldi	r24, 0x7F	; 127
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <mDrive+0x5c>
	else w_data = duty;
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    18f8:	ea 81       	ldd	r30, Y+2	; 0x02
    18fa:	fb 81       	ldd	r31, Y+3	; 0x03
    18fc:	21 81       	ldd	r18, Z+1	; 0x01
    18fe:	32 81       	ldd	r19, Z+2	; 0x02
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	e8 0f       	add	r30, r24
    190a:	f9 1f       	adc	r31, r25
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	80 83       	st	Z, r24
}
    1910:	26 96       	adiw	r28, 0x06	; 6
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <mAngle+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <mAngle+0x8>
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	7c 83       	std	Y+4, r23	; 0x04
    1936:	6b 83       	std	Y+3, r22	; 0x03
    1938:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	88 23       	and	r24, r24
    193e:	a9 f0       	breq	.+42     	; 0x196a <mAngle+0x48>
		angle/=6;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	26 e0       	ldi	r18, 0x06	; 6
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	b9 01       	movw	r22, r18
    194a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__divmodhi4>
    194e:	cb 01       	movw	r24, r22
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    1954:	e9 81       	ldd	r30, Y+1	; 0x01
    1956:	fa 81       	ldd	r31, Y+2	; 0x02
    1958:	81 81       	ldd	r24, Z+1	; 0x01
    195a:	92 81       	ldd	r25, Z+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	34 96       	adiw	r30, 0x04	; 4
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	8f 71       	andi	r24, 0x1F	; 31
    1964:	80 64       	ori	r24, 0x40	; 64
    1966:	80 83       	st	Z, r24
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	81 81       	ldd	r24, Z+1	; 0x01
    1970:	92 81       	ldd	r25, Z+2	; 0x02
    1972:	fc 01       	movw	r30, r24
    1974:	34 96       	adiw	r30, 0x04	; 4
    1976:	10 82       	st	Z, r1
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <aDrive+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <aDrive+0x8>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	6b 83       	std	Y+3, r22	; 0x03
    199a:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	88 23       	and	r24, r24
    19a0:	41 f0       	breq	.+16     	; 0x19b2 <aDrive+0x2a>
    19a2:	e9 81       	ldd	r30, Y+1	; 0x01
    19a4:	fa 81       	ldd	r31, Y+2	; 0x02
    19a6:	01 80       	ldd	r0, Z+1	; 0x01
    19a8:	f2 81       	ldd	r31, Z+2	; 0x02
    19aa:	e0 2d       	mov	r30, r0
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	80 83       	st	Z, r24
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	01 80       	ldd	r0, Z+1	; 0x01
    19b8:	f2 81       	ldd	r31, Z+2	; 0x02
    19ba:	e0 2d       	mov	r30, r0
    19bc:	10 82       	st	Z, r1

}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    19d4:	a4 e2       	ldi	r26, 0x24	; 36
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e4 e2       	ldi	r30, 0x24	; 36
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 7f       	andi	r24, 0xF0	; 240
    19e0:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    19e2:	a5 e2       	ldi	r26, 0x25	; 37
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e5 e2       	ldi	r30, 0x25	; 37
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8f 60       	ori	r24, 0x0F	; 15
    19ee:	8c 93       	st	X, r24
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <Switch>:
/// スイッチ値取得関数 
/// </summary>
/// <param name="target"> メイン基盤上のスライドスイッチ番号　1〜4 </param>
/// <return> スイッチの状態 ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <Switch+0x6>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1a02:	e3 e2       	ldi	r30, 0x23	; 35
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 95       	com	r24
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	a9 01       	movw	r20, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <Switch+0x2c>
    1a1e:	55 95       	asr	r21
    1a20:	47 95       	ror	r20
    1a22:	8a 95       	dec	r24
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <Switch+0x28>
    1a26:	ca 01       	movw	r24, r20
    1a28:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <Group>:

__inline__ unsigned char Group(void)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1a46:	e3 e2       	ldi	r30, 0x23	; 35
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 95       	com	r24
    1a4e:	86 95       	lsr	r24
    1a50:	86 95       	lsr	r24
    1a52:	83 70       	andi	r24, 0x03	; 3
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <Channel>:

__inline__ unsigned char Channel(void)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1a62:	e3 e2       	ldi	r30, 0x23	; 35
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 95       	com	r24
    1a6a:	83 70       	andi	r24, 0x03	; 3
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	89 27       	eor	r24, r25
    1a84:	88 23       	and	r24, r24
    1a86:	71 f4       	brne	.+28     	; 0x1aa4 <beep+0x32>
    1a88:	80 91 36 01 	lds	r24, 0x0136
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	89 27       	eor	r24, r25
    1a90:	88 23       	and	r24, r24
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <beep+0x32>
    1a94:	a2 e2       	ldi	r26, 0x22	; 34
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e2 e2       	ldi	r30, 0x22	; 34
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 60       	ori	r24, 0x08	; 8
    1aa0:	8c 93       	st	X, r24
    1aa2:	0b c0       	rjmp	.+22     	; 0x1aba <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1aa4:	80 91 36 01 	lds	r24, 0x0136
    1aa8:	88 23       	and	r24, r24
    1aaa:	39 f0       	breq	.+14     	; 0x1aba <beep+0x48>
    1aac:	a2 e2       	ldi	r26, 0x22	; 34
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e2 e2       	ldi	r30, 0x22	; 34
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	87 7f       	andi	r24, 0xF7	; 247
    1ab8:	8c 93       	st	X, r24
}
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <BeepInit>:

void BeepInit()
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1aca:	a1 e2       	ldi	r26, 0x21	; 33
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e1 e2       	ldi	r30, 0x21	; 33
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 60       	ori	r24, 0x08	; 8
    1ad6:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1ad8:	a2 e2       	ldi	r26, 0x22	; 34
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e2 e2       	ldi	r30, 0x22	; 34
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	87 7f       	andi	r24, 0xF7	; 247
    1ae4:	8c 93       	st	X, r24
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <i2cCheck>:

void i2cCheck(bool flag)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	69 81       	ldd	r22, Y+1	; 0x01
    1afc:	0e 94 c7 0b 	call	0x178e	; 0x178e <LED>
	beep(!(flag));
    1b00:	99 81       	ldd	r25, Y+1	; 0x01
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 27       	eor	r24, r25
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
	if(!flag){
    1b0e:	99 81       	ldd	r25, Y+1	; 0x01
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 27       	eor	r24, r25
    1b14:	88 23       	and	r24, r24
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <i2cCheck+0x38>
		PORTC = 0x04;
    1b18:	e8 e2       	ldi	r30, 0x28	; 40
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	80 83       	st	Z, r24
		cli();
    1b20:	f8 94       	cli
    1b22:	ff cf       	rjmp	.-2      	; 0x1b22 <i2cCheck+0x36>
		while(1);
	}
}
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <Emergency+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <Emergency+0x8>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	9b 83       	std	Y+3, r25	; 0x03
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    1b3c:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	71 f4       	brne	.+28     	; 0x1b60 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1b44:	ea 81       	ldd	r30, Y+2	; 0x02
    1b46:	fb 81       	ldd	r31, Y+3	; 0x03
    1b48:	01 80       	ldd	r0, Z+1	; 0x01
    1b4a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	8a e6       	ldi	r24, 0x6A	; 106
    1b50:	80 83       	st	Z, r24
		beep(1);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
		eflag=1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	80 93 a1 01 	sts	0x01A1, r24
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <Emergency+0x60>
		}
	else if(act==E_OFF){
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	69 f4       	brne	.+26     	; 0x1b80 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1b66:	ea 81       	ldd	r30, Y+2	; 0x02
    1b68:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6a:	01 80       	ldd	r0, Z+1	; 0x01
    1b6c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	85 e5       	ldi	r24, 0x55	; 85
    1b72:	80 83       	st	Z, r24
		beep(0);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
		eflag=0;
    1b7a:	10 92 a1 01 	sts	0x01A1, r1
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1b80:	ea 81       	ldd	r30, Y+2	; 0x02
    1b82:	fb 81       	ldd	r31, Y+3	; 0x03
    1b84:	01 80       	ldd	r0, Z+1	; 0x01
    1b86:	f2 81       	ldd	r31, Z+2	; 0x02
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b90:	0e 94 43 0a 	call	0x1486	; 0x1486 <i2cRead>
    1b94:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1b96:	ea 81       	ldd	r30, Y+2	; 0x02
    1b98:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9a:	05 80       	ldd	r0, Z+5	; 0x05
    1b9c:	f6 81       	ldd	r31, Z+6	; 0x06
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8a 36       	cpi	r24, 0x6A	; 106
    1ba4:	31 f4       	brne	.+12     	; 0x1bb2 <Emergency+0x86>
		beep(1);
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <beep>
		eflag=1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	80 93 a1 01 	sts	0x01A1, r24
		}
	if(*(emergency->read.buf)==0x55){
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	05 80       	ldd	r0, Z+5	; 0x05
    1bb8:	f6 81       	ldd	r31, Z+6	; 0x06
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	85 35       	cpi	r24, 0x55	; 85
    1bc0:	d9 f4       	brne	.+54     	; 0x1bf8 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1bc2:	a0 e6       	ldi	r26, 0x60	; 96
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e0 e6       	ldi	r30, 0x60	; 96
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 60       	ori	r24, 0x08	; 8
    1bce:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1bd0:	a0 e6       	ldi	r26, 0x60	; 96
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e0 e6       	ldi	r30, 0x60	; 96
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 7b       	andi	r24, 0xBF	; 191
    1bdc:	8c 93       	st	X, r24
		wdt_reset();
    1bde:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1be0:	88 e1       	ldi	r24, 0x18	; 24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	28 e0       	ldi	r18, 0x08	; 8
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	a8 95       	wdr
    1bec:	80 93 60 00 	sts	0x0060, r24
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	20 93 60 00 	sts	0x0060, r18
    1bf6:	ff cf       	rjmp	.-2      	; 0x1bf6 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <EmergencyStatus>:

bool EmergencyStatus()
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	0f 92       	push	r0
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1c12:	80 91 a1 01 	lds	r24, 0x01A1
    1c16:	88 23       	and	r24, r24
    1c18:	11 f0       	breq	.+4      	; 0x1c1e <EmergencyStatus+0x16>
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <EmergencyStatus+0x1a>
	else return 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <__divmodhi4>:
    1c2c:	97 fb       	bst	r25, 7
    1c2e:	09 2e       	mov	r0, r25
    1c30:	07 26       	eor	r0, r23
    1c32:	0a d0       	rcall	.+20     	; 0x1c48 <__divmodhi4_neg1>
    1c34:	77 fd       	sbrc	r23, 7
    1c36:	04 d0       	rcall	.+8      	; 0x1c40 <__divmodhi4_neg2>
    1c38:	0c d0       	rcall	.+24     	; 0x1c52 <__udivmodhi4>
    1c3a:	06 d0       	rcall	.+12     	; 0x1c48 <__divmodhi4_neg1>
    1c3c:	00 20       	and	r0, r0
    1c3e:	1a f4       	brpl	.+6      	; 0x1c46 <__divmodhi4_exit>

00001c40 <__divmodhi4_neg2>:
    1c40:	70 95       	com	r23
    1c42:	61 95       	neg	r22
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255

00001c46 <__divmodhi4_exit>:
    1c46:	08 95       	ret

00001c48 <__divmodhi4_neg1>:
    1c48:	f6 f7       	brtc	.-4      	; 0x1c46 <__divmodhi4_exit>
    1c4a:	90 95       	com	r25
    1c4c:	81 95       	neg	r24
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	08 95       	ret

00001c52 <__udivmodhi4>:
    1c52:	aa 1b       	sub	r26, r26
    1c54:	bb 1b       	sub	r27, r27
    1c56:	51 e1       	ldi	r21, 0x11	; 17
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <__udivmodhi4_ep>

00001c5a <__udivmodhi4_loop>:
    1c5a:	aa 1f       	adc	r26, r26
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	a6 17       	cp	r26, r22
    1c60:	b7 07       	cpc	r27, r23
    1c62:	10 f0       	brcs	.+4      	; 0x1c68 <__udivmodhi4_ep>
    1c64:	a6 1b       	sub	r26, r22
    1c66:	b7 0b       	sbc	r27, r23

00001c68 <__udivmodhi4_ep>:
    1c68:	88 1f       	adc	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	5a 95       	dec	r21
    1c6e:	a9 f7       	brne	.-22     	; 0x1c5a <__udivmodhi4_loop>
    1c70:	80 95       	com	r24
    1c72:	90 95       	com	r25
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	08 95       	ret

00001c7a <_exit>:
    1c7a:	f8 94       	cli

00001c7c <__stop_program>:
    1c7c:	ff cf       	rjmp	.-2      	; 0x1c7c <__stop_program>
