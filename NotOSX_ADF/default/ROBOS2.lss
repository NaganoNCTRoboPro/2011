
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001b66  00001bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800134  00800134  00001c2e  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000341  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001512  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  00003601  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014fb  00000000  00000000  00003f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  0000549c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000579  00000000  00000000  000057dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_20>
      54:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_28>
      74:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 33       	cpi	r26, 0x34	; 52
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e3       	ldi	r26, 0x34	; 52
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 39       	cpi	r26, 0x9D	; 157
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ea 97       	sbiw	r28, 0x3a	; 58
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e6:	8c e0       	ldi	r24, 0x0C	; 12
      e8:	fe 01       	movw	r30, r28
      ea:	3e 96       	adiw	r30, 0x0e	; 14
      ec:	df 01       	movw	r26, r30
      ee:	98 2f       	mov	r25, r24
      f0:	1d 92       	st	X+, r1
      f2:	9a 95       	dec	r25
      f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x22>
	unsigned char action,uAction,dAction,e_flag, AirPort;
	int8_t uDuty;
	int16_t dDuty,count;

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	8a 8f       	std	Y+26, r24	; 0x1a
      fa:	ce 01       	movw	r24, r28
      fc:	0e 96       	adiw	r24, 0x0e	; 14
      fe:	9c 8f       	std	Y+28, r25	; 0x1c
     100:	8b 8f       	std	Y+27, r24	; 0x1b
     102:	84 e0       	ldi	r24, 0x04	; 4
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	9e 8f       	std	Y+30, r25	; 0x1e
     108:	8d 8f       	std	Y+29, r24	; 0x1d
     10a:	ce 01       	movw	r24, r28
     10c:	0e 96       	adiw	r24, 0x0e	; 14
     10e:	04 96       	adiw	r24, 0x04	; 4
     110:	98 a3       	std	Y+32, r25	; 0x20
     112:	8f 8f       	std	Y+31, r24	; 0x1f
     114:	84 e0       	ldi	r24, 0x04	; 4
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9a a3       	std	Y+34, r25	; 0x22
     11a:	89 a3       	std	Y+33, r24	; 0x21
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     11c:	80 e4       	ldi	r24, 0x40	; 64
     11e:	8b a3       	std	Y+35, r24	; 0x23
     120:	ce 01       	movw	r24, r28
     122:	0e 96       	adiw	r24, 0x0e	; 14
     124:	08 96       	adiw	r24, 0x08	; 8
     126:	9d a3       	std	Y+37, r25	; 0x25
     128:	8c a3       	std	Y+36, r24	; 0x24
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	9f a3       	std	Y+39, r25	; 0x27
     130:	8e a3       	std	Y+38, r24	; 0x26
     132:	ce 01       	movw	r24, r28
     134:	0e 96       	adiw	r24, 0x0e	; 14
     136:	09 96       	adiw	r24, 0x09	; 9
     138:	99 a7       	std	Y+41, r25	; 0x29
     13a:	88 a7       	std	Y+40, r24	; 0x28
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	9b a7       	std	Y+43, r25	; 0x2b
     142:	8a a7       	std	Y+42, r24	; 0x2a
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     144:	80 e1       	ldi	r24, 0x10	; 16
     146:	8c a7       	std	Y+44, r24	; 0x2c
     148:	ce 01       	movw	r24, r28
     14a:	0e 96       	adiw	r24, 0x0e	; 14
     14c:	0a 96       	adiw	r24, 0x0a	; 10
     14e:	9e a7       	std	Y+46, r25	; 0x2e
     150:	8d a7       	std	Y+45, r24	; 0x2d
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	98 ab       	std	Y+48, r25	; 0x30
     158:	8f a7       	std	Y+47, r24	; 0x2f
     15a:	ce 01       	movw	r24, r28
     15c:	0e 96       	adiw	r24, 0x0e	; 14
     15e:	0b 96       	adiw	r24, 0x0b	; 11
     160:	9a ab       	std	Y+50, r25	; 0x32
     162:	89 ab       	std	Y+49, r24	; 0x31
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9c ab       	std	Y+52, r25	; 0x34
     16a:	8b ab       	std	Y+51, r24	; 0x33

	/*この辺にi2c関連の初期化をすればいいと思う*/

	bool i2cStatus;

	TCCR2A = 0;
     16c:	e0 eb       	ldi	r30, 0xB0	; 176
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	10 82       	st	Z, r1
	TCCR2B = 1;
     172:	e1 eb       	ldi	r30, 0xB1	; 177
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
/*---------------------------------------------------------------*/
// 						書きかえちゃダメよ！
/*---------------------------------------------------------------*/
	LEDInit();
     17a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LEDInit>
	SwitchInit();
     17e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <SwitchInit>
	BeepInit();
     182:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <BeepInit>
	DDRC |= 0x04;
     186:	a7 e2       	ldi	r26, 0x27	; 39
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e7 e2       	ldi	r30, 0x27	; 39
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	84 60       	ori	r24, 0x04	; 4
     192:	8c 93       	st	X, r24
	PORTC = 0x04;
     194:	e8 e2       	ldi	r30, 0x28	; 40
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	84 e0       	ldi	r24, 0x04	; 4
     19a:	80 83       	st	Z, r24
	
		
	initI2CMaster(100);
     19c:	84 e6       	ldi	r24, 0x64	; 100
     19e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <initI2CMaster>

	wdt_reset();
     1a2:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1a4:	88 e1       	ldi	r24, 0x18	; 24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	2d e0       	ldi	r18, 0x0D	; 13
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	a8 95       	wdr
     1b0:	80 93 60 00 	sts	0x0060, r24
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	68 e0       	ldi	r22, 0x08	; 8
     1c0:	4a e0       	ldi	r20, 0x0A	; 10
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	0e 94 86 05 	call	0xb0c	; 0xb0c <uart_init>
	uart_setbuffer(0,buf,36);
     1c8:	24 e3       	ldi	r18, 0x34	; 52
     1ca:	31 e0       	ldi	r19, 0x01	; 1
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	b9 01       	movw	r22, r18
     1d2:	44 e2       	ldi	r20, 0x24	; 36
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	0e 94 19 06 	call	0xc32	; 0xc32 <uart_setbuffer>
	wait_ms(100);
     1da:	84 e6       	ldi	r24, 0x64	; 100
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 a0 0b 	call	0x1740	; 0x1740 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	68 e1       	ldi	r22, 0x18	; 24
     1e8:	40 e4       	ldi	r20, 0x40	; 64
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <uart_init>
	mu2_command("EI","08");
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	23 e0       	ldi	r18, 0x03	; 3
     1f6:	31 e0       	ldi	r19, 0x01	; 1
     1f8:	b9 01       	movw	r22, r18
     1fa:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mu2_command>
	mu2_command("DI","80");
     1fe:	86 e0       	ldi	r24, 0x06	; 6
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	29 e0       	ldi	r18, 0x09	; 9
     204:	31 e0       	ldi	r19, 0x01	; 1
     206:	b9 01       	movw	r22, r18
     208:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mu2_command>
	mu2_command("GI","04");
     20c:	8c e0       	ldi	r24, 0x0C	; 12
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	2f e0       	ldi	r18, 0x0F	; 15
     212:	31 e0       	ldi	r19, 0x01	; 1
     214:	b9 01       	movw	r22, r18
     216:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mu2_command>
	mu2_command("CH","2E");
     21a:	82 e1       	ldi	r24, 0x12	; 18
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	25 e1       	ldi	r18, 0x15	; 21
     220:	31 e0       	ldi	r19, 0x01	; 1
     222:	b9 01       	movw	r22, r18
     224:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mu2_command>
	mu2_command("BR","48");
     228:	88 e1       	ldi	r24, 0x18	; 24
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	2b e1       	ldi	r18, 0x1B	; 27
     22e:	31 e0       	ldi	r19, 0x01	; 1
     230:	b9 01       	movw	r22, r18
     232:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	60 e9       	ldi	r22, 0x90	; 144
     23c:	43 e0       	ldi	r20, 0x03	; 3
     23e:	51 e0       	ldi	r21, 0x01	; 1
     240:	0e 94 86 05 	call	0xb0c	; 0xb0c <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
	sei();
     25c:	78 94       	sei
	wait_ms(500);
     25e:	84 ef       	ldi	r24, 0xF4	; 244
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 a0 0b 	call	0x1740	; 0x1740 <wait_ms>
	PORTC &= 0xFB;
     266:	a8 e2       	ldi	r26, 0x28	; 40
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e8 e2       	ldi	r30, 0x28	; 40
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8b 7f       	andi	r24, 0xFB	; 251
     272:	8c 93       	st	X, r24
	wait_ms(25);
     274:	89 e1       	ldi	r24, 0x19	; 25
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 a0 0b 	call	0x1740	; 0x1740 <wait_ms>

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     27c:	0e 94 8d 03 	call	0x71a	; 0x71a <Toggle_RC_Rx_Buffer>
     280:	9d 87       	std	Y+13, r25	; 0x0d
     282:	8c 87       	std	Y+12, r24	; 0x0c
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     284:	ec 85       	ldd	r30, Y+12	; 0x0c
     286:	fd 85       	ldd	r31, Y+13	; 0x0d
     288:	81 81       	ldd	r24, Z+1	; 0x01
     28a:	82 70       	andi	r24, 0x02	; 2
     28c:	88 23       	and	r24, r24
     28e:	09 f4       	brne	.+2      	; 0x292 <main+0x1c4>
     290:	9a c0       	rjmp	.+308    	; 0x3c6 <main+0x2f8>
     292:	ec 85       	ldd	r30, Y+12	; 0x0c
     294:	fd 85       	ldd	r31, Y+13	; 0x0d
     296:	80 81       	ld	r24, Z
     298:	81 70       	andi	r24, 0x01	; 1
     29a:	88 23       	and	r24, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <main+0x1d2>
     29e:	93 c0       	rjmp	.+294    	; 0x3c6 <main+0x2f8>
     2a0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2a2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2a4:	80 81       	ld	r24, Z
     2a6:	80 71       	andi	r24, 0x10	; 16
     2a8:	88 23       	and	r24, r24
     2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0x1e0>
     2ac:	8c c0       	rjmp	.+280    	; 0x3c6 <main+0x2f8>
     2ae:	ec 85       	ldd	r30, Y+12	; 0x0c
     2b0:	fd 85       	ldd	r31, Y+13	; 0x0d
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	8d 30       	cpi	r24, 0x0D	; 13
     2bc:	91 05       	cpc	r25, r1
     2be:	0c f4       	brge	.+2      	; 0x2c2 <main+0x1f4>
     2c0:	82 c0       	rjmp	.+260    	; 0x3c6 <main+0x2f8>
     2c2:	ec 85       	ldd	r30, Y+12	; 0x0c
     2c4:	fd 85       	ldd	r31, Y+13	; 0x0d
     2c6:	83 81       	ldd	r24, Z+3	; 0x03
     2c8:	8f 70       	andi	r24, 0x0F	; 15
     2ca:	88 2f       	mov	r24, r24
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	8d 30       	cpi	r24, 0x0D	; 13
     2d0:	91 05       	cpc	r25, r1
     2d2:	0c f4       	brge	.+2      	; 0x2d6 <main+0x208>
     2d4:	78 c0       	rjmp	.+240    	; 0x3c6 <main+0x2f8>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	68 e1       	ldi	r22, 0x18	; 24
     2f4:	43 e0       	ldi	r20, 0x03	; 3
     2f6:	51 e0       	ldi	r21, 0x01	; 1
     2f8:	0e 94 86 05 	call	0xb0c	; 0xb0c <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	23 e0       	ldi	r18, 0x03	; 3
     302:	31 e0       	ldi	r19, 0x01	; 1
     304:	b9 01       	movw	r22, r18
     306:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mu2_command_eeprom>
     30a:	8d ab       	std	Y+53, r24	; 0x35
     30c:	ad a9       	ldd	r26, Y+53	; 0x35
     30e:	aa 23       	and	r26, r26
     310:	11 f0       	breq	.+4      	; 0x316 <main+0x248>
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	bd ab       	std	Y+53, r27	; 0x35
     316:	9d a9       	ldd	r25, Y+53	; 0x35
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	69 2f       	mov	r22, r25
     31c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	29 e0       	ldi	r18, 0x09	; 9
     326:	31 e0       	ldi	r19, 0x01	; 1
     328:	b9 01       	movw	r22, r18
     32a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mu2_command_eeprom>
     32e:	8e ab       	std	Y+54, r24	; 0x36
     330:	8e a9       	ldd	r24, Y+54	; 0x36
     332:	88 23       	and	r24, r24
     334:	11 f0       	breq	.+4      	; 0x33a <main+0x26c>
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9e ab       	std	Y+54, r25	; 0x36
     33a:	9e a9       	ldd	r25, Y+54	; 0x36
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	69 2f       	mov	r22, r25
     340:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     344:	8c e0       	ldi	r24, 0x0C	; 12
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	2f e0       	ldi	r18, 0x0F	; 15
     34a:	31 e0       	ldi	r19, 0x01	; 1
     34c:	b9 01       	movw	r22, r18
     34e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mu2_command_eeprom>
     352:	8f ab       	std	Y+55, r24	; 0x37
     354:	af a9       	ldd	r26, Y+55	; 0x37
     356:	aa 23       	and	r26, r26
     358:	11 f0       	breq	.+4      	; 0x35e <main+0x290>
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	bf ab       	std	Y+55, r27	; 0x37
     35e:	9f a9       	ldd	r25, Y+55	; 0x37
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	69 2f       	mov	r22, r25
     364:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     368:	82 e1       	ldi	r24, 0x12	; 18
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	25 e1       	ldi	r18, 0x15	; 21
     36e:	31 e0       	ldi	r19, 0x01	; 1
     370:	b9 01       	movw	r22, r18
     372:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mu2_command_eeprom>
     376:	88 af       	std	Y+56, r24	; 0x38
     378:	88 ad       	ldd	r24, Y+56	; 0x38
     37a:	88 23       	and	r24, r24
     37c:	11 f0       	breq	.+4      	; 0x382 <main+0x2b4>
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	98 af       	std	Y+56, r25	; 0x38
     382:	98 ad       	ldd	r25, Y+56	; 0x38
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	69 2f       	mov	r22, r25
     388:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     38c:	88 e1       	ldi	r24, 0x18	; 24
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	2b e1       	ldi	r18, 0x1B	; 27
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	b9 01       	movw	r22, r18
     396:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mu2_command_eeprom>
     39a:	89 af       	std	Y+57, r24	; 0x39
     39c:	a9 ad       	ldd	r26, Y+57	; 0x39
     39e:	aa 23       	and	r26, r26
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <main+0x2d8>
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	b9 af       	std	Y+57, r27	; 0x39
     3a6:	99 ad       	ldd	r25, Y+57	; 0x39
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	69 2f       	mov	r22, r25
     3ac:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				wait_ms(100);
     3b0:	84 e6       	ldi	r24, 0x64	; 100
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	60 e9       	ldi	r22, 0x90	; 144
     3be:	43 e0       	ldi	r20, 0x03	; 3
     3c0:	51 e0       	ldi	r21, 0x01	; 1
     3c2:	0e 94 86 05 	call	0xb0c	; 0xb0c <uart_init>
			}
/*-------------------------------------------------------------------------*/
		if(controller->detail.Button.X&&count<70){
     3c6:	ec 85       	ldd	r30, Y+12	; 0x0c
     3c8:	fd 85       	ldd	r31, Y+13	; 0x0d
     3ca:	80 81       	ld	r24, Z
     3cc:	81 70       	andi	r24, 0x01	; 1
     3ce:	88 23       	and	r24, r24
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <main+0x306>
     3d2:	46 c0       	rjmp	.+140    	; 0x460 <main+0x392>
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	9b 81       	ldd	r25, Y+3	; 0x03
     3d8:	86 34       	cpi	r24, 0x46	; 70
     3da:	91 05       	cpc	r25, r1
     3dc:	0c f0       	brlt	.+2      	; 0x3e0 <main+0x312>
     3de:	40 c0       	rjmp	.+128    	; 0x460 <main+0x392>
			uDuty = dDuty = 100;
     3e0:	84 e6       	ldi	r24, 0x64	; 100
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9d 83       	std	Y+5, r25	; 0x05
     3e6:	8c 83       	std	Y+4, r24	; 0x04
     3e8:	84 e6       	ldi	r24, 0x64	; 100
     3ea:	8e 83       	std	Y+6, r24	; 0x06
			count++;
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	9b 81       	ldd	r25, Y+3	; 0x03
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	9b 83       	std	Y+3, r25	; 0x03
     3f4:	8a 83       	std	Y+2, r24	; 0x02
			dDuty -= count*6;
     3f6:	2a 81       	ldd	r18, Y+2	; 0x02
     3f8:	3b 81       	ldd	r19, Y+3	; 0x03
     3fa:	c9 01       	movw	r24, r18
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	22 27       	eor	r18, r18
     40a:	33 27       	eor	r19, r19
     40c:	28 1b       	sub	r18, r24
     40e:	39 0b       	sbc	r19, r25
     410:	8c 81       	ldd	r24, Y+4	; 0x04
     412:	9d 81       	ldd	r25, Y+5	; 0x05
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	9d 83       	std	Y+5, r25	; 0x05
     41a:	8c 83       	std	Y+4, r24	; 0x04
			mDrive(&Motor,CCW,uDuty,0);	//BLUE
     41c:	ce 01       	movw	r24, r28
     41e:	4a 96       	adiw	r24, 0x1a	; 26
     420:	62 e0       	ldi	r22, 0x02	; 2
     422:	4e 81       	ldd	r20, Y+6	; 0x06
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	0e 94 c2 0b 	call	0x1784	; 0x1784 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     42a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     42c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     42e:	dc 01       	movw	r26, r24
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	eb 8d       	ldd	r30, Y+27	; 0x1b
     434:	fc 8d       	ldd	r31, Y+28	; 0x1c
     436:	80 81       	ld	r24, Z
     438:	8c 93       	st	X, r24
			mDrive(&Motor,CW,(int8_t)dDuty,2);	//ORANGE
     43a:	2c 81       	ldd	r18, Y+4	; 0x04
     43c:	ce 01       	movw	r24, r28
     43e:	4a 96       	adiw	r24, 0x1a	; 26
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	42 2f       	mov	r20, r18
     444:	22 e0       	ldi	r18, 0x02	; 2
     446:	0e 94 c2 0b 	call	0x1784	; 0x1784 <mDrive>
			Motor.write.buf[3] = Motor.write.buf[2];
     44a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     44c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     44e:	dc 01       	movw	r26, r24
     450:	13 96       	adiw	r26, 0x03	; 3
     452:	8b 8d       	ldd	r24, Y+27	; 0x1b
     454:	9c 8d       	ldd	r25, Y+28	; 0x1c
     456:	fc 01       	movw	r30, r24
     458:	32 96       	adiw	r30, 0x02	; 2
     45a:	80 81       	ld	r24, Z
     45c:	8c 93       	st	X, r24
     45e:	bb c0       	rjmp	.+374    	; 0x5d6 <main+0x508>
			

		/*ここにプログラムを記述するとよろしいのではないのかと思われます*/

		
			if(	controller->detail.AnalogR.Y<0x05	||
     460:	ec 85       	ldd	r30, Y+12	; 0x0c
     462:	fd 85       	ldd	r31, Y+13	; 0x0d
     464:	83 81       	ldd	r24, Z+3	; 0x03
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	85 30       	cpi	r24, 0x05	; 5
     46e:	91 05       	cpc	r25, r1
     470:	4c f0       	brlt	.+18     	; 0x484 <main+0x3b6>
     472:	ec 85       	ldd	r30, Y+12	; 0x0c
     474:	fd 85       	ldd	r31, Y+13	; 0x0d
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	85 30       	cpi	r24, 0x05	; 5
     480:	91 05       	cpc	r25, r1
     482:	34 f4       	brge	.+12     	; 0x490 <main+0x3c2>
				controller->detail.AnalogL.Y<0x05	)
				{
					uDuty = 0;
     484:	1e 82       	std	Y+6, r1	; 0x06
					dDuty = 100;
     486:	84 e6       	ldi	r24, 0x64	; 100
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9d 83       	std	Y+5, r25	; 0x05
     48c:	8c 83       	std	Y+4, r24	; 0x04
     48e:	2a c0       	rjmp	.+84     	; 0x4e4 <main+0x416>
				}
			else if(	controller->detail.AnalogR.Y>0x09	||
     490:	ec 85       	ldd	r30, Y+12	; 0x0c
     492:	fd 85       	ldd	r31, Y+13	; 0x0d
     494:	83 81       	ldd	r24, Z+3	; 0x03
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	8a 30       	cpi	r24, 0x0A	; 10
     49e:	91 05       	cpc	r25, r1
     4a0:	4c f4       	brge	.+18     	; 0x4b4 <main+0x3e6>
     4a2:	ec 85       	ldd	r30, Y+12	; 0x0c
     4a4:	fd 85       	ldd	r31, Y+13	; 0x0d
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	8f 70       	andi	r24, 0x0F	; 15
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	8a 30       	cpi	r24, 0x0A	; 10
     4b0:	91 05       	cpc	r25, r1
     4b2:	2c f0       	brlt	.+10     	; 0x4be <main+0x3f0>
						controller->detail.AnalogL.Y>0x09	)
				{
					uDuty = 100;
     4b4:	84 e6       	ldi	r24, 0x64	; 100
     4b6:	8e 83       	std	Y+6, r24	; 0x06
					dDuty = 0;
     4b8:	1d 82       	std	Y+5, r1	; 0x05
     4ba:	1c 82       	std	Y+4, r1	; 0x04
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <main+0x416>
				}
			else if(controller->detail.Button.B)
     4be:	ec 85       	ldd	r30, Y+12	; 0x0c
     4c0:	fd 85       	ldd	r31, Y+13	; 0x0d
     4c2:	80 81       	ld	r24, Z
     4c4:	84 70       	andi	r24, 0x04	; 4
     4c6:	88 23       	and	r24, r24
     4c8:	39 f0       	breq	.+14     	; 0x4d8 <main+0x40a>
				{
					uDuty = dDuty = 50;
     4ca:	82 e3       	ldi	r24, 0x32	; 50
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9d 83       	std	Y+5, r25	; 0x05
     4d0:	8c 83       	std	Y+4, r24	; 0x04
     4d2:	82 e3       	ldi	r24, 0x32	; 50
     4d4:	8e 83       	std	Y+6, r24	; 0x06
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <main+0x416>
				}
			else
				{
					uDuty = dDuty = 100;
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	9d 83       	std	Y+5, r25	; 0x05
     4de:	8c 83       	std	Y+4, r24	; 0x04
     4e0:	84 e6       	ldi	r24, 0x64	; 100
     4e2:	8e 83       	std	Y+6, r24	; 0x06
				}
		
			if(	controller->detail.Button.L			||
     4e4:	ec 85       	ldd	r30, Y+12	; 0x0c
     4e6:	fd 85       	ldd	r31, Y+13	; 0x0d
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	80 72       	andi	r24, 0x20	; 32
     4ec:	88 23       	and	r24, r24
     4ee:	a1 f4       	brne	.+40     	; 0x518 <main+0x44a>
     4f0:	ec 85       	ldd	r30, Y+12	; 0x0c
     4f2:	fd 85       	ldd	r31, Y+13	; 0x0d
     4f4:	83 81       	ldd	r24, Z+3	; 0x03
     4f6:	82 95       	swap	r24
     4f8:	8f 70       	andi	r24, 0x0F	; 15
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	85 30       	cpi	r24, 0x05	; 5
     500:	91 05       	cpc	r25, r1
     502:	54 f0       	brlt	.+20     	; 0x518 <main+0x44a>
     504:	ec 85       	ldd	r30, Y+12	; 0x0c
     506:	fd 85       	ldd	r31, Y+13	; 0x0d
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	82 95       	swap	r24
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	85 30       	cpi	r24, 0x05	; 5
     514:	91 05       	cpc	r25, r1
     516:	2c f4       	brge	.+10     	; 0x522 <main+0x454>
				controller->detail.AnalogR.X<0x05	||
				controller->detail.AnalogL.X<0x05	)
				{
					uAction=CW;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CCW;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	89 87       	std	Y+9, r24	; 0x09
     520:	39 c0       	rjmp	.+114    	; 0x594 <main+0x4c6>
				}
			else if( 	controller->detail.Button.R			||
     522:	ec 85       	ldd	r30, Y+12	; 0x0c
     524:	fd 85       	ldd	r31, Y+13	; 0x0d
     526:	81 81       	ldd	r24, Z+1	; 0x01
     528:	80 74       	andi	r24, 0x40	; 64
     52a:	88 23       	and	r24, r24
     52c:	a1 f4       	brne	.+40     	; 0x556 <main+0x488>
     52e:	ec 85       	ldd	r30, Y+12	; 0x0c
     530:	fd 85       	ldd	r31, Y+13	; 0x0d
     532:	83 81       	ldd	r24, Z+3	; 0x03
     534:	82 95       	swap	r24
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	8a 30       	cpi	r24, 0x0A	; 10
     53e:	91 05       	cpc	r25, r1
     540:	54 f4       	brge	.+20     	; 0x556 <main+0x488>
     542:	ec 85       	ldd	r30, Y+12	; 0x0c
     544:	fd 85       	ldd	r31, Y+13	; 0x0d
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	82 95       	swap	r24
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	8a 30       	cpi	r24, 0x0A	; 10
     552:	91 05       	cpc	r25, r1
     554:	2c f0       	brlt	.+10     	; 0x560 <main+0x492>
						controller->detail.AnalogR.X>0x09	||
						controller->detail.AnalogL.X>0x09	)
				{
					uAction=CCW;
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CW;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	89 87       	std	Y+9, r24	; 0x09
     55e:	1a c0       	rjmp	.+52     	; 0x594 <main+0x4c6>
				}
			else if(controller->detail.Button.LEFT)
     560:	ec 85       	ldd	r30, Y+12	; 0x0c
     562:	fd 85       	ldd	r31, Y+13	; 0x0d
     564:	80 81       	ld	r24, Z
     566:	80 78       	andi	r24, 0x80	; 128
     568:	88 23       	and	r24, r24
     56a:	29 f0       	breq	.+10     	; 0x576 <main+0x4a8>
				{
					uAction = dAction = CW;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	89 87       	std	Y+9, r24	; 0x09
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	8a 87       	std	Y+10, r24	; 0x0a
     574:	0f c0       	rjmp	.+30     	; 0x594 <main+0x4c6>
				}
			else if(controller->detail.Button.RIGHT)
     576:	ec 85       	ldd	r30, Y+12	; 0x0c
     578:	fd 85       	ldd	r31, Y+13	; 0x0d
     57a:	80 81       	ld	r24, Z
     57c:	80 72       	andi	r24, 0x20	; 32
     57e:	88 23       	and	r24, r24
     580:	29 f0       	breq	.+10     	; 0x58c <main+0x4be>
				{
					uAction = dAction = CCW;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	89 87       	std	Y+9, r24	; 0x09
     586:	89 85       	ldd	r24, Y+9	; 0x09
     588:	8a 87       	std	Y+10, r24	; 0x0a
     58a:	04 c0       	rjmp	.+8      	; 0x594 <main+0x4c6>
				}
			else
				{
					uAction = dAction = BRAKE;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	89 87       	std	Y+9, r24	; 0x09
     590:	89 85       	ldd	r24, Y+9	; 0x09
     592:	8a 87       	std	Y+10, r24	; 0x0a
				}

			mDrive(&Motor,uAction,uDuty,0);	//BLUE
     594:	ce 01       	movw	r24, r28
     596:	4a 96       	adiw	r24, 0x1a	; 26
     598:	6a 85       	ldd	r22, Y+10	; 0x0a
     59a:	4e 81       	ldd	r20, Y+6	; 0x06
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     5a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5a6:	dc 01       	movw	r26, r24
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5ae:	80 81       	ld	r24, Z
     5b0:	8c 93       	st	X, r24
			mDrive(&Motor,dAction,dDuty,2);	//ORANGE
     5b2:	2c 81       	ldd	r18, Y+4	; 0x04
     5b4:	ce 01       	movw	r24, r28
     5b6:	4a 96       	adiw	r24, 0x1a	; 26
     5b8:	69 85       	ldd	r22, Y+9	; 0x09
     5ba:	42 2f       	mov	r20, r18
     5bc:	22 e0       	ldi	r18, 0x02	; 2
     5be:	0e 94 c2 0b 	call	0x1784	; 0x1784 <mDrive>
			Motor.write.buf[3] = Motor.write.buf[2];
     5c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5c6:	dc 01       	movw	r26, r24
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ce:	fc 01       	movw	r30, r24
     5d0:	32 96       	adiw	r30, 0x02	; 2
     5d2:	80 81       	ld	r24, Z
     5d4:	8c 93       	st	X, r24
		}
/*-------------------------------------------------------------------------------------------------------------------------*/
		action = FREE;
     5d6:	1b 86       	std	Y+11, r1	; 0x0b
		if(controller->detail.Button.Y)
     5d8:	ec 85       	ldd	r30, Y+12	; 0x0c
     5da:	fd 85       	ldd	r31, Y+13	; 0x0d
     5dc:	80 81       	ld	r24, Z
     5de:	88 70       	andi	r24, 0x08	; 8
     5e0:	88 23       	and	r24, r24
     5e2:	29 f0       	breq	.+10     	; 0x5ee <main+0x520>
			{
				action = CW;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x03;
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	8f 83       	std	Y+7, r24	; 0x07
     5ec:	15 c0       	rjmp	.+42     	; 0x618 <main+0x54a>
			}
		else if(controller->detail.Button.ZL)
     5ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     5f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     5f2:	81 81       	ldd	r24, Z+1	; 0x01
     5f4:	88 70       	andi	r24, 0x08	; 8
     5f6:	88 23       	and	r24, r24
     5f8:	29 f0       	breq	.+10     	; 0x604 <main+0x536>
			{
				action = CW;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x01;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8f 83       	std	Y+7, r24	; 0x07
     602:	0a c0       	rjmp	.+20     	; 0x618 <main+0x54a>
			}
		else if(controller->detail.Button.ZR)
     604:	ec 85       	ldd	r30, Y+12	; 0x0c
     606:	fd 85       	ldd	r31, Y+13	; 0x0d
     608:	81 81       	ldd	r24, Z+1	; 0x01
     60a:	80 71       	andi	r24, 0x10	; 16
     60c:	88 23       	and	r24, r24
     60e:	21 f0       	breq	.+8      	; 0x618 <main+0x54a>
			{
				action = CW;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x02;
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	8f 83       	std	Y+7, r24	; 0x07
			}
		aDrive(&Air,AirPort,action);
     618:	8b 85       	ldd	r24, Y+11	; 0x0b
     61a:	8a af       	std	Y+58, r24	; 0x3a
     61c:	9a ad       	ldd	r25, Y+58	; 0x3a
     61e:	99 23       	and	r25, r25
     620:	11 f0       	breq	.+4      	; 0x626 <main+0x558>
     622:	a1 e0       	ldi	r26, 0x01	; 1
     624:	aa af       	std	Y+58, r26	; 0x3a
     626:	2a ad       	ldd	r18, Y+58	; 0x3a
     628:	ce 01       	movw	r24, r28
     62a:	83 96       	adiw	r24, 0x23	; 35
     62c:	6f 81       	ldd	r22, Y+7	; 0x07
     62e:	42 2f       	mov	r20, r18
     630:	0e 94 38 0c 	call	0x1870	; 0x1870 <aDrive>
/*-------------------------------------------------------------------------------------------------------------------------*/
		/*バルスモード*/
		/*バルス!!!!!*/
		if(controller->detail.Button.A||(controller->detail.Button.SELECT&&controller->detail.Button.START)) e_flag=E_ON;
     634:	ec 85       	ldd	r30, Y+12	; 0x0c
     636:	fd 85       	ldd	r31, Y+13	; 0x0d
     638:	80 81       	ld	r24, Z
     63a:	82 70       	andi	r24, 0x02	; 2
     63c:	88 23       	and	r24, r24
     63e:	61 f4       	brne	.+24     	; 0x658 <main+0x58a>
     640:	ec 85       	ldd	r30, Y+12	; 0x0c
     642:	fd 85       	ldd	r31, Y+13	; 0x0d
     644:	81 81       	ldd	r24, Z+1	; 0x01
     646:	81 70       	andi	r24, 0x01	; 1
     648:	88 23       	and	r24, r24
     64a:	49 f0       	breq	.+18     	; 0x65e <main+0x590>
     64c:	ec 85       	ldd	r30, Y+12	; 0x0c
     64e:	fd 85       	ldd	r31, Y+13	; 0x0d
     650:	81 81       	ldd	r24, Z+1	; 0x01
     652:	84 70       	andi	r24, 0x04	; 4
     654:	88 23       	and	r24, r24
     656:	19 f0       	breq	.+6      	; 0x65e <main+0x590>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	88 87       	std	Y+8, r24	; 0x08
     65c:	0a c0       	rjmp	.+20     	; 0x672 <main+0x5a4>
		/*復活!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     65e:	ec 85       	ldd	r30, Y+12	; 0x0c
     660:	fd 85       	ldd	r31, Y+13	; 0x0d
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	82 70       	andi	r24, 0x02	; 2
     666:	88 23       	and	r24, r24
     668:	19 f0       	breq	.+6      	; 0x670 <main+0x5a2>
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	88 87       	std	Y+8, r24	; 0x08
     66e:	01 c0       	rjmp	.+2      	; 0x672 <main+0x5a4>
		else e_flag=E_KEEP;	
     670:	18 86       	std	Y+8, r1	; 0x08

		i2cStatus = true;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	08 2f       	mov	r16, r24
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	28 85       	ldd	r18, Y+8	; 0x08
     67e:	ce 01       	movw	r24, r28
     680:	8c 96       	adiw	r24, 0x2c	; 44
     682:	62 2f       	mov	r22, r18
     684:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <Emergency>
     688:	88 2f       	mov	r24, r24
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	80 23       	and	r24, r16
     68e:	91 23       	and	r25, r17
     690:	19 82       	std	Y+1, r1	; 0x01
     692:	00 97       	sbiw	r24, 0x00	; 0
     694:	11 f0       	breq	.+4      	; 0x69a <main+0x5cc>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(8);
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	08 2f       	mov	r16, r24
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	ce 01       	movw	r24, r28
     6a2:	4a 96       	adiw	r24, 0x1a	; 26
     6a4:	0e 94 35 09 	call	0x126a	; 0x126a <i2cWrite>
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	80 23       	and	r24, r16
     6ae:	91 23       	and	r25, r17
     6b0:	19 82       	std	Y+1, r1	; 0x01
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	11 f0       	breq	.+4      	; 0x6ba <main+0x5ec>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	88 e0       	ldi	r24, 0x08	; 8
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 8a 0b 	call	0x1714	; 0x1714 <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(8);
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	08 2f       	mov	r16, r24
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	ce 01       	movw	r24, r28
     6ca:	83 96       	adiw	r24, 0x23	; 35
     6cc:	0e 94 35 09 	call	0x126a	; 0x126a <i2cWrite>
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 23       	and	r24, r16
     6d6:	91 23       	and	r25, r17
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	11 f0       	breq	.+4      	; 0x6e2 <main+0x614>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	08 2f       	mov	r16, r24
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	ce 01       	movw	r24, r28
     6f2:	8c 96       	adiw	r24, 0x2c	; 44
     6f4:	0e 94 35 09 	call	0x126a	; 0x126a <i2cWrite>
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	80 23       	and	r24, r16
     6fe:	91 23       	and	r25, r17
     700:	19 82       	std	Y+1, r1	; 0x01
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	11 f0       	breq	.+4      	; 0x70a <main+0x63c>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <i2cCheck>
		wait_ms(25);
     710:	89 e1       	ldi	r24, 0x19	; 25
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 a0 0b 	call	0x1740	; 0x1740 <wait_ms>
     718:	b1 cd       	rjmp	.-1182   	; 0x27c <main+0x1ae>

0000071a <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	cli();
     722:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     724:	10 92 58 01 	sts	0x0158, r1
     728:	15 c0       	rjmp	.+42     	; 0x754 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     72a:	80 91 58 01 	lds	r24, 0x0158
     72e:	28 2f       	mov	r18, r24
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	80 91 58 01 	lds	r24, 0x0158
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	e5 5a       	subi	r30, 0xA5	; 165
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	80 81       	ld	r24, Z
     742:	f9 01       	movw	r30, r18
     744:	e1 5a       	subi	r30, 0xA1	; 161
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     74a:	80 91 58 01 	lds	r24, 0x0158
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	80 93 58 01 	sts	0x0158, r24
     754:	80 91 58 01 	lds	r24, 0x0158
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	38 f3       	brcs	.-50     	; 0x72a <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     75c:	78 94       	sei
	return &keepCtrlData;
     75e:	8f e5       	ldi	r24, 0x5F	; 95
     760:	91 e0       	ldi	r25, 0x01	; 1
}
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <__vector_20>:


ISR(USART0_RX_vect)
{
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	00 90 5b 00 	lds	r0, 0x005B
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     798:	e6 ec       	ldi	r30, 0xC6	; 198
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 93 7b 01 	sts	0x017B, r24

	if(phase){
     7a2:	80 91 5a 01 	lds	r24, 0x015A
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__vector_20+0x44>
     7aa:	59 c0       	rjmp	.+178    	; 0x85e <__vector_20+0xf6>
		packet[cnt] = val;
     7ac:	80 91 59 01 	lds	r24, 0x0159
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	20 91 7b 01 	lds	r18, 0x017B
     7b8:	fc 01       	movw	r30, r24
     7ba:	ed 59       	subi	r30, 0x9D	; 157
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	20 83       	st	Z, r18
		uart1_putchar(packet[cnt]);
     7c0:	80 91 59 01 	lds	r24, 0x0159
     7c4:	88 2f       	mov	r24, r24
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	ed 59       	subi	r30, 0x9D	; 157
     7cc:	fe 4f       	sbci	r31, 0xFE	; 254
     7ce:	80 81       	ld	r24, Z
     7d0:	0e 94 82 06 	call	0xd04	; 0xd04 <uart1_putchar>
		if(cnt<2){
     7d4:	80 91 59 01 	lds	r24, 0x0159
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	c8 f4       	brcc	.+50     	; 0x80e <__vector_20+0xa6>
			if(val != check[cnt]){
     7dc:	80 91 59 01 	lds	r24, 0x0159
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	e2 5e       	subi	r30, 0xE2	; 226
     7e8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ea:	90 81       	ld	r25, Z
     7ec:	80 91 7b 01 	lds	r24, 0x017B
     7f0:	98 17       	cp	r25, r24
     7f2:	79 f1       	breq	.+94     	; 0x852 <__vector_20+0xea>
				phase = false;
     7f4:	10 92 5a 01 	sts	0x015A, r1
				uart1_putchar('@');
     7f8:	80 e4       	ldi	r24, 0x40	; 64
     7fa:	0e 94 82 06 	call	0xd04	; 0xd04 <uart1_putchar>
				LED(0,false);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
				beep(1);
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
     80c:	22 c0       	rjmp	.+68     	; 0x852 <__vector_20+0xea>
			}
		}else if(cnt==10){
     80e:	80 91 59 01 	lds	r24, 0x0159
     812:	8a 30       	cpi	r24, 0x0A	; 10
     814:	f1 f4       	brne	.+60     	; 0x852 <__vector_20+0xea>
			ctrlData.buf[0] = packet[5];
     816:	80 91 68 01 	lds	r24, 0x0168
     81a:	80 93 5b 01 	sts	0x015B, r24
			ctrlData.buf[1] = packet[6];
     81e:	80 91 69 01 	lds	r24, 0x0169
     822:	80 93 5c 01 	sts	0x015C, r24
			ctrlData.buf[2] = packet[7];
     826:	80 91 6a 01 	lds	r24, 0x016A
     82a:	80 93 5d 01 	sts	0x015D, r24
			ctrlData.buf[3] = packet[8];
     82e:	80 91 6b 01 	lds	r24, 0x016B
     832:	80 93 5e 01 	sts	0x015E, r24
			phase = false;
     836:	10 92 5a 01 	sts	0x015A, r1
			wdt_reset();
     83a:	a8 95       	wdr
			LED(0,true);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
			if(EmergencyStatus()) beep(0);
     844:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <EmergencyStatus>
     848:	88 23       	and	r24, r24
     84a:	19 f0       	breq	.+6      	; 0x852 <__vector_20+0xea>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
		}
		cnt++;
     852:	80 91 59 01 	lds	r24, 0x0159
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 59 01 	sts	0x0159, r24
     85c:	09 c0       	rjmp	.+18     	; 0x870 <__vector_20+0x108>
	}else{
		if(val=='*'){
     85e:	80 91 7b 01 	lds	r24, 0x017B
     862:	8a 32       	cpi	r24, 0x2A	; 42
     864:	29 f4       	brne	.+10     	; 0x870 <__vector_20+0x108>
		cnt = 0;
     866:	10 92 59 01 	sts	0x0159, r1
		phase = true;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 5a 01 	sts	0x015A, r24
		}
	}

}
     870:	cf 91       	pop	r28
     872:	df 91       	pop	r29
     874:	ff 91       	pop	r31
     876:	ef 91       	pop	r30
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	7f 91       	pop	r23
     882:	6f 91       	pop	r22
     884:	5f 91       	pop	r21
     886:	4f 91       	pop	r20
     888:	3f 91       	pop	r19
     88a:	2f 91       	pop	r18
     88c:	0f 90       	pop	r0
     88e:	00 92 5b 00 	sts	0x005B, r0
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <Byte2Str>:
/// バイト（0x00〜0xFF）の数を2桁の文字列に変換
/// </summary>
/// <param name="num">変換対象の数字</param>
/// <param name="str">変換後の文字列を格納する領域</param>
void Byte2Str(unsigned char num, char *str)
{
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <Byte2Str+0x6>
     8a2:	0f 92       	push	r0
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	7b 83       	std	Y+3, r23	; 0x03
     8ac:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	82 95       	swap	r24
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fc 01       	movw	r30, r24
     8ba:	ee 5d       	subi	r30, 0xDE	; 222
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	80 81       	ld	r24, Z
     8c0:	ea 81       	ldd	r30, Y+2	; 0x02
     8c2:	fb 81       	ldd	r31, Y+3	; 0x03
     8c4:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     8c6:	8a 81       	ldd	r24, Y+2	; 0x02
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	dc 01       	movw	r26, r24
     8cc:	11 96       	adiw	r26, 0x01	; 1
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	88 2f       	mov	r24, r24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	8f 70       	andi	r24, 0x0F	; 15
     8d6:	90 70       	andi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	ee 5d       	subi	r30, 0xDE	; 222
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	80 81       	ld	r24, Z
     8e0:	8c 93       	st	X, r24
	str[2] = '\0';
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	9b 81       	ldd	r25, Y+3	; 0x03
     8e6:	fc 01       	movw	r30, r24
     8e8:	32 96       	adiw	r30, 0x02	; 2
     8ea:	10 82       	st	Z, r1
}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	cf 91       	pop	r28
     8f4:	df 91       	pop	r29
     8f6:	08 95       	ret

000008f8 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <mu2_command+0xa>
     902:	00 d0       	rcall	.+0      	; 0x904 <mu2_command+0xc>
     904:	0f 92       	push	r0
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	9a 83       	std	Y+2, r25	; 0x02
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	7c 83       	std	Y+4, r23	; 0x04
     910:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     912:	80 e4       	ldi	r24, 0x40	; 64
     914:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(cmd[0]);
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	fa 81       	ldd	r31, Y+2	; 0x02
     91c:	80 81       	ld	r24, Z
     91e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(cmd[1]);
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	fc 01       	movw	r30, r24
     928:	31 96       	adiw	r30, 0x01	; 1
     92a:	80 81       	ld	r24, Z
     92c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
     930:	0a c0       	rjmp	.+20     	; 0x946 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     932:	eb 81       	ldd	r30, Y+3	; 0x03
     934:	fc 81       	ldd	r31, Y+4	; 0x04
     936:	80 81       	ld	r24, Z
     938:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
		val++;
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	9c 83       	std	Y+4, r25	; 0x04
     944:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     946:	eb 81       	ldd	r30, Y+3	; 0x03
     948:	fc 81       	ldd	r31, Y+4	; 0x04
     94a:	80 81       	ld	r24, Z
     94c:	88 23       	and	r24, r24
     94e:	89 f7       	brne	.-30     	; 0x932 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     950:	8d e0       	ldi	r24, 0x0D	; 13
     952:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(0x0a);
     956:	8a e0       	ldi	r24, 0x0A	; 10
     958:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	for(i=0;i<10;i++){
     95c:	10 92 7c 01 	sts	0x017C, r1
     960:	32 c0       	rjmp	.+100    	; 0x9c6 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     962:	80 91 7c 01 	lds	r24, 0x017C
     966:	08 2f       	mov	r16, r24
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart0_getchar>
     96e:	f8 01       	movw	r30, r16
     970:	e3 58       	subi	r30, 0x83	; 131
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     976:	80 91 7c 01 	lds	r24, 0x017C
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	fc 01       	movw	r30, r24
     980:	e3 58       	subi	r30, 0x83	; 131
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	80 81       	ld	r24, Z
     986:	0e 94 82 06 	call	0xd04	; 0xd04 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     98a:	80 91 7c 01 	lds	r24, 0x017C
     98e:	88 23       	and	r24, r24
     990:	a9 f0       	breq	.+42     	; 0x9bc <mu2_command+0xc4>
     992:	80 91 7c 01 	lds	r24, 0x017C
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	fc 01       	movw	r30, r24
     99e:	e3 58       	subi	r30, 0x83	; 131
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	80 81       	ld	r24, Z
     9a4:	8d 30       	cpi	r24, 0x0D	; 13
     9a6:	51 f4       	brne	.+20     	; 0x9bc <mu2_command+0xc4>
     9a8:	80 91 7c 01 	lds	r24, 0x017C
     9ac:	88 2f       	mov	r24, r24
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	e3 58       	subi	r30, 0x83	; 131
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	80 81       	ld	r24, Z
     9b8:	8a 30       	cpi	r24, 0x0A	; 10
     9ba:	49 f0       	breq	.+18     	; 0x9ce <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     9bc:	80 91 7c 01 	lds	r24, 0x017C
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	80 93 7c 01 	sts	0x017C, r24
     9c6:	80 91 7c 01 	lds	r24, 0x017C
     9ca:	8a 30       	cpi	r24, 0x0A	; 10
     9cc:	50 f2       	brcs	.-108    	; 0x962 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     9ce:	80 91 7e 01 	lds	r24, 0x017E
     9d2:	85 34       	cpi	r24, 0x45	; 69
     9d4:	39 f4       	brne	.+14     	; 0x9e4 <mu2_command+0xec>
     9d6:	80 91 7f 01 	lds	r24, 0x017F
     9da:	82 35       	cpi	r24, 0x52	; 82
     9dc:	19 f4       	brne	.+6      	; 0x9e4 <mu2_command+0xec>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	8d 83       	std	Y+5, r24	; 0x05
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <mu2_command+0xee>
	return 0;
     9e4:	1d 82       	std	Y+5, r1	; 0x05
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	00 d0       	rcall	.+0      	; 0xa06 <mu2_command_eeprom+0xa>
     a06:	00 d0       	rcall	.+0      	; 0xa08 <mu2_command_eeprom+0xc>
     a08:	0f 92       	push	r0
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	7c 83       	std	Y+4, r23	; 0x04
     a14:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a1c:	e9 81       	ldd	r30, Y+1	; 0x01
     a1e:	fa 81       	ldd	r31, Y+2	; 0x02
     a20:	80 81       	ld	r24, Z
     a22:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	fc 01       	movw	r30, r24
     a2c:	31 96       	adiw	r30, 0x01	; 1
     a2e:	80 81       	ld	r24, Z
     a30:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a36:	eb 81       	ldd	r30, Y+3	; 0x03
     a38:	fc 81       	ldd	r31, Y+4	; 0x04
     a3a:	80 81       	ld	r24, Z
     a3c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
		val++;
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	9c 83       	std	Y+4, r25	; 0x04
     a48:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	80 81       	ld	r24, Z
     a50:	88 23       	and	r24, r24
     a52:	89 f7       	brne	.-30     	; 0xa36 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     a54:	8f e2       	ldi	r24, 0x2F	; 47
     a56:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar('W');
     a5a:	87 e5       	ldi	r24, 0x57	; 87
     a5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(0x0d);
     a60:	8d e0       	ldi	r24, 0x0D	; 13
     a62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	uart0_putchar(0x0a);
     a66:	8a e0       	ldi	r24, 0x0A	; 10
     a68:	0e 94 62 06 	call	0xcc4	; 0xcc4 <uart0_putchar>
	for(i=0;i<10;i++){
     a6c:	10 92 7c 01 	sts	0x017C, r1
     a70:	32 c0       	rjmp	.+100    	; 0xad6 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     a72:	80 91 7c 01 	lds	r24, 0x017C
     a76:	08 2f       	mov	r16, r24
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart0_getchar>
     a7e:	f8 01       	movw	r30, r16
     a80:	e3 58       	subi	r30, 0x83	; 131
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     a86:	80 91 7c 01 	lds	r24, 0x017C
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	fc 01       	movw	r30, r24
     a90:	e3 58       	subi	r30, 0x83	; 131
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	80 81       	ld	r24, Z
     a96:	0e 94 82 06 	call	0xd04	; 0xd04 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     a9a:	80 91 7c 01 	lds	r24, 0x017C
     a9e:	88 23       	and	r24, r24
     aa0:	a9 f0       	breq	.+42     	; 0xacc <mu2_command_eeprom+0xd0>
     aa2:	80 91 7c 01 	lds	r24, 0x017C
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	fc 01       	movw	r30, r24
     aae:	e3 58       	subi	r30, 0x83	; 131
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 81       	ld	r24, Z
     ab4:	8d 30       	cpi	r24, 0x0D	; 13
     ab6:	51 f4       	brne	.+20     	; 0xacc <mu2_command_eeprom+0xd0>
     ab8:	80 91 7c 01 	lds	r24, 0x017C
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	e3 58       	subi	r30, 0x83	; 131
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	80 81       	ld	r24, Z
     ac8:	8a 30       	cpi	r24, 0x0A	; 10
     aca:	49 f0       	breq	.+18     	; 0xade <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     acc:	80 91 7c 01 	lds	r24, 0x017C
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 7c 01 	sts	0x017C, r24
     ad6:	80 91 7c 01 	lds	r24, 0x017C
     ada:	8a 30       	cpi	r24, 0x0A	; 10
     adc:	50 f2       	brcs	.-108    	; 0xa72 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     ade:	80 91 7e 01 	lds	r24, 0x017E
     ae2:	85 34       	cpi	r24, 0x45	; 69
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <mu2_command_eeprom+0xf8>
     ae6:	80 91 7f 01 	lds	r24, 0x017F
     aea:	82 35       	cpi	r24, 0x52	; 82
     aec:	19 f4       	brne	.+6      	; 0xaf4 <mu2_command_eeprom+0xf8>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	8d 83       	std	Y+5, r24	; 0x05
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <mu2_command_eeprom+0xfa>
	return 0;
     af4:	1d 82       	std	Y+5, r1	; 0x05
     af6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	2d 97       	sbiw	r28, 0x0d	; 13
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	6d 83       	std	Y+5, r22	; 0x05
     b26:	5f 83       	std	Y+7, r21	; 0x07
     b28:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	9d 87       	std	Y+13, r25	; 0x0d
     b30:	8c 87       	std	Y+12, r24	; 0x0c
     b32:	8c 85       	ldd	r24, Y+12	; 0x0c
     b34:	9d 85       	ldd	r25, Y+13	; 0x0d
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	31 f0       	breq	.+12     	; 0xb46 <uart_init+0x3a>
     b3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	b1 f1       	breq	.+108    	; 0xbb0 <uart_init+0xa4>
     b44:	64 c0       	rjmp	.+200    	; 0xc0e <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     b46:	e1 ec       	ldi	r30, 0xC1	; 193
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     b4c:	a2 ec       	ldi	r26, 0xC2	; 194
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e2 ec       	ldi	r30, 0xC2	; 194
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	86 60       	ori	r24, 0x06	; 6
     b58:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     b5a:	1a 82       	std	Y+2, r1	; 0x02
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <uart_init+0x5e>
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	23 e1       	ldi	r18, 0x13	; 19
     b70:	88 38       	cpi	r24, 0x88	; 136
     b72:	92 07       	cpc	r25, r18
     b74:	ac f3       	brlt	.-22     	; 0xb60 <uart_init+0x54>
			UCSR0B = option;					
     b76:	e1 ec       	ldi	r30, 0xC1	; 193
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     b7e:	e5 ec       	ldi	r30, 0xC5	; 197
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8e 81       	ldd	r24, Y+6	; 0x06
     b84:	9f 81       	ldd	r25, Y+7	; 0x07
     b86:	89 2f       	mov	r24, r25
     b88:	99 27       	eor	r25, r25
     b8a:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     b8c:	e4 ec       	ldi	r30, 0xC4	; 196
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     b94:	e0 ec       	ldi	r30, 0xC0	; 192
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     b9a:	a0 ec       	ldi	r26, 0xC0	; 192
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e0 ec       	ldi	r30, 0xC0	; 192
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	83 7e       	andi	r24, 0xE3	; 227
     ba6:	8c 93       	st	X, r24
			UDR0 = 0;
     ba8:	e6 ec       	ldi	r30, 0xC6	; 198
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	10 82       	st	Z, r1
     bae:	34 c0       	rjmp	.+104    	; 0xc18 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     bb0:	ed ec       	ldi	r30, 0xCD	; 205
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	8e 81       	ldd	r24, Y+6	; 0x06
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	89 2f       	mov	r24, r25
     bba:	99 27       	eor	r25, r25
     bbc:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     bbe:	ec ec       	ldi	r30, 0xCC	; 204
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	8e 81       	ldd	r24, Y+6	; 0x06
     bc4:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	19 82       	std	Y+1, r1	; 0x01
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <uart_init+0xca>
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	23 e1       	ldi	r18, 0x13	; 19
     bdc:	88 38       	cpi	r24, 0x88	; 136
     bde:	92 07       	cpc	r25, r18
     be0:	ac f3       	brlt	.-22     	; 0xbcc <uart_init+0xc0>
			UCSR1B |= option;
     be2:	a9 ec       	ldi	r26, 0xC9	; 201
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e9 ec       	ldi	r30, 0xC9	; 201
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	90 81       	ld	r25, Z
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	89 2b       	or	r24, r25
     bf0:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     bf2:	e8 ec       	ldi	r30, 0xC8	; 200
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     bf8:	a8 ec       	ldi	r26, 0xC8	; 200
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e8 ec       	ldi	r30, 0xC8	; 200
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	83 7e       	andi	r24, 0xE3	; 227
     c04:	8c 93       	st	X, r24
			UDR1 = 0;
     c06:	ee ec       	ldi	r30, 0xCE	; 206
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	10 82       	st	Z, r1
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <uart_init+0x10c>
			break;
		default:
			return -1;
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	99 87       	std	Y+9, r25	; 0x09
     c14:	88 87       	std	Y+8, r24	; 0x08
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <uart_init+0x110>
	}
	return 0;
     c18:	19 86       	std	Y+9, r1	; 0x09
     c1a:	18 86       	std	Y+8, r1	; 0x08
     c1c:	88 85       	ldd	r24, Y+8	; 0x08
     c1e:	99 85       	ldd	r25, Y+9	; 0x09
}
     c20:	2d 96       	adiw	r28, 0x0d	; 13
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <uart_setbuffer+0x6>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <uart_setbuffer+0x8>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <uart_setbuffer+0xa>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	7c 83       	std	Y+4, r23	; 0x04
     c46:	6b 83       	std	Y+3, r22	; 0x03
     c48:	5e 83       	std	Y+6, r21	; 0x06
     c4a:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	99 23       	and	r25, r25
     c52:	cc f0       	brlt	.+50     	; 0xc86 <uart_setbuffer+0x54>
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	91 05       	cpc	r25, r1
     c5c:	a4 f4       	brge	.+40     	; 0xc86 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     c5e:	29 81       	ldd	r18, Y+1	; 0x01
     c60:	3a 81       	ldd	r19, Y+2	; 0x02
     c62:	c9 01       	movw	r24, r18
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	86 57       	subi	r24, 0x76	; 118
     c76:	9e 4f       	sbci	r25, 0xFE	; 254
     c78:	4d 81       	ldd	r20, Y+5	; 0x05
     c7a:	5e 81       	ldd	r21, Y+6	; 0x06
     c7c:	2b 81       	ldd	r18, Y+3	; 0x03
     c7e:	3c 81       	ldd	r19, Y+4	; 0x04
     c80:	b9 01       	movw	r22, r18
     c82:	0e 94 11 08 	call	0x1022	; 0x1022 <RingInit>
}
     c86:	26 96       	adiw	r28, 0x06	; 6
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     ca0:	e0 ec       	ldi	r30, 0xC0	; 192
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	dc f7       	brge	.-10     	; 0xca0 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     caa:	a0 ec       	ldi	r26, 0xC0	; 192
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e0 ec       	ldi	r30, 0xC0	; 192
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 77       	andi	r24, 0x7F	; 127
     cb6:	8c 93       	st	X, r24
	return UDR0;
     cb8:	e6 ec       	ldi	r30, 0xC6	; 198
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <uart0_putchar>:

int uart0_putchar(char c)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     cd0:	e0 ec       	ldi	r30, 0xC0	; 192
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	80 72       	andi	r24, 0x20	; 32
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	b9 f3       	breq	.-18     	; 0xcd0 <uart0_putchar+0xc>
	UDR0 = c;
     ce2:	e6 ec       	ldi	r30, 0xC6	; 198
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     cea:	a0 ec       	ldi	r26, 0xC0	; 192
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e0 ec       	ldi	r30, 0xC0	; 192
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7d       	andi	r24, 0xDF	; 223
     cf6:	8c 93       	st	X, r24
	
	return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <uart1_putchar>:

int uart1_putchar(char c)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	8a 30       	cpi	r24, 0x0A	; 10
     d14:	a1 f4       	brne	.+40     	; 0xd3e <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     d16:	e8 ec       	ldi	r30, 0xC8	; 200
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	80 72       	andi	r24, 0x20	; 32
     d22:	90 70       	andi	r25, 0x00	; 0
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	b9 f3       	breq	.-18     	; 0xd16 <uart1_putchar+0x12>
		UDR1 = '\r';
     d28:	ee ec       	ldi	r30, 0xCE	; 206
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	8d e0       	ldi	r24, 0x0D	; 13
     d2e:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     d30:	a8 ec       	ldi	r26, 0xC8	; 200
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e8 ec       	ldi	r30, 0xC8	; 200
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     d3e:	e8 ec       	ldi	r30, 0xC8	; 200
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	80 72       	andi	r24, 0x20	; 32
     d4a:	90 70       	andi	r25, 0x00	; 0
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	b9 f3       	breq	.-18     	; 0xd3e <uart1_putchar+0x3a>
	UDR1 = c;
     d50:	ee ec       	ldi	r30, 0xCE	; 206
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     d58:	a8 ec       	ldi	r26, 0xC8	; 200
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 ec       	ldi	r30, 0xC8	; 200
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8f 7d       	andi	r24, 0xDF	; 223
     d64:	8c 93       	st	X, r24

	return 0;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
}
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <uart0_buf_putchar+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     d80:	1a 82       	std	Y+2, r1	; 0x02
     d82:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     d84:	ef e5       	ldi	r30, 0x5F	; 95
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 93 87 01 	sts	0x0187, r24
	cli();
     d8e:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	61 f4       	brne	.+24     	; 0xdae <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     d96:	8a e8       	ldi	r24, 0x8A	; 138
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	6d e0       	ldi	r22, 0x0D	; 13
     d9c:	0e 94 3f 08 	call	0x107e	; 0x107e <RingPut>
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f4       	brne	.+10     	; 0xdae <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	9f ef       	ldi	r25, 0xFF	; 255
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	12 c0       	rjmp	.+36     	; 0xdd2 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     dae:	8a e8       	ldi	r24, 0x8A	; 138
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	6b 81       	ldd	r22, Y+3	; 0x03
     db4:	0e 94 3f 08 	call	0x107e	; 0x107e <RingPut>
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	21 f4       	brne	.+8      	; 0xdc4 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     dc4:	a1 ec       	ldi	r26, 0xC1	; 193
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e1 ec       	ldi	r30, 0xC1	; 193
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     dd2:	ef e5       	ldi	r30, 0x5F	; 95
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 91 87 01 	lds	r24, 0x0187
     dda:	80 83       	st	Z, r24

	return ret;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <uart1_buf_putchar+0x6>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     dfa:	1a 82       	std	Y+2, r1	; 0x02
     dfc:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     dfe:	ef e5       	ldi	r30, 0x5F	; 95
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 93 87 01 	sts	0x0187, r24
	cli();
     e08:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	8a 30       	cpi	r24, 0x0A	; 10
     e0e:	61 f4       	brne	.+24     	; 0xe28 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     e10:	83 e9       	ldi	r24, 0x93	; 147
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	6d e0       	ldi	r22, 0x0D	; 13
     e16:	0e 94 3f 08 	call	0x107e	; 0x107e <RingPut>
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	29 f4       	brne	.+10     	; 0xe28 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	9f ef       	ldi	r25, 0xFF	; 255
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	12 c0       	rjmp	.+36     	; 0xe4c <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     e28:	83 e9       	ldi	r24, 0x93	; 147
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	6b 81       	ldd	r22, Y+3	; 0x03
     e2e:	0e 94 3f 08 	call	0x107e	; 0x107e <RingPut>
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	21 f4       	brne	.+8      	; 0xe3e <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     e3e:	a9 ec       	ldi	r26, 0xC9	; 201
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 ec       	ldi	r30, 0xC9	; 201
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 62       	ori	r24, 0x20	; 32
     e4a:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     e4c:	ef e5       	ldi	r30, 0x5F	; 95
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 91 87 01 	lds	r24, 0x0187
     e54:	80 83       	st	Z, r24

	return ret;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <__vector_21>:


ISR(USART0_UDRE_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	00 90 5b 00 	lds	r0, 0x005B
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     e98:	8a e8       	ldi	r24, 0x8A	; 138
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9e 01       	movw	r18, r28
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 92 08 	call	0x1124	; 0x1124 <RingGet>
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	61 f0       	breq	.+24     	; 0xec4 <__vector_21+0x5e>
		UDR0 = c;
     eac:	e6 ec       	ldi	r30, 0xC6	; 198
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREクリア
     eb4:	a0 ec       	ldi	r26, 0xC0	; 192
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e0 ec       	ldi	r30, 0xC0	; 192
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7d       	andi	r24, 0xDF	; 223
     ec0:	8c 93       	st	X, r24
     ec2:	0e c0       	rjmp	.+28     	; 0xee0 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     ec4:	a1 ec       	ldi	r26, 0xC1	; 193
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e1 ec       	ldi	r30, 0xC1	; 193
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 7d       	andi	r24, 0xDF	; 223
     ed0:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     ed2:	a0 ec       	ldi	r26, 0xC0	; 192
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 ec       	ldi	r30, 0xC0	; 192
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7d       	andi	r24, 0xDF	; 223
     ede:	8c 93       	st	X, r24
	}
}
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	0f 90       	pop	r0
     f00:	00 92 5b 00 	sts	0x005B, r0
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_29>:

ISR(USART1_UDRE_vect)
{
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	00 90 5b 00 	lds	r0, 0x005B
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	2f 93       	push	r18
     f20:	3f 93       	push	r19
     f22:	4f 93       	push	r20
     f24:	5f 93       	push	r21
     f26:	6f 93       	push	r22
     f28:	7f 93       	push	r23
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
     f32:	ef 93       	push	r30
     f34:	ff 93       	push	r31
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	0f 92       	push	r0
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
     f40:	83 e9       	ldi	r24, 0x93	; 147
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	9e 01       	movw	r18, r28
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	b9 01       	movw	r22, r18
     f4c:	0e 94 92 08 	call	0x1124	; 0x1124 <RingGet>
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	61 f0       	breq	.+24     	; 0xf6c <__vector_29+0x5e>
		UDR1 = c;
     f54:	ee ec       	ldi	r30, 0xCE	; 206
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREクリア
     f5c:	a8 ec       	ldi	r26, 0xC8	; 200
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e8 ec       	ldi	r30, 0xC8	; 200
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	8c 93       	st	X, r24
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
     f6c:	a9 ec       	ldi	r26, 0xC9	; 201
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e9 ec       	ldi	r30, 0xC9	; 201
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
     f7a:	a8 ec       	ldi	r26, 0xC8	; 200
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 ec       	ldi	r30, 0xC8	; 200
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7d       	andi	r24, 0xDF	; 223
     f86:	8c 93       	st	X, r24
	}
}
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	00 92 5b 00 	sts	0x005B, r0
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	00 90 5b 00 	lds	r0, 0x005B
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
     fe6:	ee ec       	ldi	r30, 0xCE	; 206
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	20 81       	ld	r18, Z
     fec:	83 e9       	ldi	r24, 0x93	; 147
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	62 2f       	mov	r22, r18
     ff2:	0e 94 3f 08 	call	0x107e	; 0x107e <RingPut>
}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	00 92 5b 00 	sts	0x005B, r0
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <RingInit>:
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <RingInit+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <RingInit+0x8>
    102a:	00 d0       	rcall	.+0      	; 0x102c <RingInit+0xa>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	7c 83       	std	Y+4, r23	; 0x04
    1036:	6b 83       	std	Y+3, r22	; 0x03
    1038:	5e 83       	std	Y+6, r21	; 0x06
    103a:	4d 83       	std	Y+5, r20	; 0x05
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	e9 81       	ldd	r30, Y+1	; 0x01
    104a:	fa 81       	ldd	r31, Y+2	; 0x02
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	97 83       	std	Z+7, r25	; 0x07
    1052:	86 83       	std	Z+6, r24	; 0x06
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	13 82       	std	Z+3, r1	; 0x03
    105a:	12 82       	std	Z+2, r1	; 0x02
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	15 82       	std	Z+5, r1	; 0x05
    1062:	14 82       	std	Z+4, r1	; 0x04
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 87       	std	Z+8, r24	; 0x08
    106c:	26 96       	adiw	r28, 0x06	; 6
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <RingPut>:
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <RingPut+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <RingPut+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6b 83       	std	Y+3, r22	; 0x03
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	80 85       	ldd	r24, Z+8	; 0x08
    1098:	88 23       	and	r24, r24
    109a:	71 f4       	brne	.+28     	; 0x10b8 <RingPut+0x3a>
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	22 81       	ldd	r18, Z+2	; 0x02
    10a2:	33 81       	ldd	r19, Z+3	; 0x03
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	95 81       	ldd	r25, Z+5	; 0x05
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <RingPut+0x3a>
    10b2:	1d 82       	std	Y+5, r1	; 0x05
    10b4:	1c 82       	std	Y+4, r1	; 0x04
    10b6:	2c c0       	rjmp	.+88     	; 0x1110 <RingPut+0x92>
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	20 81       	ld	r18, Z
    10be:	31 81       	ldd	r19, Z+1	; 0x01
    10c0:	e9 81       	ldd	r30, Y+1	; 0x01
    10c2:	fa 81       	ldd	r31, Y+2	; 0x02
    10c4:	84 81       	ldd	r24, Z+4	; 0x04
    10c6:	95 81       	ldd	r25, Z+5	; 0x05
    10c8:	f9 01       	movw	r30, r18
    10ca:	e8 0f       	add	r30, r24
    10cc:	f9 1f       	adc	r31, r25
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	80 83       	st	Z, r24
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	84 81       	ldd	r24, Z+4	; 0x04
    10d8:	95 81       	ldd	r25, Z+5	; 0x05
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	95 83       	std	Z+5, r25	; 0x05
    10e2:	84 83       	std	Z+4, r24	; 0x04
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	24 81       	ldd	r18, Z+4	; 0x04
    10ea:	35 81       	ldd	r19, Z+5	; 0x05
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	86 81       	ldd	r24, Z+6	; 0x06
    10f2:	97 81       	ldd	r25, Z+7	; 0x07
    10f4:	28 17       	cp	r18, r24
    10f6:	39 07       	cpc	r19, r25
    10f8:	21 f4       	brne	.+8      	; 0x1102 <RingPut+0x84>
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	15 82       	std	Z+5, r1	; 0x05
    1100:	14 82       	std	Z+4, r1	; 0x04
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	10 86       	std	Z+8, r1	; 0x08
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9d 83       	std	Y+5, r25	; 0x05
    110e:	8c 83       	std	Y+4, r24	; 0x04
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <RingGet>:
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <RingGet+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <RingGet+0x8>
    112c:	00 d0       	rcall	.+0      	; 0x112e <RingGet+0xa>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	7c 83       	std	Y+4, r23	; 0x04
    1138:	6b 83       	std	Y+3, r22	; 0x03
    113a:	e9 81       	ldd	r30, Y+1	; 0x01
    113c:	fa 81       	ldd	r31, Y+2	; 0x02
    113e:	80 85       	ldd	r24, Z+8	; 0x08
    1140:	88 23       	and	r24, r24
    1142:	d9 f5       	brne	.+118    	; 0x11ba <RingGet+0x96>
    1144:	e9 81       	ldd	r30, Y+1	; 0x01
    1146:	fa 81       	ldd	r31, Y+2	; 0x02
    1148:	20 81       	ld	r18, Z
    114a:	31 81       	ldd	r19, Z+1	; 0x01
    114c:	e9 81       	ldd	r30, Y+1	; 0x01
    114e:	fa 81       	ldd	r31, Y+2	; 0x02
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	f9 01       	movw	r30, r18
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	80 81       	ld	r24, Z
    115c:	eb 81       	ldd	r30, Y+3	; 0x03
    115e:	fc 81       	ldd	r31, Y+4	; 0x04
    1160:	80 83       	st	Z, r24
    1162:	e9 81       	ldd	r30, Y+1	; 0x01
    1164:	fa 81       	ldd	r31, Y+2	; 0x02
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	e9 81       	ldd	r30, Y+1	; 0x01
    116e:	fa 81       	ldd	r31, Y+2	; 0x02
    1170:	93 83       	std	Z+3, r25	; 0x03
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	22 81       	ldd	r18, Z+2	; 0x02
    117a:	33 81       	ldd	r19, Z+3	; 0x03
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	86 81       	ldd	r24, Z+6	; 0x06
    1182:	97 81       	ldd	r25, Z+7	; 0x07
    1184:	28 17       	cp	r18, r24
    1186:	39 07       	cpc	r19, r25
    1188:	21 f4       	brne	.+8      	; 0x1192 <RingGet+0x6e>
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	13 82       	std	Z+3, r1	; 0x03
    1190:	12 82       	std	Z+2, r1	; 0x02
    1192:	e9 81       	ldd	r30, Y+1	; 0x01
    1194:	fa 81       	ldd	r31, Y+2	; 0x02
    1196:	22 81       	ldd	r18, Z+2	; 0x02
    1198:	33 81       	ldd	r19, Z+3	; 0x03
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	84 81       	ldd	r24, Z+4	; 0x04
    11a0:	95 81       	ldd	r25, Z+5	; 0x05
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <RingGet+0x8c>
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 87       	std	Z+8, r24	; 0x08
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <RingGet+0xa0>
    11ba:	eb 81       	ldd	r30, Y+3	; 0x03
    11bc:	fc 81       	ldd	r31, Y+4	; 0x04
    11be:	10 82       	st	Z, r1
    11c0:	1e 82       	std	Y+6, r1	; 0x06
    11c2:	1d 82       	std	Y+5, r1	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	26 96       	adiw	r28, 0x06	; 6
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <isRingEmpty>:
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <isRingEmpty+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ea:	fa 81       	ldd	r31, Y+2	; 0x02
    11ec:	80 85       	ldd	r24, Z+8	; 0x08
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <initI2CMaster+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <initI2CMaster+0x8>
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    120c:	88 eb       	ldi	r24, 0xB8	; 184
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9b 83       	std	Y+3, r25	; 0x03
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	9e e4       	ldi	r25, 0x4E	; 78
    121e:	b9 01       	movw	r22, r18
    1220:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1224:	cb 01       	movw	r24, r22
    1226:	40 97       	sbiw	r24, 0x10	; 16
    1228:	9d 83       	std	Y+5, r25	; 0x05
    122a:	8c 83       	std	Y+4, r24	; 0x04
    122c:	ec 81       	ldd	r30, Y+4	; 0x04
    122e:	fd 81       	ldd	r31, Y+5	; 0x05
    1230:	ff 23       	and	r31, r31
    1232:	2c f4       	brge	.+10     	; 0x123e <initI2CMaster+0x42>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	9d 83       	std	Y+5, r25	; 0x05
    123c:	8c 83       	std	Y+4, r24	; 0x04
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	95 95       	asr	r25
    1244:	87 95       	ror	r24
    1246:	ea 81       	ldd	r30, Y+2	; 0x02
    1248:	fb 81       	ldd	r31, Y+3	; 0x03
    124a:	80 83       	st	Z, r24
		TWSR = 0;
    124c:	e9 eb       	ldi	r30, 0xB9	; 185
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	10 82       	st	Z, r1
		TWCR = I2CEN;
    1252:	ec eb       	ldi	r30, 0xBC	; 188
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	80 83       	st	Z, r24
    }
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <i2cWrite+0x6>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
			cli();
    127a:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    127c:	ec eb       	ldi	r30, 0xBC	; 188
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	84 ea       	ldi	r24, 0xA4	; 164
    1282:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1284:	ec eb       	ldi	r30, 0xBC	; 188
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	88 23       	and	r24, r24
    128c:	dc f7       	brge	.-10     	; 0x1284 <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    128e:	e9 eb       	ldi	r30, 0xB9	; 185
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	88 7f       	andi	r24, 0xF8	; 248
    129a:	90 70       	andi	r25, 0x00	; 0
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <i2cWrite+0x3a>
    12a2:	58 c0       	rjmp	.+176    	; 0x1354 <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    12a4:	ab eb       	ldi	r26, 0xBB	; 187
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	80 81       	ld	r24, Z
    12ae:	88 0f       	add	r24, r24
    12b0:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    12b2:	ec eb       	ldi	r30, 0xBC	; 188
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	84 e8       	ldi	r24, 0x84	; 132
    12b8:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    12ba:	ec eb       	ldi	r30, 0xBC	; 188
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	dc f7       	brge	.-10     	; 0x12ba <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    12c4:	e9 eb       	ldi	r30, 0xB9	; 185
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	88 7f       	andi	r24, 0xF8	; 248
    12d0:	90 70       	andi	r25, 0x00	; 0
    12d2:	88 31       	cpi	r24, 0x18	; 24
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f0       	breq	.+2      	; 0x12da <i2cWrite+0x70>
    12d8:	3d c0       	rjmp	.+122    	; 0x1354 <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    12da:	10 92 88 01 	sts	0x0188, r1
    12de:	27 c0       	rjmp	.+78     	; 0x132e <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    12e0:	ab eb       	ldi	r26, 0xBB	; 187
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e9 81       	ldd	r30, Y+1	; 0x01
    12e6:	fa 81       	ldd	r31, Y+2	; 0x02
    12e8:	21 81       	ldd	r18, Z+1	; 0x01
    12ea:	32 81       	ldd	r19, Z+2	; 0x02
    12ec:	80 91 88 01 	lds	r24, 0x0188
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	e8 0f       	add	r30, r24
    12f8:	f9 1f       	adc	r31, r25
    12fa:	80 81       	ld	r24, Z
    12fc:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    12fe:	ec eb       	ldi	r30, 0xBC	; 188
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	84 e8       	ldi	r24, 0x84	; 132
    1304:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1306:	ec eb       	ldi	r30, 0xBC	; 188
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 23       	and	r24, r24
    130e:	dc f7       	brge	.-10     	; 0x1306 <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    1310:	e9 eb       	ldi	r30, 0xB9	; 185
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	88 32       	cpi	r24, 0x28	; 40
    1320:	91 05       	cpc	r25, r1
    1322:	c1 f4       	brne	.+48     	; 0x1354 <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1324:	80 91 88 01 	lds	r24, 0x0188
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	80 93 88 01 	sts	0x0188, r24
    132e:	80 91 88 01 	lds	r24, 0x0188
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	83 81       	ldd	r24, Z+3	; 0x03
    133c:	94 81       	ldd	r25, Z+4	; 0x04
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	70 f2       	brcs	.-100    	; 0x12e0 <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1344:	ec eb       	ldi	r30, 0xBC	; 188
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	84 e9       	ldi	r24, 0x94	; 148
    134a:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    134c:	78 94       	sei
		return true;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	8b 83       	std	Y+3, r24	; 0x03
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1354:	ec eb       	ldi	r30, 0xBC	; 188
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	84 e9       	ldi	r24, 0x94	; 148
    135a:	80 83       	st	Z, r24
		sei();
    135c:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    135e:	1b 82       	std	Y+3, r1	; 0x03
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <i2cRead>:

bool i2cRead(Slave *slave)
    {
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <i2cRead+0x6>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
		cli();
    137e:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1380:	ec eb       	ldi	r30, 0xBC	; 188
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	84 ea       	ldi	r24, 0xA4	; 164
    1386:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    1388:	ec eb       	ldi	r30, 0xBC	; 188
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 23       	and	r24, r24
    1390:	dc f7       	brge	.-10     	; 0x1388 <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    1392:	e9 eb       	ldi	r30, 0xB9	; 185
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	88 7f       	andi	r24, 0xF8	; 248
    139e:	90 70       	andi	r25, 0x00	; 0
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <i2cRead+0x3a>
    13a6:	80 c0       	rjmp	.+256    	; 0x14a8 <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    13a8:	ab eb       	ldi	r26, 0xBB	; 187
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	80 81       	ld	r24, Z
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    13be:	ec eb       	ldi	r30, 0xBC	; 188
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	84 e8       	ldi	r24, 0x84	; 132
    13c4:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13c6:	ec eb       	ldi	r30, 0xBC	; 188
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 23       	and	r24, r24
    13ce:	dc f7       	brge	.-10     	; 0x13c6 <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    13d0:	e9 eb       	ldi	r30, 0xB9	; 185
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	88 7f       	andi	r24, 0xF8	; 248
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	80 34       	cpi	r24, 0x40	; 64
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <i2cRead+0x78>
    13e4:	61 c0       	rjmp	.+194    	; 0x14a8 <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    13e6:	10 92 88 01 	sts	0x0188, r1
    13ea:	28 c0       	rjmp	.+80     	; 0x143c <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    13ec:	ec eb       	ldi	r30, 0xBC	; 188
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	84 ec       	ldi	r24, 0xC4	; 196
    13f2:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    13f4:	ec eb       	ldi	r30, 0xBC	; 188
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	dc f7       	brge	.-10     	; 0x13f4 <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    13fe:	e9 eb       	ldi	r30, 0xB9	; 185
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	88 7f       	andi	r24, 0xF8	; 248
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	80 35       	cpi	r24, 0x50	; 80
    140e:	91 05       	cpc	r25, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <i2cRead+0xa6>
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	25 81       	ldd	r18, Z+5	; 0x05
    141a:	36 81       	ldd	r19, Z+6	; 0x06
    141c:	80 91 88 01 	lds	r24, 0x0188
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	d9 01       	movw	r26, r18
    1426:	a8 0f       	add	r26, r24
    1428:	b9 1f       	adc	r27, r25
    142a:	eb eb       	ldi	r30, 0xBB	; 187
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1432:	80 91 88 01 	lds	r24, 0x0188
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	80 93 88 01 	sts	0x0188, r24
    143c:	80 91 88 01 	lds	r24, 0x0188
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	87 81       	ldd	r24, Z+7	; 0x07
    144a:	90 85       	ldd	r25, Z+8	; 0x08
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	60 f2       	brcs	.-104    	; 0x13ec <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1454:	ec eb       	ldi	r30, 0xBC	; 188
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	84 e8       	ldi	r24, 0x84	; 132
    145a:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    145c:	ec eb       	ldi	r30, 0xBC	; 188
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	dc f7       	brge	.-10     	; 0x145c <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1466:	e9 eb       	ldi	r30, 0xB9	; 185
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 7f       	andi	r24, 0xF8	; 248
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	88 35       	cpi	r24, 0x58	; 88
    1476:	91 05       	cpc	r25, r1
    1478:	b9 f4       	brne	.+46     	; 0x14a8 <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    147a:	e9 81       	ldd	r30, Y+1	; 0x01
    147c:	fa 81       	ldd	r31, Y+2	; 0x02
    147e:	25 81       	ldd	r18, Z+5	; 0x05
    1480:	36 81       	ldd	r19, Z+6	; 0x06
    1482:	80 91 88 01 	lds	r24, 0x0188
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	d9 01       	movw	r26, r18
    148c:	a8 0f       	add	r26, r24
    148e:	b9 1f       	adc	r27, r25
    1490:	eb eb       	ldi	r30, 0xBB	; 187
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1498:	ec eb       	ldi	r30, 0xBC	; 188
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	84 e9       	ldi	r24, 0x94	; 148
    149e:	80 83       	st	Z, r24
		sei();
    14a0:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14a8:	ec eb       	ldi	r30, 0xBC	; 188
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	84 e9       	ldi	r24, 0x94	; 148
    14ae:	80 83       	st	Z, r24
		sei();
    14b0:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    14b2:	1b 82       	std	Y+3, r1	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <i2cReadWithCommand+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <i2cReadWithCommand+0x8>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    14d4:	ec eb       	ldi	r30, 0xBC	; 188
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	84 ea       	ldi	r24, 0xA4	; 164
    14da:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14dc:	ec eb       	ldi	r30, 0xBC	; 188
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	88 23       	and	r24, r24
    14e4:	dc f7       	brge	.-10     	; 0x14dc <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    14e6:	ab eb       	ldi	r26, 0xBB	; 187
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	80 81       	ld	r24, Z
    14f0:	88 0f       	add	r24, r24
    14f2:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    14f4:	ec eb       	ldi	r30, 0xBC	; 188
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	84 e8       	ldi	r24, 0x84	; 132
    14fa:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14fc:	ec eb       	ldi	r30, 0xBC	; 188
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	88 23       	and	r24, r24
    1504:	dc f7       	brge	.-10     	; 0x14fc <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    1506:	e9 eb       	ldi	r30, 0xB9	; 185
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	88 7f       	andi	r24, 0xF8	; 248
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	80 34       	cpi	r24, 0x40	; 64
    1516:	91 05       	cpc	r25, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <i2cReadWithCommand+0x5a>
    151a:	a0 c0       	rjmp	.+320    	; 0x165c <i2cReadWithCommand+0x19a>

		TWDR=command;
    151c:	eb eb       	ldi	r30, 0xBB	; 187
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1524:	ec eb       	ldi	r30, 0xBC	; 188
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	84 e8       	ldi	r24, 0x84	; 132
    152a:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    152c:	ec eb       	ldi	r30, 0xBC	; 188
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	88 23       	and	r24, r24
    1534:	dc f7       	brge	.-10     	; 0x152c <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    1536:	e9 eb       	ldi	r30, 0xB9	; 185
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	88 7f       	andi	r24, 0xF8	; 248
    1542:	90 70       	andi	r25, 0x00	; 0
    1544:	88 32       	cpi	r24, 0x28	; 40
    1546:	91 05       	cpc	r25, r1
    1548:	09 f0       	breq	.+2      	; 0x154c <i2cReadWithCommand+0x8a>
    154a:	88 c0       	rjmp	.+272    	; 0x165c <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    154c:	ec eb       	ldi	r30, 0xBC	; 188
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	84 ea       	ldi	r24, 0xA4	; 164
    1552:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1554:	ec eb       	ldi	r30, 0xBC	; 188
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 23       	and	r24, r24
    155c:	dc f7       	brge	.-10     	; 0x1554 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    155e:	e9 eb       	ldi	r30, 0xB9	; 185
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	88 7f       	andi	r24, 0xF8	; 248
    156a:	90 70       	andi	r25, 0x00	; 0
    156c:	80 31       	cpi	r24, 0x10	; 16
    156e:	91 05       	cpc	r25, r1
    1570:	09 f0       	breq	.+2      	; 0x1574 <i2cReadWithCommand+0xb2>
    1572:	74 c0       	rjmp	.+232    	; 0x165c <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1574:	ab eb       	ldi	r26, 0xBB	; 187
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	80 81       	ld	r24, Z
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    158a:	ec eb       	ldi	r30, 0xBC	; 188
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	84 e8       	ldi	r24, 0x84	; 132
    1590:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1592:	ec eb       	ldi	r30, 0xBC	; 188
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	88 23       	and	r24, r24
    159a:	dc f7       	brge	.-10     	; 0x1592 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    159c:	10 92 88 01 	sts	0x0188, r1
    15a0:	28 c0       	rjmp	.+80     	; 0x15f2 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15a2:	ec eb       	ldi	r30, 0xBC	; 188
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	84 ec       	ldi	r24, 0xC4	; 196
    15a8:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    15aa:	ec eb       	ldi	r30, 0xBC	; 188
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	dc f7       	brge	.-10     	; 0x15aa <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    15b4:	e9 eb       	ldi	r30, 0xB9	; 185
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	88 7f       	andi	r24, 0xF8	; 248
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	80 35       	cpi	r24, 0x50	; 80
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <i2cReadWithCommand+0x108>
    15c8:	49 c0       	rjmp	.+146    	; 0x165c <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	25 81       	ldd	r18, Z+5	; 0x05
    15d0:	36 81       	ldd	r19, Z+6	; 0x06
    15d2:	80 91 88 01 	lds	r24, 0x0188
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	d9 01       	movw	r26, r18
    15dc:	a8 0f       	add	r26, r24
    15de:	b9 1f       	adc	r27, r25
    15e0:	eb eb       	ldi	r30, 0xBB	; 187
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    15e8:	80 91 88 01 	lds	r24, 0x0188
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	80 93 88 01 	sts	0x0188, r24
    15f2:	80 91 88 01 	lds	r24, 0x0188
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	e9 81       	ldd	r30, Y+1	; 0x01
    15fc:	fa 81       	ldd	r31, Y+2	; 0x02
    15fe:	87 81       	ldd	r24, Z+7	; 0x07
    1600:	90 85       	ldd	r25, Z+8	; 0x08
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	60 f2       	brcs	.-104    	; 0x15a2 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    160a:	ec eb       	ldi	r30, 0xBC	; 188
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	84 e8       	ldi	r24, 0x84	; 132
    1610:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1612:	ec eb       	ldi	r30, 0xBC	; 188
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	dc f7       	brge	.-10     	; 0x1612 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    161c:	e9 eb       	ldi	r30, 0xB9	; 185
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	88 7f       	andi	r24, 0xF8	; 248
    1628:	90 70       	andi	r25, 0x00	; 0
    162a:	88 35       	cpi	r24, 0x58	; 88
    162c:	91 05       	cpc	r25, r1
    162e:	b1 f4       	brne	.+44     	; 0x165c <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	25 81       	ldd	r18, Z+5	; 0x05
    1636:	36 81       	ldd	r19, Z+6	; 0x06
    1638:	80 91 88 01 	lds	r24, 0x0188
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	d9 01       	movw	r26, r18
    1642:	a8 0f       	add	r26, r24
    1644:	b9 1f       	adc	r27, r25
    1646:	eb eb       	ldi	r30, 0xBB	; 187
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    164e:	ec eb       	ldi	r30, 0xBC	; 188
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	84 e9       	ldi	r24, 0x94	; 148
    1654:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8c 83       	std	Y+4, r24	; 0x04
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    165c:	ec eb       	ldi	r30, 0xBC	; 188
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	84 e9       	ldi	r24, 0x94	; 148
    1662:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1664:	1c 82       	std	Y+4, r1	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <LED>:
/// LED操作関数 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->消灯　1->点灯 </param>
void LED(unsigned char target, bool status)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <LED+0x6>
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	58 f5       	brcc	.+86     	; 0x16e0 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	88 23       	and	r24, r24
    168e:	a9 f0       	breq	.+42     	; 0x16ba <LED+0x44>
    1690:	a2 e2       	ldi	r26, 0x22	; 34
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e2 e2       	ldi	r30, 0x22	; 34
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <LED+0x38>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <LED+0x34>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	13 c0       	rjmp	.+38     	; 0x16e0 <LED+0x6a>
	else		sbi(PORTA,target);
    16ba:	a2 e2       	ldi	r26, 0x22	; 34
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e2       	ldi	r30, 0x22	; 34
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <LED+0x62>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <LED+0x5e>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LEDInit>:

void LEDInit(void)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    16f2:	a1 e2       	ldi	r26, 0x21	; 33
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e1 e2       	ldi	r30, 0x21	; 33
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	87 60       	ori	r24, 0x07	; 7
    16fe:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1700:	a2 e2       	ldi	r26, 0x22	; 34
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e2       	ldi	r30, 0x22	; 34
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	87 60       	ori	r24, 0x07	; 7
    170c:	8c 93       	st	X, r24
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <wait_us>:
#include <avr/io.h>
void wait_us(uint16_t t){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <wait_us+0x6>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
  static unsigned char lpcnt;
  __asm__ __volatile__("\n"
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02

00001726 <CPU_wait_entry10>:
    1726:	24 e0       	ldi	r18, 0x04	; 4

00001728 <CPU_wait_lp10>:
    1728:	00 00       	nop
    172a:	2a 95       	dec	r18
    172c:	e9 f7       	brne	.-6      	; 0x1728 <CPU_wait_lp10>
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	d1 f7       	brne	.-12     	; 0x1726 <CPU_wait_entry10>
    1732:	20 93 89 01 	sts	0x0189, r18
    "sbiw %1,1\n\t"
    "brne CPU_wait_entry%=\n\t"
    :"=&a"(lpcnt)
    :"w"(t)
  );
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <wait_ms>:
void wait_ms(uint16_t t){
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <wait_ms+0x6>
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	04 c0       	rjmp	.+8      	; 0x175a <wait_ms+0x1a>
	while(t--) wait_us(1000);
    1752:	88 ee       	ldi	r24, 0xE8	; 232
    1754:	93 e0       	ldi	r25, 0x03	; 3
    1756:	0e 94 8a 0b 	call	0x1714	; 0x1714 <wait_us>
    175a:	1b 82       	std	Y+3, r1	; 0x03
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	11 f0       	breq	.+4      	; 0x1768 <wait_ms+0x28>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 23       	and	r24, r24
    1776:	69 f7       	brne	.-38     	; 0x1752 <wait_ms+0x12>
	
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <mDrive+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <mDrive+0x8>
    178c:	00 d0       	rcall	.+0      	; 0x178e <mDrive+0xa>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9b 83       	std	Y+3, r25	; 0x03
    1794:	8a 83       	std	Y+2, r24	; 0x02
    1796:	6c 83       	std	Y+4, r22	; 0x04
    1798:	4d 83       	std	Y+5, r20	; 0x05
    179a:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    179c:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	85 30       	cpi	r24, 0x05	; 5
    17a2:	50 f5       	brcc	.+84     	; 0x17f8 <mDrive+0x74>
	if(duty>100) duty=100;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	85 36       	cpi	r24, 0x65	; 101
    17a8:	14 f0       	brlt	.+4      	; 0x17ae <mDrive+0x2a>
    17aa:	84 e6       	ldi	r24, 0x64	; 100
    17ac:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	8c 39       	cpi	r24, 0x9C	; 156
    17b2:	14 f4       	brge	.+4      	; 0x17b8 <mDrive+0x34>
    17b4:	8c e9       	ldi	r24, 0x9C	; 156
    17b6:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <mDrive+0x42>
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	81 95       	neg	r24
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	0d c0       	rjmp	.+26     	; 0x17e0 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	88 23       	and	r24, r24
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <mDrive+0x4c>
    17cc:	19 82       	std	Y+1, r1	; 0x01
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	19 f4       	brne	.+6      	; 0x17dc <mDrive+0x58>
    17d6:	8f e7       	ldi	r24, 0x7F	; 127
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <mDrive+0x5c>
	else w_data = duty;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    17e0:	ea 81       	ldd	r30, Y+2	; 0x02
    17e2:	fb 81       	ldd	r31, Y+3	; 0x03
    17e4:	21 81       	ldd	r18, Z+1	; 0x01
    17e6:	32 81       	ldd	r19, Z+2	; 0x02
    17e8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	e8 0f       	add	r30, r24
    17f2:	f9 1f       	adc	r31, r25
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 83       	st	Z, r24
}
    17f8:	26 96       	adiw	r28, 0x06	; 6
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <mAngle+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <mAngle+0x8>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	7c 83       	std	Y+4, r23	; 0x04
    181e:	6b 83       	std	Y+3, r22	; 0x03
    1820:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	88 23       	and	r24, r24
    1826:	a9 f0       	breq	.+42     	; 0x1852 <mAngle+0x48>
		angle/=6;
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	26 e0       	ldi	r18, 0x06	; 6
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	b9 01       	movw	r22, r18
    1832:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodhi4>
    1836:	cb 01       	movw	r24, r22
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    183c:	e9 81       	ldd	r30, Y+1	; 0x01
    183e:	fa 81       	ldd	r31, Y+2	; 0x02
    1840:	81 81       	ldd	r24, Z+1	; 0x01
    1842:	92 81       	ldd	r25, Z+2	; 0x02
    1844:	fc 01       	movw	r30, r24
    1846:	34 96       	adiw	r30, 0x04	; 4
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	8f 71       	andi	r24, 0x1F	; 31
    184c:	80 64       	ori	r24, 0x40	; 64
    184e:	80 83       	st	Z, r24
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	92 81       	ldd	r25, Z+2	; 0x02
    185a:	fc 01       	movw	r30, r24
    185c:	34 96       	adiw	r30, 0x04	; 4
    185e:	10 82       	st	Z, r1
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <aDrive+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <aDrive+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6b 83       	std	Y+3, r22	; 0x03
    1882:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	88 23       	and	r24, r24
    1888:	41 f0       	breq	.+16     	; 0x189a <aDrive+0x2a>
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	01 80       	ldd	r0, Z+1	; 0x01
    1890:	f2 81       	ldd	r31, Z+2	; 0x02
    1892:	e0 2d       	mov	r30, r0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	80 83       	st	Z, r24
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    189a:	e9 81       	ldd	r30, Y+1	; 0x01
    189c:	fa 81       	ldd	r31, Y+2	; 0x02
    189e:	01 80       	ldd	r0, Z+1	; 0x01
    18a0:	f2 81       	ldd	r31, Z+2	; 0x02
    18a2:	e0 2d       	mov	r30, r0
    18a4:	10 82       	st	Z, r1

}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    18bc:	a4 e2       	ldi	r26, 0x24	; 36
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e2       	ldi	r30, 0x24	; 36
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 7f       	andi	r24, 0xF0	; 240
    18c8:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    18ca:	a5 e2       	ldi	r26, 0x25	; 37
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e5 e2       	ldi	r30, 0x25	; 37
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 60       	ori	r24, 0x0F	; 15
    18d6:	8c 93       	st	X, r24
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <Switch>:
/// スイッチ値取得関数 
/// </summary>
/// <param name="target"> メイン基盤上のスライドスイッチ番号　1〜4 </param>
/// <return> スイッチの状態 ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <Switch+0x6>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    18ea:	e3 e2       	ldi	r30, 0x23	; 35
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 95       	com	r24
    18f2:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	a9 01       	movw	r20, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <Switch+0x2c>
    1906:	55 95       	asr	r21
    1908:	47 95       	ror	r20
    190a:	8a 95       	dec	r24
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <Switch+0x28>
    190e:	ca 01       	movw	r24, r20
    1910:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	90 70       	andi	r25, 0x00	; 0
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Group>:

__inline__ unsigned char Group(void)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    192e:	e3 e2       	ldi	r30, 0x23	; 35
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 95       	com	r24
    1936:	86 95       	lsr	r24
    1938:	86 95       	lsr	r24
    193a:	83 70       	andi	r24, 0x03	; 3
}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <Channel>:

__inline__ unsigned char Channel(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    194a:	e3 e2       	ldi	r30, 0x23	; 35
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	80 95       	com	r24
    1952:	83 70       	andi	r24, 0x03	; 3
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	89 27       	eor	r24, r25
    196c:	88 23       	and	r24, r24
    196e:	71 f4       	brne	.+28     	; 0x198c <beep+0x32>
    1970:	80 91 32 01 	lds	r24, 0x0132
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	89 27       	eor	r24, r25
    1978:	88 23       	and	r24, r24
    197a:	41 f4       	brne	.+16     	; 0x198c <beep+0x32>
    197c:	a2 e2       	ldi	r26, 0x22	; 34
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e2       	ldi	r30, 0x22	; 34
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 60       	ori	r24, 0x08	; 8
    1988:	8c 93       	st	X, r24
    198a:	0b c0       	rjmp	.+22     	; 0x19a2 <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    198c:	80 91 32 01 	lds	r24, 0x0132
    1990:	88 23       	and	r24, r24
    1992:	39 f0       	breq	.+14     	; 0x19a2 <beep+0x48>
    1994:	a2 e2       	ldi	r26, 0x22	; 34
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e2 e2       	ldi	r30, 0x22	; 34
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	87 7f       	andi	r24, 0xF7	; 247
    19a0:	8c 93       	st	X, r24
}
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <BeepInit>:

void BeepInit()
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    19b2:	a1 e2       	ldi	r26, 0x21	; 33
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e1 e2       	ldi	r30, 0x21	; 33
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	88 60       	ori	r24, 0x08	; 8
    19be:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    19c0:	a2 e2       	ldi	r26, 0x22	; 34
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e2       	ldi	r30, 0x22	; 34
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	87 7f       	andi	r24, 0xF7	; 247
    19cc:	8c 93       	st	X, r24
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <i2cCheck>:

void i2cCheck(bool flag)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	69 81       	ldd	r22, Y+1	; 0x01
    19e4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LED>
	beep(!(flag));
    19e8:	99 81       	ldd	r25, Y+1	; 0x01
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 27       	eor	r24, r25
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
	if(!flag){
    19f6:	99 81       	ldd	r25, Y+1	; 0x01
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 27       	eor	r24, r25
    19fc:	88 23       	and	r24, r24
    19fe:	31 f0       	breq	.+12     	; 0x1a0c <i2cCheck+0x38>
		PORTC = 0x04;
    1a00:	e8 e2       	ldi	r30, 0x28	; 40
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	84 e0       	ldi	r24, 0x04	; 4
    1a06:	80 83       	st	Z, r24
		cli();
    1a08:	f8 94       	cli
    1a0a:	ff cf       	rjmp	.-2      	; 0x1a0a <i2cCheck+0x36>
		while(1);
	}
}
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <Emergency+0x6>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <Emergency+0x8>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	9b 83       	std	Y+3, r25	; 0x03
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	71 f4       	brne	.+28     	; 0x1a48 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a30:	01 80       	ldd	r0, Z+1	; 0x01
    1a32:	f2 81       	ldd	r31, Z+2	; 0x02
    1a34:	e0 2d       	mov	r30, r0
    1a36:	8a e6       	ldi	r24, 0x6A	; 106
    1a38:	80 83       	st	Z, r24
		beep(1);
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
		eflag=1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 9c 01 	sts	0x019C, r24
    1a46:	16 c0       	rjmp	.+44     	; 0x1a74 <Emergency+0x60>
		}
	else if(act==E_OFF){
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	69 f4       	brne	.+26     	; 0x1a68 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a50:	fb 81       	ldd	r31, Y+3	; 0x03
    1a52:	01 80       	ldd	r0, Z+1	; 0x01
    1a54:	f2 81       	ldd	r31, Z+2	; 0x02
    1a56:	e0 2d       	mov	r30, r0
    1a58:	85 e5       	ldi	r24, 0x55	; 85
    1a5a:	80 83       	st	Z, r24
		beep(0);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
		eflag=0;
    1a62:	10 92 9c 01 	sts	0x019C, r1
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1a68:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6c:	01 80       	ldd	r0, Z+1	; 0x01
    1a6e:	f2 81       	ldd	r31, Z+2	; 0x02
    1a70:	e0 2d       	mov	r30, r0
    1a72:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	0e 94 b7 09 	call	0x136e	; 0x136e <i2cRead>
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a80:	fb 81       	ldd	r31, Y+3	; 0x03
    1a82:	05 80       	ldd	r0, Z+5	; 0x05
    1a84:	f6 81       	ldd	r31, Z+6	; 0x06
    1a86:	e0 2d       	mov	r30, r0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8a 36       	cpi	r24, 0x6A	; 106
    1a8c:	31 f4       	brne	.+12     	; 0x1a9a <Emergency+0x86>
		beep(1);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	0e 94 ad 0c 	call	0x195a	; 0x195a <beep>
		eflag=1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 9c 01 	sts	0x019C, r24
		}
	if(*(emergency->read.buf)==0x55){
    1a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9e:	05 80       	ldd	r0, Z+5	; 0x05
    1aa0:	f6 81       	ldd	r31, Z+6	; 0x06
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	85 35       	cpi	r24, 0x55	; 85
    1aa8:	d9 f4       	brne	.+54     	; 0x1ae0 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1aaa:	a0 e6       	ldi	r26, 0x60	; 96
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e0 e6       	ldi	r30, 0x60	; 96
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 60       	ori	r24, 0x08	; 8
    1ab6:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1ab8:	a0 e6       	ldi	r26, 0x60	; 96
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e0 e6       	ldi	r30, 0x60	; 96
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 7b       	andi	r24, 0xBF	; 191
    1ac4:	8c 93       	st	X, r24
		wdt_reset();
    1ac6:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1ac8:	88 e1       	ldi	r24, 0x18	; 24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	28 e0       	ldi	r18, 0x08	; 8
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	a8 95       	wdr
    1ad4:	80 93 60 00 	sts	0x0060, r24
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	20 93 60 00 	sts	0x0060, r18
    1ade:	ff cf       	rjmp	.-2      	; 0x1ade <Emergency+0xca>
		while(1);
		}
	return tmp;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <EmergencyStatus>:

bool EmergencyStatus()
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1afa:	80 91 9c 01 	lds	r24, 0x019C
    1afe:	88 23       	and	r24, r24
    1b00:	11 f0       	breq	.+4      	; 0x1b06 <EmergencyStatus+0x16>
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <EmergencyStatus+0x1a>
	else return 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <__divmodhi4>:
    1b14:	97 fb       	bst	r25, 7
    1b16:	09 2e       	mov	r0, r25
    1b18:	07 26       	eor	r0, r23
    1b1a:	0a d0       	rcall	.+20     	; 0x1b30 <__divmodhi4_neg1>
    1b1c:	77 fd       	sbrc	r23, 7
    1b1e:	04 d0       	rcall	.+8      	; 0x1b28 <__divmodhi4_neg2>
    1b20:	0c d0       	rcall	.+24     	; 0x1b3a <__udivmodhi4>
    1b22:	06 d0       	rcall	.+12     	; 0x1b30 <__divmodhi4_neg1>
    1b24:	00 20       	and	r0, r0
    1b26:	1a f4       	brpl	.+6      	; 0x1b2e <__divmodhi4_exit>

00001b28 <__divmodhi4_neg2>:
    1b28:	70 95       	com	r23
    1b2a:	61 95       	neg	r22
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b2e <__divmodhi4_exit>:
    1b2e:	08 95       	ret

00001b30 <__divmodhi4_neg1>:
    1b30:	f6 f7       	brtc	.-4      	; 0x1b2e <__divmodhi4_exit>
    1b32:	90 95       	com	r25
    1b34:	81 95       	neg	r24
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	08 95       	ret

00001b3a <__udivmodhi4>:
    1b3a:	aa 1b       	sub	r26, r26
    1b3c:	bb 1b       	sub	r27, r27
    1b3e:	51 e1       	ldi	r21, 0x11	; 17
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <__udivmodhi4_ep>

00001b42 <__udivmodhi4_loop>:
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	a6 17       	cp	r26, r22
    1b48:	b7 07       	cpc	r27, r23
    1b4a:	10 f0       	brcs	.+4      	; 0x1b50 <__udivmodhi4_ep>
    1b4c:	a6 1b       	sub	r26, r22
    1b4e:	b7 0b       	sbc	r27, r23

00001b50 <__udivmodhi4_ep>:
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	5a 95       	dec	r21
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__udivmodhi4_loop>
    1b58:	80 95       	com	r24
    1b5a:	90 95       	com	r25
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	08 95       	ret

00001b62 <_exit>:
    1b62:	f8 94       	cli

00001b64 <__stop_program>:
    1b64:	ff cf       	rjmp	.-2      	; 0x1b64 <__stop_program>
