
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001c52  00001ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800138  00800138  00001d1e  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000156c  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015ab  00000000  00000000  00004109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  000056b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057d  00000000  00000000  00005a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_20>
      54:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_28>
      74:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e5       	ldi	r30, 0x52	; 82
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 33       	cpi	r26, 0x38	; 56
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a8 e3       	ldi	r26, 0x38	; 56
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3a       	cpi	r26, 0xA2	; 162
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ea 97       	sbiw	r28, 0x3a	; 58
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e6:	8c e0       	ldi	r24, 0x0C	; 12
      e8:	fe 01       	movw	r30, r28
      ea:	3e 96       	adiw	r30, 0x0e	; 14
      ec:	df 01       	movw	r26, r30
      ee:	28 2f       	mov	r18, r24
      f0:	1d 92       	st	X+, r1
      f2:	2a 95       	dec	r18
      f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x22>
	unsigned char action,uAction,dAction,e_flag, AirPort;
	int8_t uDuty;
	int16_t dDuty,count=0;
      f6:	1b 82       	std	Y+3, r1	; 0x03
      f8:	1a 82       	std	Y+2, r1	; 0x02

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	8a 8f       	std	Y+26, r24	; 0x1a
      fe:	ce 01       	movw	r24, r28
     100:	0e 96       	adiw	r24, 0x0e	; 14
     102:	9c 8f       	std	Y+28, r25	; 0x1c
     104:	8b 8f       	std	Y+27, r24	; 0x1b
     106:	84 e0       	ldi	r24, 0x04	; 4
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	9e 8f       	std	Y+30, r25	; 0x1e
     10c:	8d 8f       	std	Y+29, r24	; 0x1d
     10e:	ce 01       	movw	r24, r28
     110:	0e 96       	adiw	r24, 0x0e	; 14
     112:	04 96       	adiw	r24, 0x04	; 4
     114:	98 a3       	std	Y+32, r25	; 0x20
     116:	8f 8f       	std	Y+31, r24	; 0x1f
     118:	84 e0       	ldi	r24, 0x04	; 4
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	9a a3       	std	Y+34, r25	; 0x22
     11e:	89 a3       	std	Y+33, r24	; 0x21
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     120:	80 e4       	ldi	r24, 0x40	; 64
     122:	8b a3       	std	Y+35, r24	; 0x23
     124:	ce 01       	movw	r24, r28
     126:	0e 96       	adiw	r24, 0x0e	; 14
     128:	08 96       	adiw	r24, 0x08	; 8
     12a:	9d a3       	std	Y+37, r25	; 0x25
     12c:	8c a3       	std	Y+36, r24	; 0x24
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	9f a3       	std	Y+39, r25	; 0x27
     134:	8e a3       	std	Y+38, r24	; 0x26
     136:	ce 01       	movw	r24, r28
     138:	0e 96       	adiw	r24, 0x0e	; 14
     13a:	09 96       	adiw	r24, 0x09	; 9
     13c:	99 a7       	std	Y+41, r25	; 0x29
     13e:	88 a7       	std	Y+40, r24	; 0x28
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9b a7       	std	Y+43, r25	; 0x2b
     146:	8a a7       	std	Y+42, r24	; 0x2a
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	8c a7       	std	Y+44, r24	; 0x2c
     14c:	ce 01       	movw	r24, r28
     14e:	0e 96       	adiw	r24, 0x0e	; 14
     150:	0a 96       	adiw	r24, 0x0a	; 10
     152:	9e a7       	std	Y+46, r25	; 0x2e
     154:	8d a7       	std	Y+45, r24	; 0x2d
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	98 ab       	std	Y+48, r25	; 0x30
     15c:	8f a7       	std	Y+47, r24	; 0x2f
     15e:	ce 01       	movw	r24, r28
     160:	0e 96       	adiw	r24, 0x0e	; 14
     162:	0b 96       	adiw	r24, 0x0b	; 11
     164:	9a ab       	std	Y+50, r25	; 0x32
     166:	89 ab       	std	Y+49, r24	; 0x31
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	9c ab       	std	Y+52, r25	; 0x34
     16e:	8b ab       	std	Y+51, r24	; 0x33

	/*この辺にi2c関連の初期化をすればいいと思う*/

	bool i2cStatus;
	initCtrlData();
     170:	0e 94 9e 03 	call	0x73c	; 0x73c <initCtrlData>

	TCCR2A = 0;
     174:	e0 eb       	ldi	r30, 0xB0	; 176
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	10 82       	st	Z, r1
	TCCR2B = 1;
     17a:	e1 eb       	ldi	r30, 0xB1	; 177
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	80 83       	st	Z, r24
/*---------------------------------------------------------------*/
// 						書きかえちゃダメよ！
/*---------------------------------------------------------------*/
	LEDInit();
     182:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LEDInit>
	SwitchInit();
     186:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <SwitchInit>
	BeepInit();
     18a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <BeepInit>
	DDRC |= 0x04;
     18e:	a7 e2       	ldi	r26, 0x27	; 39
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	e7 e2       	ldi	r30, 0x27	; 39
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	84 60       	ori	r24, 0x04	; 4
     19a:	8c 93       	st	X, r24
	PORTC = 0x04;
     19c:	e8 e2       	ldi	r30, 0x28	; 40
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	84 e0       	ldi	r24, 0x04	; 4
     1a2:	80 83       	st	Z, r24
	
		
	initI2CMaster(100);
     1a4:	84 e6       	ldi	r24, 0x64	; 100
     1a6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <initI2CMaster>

	wdt_reset();
     1aa:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2d e0       	ldi	r18, 0x0D	; 13
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	a8 95       	wdr
     1b8:	80 93 60 00 	sts	0x0060, r24
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	68 e0       	ldi	r22, 0x08	; 8
     1c8:	4a e0       	ldi	r20, 0x0A	; 10
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart_init>
	uart_setbuffer(0,buf,36);
     1d0:	28 e3       	ldi	r18, 0x38	; 56
     1d2:	31 e0       	ldi	r19, 0x01	; 1
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	b9 01       	movw	r22, r18
     1da:	44 e2       	ldi	r20, 0x24	; 36
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uart_setbuffer>
	wait_ms(100);
     1e2:	84 e6       	ldi	r24, 0x64	; 100
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	68 e1       	ldi	r22, 0x18	; 24
     1f0:	40 e4       	ldi	r20, 0x40	; 64
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart_init>
	mu2_command("EI","08");
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	23 e0       	ldi	r18, 0x03	; 3
     1fe:	31 e0       	ldi	r19, 0x01	; 1
     200:	b9 01       	movw	r22, r18
     202:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <mu2_command>
	mu2_command("DI","80");
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	29 e0       	ldi	r18, 0x09	; 9
     20c:	31 e0       	ldi	r19, 0x01	; 1
     20e:	b9 01       	movw	r22, r18
     210:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <mu2_command>
	mu2_command("GI","04");
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	2f e0       	ldi	r18, 0x0F	; 15
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	b9 01       	movw	r22, r18
     21e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <mu2_command>
	mu2_command("CH","2E");
     222:	82 e1       	ldi	r24, 0x12	; 18
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	25 e1       	ldi	r18, 0x15	; 21
     228:	31 e0       	ldi	r19, 0x01	; 1
     22a:	b9 01       	movw	r22, r18
     22c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <mu2_command>
	mu2_command("BR","48");
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	2b e1       	ldi	r18, 0x1B	; 27
     236:	31 e0       	ldi	r19, 0x01	; 1
     238:	b9 01       	movw	r22, r18
     23a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	60 e9       	ldi	r22, 0x90	; 144
     244:	43 e0       	ldi	r20, 0x03	; 3
     246:	51 e0       	ldi	r21, 0x01	; 1
     248:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
	sei();
     264:	78 94       	sei
	wait_ms(1500);
     266:	8c ed       	ldi	r24, 0xDC	; 220
     268:	95 e0       	ldi	r25, 0x05	; 5
     26a:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_ms>
	PORTC &= 0xFB;
     26e:	a8 e2       	ldi	r26, 0x28	; 40
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	e8 e2       	ldi	r30, 0x28	; 40
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	8b 7f       	andi	r24, 0xFB	; 251
     27a:	8c 93       	st	X, r24
//	wait_ms(25);
	TCCR1A = 0;
     27c:	e0 e8       	ldi	r30, 0x80	; 128
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	10 82       	st	Z, r1
	TCCR1B = 5;
     282:	e1 e8       	ldi	r30, 0x81	; 129
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	80 83       	st	Z, r24
	TIMSK1 = 1;
     28a:	ef e6       	ldi	r30, 0x6F	; 111
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 83       	st	Z, r24
	TCNT1 = 0;
     292:	e4 e8       	ldi	r30, 0x84	; 132
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	11 82       	std	Z+1, r1	; 0x01
     298:	10 82       	st	Z, r1

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     29a:	0e 94 c1 03 	call	0x782	; 0x782 <Toggle_RC_Rx_Buffer>
     29e:	9d 87       	std	Y+13, r25	; 0x0d
     2a0:	8c 87       	std	Y+12, r24	; 0x0c
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     2a2:	ec 85       	ldd	r30, Y+12	; 0x0c
     2a4:	fd 85       	ldd	r31, Y+13	; 0x0d
     2a6:	81 81       	ldd	r24, Z+1	; 0x01
     2a8:	82 70       	andi	r24, 0x02	; 2
     2aa:	88 23       	and	r24, r24
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <main+0x1e2>
     2ae:	9a c0       	rjmp	.+308    	; 0x3e4 <main+0x316>
     2b0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2b2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2b4:	80 81       	ld	r24, Z
     2b6:	81 70       	andi	r24, 0x01	; 1
     2b8:	88 23       	and	r24, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <main+0x1f0>
     2bc:	93 c0       	rjmp	.+294    	; 0x3e4 <main+0x316>
     2be:	ec 85       	ldd	r30, Y+12	; 0x0c
     2c0:	fd 85       	ldd	r31, Y+13	; 0x0d
     2c2:	80 81       	ld	r24, Z
     2c4:	80 71       	andi	r24, 0x10	; 16
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <main+0x1fe>
     2ca:	8c c0       	rjmp	.+280    	; 0x3e4 <main+0x316>
     2cc:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ce:	fd 85       	ldd	r31, Y+13	; 0x0d
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	88 2f       	mov	r24, r24
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	8d 30       	cpi	r24, 0x0D	; 13
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f4       	brge	.+2      	; 0x2e0 <main+0x212>
     2de:	82 c0       	rjmp	.+260    	; 0x3e4 <main+0x316>
     2e0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2e2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2e4:	83 81       	ldd	r24, Z+3	; 0x03
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	88 2f       	mov	r24, r24
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	8d 30       	cpi	r24, 0x0D	; 13
     2ee:	91 05       	cpc	r25, r1
     2f0:	0c f4       	brge	.+2      	; 0x2f4 <main+0x226>
     2f2:	78 c0       	rjmp	.+240    	; 0x3e4 <main+0x316>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	68 e1       	ldi	r22, 0x18	; 24
     312:	43 e0       	ldi	r20, 0x03	; 3
     314:	51 e0       	ldi	r21, 0x01	; 1
     316:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	23 e0       	ldi	r18, 0x03	; 3
     320:	31 e0       	ldi	r19, 0x01	; 1
     322:	b9 01       	movw	r22, r18
     324:	0e 94 74 05 	call	0xae8	; 0xae8 <mu2_command_eeprom>
     328:	8d ab       	std	Y+53, r24	; 0x35
     32a:	8d a9       	ldd	r24, Y+53	; 0x35
     32c:	88 23       	and	r24, r24
     32e:	11 f0       	breq	.+4      	; 0x334 <main+0x266>
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	9d ab       	std	Y+53, r25	; 0x35
     334:	9d a9       	ldd	r25, Y+53	; 0x35
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	69 2f       	mov	r22, r25
     33a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	29 e0       	ldi	r18, 0x09	; 9
     344:	31 e0       	ldi	r19, 0x01	; 1
     346:	b9 01       	movw	r22, r18
     348:	0e 94 74 05 	call	0xae8	; 0xae8 <mu2_command_eeprom>
     34c:	8e ab       	std	Y+54, r24	; 0x36
     34e:	ae a9       	ldd	r26, Y+54	; 0x36
     350:	aa 23       	and	r26, r26
     352:	11 f0       	breq	.+4      	; 0x358 <main+0x28a>
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	be ab       	std	Y+54, r27	; 0x36
     358:	9e a9       	ldd	r25, Y+54	; 0x36
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	69 2f       	mov	r22, r25
     35e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     362:	8c e0       	ldi	r24, 0x0C	; 12
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	2f e0       	ldi	r18, 0x0F	; 15
     368:	31 e0       	ldi	r19, 0x01	; 1
     36a:	b9 01       	movw	r22, r18
     36c:	0e 94 74 05 	call	0xae8	; 0xae8 <mu2_command_eeprom>
     370:	8f ab       	std	Y+55, r24	; 0x37
     372:	2f a9       	ldd	r18, Y+55	; 0x37
     374:	22 23       	and	r18, r18
     376:	11 f0       	breq	.+4      	; 0x37c <main+0x2ae>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	8f ab       	std	Y+55, r24	; 0x37
     37c:	9f a9       	ldd	r25, Y+55	; 0x37
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	69 2f       	mov	r22, r25
     382:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     386:	82 e1       	ldi	r24, 0x12	; 18
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	25 e1       	ldi	r18, 0x15	; 21
     38c:	31 e0       	ldi	r19, 0x01	; 1
     38e:	b9 01       	movw	r22, r18
     390:	0e 94 74 05 	call	0xae8	; 0xae8 <mu2_command_eeprom>
     394:	88 af       	std	Y+56, r24	; 0x38
     396:	98 ad       	ldd	r25, Y+56	; 0x38
     398:	99 23       	and	r25, r25
     39a:	11 f0       	breq	.+4      	; 0x3a0 <main+0x2d2>
     39c:	a1 e0       	ldi	r26, 0x01	; 1
     39e:	a8 af       	std	Y+56, r26	; 0x38
     3a0:	98 ad       	ldd	r25, Y+56	; 0x38
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	69 2f       	mov	r22, r25
     3a6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	2b e1       	ldi	r18, 0x1B	; 27
     3b0:	31 e0       	ldi	r19, 0x01	; 1
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 74 05 	call	0xae8	; 0xae8 <mu2_command_eeprom>
     3b8:	89 af       	std	Y+57, r24	; 0x39
     3ba:	b9 ad       	ldd	r27, Y+57	; 0x39
     3bc:	bb 23       	and	r27, r27
     3be:	11 f0       	breq	.+4      	; 0x3c4 <main+0x2f6>
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	29 af       	std	Y+57, r18	; 0x39
     3c4:	99 ad       	ldd	r25, Y+57	; 0x39
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	69 2f       	mov	r22, r25
     3ca:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				wait_ms(100);
     3ce:	84 e6       	ldi	r24, 0x64	; 100
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	60 e9       	ldi	r22, 0x90	; 144
     3dc:	43 e0       	ldi	r20, 0x03	; 3
     3de:	51 e0       	ldi	r21, 0x01	; 1
     3e0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart_init>
			}
/*-------------------------------------------------------------------------*/
		if(controller->detail.Button.X&&count<110){
     3e4:	ec 85       	ldd	r30, Y+12	; 0x0c
     3e6:	fd 85       	ldd	r31, Y+13	; 0x0d
     3e8:	80 81       	ld	r24, Z
     3ea:	81 70       	andi	r24, 0x01	; 1
     3ec:	88 23       	and	r24, r24
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <main+0x324>
     3f0:	48 c0       	rjmp	.+144    	; 0x482 <main+0x3b4>
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	9b 81       	ldd	r25, Y+3	; 0x03
     3f6:	8e 36       	cpi	r24, 0x6E	; 110
     3f8:	91 05       	cpc	r25, r1
     3fa:	0c f0       	brlt	.+2      	; 0x3fe <main+0x330>
     3fc:	42 c0       	rjmp	.+132    	; 0x482 <main+0x3b4>
			uDuty = 100;
     3fe:	84 e6       	ldi	r24, 0x64	; 100
     400:	8e 83       	std	Y+6, r24	; 0x06
			dDuty = 100;
     402:	84 e6       	ldi	r24, 0x64	; 100
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9d 83       	std	Y+5, r25	; 0x05
     408:	8c 83       	std	Y+4, r24	; 0x04
			count++;
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	9b 81       	ldd	r25, Y+3	; 0x03
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	9b 83       	std	Y+3, r25	; 0x03
     412:	8a 83       	std	Y+2, r24	; 0x02
			if(count>35) dDuty =  -60-count;
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	84 32       	cpi	r24, 0x24	; 36
     41a:	91 05       	cpc	r25, r1
     41c:	44 f0       	brlt	.+16     	; 0x42e <main+0x360>
     41e:	84 ec       	ldi	r24, 0xC4	; 196
     420:	9f ef       	ldi	r25, 0xFF	; 255
     422:	2a 81       	ldd	r18, Y+2	; 0x02
     424:	3b 81       	ldd	r19, Y+3	; 0x03
     426:	82 1b       	sub	r24, r18
     428:	93 0b       	sbc	r25, r19
     42a:	9d 83       	std	Y+5, r25	; 0x05
     42c:	8c 83       	std	Y+4, r24	; 0x04
			if(dDuty<-100) dDuty = -100;
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	af ef       	ldi	r26, 0xFF	; 255
     434:	8c 39       	cpi	r24, 0x9C	; 156
     436:	9a 07       	cpc	r25, r26
     438:	24 f4       	brge	.+8      	; 0x442 <main+0x374>
     43a:	8c e9       	ldi	r24, 0x9C	; 156
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	9d 83       	std	Y+5, r25	; 0x05
     440:	8c 83       	std	Y+4, r24	; 0x04
			mDrive(&Motor,CCW,uDuty,0);	//BLUE
     442:	ce 01       	movw	r24, r28
     444:	4a 96       	adiw	r24, 0x1a	; 26
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	4e 81       	ldd	r20, Y+6	; 0x06
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     450:	8b 8d       	ldd	r24, Y+27	; 0x1b
     452:	9c 8d       	ldd	r25, Y+28	; 0x1c
     454:	dc 01       	movw	r26, r24
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	eb 8d       	ldd	r30, Y+27	; 0x1b
     45a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     45c:	80 81       	ld	r24, Z
     45e:	8c 93       	st	X, r24
			mDrive(&Motor,CW,(int8_t)dDuty,2);	//ORANGE
     460:	2c 81       	ldd	r18, Y+4	; 0x04
     462:	ce 01       	movw	r24, r28
     464:	4a 96       	adiw	r24, 0x1a	; 26
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	42 2f       	mov	r20, r18
     46a:	22 e0       	ldi	r18, 0x02	; 2
     46c:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
			mDrive(&Motor,CW,(int8_t)dDuty,3);	//ORANGE
     470:	2c 81       	ldd	r18, Y+4	; 0x04
     472:	ce 01       	movw	r24, r28
     474:	4a 96       	adiw	r24, 0x1a	; 26
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	42 2f       	mov	r20, r18
     47a:	23 e0       	ldi	r18, 0x03	; 3
     47c:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
     480:	b9 c0       	rjmp	.+370    	; 0x5f4 <main+0x526>
*/				

		/*ここにプログラムを記述するとよろしいのではないのかと思われます*/

		
			if(	controller->detail.AnalogR.Y<0x05	||
     482:	ec 85       	ldd	r30, Y+12	; 0x0c
     484:	fd 85       	ldd	r31, Y+13	; 0x0d
     486:	83 81       	ldd	r24, Z+3	; 0x03
     488:	8f 70       	andi	r24, 0x0F	; 15
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	85 30       	cpi	r24, 0x05	; 5
     490:	91 05       	cpc	r25, r1
     492:	4c f0       	brlt	.+18     	; 0x4a6 <main+0x3d8>
     494:	ec 85       	ldd	r30, Y+12	; 0x0c
     496:	fd 85       	ldd	r31, Y+13	; 0x0d
     498:	82 81       	ldd	r24, Z+2	; 0x02
     49a:	8f 70       	andi	r24, 0x0F	; 15
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	85 30       	cpi	r24, 0x05	; 5
     4a2:	91 05       	cpc	r25, r1
     4a4:	34 f4       	brge	.+12     	; 0x4b2 <main+0x3e4>
				controller->detail.AnalogL.Y<0x05	)
				{
					uDuty = 0;
     4a6:	1e 82       	std	Y+6, r1	; 0x06
					dDuty = 100;
     4a8:	84 e6       	ldi	r24, 0x64	; 100
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	9d 83       	std	Y+5, r25	; 0x05
     4ae:	8c 83       	std	Y+4, r24	; 0x04
     4b0:	2a c0       	rjmp	.+84     	; 0x506 <main+0x438>
				}
			else if(	controller->detail.AnalogR.Y>0x09	||
     4b2:	ec 85       	ldd	r30, Y+12	; 0x0c
     4b4:	fd 85       	ldd	r31, Y+13	; 0x0d
     4b6:	83 81       	ldd	r24, Z+3	; 0x03
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	8a 30       	cpi	r24, 0x0A	; 10
     4c0:	91 05       	cpc	r25, r1
     4c2:	4c f4       	brge	.+18     	; 0x4d6 <main+0x408>
     4c4:	ec 85       	ldd	r30, Y+12	; 0x0c
     4c6:	fd 85       	ldd	r31, Y+13	; 0x0d
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	8f 70       	andi	r24, 0x0F	; 15
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	8a 30       	cpi	r24, 0x0A	; 10
     4d2:	91 05       	cpc	r25, r1
     4d4:	2c f0       	brlt	.+10     	; 0x4e0 <main+0x412>
						controller->detail.AnalogL.Y>0x09	)
				{
					uDuty = 100;
     4d6:	84 e6       	ldi	r24, 0x64	; 100
     4d8:	8e 83       	std	Y+6, r24	; 0x06
					dDuty = 0;
     4da:	1d 82       	std	Y+5, r1	; 0x05
     4dc:	1c 82       	std	Y+4, r1	; 0x04
     4de:	13 c0       	rjmp	.+38     	; 0x506 <main+0x438>
				}
			else if(controller->detail.Button.B)
     4e0:	ec 85       	ldd	r30, Y+12	; 0x0c
     4e2:	fd 85       	ldd	r31, Y+13	; 0x0d
     4e4:	80 81       	ld	r24, Z
     4e6:	84 70       	andi	r24, 0x04	; 4
     4e8:	88 23       	and	r24, r24
     4ea:	39 f0       	breq	.+14     	; 0x4fa <main+0x42c>
				{
					uDuty = dDuty = 50;
     4ec:	82 e3       	ldi	r24, 0x32	; 50
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9d 83       	std	Y+5, r25	; 0x05
     4f2:	8c 83       	std	Y+4, r24	; 0x04
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	8e 83       	std	Y+6, r24	; 0x06
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <main+0x438>
				}
			else
				{
					uDuty = dDuty = 100;
     4fa:	84 e6       	ldi	r24, 0x64	; 100
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9d 83       	std	Y+5, r25	; 0x05
     500:	8c 83       	std	Y+4, r24	; 0x04
     502:	84 e6       	ldi	r24, 0x64	; 100
     504:	8e 83       	std	Y+6, r24	; 0x06
				}
		
			if(	controller->detail.Button.L			||
     506:	ec 85       	ldd	r30, Y+12	; 0x0c
     508:	fd 85       	ldd	r31, Y+13	; 0x0d
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	80 72       	andi	r24, 0x20	; 32
     50e:	88 23       	and	r24, r24
     510:	a1 f4       	brne	.+40     	; 0x53a <main+0x46c>
     512:	ec 85       	ldd	r30, Y+12	; 0x0c
     514:	fd 85       	ldd	r31, Y+13	; 0x0d
     516:	83 81       	ldd	r24, Z+3	; 0x03
     518:	82 95       	swap	r24
     51a:	8f 70       	andi	r24, 0x0F	; 15
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	85 30       	cpi	r24, 0x05	; 5
     522:	91 05       	cpc	r25, r1
     524:	54 f0       	brlt	.+20     	; 0x53a <main+0x46c>
     526:	ec 85       	ldd	r30, Y+12	; 0x0c
     528:	fd 85       	ldd	r31, Y+13	; 0x0d
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	82 95       	swap	r24
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	85 30       	cpi	r24, 0x05	; 5
     536:	91 05       	cpc	r25, r1
     538:	2c f4       	brge	.+10     	; 0x544 <main+0x476>
				controller->detail.AnalogR.X<0x05	||
				controller->detail.AnalogL.X<0x05	)
				{
					uAction=CW;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CCW;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	89 87       	std	Y+9, r24	; 0x09
     542:	39 c0       	rjmp	.+114    	; 0x5b6 <main+0x4e8>
				}
			else if( 	controller->detail.Button.R			||
     544:	ec 85       	ldd	r30, Y+12	; 0x0c
     546:	fd 85       	ldd	r31, Y+13	; 0x0d
     548:	81 81       	ldd	r24, Z+1	; 0x01
     54a:	80 74       	andi	r24, 0x40	; 64
     54c:	88 23       	and	r24, r24
     54e:	a1 f4       	brne	.+40     	; 0x578 <main+0x4aa>
     550:	ec 85       	ldd	r30, Y+12	; 0x0c
     552:	fd 85       	ldd	r31, Y+13	; 0x0d
     554:	83 81       	ldd	r24, Z+3	; 0x03
     556:	82 95       	swap	r24
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	8a 30       	cpi	r24, 0x0A	; 10
     560:	91 05       	cpc	r25, r1
     562:	54 f4       	brge	.+20     	; 0x578 <main+0x4aa>
     564:	ec 85       	ldd	r30, Y+12	; 0x0c
     566:	fd 85       	ldd	r31, Y+13	; 0x0d
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	82 95       	swap	r24
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	8a 30       	cpi	r24, 0x0A	; 10
     574:	91 05       	cpc	r25, r1
     576:	2c f0       	brlt	.+10     	; 0x582 <main+0x4b4>
						controller->detail.AnalogR.X>0x09	||
						controller->detail.AnalogL.X>0x09	)
				{
					uAction=CCW;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CW;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	89 87       	std	Y+9, r24	; 0x09
     580:	1a c0       	rjmp	.+52     	; 0x5b6 <main+0x4e8>
				}
			else if(controller->detail.Button.LEFT)
     582:	ec 85       	ldd	r30, Y+12	; 0x0c
     584:	fd 85       	ldd	r31, Y+13	; 0x0d
     586:	80 81       	ld	r24, Z
     588:	80 78       	andi	r24, 0x80	; 128
     58a:	88 23       	and	r24, r24
     58c:	29 f0       	breq	.+10     	; 0x598 <main+0x4ca>
				{
					uAction = dAction = CW;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	89 87       	std	Y+9, r24	; 0x09
     592:	89 85       	ldd	r24, Y+9	; 0x09
     594:	8a 87       	std	Y+10, r24	; 0x0a
     596:	0f c0       	rjmp	.+30     	; 0x5b6 <main+0x4e8>
				}
			else if(controller->detail.Button.RIGHT)
     598:	ec 85       	ldd	r30, Y+12	; 0x0c
     59a:	fd 85       	ldd	r31, Y+13	; 0x0d
     59c:	80 81       	ld	r24, Z
     59e:	80 72       	andi	r24, 0x20	; 32
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <main+0x4e0>
				{
					uAction = dAction = CCW;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	89 87       	std	Y+9, r24	; 0x09
     5a8:	89 85       	ldd	r24, Y+9	; 0x09
     5aa:	8a 87       	std	Y+10, r24	; 0x0a
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <main+0x4e8>
				}
			else
				{
					uAction = dAction = BRAKE;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	89 87       	std	Y+9, r24	; 0x09
     5b2:	89 85       	ldd	r24, Y+9	; 0x09
     5b4:	8a 87       	std	Y+10, r24	; 0x0a
				}

			mDrive(&Motor,uAction,uDuty,0);	//BLUE
     5b6:	ce 01       	movw	r24, r28
     5b8:	4a 96       	adiw	r24, 0x1a	; 26
     5ba:	6a 85       	ldd	r22, Y+10	; 0x0a
     5bc:	4e 81       	ldd	r20, Y+6	; 0x06
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     5c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5c8:	dc 01       	movw	r26, r24
     5ca:	11 96       	adiw	r26, 0x01	; 1
     5cc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5ce:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5d0:	80 81       	ld	r24, Z
     5d2:	8c 93       	st	X, r24
			mDrive(&Motor,dAction,(int8_t)dDuty,2);	//ORANGE
     5d4:	2c 81       	ldd	r18, Y+4	; 0x04
     5d6:	ce 01       	movw	r24, r28
     5d8:	4a 96       	adiw	r24, 0x1a	; 26
     5da:	69 85       	ldd	r22, Y+9	; 0x09
     5dc:	42 2f       	mov	r20, r18
     5de:	22 e0       	ldi	r18, 0x02	; 2
     5e0:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
			mDrive(&Motor,dAction,(int8_t)dDuty,3);	//ORANGE
     5e4:	2c 81       	ldd	r18, Y+4	; 0x04
     5e6:	ce 01       	movw	r24, r28
     5e8:	4a 96       	adiw	r24, 0x1a	; 26
     5ea:	69 85       	ldd	r22, Y+9	; 0x09
     5ec:	42 2f       	mov	r20, r18
     5ee:	23 e0       	ldi	r18, 0x03	; 3
     5f0:	0e 94 38 0c 	call	0x1870	; 0x1870 <mDrive>
		}
/*-------------------------------------------------------------------------------------------------------------------------*/
		action = FREE;
     5f4:	1b 86       	std	Y+11, r1	; 0x0b
		if(controller->detail.Button.Y)
     5f6:	ec 85       	ldd	r30, Y+12	; 0x0c
     5f8:	fd 85       	ldd	r31, Y+13	; 0x0d
     5fa:	80 81       	ld	r24, Z
     5fc:	88 70       	andi	r24, 0x08	; 8
     5fe:	88 23       	and	r24, r24
     600:	29 f0       	breq	.+10     	; 0x60c <main+0x53e>
			{
				action = CW;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x03;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	8f 83       	std	Y+7, r24	; 0x07
     60a:	15 c0       	rjmp	.+42     	; 0x636 <main+0x568>
			}
		else if(controller->detail.Button.ZL)
     60c:	ec 85       	ldd	r30, Y+12	; 0x0c
     60e:	fd 85       	ldd	r31, Y+13	; 0x0d
     610:	81 81       	ldd	r24, Z+1	; 0x01
     612:	88 70       	andi	r24, 0x08	; 8
     614:	88 23       	and	r24, r24
     616:	29 f0       	breq	.+10     	; 0x622 <main+0x554>
			{
				action = CW;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x01;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	8f 83       	std	Y+7, r24	; 0x07
     620:	0a c0       	rjmp	.+20     	; 0x636 <main+0x568>
			}
		else if(controller->detail.Button.ZR)
     622:	ec 85       	ldd	r30, Y+12	; 0x0c
     624:	fd 85       	ldd	r31, Y+13	; 0x0d
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	80 71       	andi	r24, 0x10	; 16
     62a:	88 23       	and	r24, r24
     62c:	21 f0       	breq	.+8      	; 0x636 <main+0x568>
			{
				action = CW;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x02;
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	8f 83       	std	Y+7, r24	; 0x07
			}
		aDrive(&Air,AirPort,action);
     636:	bb 85       	ldd	r27, Y+11	; 0x0b
     638:	ba af       	std	Y+58, r27	; 0x3a
     63a:	2a ad       	ldd	r18, Y+58	; 0x3a
     63c:	22 23       	and	r18, r18
     63e:	11 f0       	breq	.+4      	; 0x644 <main+0x576>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	8a af       	std	Y+58, r24	; 0x3a
     644:	2a ad       	ldd	r18, Y+58	; 0x3a
     646:	ce 01       	movw	r24, r28
     648:	83 96       	adiw	r24, 0x23	; 35
     64a:	6f 81       	ldd	r22, Y+7	; 0x07
     64c:	42 2f       	mov	r20, r18
     64e:	0e 94 ae 0c 	call	0x195c	; 0x195c <aDrive>
/*-------------------------------------------------------------------------------------------------------------------------*/
		/*バルスモード*/
		/*バルス!!!!!*/
		if(controller->detail.Button.A||(controller->detail.Button.SELECT&&controller->detail.Button.START)) e_flag=E_ON;
     652:	ec 85       	ldd	r30, Y+12	; 0x0c
     654:	fd 85       	ldd	r31, Y+13	; 0x0d
     656:	80 81       	ld	r24, Z
     658:	82 70       	andi	r24, 0x02	; 2
     65a:	88 23       	and	r24, r24
     65c:	61 f4       	brne	.+24     	; 0x676 <main+0x5a8>
     65e:	ec 85       	ldd	r30, Y+12	; 0x0c
     660:	fd 85       	ldd	r31, Y+13	; 0x0d
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	81 70       	andi	r24, 0x01	; 1
     666:	88 23       	and	r24, r24
     668:	49 f0       	breq	.+18     	; 0x67c <main+0x5ae>
     66a:	ec 85       	ldd	r30, Y+12	; 0x0c
     66c:	fd 85       	ldd	r31, Y+13	; 0x0d
     66e:	81 81       	ldd	r24, Z+1	; 0x01
     670:	84 70       	andi	r24, 0x04	; 4
     672:	88 23       	and	r24, r24
     674:	19 f0       	breq	.+6      	; 0x67c <main+0x5ae>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	88 87       	std	Y+8, r24	; 0x08
     67a:	0c c0       	rjmp	.+24     	; 0x694 <main+0x5c6>
		/*復活!!!!!!!*/
		else if(controller->detail.Button.HOME){
     67c:	ec 85       	ldd	r30, Y+12	; 0x0c
     67e:	fd 85       	ldd	r31, Y+13	; 0x0d
     680:	81 81       	ldd	r24, Z+1	; 0x01
     682:	82 70       	andi	r24, 0x02	; 2
     684:	88 23       	and	r24, r24
     686:	29 f0       	breq	.+10     	; 0x692 <main+0x5c4>
			e_flag=E_OFF;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	88 87       	std	Y+8, r24	; 0x08
			count = 0;
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	1a 82       	std	Y+2, r1	; 0x02
     690:	01 c0       	rjmp	.+2      	; 0x694 <main+0x5c6>
		}
		else e_flag=E_KEEP;	
     692:	18 86       	std	Y+8, r1	; 0x08

		i2cStatus = true;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	08 2f       	mov	r16, r24
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	28 85       	ldd	r18, Y+8	; 0x08
     6a0:	ce 01       	movw	r24, r28
     6a2:	8c 96       	adiw	r24, 0x2c	; 44
     6a4:	62 2f       	mov	r22, r18
     6a6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <Emergency>
     6aa:	88 2f       	mov	r24, r24
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	80 23       	and	r24, r16
     6b0:	91 23       	and	r25, r17
     6b2:	19 82       	std	Y+1, r1	; 0x01
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	11 f0       	breq	.+4      	; 0x6bc <main+0x5ee>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(10);
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	08 2f       	mov	r16, r24
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	ce 01       	movw	r24, r28
     6c4:	4a 96       	adiw	r24, 0x1a	; 26
     6c6:	0e 94 ab 09 	call	0x1356	; 0x1356 <i2cWrite>
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	80 23       	and	r24, r16
     6d0:	91 23       	and	r25, r17
     6d2:	19 82       	std	Y+1, r1	; 0x01
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	11 f0       	breq	.+4      	; 0x6dc <main+0x60e>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	8a e0       	ldi	r24, 0x0A	; 10
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 00 0c 	call	0x1800	; 0x1800 <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(10);
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	08 2f       	mov	r16, r24
     6e8:	10 e0       	ldi	r17, 0x00	; 0
     6ea:	ce 01       	movw	r24, r28
     6ec:	83 96       	adiw	r24, 0x23	; 35
     6ee:	0e 94 ab 09 	call	0x1356	; 0x1356 <i2cWrite>
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	80 23       	and	r24, r16
     6f8:	91 23       	and	r25, r17
     6fa:	19 82       	std	Y+1, r1	; 0x01
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	11 f0       	breq	.+4      	; 0x704 <main+0x636>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	8a e0       	ldi	r24, 0x0A	; 10
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 00 0c 	call	0x1800	; 0x1800 <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	08 2f       	mov	r16, r24
     710:	10 e0       	ldi	r17, 0x00	; 0
     712:	ce 01       	movw	r24, r28
     714:	8c 96       	adiw	r24, 0x2c	; 44
     716:	0e 94 ab 09 	call	0x1356	; 0x1356 <i2cWrite>
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	80 23       	and	r24, r16
     720:	91 23       	and	r25, r17
     722:	19 82       	std	Y+1, r1	; 0x01
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	11 f0       	breq	.+4      	; 0x72c <main+0x65e>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cCheck>
		wait_ms(25);
     732:	89 e1       	ldi	r24, 0x19	; 25
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 16 0c 	call	0x182c	; 0x182c <wait_ms>
     73a:	af cd       	rjmp	.-1186   	; 0x29a <main+0x1cc>

0000073c <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     744:	10 92 5c 01 	sts	0x015C, r1
     748:	15 c0       	rjmp	.+42     	; 0x774 <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     74a:	80 91 5c 01 	lds	r24, 0x015C
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	80 91 5c 01 	lds	r24, 0x015C
     756:	88 2f       	mov	r24, r24
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	e2 5e       	subi	r30, 0xE2	; 226
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	80 81       	ld	r24, Z
     762:	f9 01       	movw	r30, r18
     764:	e0 5a       	subi	r30, 0xA0	; 160
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     76a:	80 91 5c 01 	lds	r24, 0x015C
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 5c 01 	sts	0x015C, r24
     774:	80 91 5c 01 	lds	r24, 0x015C
     778:	84 30       	cpi	r24, 0x04	; 4
     77a:	38 f3       	brcs	.-50     	; 0x74a <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	08 95       	ret

00000782 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	cli();
     78a:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     78c:	10 92 5c 01 	sts	0x015C, r1
     790:	15 c0       	rjmp	.+42     	; 0x7bc <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     792:	80 91 5c 01 	lds	r24, 0x015C
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	80 91 5c 01 	lds	r24, 0x015C
     79e:	88 2f       	mov	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	fc 01       	movw	r30, r24
     7a4:	e0 5a       	subi	r30, 0xA0	; 160
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	80 81       	ld	r24, Z
     7aa:	f9 01       	movw	r30, r18
     7ac:	ec 59       	subi	r30, 0x9C	; 156
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     7b2:	80 91 5c 01 	lds	r24, 0x015C
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 5c 01 	sts	0x015C, r24
     7bc:	80 91 5c 01 	lds	r24, 0x015C
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	38 f3       	brcs	.-50     	; 0x792 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     7c4:	78 94       	sei
	return &keepCtrlData;
     7c6:	84 e6       	ldi	r24, 0x64	; 100
     7c8:	91 e0       	ldi	r25, 0x01	; 1
}
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <__vector_20>:


ISR(USART0_RX_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	00 90 5b 00 	lds	r0, 0x005B
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     800:	e6 ec       	ldi	r30, 0xC6	; 198
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	80 93 80 01 	sts	0x0180, r24

	if(phase){
     80a:	80 91 5e 01 	lds	r24, 0x015E
     80e:	88 23       	and	r24, r24
     810:	09 f4       	brne	.+2      	; 0x814 <__vector_20+0x44>
     812:	52 c0       	rjmp	.+164    	; 0x8b8 <__vector_20+0xe8>
		packet[cnt] = val;
     814:	80 91 5d 01 	lds	r24, 0x015D
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	20 91 80 01 	lds	r18, 0x0180
     820:	fc 01       	movw	r30, r24
     822:	e8 59       	subi	r30, 0x98	; 152
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     828:	80 91 5d 01 	lds	r24, 0x015D
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	b0 f4       	brcc	.+44     	; 0x85c <__vector_20+0x8c>
			if(val != check[cnt]){
     830:	80 91 5d 01 	lds	r24, 0x015D
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	ee 5d       	subi	r30, 0xDE	; 222
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	90 81       	ld	r25, Z
     840:	80 91 80 01 	lds	r24, 0x0180
     844:	98 17       	cp	r25, r24
     846:	91 f1       	breq	.+100    	; 0x8ac <__vector_20+0xdc>
				phase = false;
     848:	10 92 5e 01 	sts	0x015E, r1
//				uart1_putchar('@');
				LED(0,false);
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
				beep(1);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
     85a:	28 c0       	rjmp	.+80     	; 0x8ac <__vector_20+0xdc>
			}
		}else if(cnt==8){
     85c:	80 91 5d 01 	lds	r24, 0x015D
     860:	88 30       	cpi	r24, 0x08	; 8
     862:	21 f5       	brne	.+72     	; 0x8ac <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     864:	80 91 6d 01 	lds	r24, 0x016D
     868:	80 93 60 01 	sts	0x0160, r24
			ctrlData.buf[1] = packet[6];
     86c:	80 91 6e 01 	lds	r24, 0x016E
     870:	80 93 61 01 	sts	0x0161, r24
			ctrlData.buf[2] = packet[7];
     874:	80 91 6f 01 	lds	r24, 0x016F
     878:	80 93 62 01 	sts	0x0162, r24
			ctrlData.buf[3] = packet[8];
     87c:	80 91 70 01 	lds	r24, 0x0170
     880:	80 93 63 01 	sts	0x0163, r24
			phase = false;
     884:	10 92 5e 01 	sts	0x015E, r1
			wdt_reset();
     888:	a8 95       	wdr
			LED(0,true);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
			if(EmergencyStatus()) beep(0);
     892:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <EmergencyStatus>
     896:	88 23       	and	r24, r24
     898:	19 f0       	breq	.+6      	; 0x8a0 <__vector_20+0xd0>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
			ovf_cnt = 0;
     8a0:	10 92 5f 01 	sts	0x015F, r1
			TCNT1 = 0;
     8a4:	e4 e8       	ldi	r30, 0x84	; 132
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	11 82       	std	Z+1, r1	; 0x01
     8aa:	10 82       	st	Z, r1
		}
		cnt++;
     8ac:	80 91 5d 01 	lds	r24, 0x015D
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 5d 01 	sts	0x015D, r24
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__vector_20+0xfa>
	}else{
		if(val=='*'){
     8b8:	80 91 80 01 	lds	r24, 0x0180
     8bc:	8a 32       	cpi	r24, 0x2A	; 42
     8be:	29 f4       	brne	.+10     	; 0x8ca <__vector_20+0xfa>
		cnt = 0;
     8c0:	10 92 5d 01 	sts	0x015D, r1
		phase = true;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 5e 01 	sts	0x015E, r24
		}
	}

}
     8ca:	cf 91       	pop	r28
     8cc:	df 91       	pop	r29
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	00 92 5b 00 	sts	0x005B, r0
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <__vector_15>:

ISR (TIMER1_OVF_vect){
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	00 90 5b 00 	lds	r0, 0x005B
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     91a:	80 91 5f 01 	lds	r24, 0x015F
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 5f 01 	sts	0x015F, r24
	if(ovf_cnt>150){
     924:	80 91 5f 01 	lds	r24, 0x015F
     928:	87 39       	cpi	r24, 0x97	; 151
     92a:	f0 f0       	brcs	.+60     	; 0x968 <__vector_15+0x72>
		ovf_cnt = 0;
     92c:	10 92 5f 01 	sts	0x015F, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     930:	10 92 5c 01 	sts	0x015C, r1
     934:	15 c0       	rjmp	.+42     	; 0x960 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     936:	80 91 5c 01 	lds	r24, 0x015C
     93a:	28 2f       	mov	r18, r24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	80 91 5c 01 	lds	r24, 0x015C
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	fc 01       	movw	r30, r24
     948:	e2 5e       	subi	r30, 0xE2	; 226
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	80 81       	ld	r24, Z
     94e:	f9 01       	movw	r30, r18
     950:	e0 5a       	subi	r30, 0xA0	; 160
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     956:	80 91 5c 01 	lds	r24, 0x015C
     95a:	8f 5f       	subi	r24, 0xFF	; 255
     95c:	80 93 5c 01 	sts	0x015C, r24
     960:	80 91 5c 01 	lds	r24, 0x015C
     964:	84 30       	cpi	r24, 0x04	; 4
     966:	38 f3       	brcs	.-50     	; 0x936 <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	00 92 5b 00 	sts	0x005B, r0
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <Byte2Str>:
/// バイト（0x00〜0xFF）の数を2桁の文字列に変換
/// </summary>
/// <param name="num">変換対象の数字</param>
/// <param name="str">変換後の文字列を格納する領域</param>
void Byte2Str(unsigned char num, char *str)
{
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	00 d0       	rcall	.+0      	; 0x98e <Byte2Str+0x6>
     98e:	0f 92       	push	r0
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	7b 83       	std	Y+3, r23	; 0x03
     998:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	82 95       	swap	r24
     99e:	8f 70       	andi	r24, 0x0F	; 15
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	ea 5d       	subi	r30, 0xDA	; 218
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	80 81       	ld	r24, Z
     9ac:	ea 81       	ldd	r30, Y+2	; 0x02
     9ae:	fb 81       	ldd	r31, Y+3	; 0x03
     9b0:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	9b 81       	ldd	r25, Y+3	; 0x03
     9b6:	dc 01       	movw	r26, r24
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	8f 70       	andi	r24, 0x0F	; 15
     9c2:	90 70       	andi	r25, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	ea 5d       	subi	r30, 0xDA	; 218
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	80 81       	ld	r24, Z
     9cc:	8c 93       	st	X, r24
	str[2] = '\0';
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	fc 01       	movw	r30, r24
     9d4:	32 96       	adiw	r30, 0x02	; 2
     9d6:	10 82       	st	Z, r1
}
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <mu2_command+0xa>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <mu2_command+0xc>
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	7c 83       	std	Y+4, r23	; 0x04
     9fc:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a04:	e9 81       	ldd	r30, Y+1	; 0x01
     a06:	fa 81       	ldd	r31, Y+2	; 0x02
     a08:	80 81       	ld	r24, Z
     a0a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	fc 01       	movw	r30, r24
     a14:	31 96       	adiw	r30, 0x01	; 1
     a16:	80 81       	ld	r24, Z
     a18:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a1e:	eb 81       	ldd	r30, Y+3	; 0x03
     a20:	fc 81       	ldd	r31, Y+4	; 0x04
     a22:	80 81       	ld	r24, Z
     a24:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
		val++;
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a32:	eb 81       	ldd	r30, Y+3	; 0x03
     a34:	fc 81       	ldd	r31, Y+4	; 0x04
     a36:	80 81       	ld	r24, Z
     a38:	88 23       	and	r24, r24
     a3a:	89 f7       	brne	.-30     	; 0xa1e <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     a3c:	8d e0       	ldi	r24, 0x0D	; 13
     a3e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(0x0a);
     a42:	8a e0       	ldi	r24, 0x0A	; 10
     a44:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	for(i=0;i<10;i++){
     a48:	10 92 81 01 	sts	0x0181, r1
     a4c:	32 c0       	rjmp	.+100    	; 0xab2 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     a4e:	80 91 81 01 	lds	r24, 0x0181
     a52:	08 2f       	mov	r16, r24
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	0e 94 c2 06 	call	0xd84	; 0xd84 <uart0_getchar>
     a5a:	f8 01       	movw	r30, r16
     a5c:	ee 57       	subi	r30, 0x7E	; 126
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     a62:	80 91 81 01 	lds	r24, 0x0181
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	fc 01       	movw	r30, r24
     a6c:	ee 57       	subi	r30, 0x7E	; 126
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	80 81       	ld	r24, Z
     a72:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     a76:	80 91 81 01 	lds	r24, 0x0181
     a7a:	88 23       	and	r24, r24
     a7c:	a9 f0       	breq	.+42     	; 0xaa8 <mu2_command+0xc4>
     a7e:	80 91 81 01 	lds	r24, 0x0181
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	fc 01       	movw	r30, r24
     a8a:	ee 57       	subi	r30, 0x7E	; 126
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	80 81       	ld	r24, Z
     a90:	8d 30       	cpi	r24, 0x0D	; 13
     a92:	51 f4       	brne	.+20     	; 0xaa8 <mu2_command+0xc4>
     a94:	80 91 81 01 	lds	r24, 0x0181
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	ee 57       	subi	r30, 0x7E	; 126
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	49 f0       	breq	.+18     	; 0xaba <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     aa8:	80 91 81 01 	lds	r24, 0x0181
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	80 93 81 01 	sts	0x0181, r24
     ab2:	80 91 81 01 	lds	r24, 0x0181
     ab6:	8a 30       	cpi	r24, 0x0A	; 10
     ab8:	50 f2       	brcs	.-108    	; 0xa4e <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     aba:	80 91 83 01 	lds	r24, 0x0183
     abe:	85 34       	cpi	r24, 0x45	; 69
     ac0:	39 f4       	brne	.+14     	; 0xad0 <mu2_command+0xec>
     ac2:	80 91 84 01 	lds	r24, 0x0184
     ac6:	82 35       	cpi	r24, 0x52	; 82
     ac8:	19 f4       	brne	.+6      	; 0xad0 <mu2_command+0xec>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	8d 83       	std	Y+5, r24	; 0x05
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <mu2_command+0xee>
	return 0;
     ad0:	1d 82       	std	Y+5, r1	; 0x05
     ad2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	cf 91       	pop	r28
     ae0:	df 91       	pop	r29
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <mu2_command_eeprom+0xa>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <mu2_command_eeprom+0xc>
     af4:	0f 92       	push	r0
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	7c 83       	std	Y+4, r23	; 0x04
     b00:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     b02:	80 e4       	ldi	r24, 0x40	; 64
     b04:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(cmd[0]);
     b08:	e9 81       	ldd	r30, Y+1	; 0x01
     b0a:	fa 81       	ldd	r31, Y+2	; 0x02
     b0c:	80 81       	ld	r24, Z
     b0e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(cmd[1]);
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	fc 01       	movw	r30, r24
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	80 81       	ld	r24, Z
     b1c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     b22:	eb 81       	ldd	r30, Y+3	; 0x03
     b24:	fc 81       	ldd	r31, Y+4	; 0x04
     b26:	80 81       	ld	r24, Z
     b28:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
		val++;
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	9c 81       	ldd	r25, Y+4	; 0x04
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9c 83       	std	Y+4, r25	; 0x04
     b34:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     b36:	eb 81       	ldd	r30, Y+3	; 0x03
     b38:	fc 81       	ldd	r31, Y+4	; 0x04
     b3a:	80 81       	ld	r24, Z
     b3c:	88 23       	and	r24, r24
     b3e:	89 f7       	brne	.-30     	; 0xb22 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     b40:	8f e2       	ldi	r24, 0x2F	; 47
     b42:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar('W');
     b46:	87 e5       	ldi	r24, 0x57	; 87
     b48:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(0x0d);
     b4c:	8d e0       	ldi	r24, 0x0D	; 13
     b4e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	uart0_putchar(0x0a);
     b52:	8a e0       	ldi	r24, 0x0A	; 10
     b54:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <uart0_putchar>
	for(i=0;i<10;i++){
     b58:	10 92 81 01 	sts	0x0181, r1
     b5c:	32 c0       	rjmp	.+100    	; 0xbc2 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     b5e:	80 91 81 01 	lds	r24, 0x0181
     b62:	08 2f       	mov	r16, r24
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	0e 94 c2 06 	call	0xd84	; 0xd84 <uart0_getchar>
     b6a:	f8 01       	movw	r30, r16
     b6c:	ee 57       	subi	r30, 0x7E	; 126
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     b72:	80 91 81 01 	lds	r24, 0x0181
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	ee 57       	subi	r30, 0x7E	; 126
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	80 81       	ld	r24, Z
     b82:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     b86:	80 91 81 01 	lds	r24, 0x0181
     b8a:	88 23       	and	r24, r24
     b8c:	a9 f0       	breq	.+42     	; 0xbb8 <mu2_command_eeprom+0xd0>
     b8e:	80 91 81 01 	lds	r24, 0x0181
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	ee 57       	subi	r30, 0x7E	; 126
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 81       	ld	r24, Z
     ba0:	8d 30       	cpi	r24, 0x0D	; 13
     ba2:	51 f4       	brne	.+20     	; 0xbb8 <mu2_command_eeprom+0xd0>
     ba4:	80 91 81 01 	lds	r24, 0x0181
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	ee 57       	subi	r30, 0x7E	; 126
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	80 81       	ld	r24, Z
     bb4:	8a 30       	cpi	r24, 0x0A	; 10
     bb6:	49 f0       	breq	.+18     	; 0xbca <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     bb8:	80 91 81 01 	lds	r24, 0x0181
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	80 93 81 01 	sts	0x0181, r24
     bc2:	80 91 81 01 	lds	r24, 0x0181
     bc6:	8a 30       	cpi	r24, 0x0A	; 10
     bc8:	50 f2       	brcs	.-108    	; 0xb5e <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     bca:	80 91 83 01 	lds	r24, 0x0183
     bce:	85 34       	cpi	r24, 0x45	; 69
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <mu2_command_eeprom+0xf8>
     bd2:	80 91 84 01 	lds	r24, 0x0184
     bd6:	82 35       	cpi	r24, 0x52	; 82
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <mu2_command_eeprom+0xf8>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <mu2_command_eeprom+0xfa>
	return 0;
     be0:	1d 82       	std	Y+5, r1	; 0x05
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2d 97       	sbiw	r28, 0x0d	; 13
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	9c 83       	std	Y+4, r25	; 0x04
     c0e:	8b 83       	std	Y+3, r24	; 0x03
     c10:	6d 83       	std	Y+5, r22	; 0x05
     c12:	5f 83       	std	Y+7, r21	; 0x07
     c14:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	9d 87       	std	Y+13, r25	; 0x0d
     c1c:	8c 87       	std	Y+12, r24	; 0x0c
     c1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c20:	9d 85       	ldd	r25, Y+13	; 0x0d
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	31 f0       	breq	.+12     	; 0xc32 <uart_init+0x3a>
     c26:	8c 85       	ldd	r24, Y+12	; 0x0c
     c28:	9d 85       	ldd	r25, Y+13	; 0x0d
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	91 05       	cpc	r25, r1
     c2e:	b1 f1       	breq	.+108    	; 0xc9c <uart_init+0xa4>
     c30:	64 c0       	rjmp	.+200    	; 0xcfa <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     c32:	e1 ec       	ldi	r30, 0xC1	; 193
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     c38:	a2 ec       	ldi	r26, 0xC2	; 194
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e2 ec       	ldi	r30, 0xC2	; 194
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	86 60       	ori	r24, 0x06	; 6
     c44:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     c46:	1a 82       	std	Y+2, r1	; 0x02
     c48:	19 82       	std	Y+1, r1	; 0x01
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <uart_init+0x5e>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	23 e1       	ldi	r18, 0x13	; 19
     c5c:	88 38       	cpi	r24, 0x88	; 136
     c5e:	92 07       	cpc	r25, r18
     c60:	ac f3       	brlt	.-22     	; 0xc4c <uart_init+0x54>
			UCSR0B = option;					
     c62:	e1 ec       	ldi	r30, 0xC1	; 193
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     c6a:	e5 ec       	ldi	r30, 0xC5	; 197
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	9f 81       	ldd	r25, Y+7	; 0x07
     c72:	89 2f       	mov	r24, r25
     c74:	99 27       	eor	r25, r25
     c76:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     c78:	e4 ec       	ldi	r30, 0xC4	; 196
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8e 81       	ldd	r24, Y+6	; 0x06
     c7e:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     c80:	e0 ec       	ldi	r30, 0xC0	; 192
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     c86:	a0 ec       	ldi	r26, 0xC0	; 192
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e0 ec       	ldi	r30, 0xC0	; 192
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	83 7e       	andi	r24, 0xE3	; 227
     c92:	8c 93       	st	X, r24
			UDR0 = 0;
     c94:	e6 ec       	ldi	r30, 0xC6	; 198
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	10 82       	st	Z, r1
     c9a:	34 c0       	rjmp	.+104    	; 0xd04 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     c9c:	ed ec       	ldi	r30, 0xCD	; 205
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8e 81       	ldd	r24, Y+6	; 0x06
     ca2:	9f 81       	ldd	r25, Y+7	; 0x07
     ca4:	89 2f       	mov	r24, r25
     ca6:	99 27       	eor	r25, r25
     ca8:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     caa:	ec ec       	ldi	r30, 0xCC	; 204
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     cb2:	1a 82       	std	Y+2, r1	; 0x02
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <uart_init+0xca>
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	23 e1       	ldi	r18, 0x13	; 19
     cc8:	88 38       	cpi	r24, 0x88	; 136
     cca:	92 07       	cpc	r25, r18
     ccc:	ac f3       	brlt	.-22     	; 0xcb8 <uart_init+0xc0>
			UCSR1B |= option;
     cce:	a9 ec       	ldi	r26, 0xC9	; 201
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e9 ec       	ldi	r30, 0xC9	; 201
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	90 81       	ld	r25, Z
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	89 2b       	or	r24, r25
     cdc:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     cde:	e8 ec       	ldi	r30, 0xC8	; 200
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     ce4:	a8 ec       	ldi	r26, 0xC8	; 200
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 ec       	ldi	r30, 0xC8	; 200
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	83 7e       	andi	r24, 0xE3	; 227
     cf0:	8c 93       	st	X, r24
			UDR1 = 0;
     cf2:	ee ec       	ldi	r30, 0xCE	; 206
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	10 82       	st	Z, r1
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <uart_init+0x10c>
			break;
		default:
			return -1;
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	9f ef       	ldi	r25, 0xFF	; 255
     cfe:	99 87       	std	Y+9, r25	; 0x09
     d00:	88 87       	std	Y+8, r24	; 0x08
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <uart_init+0x110>
	}
	return 0;
     d04:	19 86       	std	Y+9, r1	; 0x09
     d06:	18 86       	std	Y+8, r1	; 0x08
     d08:	88 85       	ldd	r24, Y+8	; 0x08
     d0a:	99 85       	ldd	r25, Y+9	; 0x09
}
     d0c:	2d 96       	adiw	r28, 0x0d	; 13
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <uart_setbuffer+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <uart_setbuffer+0x8>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <uart_setbuffer+0xa>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	7c 83       	std	Y+4, r23	; 0x04
     d32:	6b 83       	std	Y+3, r22	; 0x03
     d34:	5e 83       	std	Y+6, r21	; 0x06
     d36:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	99 23       	and	r25, r25
     d3e:	cc f0       	brlt	.+50     	; 0xd72 <uart_setbuffer+0x54>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	91 05       	cpc	r25, r1
     d48:	a4 f4       	brge	.+40     	; 0xd72 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     d4a:	29 81       	ldd	r18, Y+1	; 0x01
     d4c:	3a 81       	ldd	r19, Y+2	; 0x02
     d4e:	c9 01       	movw	r24, r18
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 0f       	add	r24, r18
     d5e:	93 1f       	adc	r25, r19
     d60:	81 57       	subi	r24, 0x71	; 113
     d62:	9e 4f       	sbci	r25, 0xFE	; 254
     d64:	4d 81       	ldd	r20, Y+5	; 0x05
     d66:	5e 81       	ldd	r21, Y+6	; 0x06
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	b9 01       	movw	r22, r18
     d6e:	0e 94 87 08 	call	0x110e	; 0x110e <RingInit>
}
     d72:	26 96       	adiw	r28, 0x06	; 6
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     d8c:	e0 ec       	ldi	r30, 0xC0	; 192
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	dc f7       	brge	.-10     	; 0xd8c <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     d96:	a0 ec       	ldi	r26, 0xC0	; 192
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e0 ec       	ldi	r30, 0xC0	; 192
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8f 77       	andi	r24, 0x7F	; 127
     da2:	8c 93       	st	X, r24
	return UDR0;
     da4:	e6 ec       	ldi	r30, 0xC6	; 198
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
}
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <uart0_putchar>:

int uart0_putchar(char c)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     dbc:	e0 ec       	ldi	r30, 0xC0	; 192
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 72       	andi	r24, 0x20	; 32
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b9 f3       	breq	.-18     	; 0xdbc <uart0_putchar+0xc>
	UDR0 = c;
     dce:	e6 ec       	ldi	r30, 0xC6	; 198
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     dd6:	a0 ec       	ldi	r26, 0xC0	; 192
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e0 ec       	ldi	r30, 0xC0	; 192
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7d       	andi	r24, 0xDF	; 223
     de2:	8c 93       	st	X, r24
	
	return 0;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <uart1_putchar>:

int uart1_putchar(char c)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	8a 30       	cpi	r24, 0x0A	; 10
     e00:	a1 f4       	brne	.+40     	; 0xe2a <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     e02:	e8 ec       	ldi	r30, 0xC8	; 200
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	80 72       	andi	r24, 0x20	; 32
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	b9 f3       	breq	.-18     	; 0xe02 <uart1_putchar+0x12>
		UDR1 = '\r';
     e14:	ee ec       	ldi	r30, 0xCE	; 206
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	8d e0       	ldi	r24, 0x0D	; 13
     e1a:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     e1c:	a8 ec       	ldi	r26, 0xC8	; 200
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 ec       	ldi	r30, 0xC8	; 200
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     e2a:	e8 ec       	ldi	r30, 0xC8	; 200
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	80 72       	andi	r24, 0x20	; 32
     e36:	90 70       	andi	r25, 0x00	; 0
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	b9 f3       	breq	.-18     	; 0xe2a <uart1_putchar+0x3a>
	UDR1 = c;
     e3c:	ee ec       	ldi	r30, 0xCE	; 206
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     e44:	a8 ec       	ldi	r26, 0xC8	; 200
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e8 ec       	ldi	r30, 0xC8	; 200
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	8c 93       	st	X, r24

	return 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <uart0_buf_putchar+0x6>
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     e6c:	1a 82       	std	Y+2, r1	; 0x02
     e6e:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     e70:	ef e5       	ldi	r30, 0x5F	; 95
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 93 8c 01 	sts	0x018C, r24
	cli();
     e7a:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	8a 30       	cpi	r24, 0x0A	; 10
     e80:	61 f4       	brne	.+24     	; 0xe9a <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     e82:	8f e8       	ldi	r24, 0x8F	; 143
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	6d e0       	ldi	r22, 0x0D	; 13
     e88:	0e 94 b5 08 	call	0x116a	; 0x116a <RingPut>
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	29 f4       	brne	.+10     	; 0xe9a <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	12 c0       	rjmp	.+36     	; 0xebe <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     e9a:	8f e8       	ldi	r24, 0x8F	; 143
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	6b 81       	ldd	r22, Y+3	; 0x03
     ea0:	0e 94 b5 08 	call	0x116a	; 0x116a <RingPut>
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	9f ef       	ldi	r25, 0xFF	; 255
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     eb0:	a1 ec       	ldi	r26, 0xC1	; 193
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 ec       	ldi	r30, 0xC1	; 193
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 62       	ori	r24, 0x20	; 32
     ebc:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     ebe:	ef e5       	ldi	r30, 0x5F	; 95
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 91 8c 01 	lds	r24, 0x018C
     ec6:	80 83       	st	Z, r24

	return ret;
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <uart1_buf_putchar+0x6>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     ee6:	1a 82       	std	Y+2, r1	; 0x02
     ee8:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     eea:	ef e5       	ldi	r30, 0x5F	; 95
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 93 8c 01 	sts	0x018C, r24
	cli();
     ef4:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	61 f4       	brne	.+24     	; 0xf14 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     efc:	88 e9       	ldi	r24, 0x98	; 152
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	6d e0       	ldi	r22, 0x0D	; 13
     f02:	0e 94 b5 08 	call	0x116a	; 0x116a <RingPut>
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	29 f4       	brne	.+10     	; 0xf14 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	12 c0       	rjmp	.+36     	; 0xf38 <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     f14:	88 e9       	ldi	r24, 0x98	; 152
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	6b 81       	ldd	r22, Y+3	; 0x03
     f1a:	0e 94 b5 08 	call	0x116a	; 0x116a <RingPut>
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	21 f4       	brne	.+8      	; 0xf2a <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     f2a:	a9 ec       	ldi	r26, 0xC9	; 201
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e9 ec       	ldi	r30, 0xC9	; 201
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     f38:	ef e5       	ldi	r30, 0x5F	; 95
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 91 8c 01 	lds	r24, 0x018C
     f40:	80 83       	st	Z, r24

	return ret;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <__vector_21>:


ISR(USART0_UDRE_vect)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	00 90 5b 00 	lds	r0, 0x005B
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     f84:	8f e8       	ldi	r24, 0x8F	; 143
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9e 01       	movw	r18, r28
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	b9 01       	movw	r22, r18
     f90:	0e 94 08 09 	call	0x1210	; 0x1210 <RingGet>
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 f0       	breq	.+24     	; 0xfb0 <__vector_21+0x5e>
		UDR0 = c;
     f98:	e6 ec       	ldi	r30, 0xC6	; 198
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREクリア
     fa0:	a0 ec       	ldi	r26, 0xC0	; 192
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e0 ec       	ldi	r30, 0xC0	; 192
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8f 7d       	andi	r24, 0xDF	; 223
     fac:	8c 93       	st	X, r24
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     fb0:	a1 ec       	ldi	r26, 0xC1	; 193
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 ec       	ldi	r30, 0xC1	; 193
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7d       	andi	r24, 0xDF	; 223
     fbc:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     fbe:	a0 ec       	ldi	r26, 0xC0	; 192
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e0 ec       	ldi	r30, 0xC0	; 192
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 7d       	andi	r24, 0xDF	; 223
     fca:	8c 93       	st	X, r24
	}
}
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	00 92 5b 00 	sts	0x005B, r0
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_29>:

ISR(USART1_UDRE_vect)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	00 90 5b 00 	lds	r0, 0x005B
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
    102c:	88 e9       	ldi	r24, 0x98	; 152
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	9e 01       	movw	r18, r28
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 08 09 	call	0x1210	; 0x1210 <RingGet>
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	61 f0       	breq	.+24     	; 0x1058 <__vector_29+0x5e>
		UDR1 = c;
    1040:	ee ec       	ldi	r30, 0xCE	; 206
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREクリア
    1048:	a8 ec       	ldi	r26, 0xC8	; 200
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 ec       	ldi	r30, 0xC8	; 200
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8f 7d       	andi	r24, 0xDF	; 223
    1054:	8c 93       	st	X, r24
    1056:	0e c0       	rjmp	.+28     	; 0x1074 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
    1058:	a9 ec       	ldi	r26, 0xC9	; 201
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e9 ec       	ldi	r30, 0xC9	; 201
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7d       	andi	r24, 0xDF	; 223
    1064:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
    1066:	a8 ec       	ldi	r26, 0xC8	; 200
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 ec       	ldi	r30, 0xC8	; 200
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	8c 93       	st	X, r24
	}
}
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	00 92 5b 00 	sts	0x005B, r0
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	00 90 5b 00 	lds	r0, 0x005B
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    10d2:	ee ec       	ldi	r30, 0xCE	; 206
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	20 81       	ld	r18, Z
    10d8:	88 e9       	ldi	r24, 0x98	; 152
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	62 2f       	mov	r22, r18
    10de:	0e 94 b5 08 	call	0x116a	; 0x116a <RingPut>
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	00 92 5b 00 	sts	0x005B, r0
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <RingInit+0x6>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <RingInit+0x8>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <RingInit+0xa>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	7c 83       	std	Y+4, r23	; 0x04
    1122:	6b 83       	std	Y+3, r22	; 0x03
    1124:	5e 83       	std	Y+6, r21	; 0x06
    1126:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
	ring->size = size;
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	97 83       	std	Z+7, r25	; 0x07
    113e:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	13 82       	std	Z+3, r1	; 0x03
    1146:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	15 82       	std	Z+5, r1	; 0x05
    114e:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    1150:	e9 81       	ldd	r30, Y+1	; 0x01
    1152:	fa 81       	ldd	r31, Y+2	; 0x02
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 87       	std	Z+8, r24	; 0x08
}
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <RingPut+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <RingPut+0x8>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	80 85       	ldd	r24, Z+8	; 0x08
    1184:	88 23       	and	r24, r24
    1186:	71 f4       	brne	.+28     	; 0x11a4 <RingPut+0x3a>
    1188:	e9 81       	ldd	r30, Y+1	; 0x01
    118a:	fa 81       	ldd	r31, Y+2	; 0x02
    118c:	22 81       	ldd	r18, Z+2	; 0x02
    118e:	33 81       	ldd	r19, Z+3	; 0x03
    1190:	e9 81       	ldd	r30, Y+1	; 0x01
    1192:	fa 81       	ldd	r31, Y+2	; 0x02
    1194:	84 81       	ldd	r24, Z+4	; 0x04
    1196:	95 81       	ldd	r25, Z+5	; 0x05
    1198:	28 17       	cp	r18, r24
    119a:	39 07       	cpc	r19, r25
    119c:	19 f4       	brne	.+6      	; 0x11a4 <RingPut+0x3a>
		return FALSE;
    119e:	1d 82       	std	Y+5, r1	; 0x05
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	2c c0       	rjmp	.+88     	; 0x11fc <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	84 81       	ldd	r24, Z+4	; 0x04
    11b2:	95 81       	ldd	r25, Z+5	; 0x05
    11b4:	f9 01       	movw	r30, r18
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	80 83       	st	Z, r24
	ring->wp++;
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	84 81       	ldd	r24, Z+4	; 0x04
    11c4:	95 81       	ldd	r25, Z+5	; 0x05
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ca:	fa 81       	ldd	r31, Y+2	; 0x02
    11cc:	95 83       	std	Z+5, r25	; 0x05
    11ce:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	24 81       	ldd	r18, Z+4	; 0x04
    11d6:	35 81       	ldd	r19, Z+5	; 0x05
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	86 81       	ldd	r24, Z+6	; 0x06
    11de:	97 81       	ldd	r25, Z+7	; 0x07
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	21 f4       	brne	.+8      	; 0x11ee <RingPut+0x84>
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	15 82       	std	Z+5, r1	; 0x05
    11ec:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9d 83       	std	Y+5, r25	; 0x05
    11fa:	8c 83       	std	Y+4, r24	; 0x04
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <RingGet+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <RingGet+0x8>
    1218:	00 d0       	rcall	.+0      	; 0x121a <RingGet+0xa>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	7c 83       	std	Y+4, r23	; 0x04
    1224:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 85       	ldd	r24, Z+8	; 0x08
    122c:	88 23       	and	r24, r24
    122e:	d9 f5       	brne	.+118    	; 0x12a6 <RingGet+0x96>
		*value = ring->buf[ring->rp];
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	20 81       	ld	r18, Z
    1236:	31 81       	ldd	r19, Z+1	; 0x01
    1238:	e9 81       	ldd	r30, Y+1	; 0x01
    123a:	fa 81       	ldd	r31, Y+2	; 0x02
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	f9 01       	movw	r30, r18
    1242:	e8 0f       	add	r30, r24
    1244:	f9 1f       	adc	r31, r25
    1246:	80 81       	ld	r24, Z
    1248:	eb 81       	ldd	r30, Y+3	; 0x03
    124a:	fc 81       	ldd	r31, Y+4	; 0x04
    124c:	80 83       	st	Z, r24
		ring->rp++;
    124e:	e9 81       	ldd	r30, Y+1	; 0x01
    1250:	fa 81       	ldd	r31, Y+2	; 0x02
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	93 83       	std	Z+3, r25	; 0x03
    125e:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	22 81       	ldd	r18, Z+2	; 0x02
    1266:	33 81       	ldd	r19, Z+3	; 0x03
    1268:	e9 81       	ldd	r30, Y+1	; 0x01
    126a:	fa 81       	ldd	r31, Y+2	; 0x02
    126c:	86 81       	ldd	r24, Z+6	; 0x06
    126e:	97 81       	ldd	r25, Z+7	; 0x07
    1270:	28 17       	cp	r18, r24
    1272:	39 07       	cpc	r19, r25
    1274:	21 f4       	brne	.+8      	; 0x127e <RingGet+0x6e>
    1276:	e9 81       	ldd	r30, Y+1	; 0x01
    1278:	fa 81       	ldd	r31, Y+2	; 0x02
    127a:	13 82       	std	Z+3, r1	; 0x03
    127c:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	22 81       	ldd	r18, Z+2	; 0x02
    1284:	33 81       	ldd	r19, Z+3	; 0x03
    1286:	e9 81       	ldd	r30, Y+1	; 0x01
    1288:	fa 81       	ldd	r31, Y+2	; 0x02
    128a:	84 81       	ldd	r24, Z+4	; 0x04
    128c:	95 81       	ldd	r25, Z+5	; 0x05
    128e:	28 17       	cp	r18, r24
    1290:	39 07       	cpc	r19, r25
    1292:	21 f4       	brne	.+8      	; 0x129c <RingGet+0x8c>
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	fa 81       	ldd	r31, Y+2	; 0x02
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <RingGet+0xa0>
	}else{			// リングバッファが空のとき
		*value = 0;
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	10 82       	st	Z, r1
		return FALSE;
    12ac:	1e 82       	std	Y+6, r1	; 0x06
    12ae:	1d 82       	std	Y+5, r1	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    12b4:	26 96       	adiw	r28, 0x06	; 6
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <isRingEmpty+0x6>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	80 85       	ldd	r24, Z+8	; 0x08
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <initI2CMaster+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <initI2CMaster+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    12f8:	88 eb       	ldi	r24, 0xB8	; 184
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	80 e2       	ldi	r24, 0x20	; 32
    1308:	9e e4       	ldi	r25, 0x4E	; 78
    130a:	b9 01       	movw	r22, r18
    130c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__divmodhi4>
    1310:	cb 01       	movw	r24, r22
    1312:	40 97       	sbiw	r24, 0x10	; 16
    1314:	9d 83       	std	Y+5, r25	; 0x05
    1316:	8c 83       	std	Y+4, r24	; 0x04
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	ff 23       	and	r31, r31
    131e:	2c f4       	brge	.+10     	; 0x132a <initI2CMaster+0x42>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	9d 83       	std	Y+5, r25	; 0x05
    1328:	8c 83       	std	Y+4, r24	; 0x04
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	95 95       	asr	r25
    1330:	87 95       	ror	r24
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	80 83       	st	Z, r24
		TWSR = 0;
    1338:	e9 eb       	ldi	r30, 0xB9	; 185
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	10 82       	st	Z, r1
		TWCR = I2CEN;
    133e:	ec eb       	ldi	r30, 0xBC	; 188
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	80 83       	st	Z, r24
    }
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <i2cWrite+0x6>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
			cli();
    1366:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1368:	ec eb       	ldi	r30, 0xBC	; 188
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	84 ea       	ldi	r24, 0xA4	; 164
    136e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1370:	ec eb       	ldi	r30, 0xBC	; 188
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	88 23       	and	r24, r24
    1378:	dc f7       	brge	.-10     	; 0x1370 <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    137a:	e9 eb       	ldi	r30, 0xB9	; 185
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	88 7f       	andi	r24, 0xF8	; 248
    1386:	90 70       	andi	r25, 0x00	; 0
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	91 05       	cpc	r25, r1
    138c:	09 f0       	breq	.+2      	; 0x1390 <i2cWrite+0x3a>
    138e:	58 c0       	rjmp	.+176    	; 0x1440 <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    1390:	ab eb       	ldi	r26, 0xBB	; 187
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	80 81       	ld	r24, Z
    139a:	88 0f       	add	r24, r24
    139c:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    139e:	ec eb       	ldi	r30, 0xBC	; 188
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	84 e8       	ldi	r24, 0x84	; 132
    13a4:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13a6:	ec eb       	ldi	r30, 0xBC	; 188
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 23       	and	r24, r24
    13ae:	dc f7       	brge	.-10     	; 0x13a6 <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    13b0:	e9 eb       	ldi	r30, 0xB9	; 185
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 7f       	andi	r24, 0xF8	; 248
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 31       	cpi	r24, 0x18	; 24
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <i2cWrite+0x70>
    13c4:	3d c0       	rjmp	.+122    	; 0x1440 <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    13c6:	10 92 8d 01 	sts	0x018D, r1
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    13cc:	ab eb       	ldi	r26, 0xBB	; 187
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 81       	ldd	r30, Y+1	; 0x01
    13d2:	fa 81       	ldd	r31, Y+2	; 0x02
    13d4:	21 81       	ldd	r18, Z+1	; 0x01
    13d6:	32 81       	ldd	r19, Z+2	; 0x02
    13d8:	80 91 8d 01 	lds	r24, 0x018D
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	80 81       	ld	r24, Z
    13e8:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    13ea:	ec eb       	ldi	r30, 0xBC	; 188
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	84 e8       	ldi	r24, 0x84	; 132
    13f0:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    13f2:	ec eb       	ldi	r30, 0xBC	; 188
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	dc f7       	brge	.-10     	; 0x13f2 <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    13fc:	e9 eb       	ldi	r30, 0xB9	; 185
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	88 7f       	andi	r24, 0xF8	; 248
    1408:	90 70       	andi	r25, 0x00	; 0
    140a:	88 32       	cpi	r24, 0x28	; 40
    140c:	91 05       	cpc	r25, r1
    140e:	c1 f4       	brne	.+48     	; 0x1440 <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1410:	80 91 8d 01 	lds	r24, 0x018D
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 8d 01 	sts	0x018D, r24
    141a:	80 91 8d 01 	lds	r24, 0x018D
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	e9 81       	ldd	r30, Y+1	; 0x01
    1424:	fa 81       	ldd	r31, Y+2	; 0x02
    1426:	83 81       	ldd	r24, Z+3	; 0x03
    1428:	94 81       	ldd	r25, Z+4	; 0x04
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	70 f2       	brcs	.-100    	; 0x13cc <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1430:	ec eb       	ldi	r30, 0xBC	; 188
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	84 e9       	ldi	r24, 0x94	; 148
    1436:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    1438:	78 94       	sei
		return true;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	8b 83       	std	Y+3, r24	; 0x03
    143e:	06 c0       	rjmp	.+12     	; 0x144c <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1440:	ec eb       	ldi	r30, 0xBC	; 188
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	84 e9       	ldi	r24, 0x94	; 148
    1446:	80 83       	st	Z, r24
		sei();
    1448:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    144a:	1b 82       	std	Y+3, r1	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <i2cRead>:

bool i2cRead(Slave *slave)
    {
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <i2cRead+0x6>
    1460:	0f 92       	push	r0
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
		cli();
    146a:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    146c:	ec eb       	ldi	r30, 0xBC	; 188
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	84 ea       	ldi	r24, 0xA4	; 164
    1472:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    1474:	ec eb       	ldi	r30, 0xBC	; 188
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	88 23       	and	r24, r24
    147c:	dc f7       	brge	.-10     	; 0x1474 <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    147e:	e9 eb       	ldi	r30, 0xB9	; 185
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	88 7f       	andi	r24, 0xF8	; 248
    148a:	90 70       	andi	r25, 0x00	; 0
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	91 05       	cpc	r25, r1
    1490:	09 f0       	breq	.+2      	; 0x1494 <i2cRead+0x3a>
    1492:	80 c0       	rjmp	.+256    	; 0x1594 <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    1494:	ab eb       	ldi	r26, 0xBB	; 187
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	80 81       	ld	r24, Z
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    14aa:	ec eb       	ldi	r30, 0xBC	; 188
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	84 e8       	ldi	r24, 0x84	; 132
    14b0:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14b2:	ec eb       	ldi	r30, 0xBC	; 188
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	88 23       	and	r24, r24
    14ba:	dc f7       	brge	.-10     	; 0x14b2 <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    14bc:	e9 eb       	ldi	r30, 0xB9	; 185
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 7f       	andi	r24, 0xF8	; 248
    14c8:	90 70       	andi	r25, 0x00	; 0
    14ca:	80 34       	cpi	r24, 0x40	; 64
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <i2cRead+0x78>
    14d0:	61 c0       	rjmp	.+194    	; 0x1594 <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    14d2:	10 92 8d 01 	sts	0x018D, r1
    14d6:	28 c0       	rjmp	.+80     	; 0x1528 <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    14d8:	ec eb       	ldi	r30, 0xBC	; 188
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	84 ec       	ldi	r24, 0xC4	; 196
    14de:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    14e0:	ec eb       	ldi	r30, 0xBC	; 188
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	dc f7       	brge	.-10     	; 0x14e0 <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    14ea:	e9 eb       	ldi	r30, 0xB9	; 185
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	88 7f       	andi	r24, 0xF8	; 248
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	80 35       	cpi	r24, 0x50	; 80
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <i2cRead+0xa6>
    14fe:	4a c0       	rjmp	.+148    	; 0x1594 <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	25 81       	ldd	r18, Z+5	; 0x05
    1506:	36 81       	ldd	r19, Z+6	; 0x06
    1508:	80 91 8d 01 	lds	r24, 0x018D
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	d9 01       	movw	r26, r18
    1512:	a8 0f       	add	r26, r24
    1514:	b9 1f       	adc	r27, r25
    1516:	eb eb       	ldi	r30, 0xBB	; 187
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    151e:	80 91 8d 01 	lds	r24, 0x018D
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 8d 01 	sts	0x018D, r24
    1528:	80 91 8d 01 	lds	r24, 0x018D
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	87 81       	ldd	r24, Z+7	; 0x07
    1536:	90 85       	ldd	r25, Z+8	; 0x08
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	28 17       	cp	r18, r24
    153c:	39 07       	cpc	r19, r25
    153e:	60 f2       	brcs	.-104    	; 0x14d8 <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1540:	ec eb       	ldi	r30, 0xBC	; 188
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	84 e8       	ldi	r24, 0x84	; 132
    1546:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1548:	ec eb       	ldi	r30, 0xBC	; 188
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 23       	and	r24, r24
    1550:	dc f7       	brge	.-10     	; 0x1548 <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1552:	e9 eb       	ldi	r30, 0xB9	; 185
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 7f       	andi	r24, 0xF8	; 248
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	88 35       	cpi	r24, 0x58	; 88
    1562:	91 05       	cpc	r25, r1
    1564:	b9 f4       	brne	.+46     	; 0x1594 <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	25 81       	ldd	r18, Z+5	; 0x05
    156c:	36 81       	ldd	r19, Z+6	; 0x06
    156e:	80 91 8d 01 	lds	r24, 0x018D
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	d9 01       	movw	r26, r18
    1578:	a8 0f       	add	r26, r24
    157a:	b9 1f       	adc	r27, r25
    157c:	eb eb       	ldi	r30, 0xBB	; 187
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1584:	ec eb       	ldi	r30, 0xBC	; 188
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	84 e9       	ldi	r24, 0x94	; 148
    158a:	80 83       	st	Z, r24
		sei();
    158c:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	8b 83       	std	Y+3, r24	; 0x03
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1594:	ec eb       	ldi	r30, 0xBC	; 188
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	84 e9       	ldi	r24, 0x94	; 148
    159a:	80 83       	st	Z, r24
		sei();
    159c:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    159e:	1b 82       	std	Y+3, r1	; 0x03
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <i2cReadWithCommand+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <i2cReadWithCommand+0x8>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    15c0:	ec eb       	ldi	r30, 0xBC	; 188
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	84 ea       	ldi	r24, 0xA4	; 164
    15c6:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    15c8:	ec eb       	ldi	r30, 0xBC	; 188
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	dc f7       	brge	.-10     	; 0x15c8 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    15d2:	ab eb       	ldi	r26, 0xBB	; 187
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e9 81       	ldd	r30, Y+1	; 0x01
    15d8:	fa 81       	ldd	r31, Y+2	; 0x02
    15da:	80 81       	ld	r24, Z
    15dc:	88 0f       	add	r24, r24
    15de:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    15e0:	ec eb       	ldi	r30, 0xBC	; 188
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	84 e8       	ldi	r24, 0x84	; 132
    15e6:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    15e8:	ec eb       	ldi	r30, 0xBC	; 188
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	88 23       	and	r24, r24
    15f0:	dc f7       	brge	.-10     	; 0x15e8 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    15f2:	e9 eb       	ldi	r30, 0xB9	; 185
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	88 7f       	andi	r24, 0xF8	; 248
    15fe:	90 70       	andi	r25, 0x00	; 0
    1600:	80 34       	cpi	r24, 0x40	; 64
    1602:	91 05       	cpc	r25, r1
    1604:	09 f0       	breq	.+2      	; 0x1608 <i2cReadWithCommand+0x5a>
    1606:	a0 c0       	rjmp	.+320    	; 0x1748 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1608:	eb eb       	ldi	r30, 0xBB	; 187
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1610:	ec eb       	ldi	r30, 0xBC	; 188
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	84 e8       	ldi	r24, 0x84	; 132
    1616:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1618:	ec eb       	ldi	r30, 0xBC	; 188
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	88 23       	and	r24, r24
    1620:	dc f7       	brge	.-10     	; 0x1618 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    1622:	e9 eb       	ldi	r30, 0xB9	; 185
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	88 7f       	andi	r24, 0xF8	; 248
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	88 32       	cpi	r24, 0x28	; 40
    1632:	91 05       	cpc	r25, r1
    1634:	09 f0       	breq	.+2      	; 0x1638 <i2cReadWithCommand+0x8a>
    1636:	88 c0       	rjmp	.+272    	; 0x1748 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1638:	ec eb       	ldi	r30, 0xBC	; 188
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	84 ea       	ldi	r24, 0xA4	; 164
    163e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1640:	ec eb       	ldi	r30, 0xBC	; 188
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	dc f7       	brge	.-10     	; 0x1640 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    164a:	e9 eb       	ldi	r30, 0xB9	; 185
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	88 7f       	andi	r24, 0xF8	; 248
    1656:	90 70       	andi	r25, 0x00	; 0
    1658:	80 31       	cpi	r24, 0x10	; 16
    165a:	91 05       	cpc	r25, r1
    165c:	09 f0       	breq	.+2      	; 0x1660 <i2cReadWithCommand+0xb2>
    165e:	74 c0       	rjmp	.+232    	; 0x1748 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1660:	ab eb       	ldi	r26, 0xBB	; 187
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	80 81       	ld	r24, Z
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1676:	ec eb       	ldi	r30, 0xBC	; 188
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	84 e8       	ldi	r24, 0x84	; 132
    167c:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    167e:	ec eb       	ldi	r30, 0xBC	; 188
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 23       	and	r24, r24
    1686:	dc f7       	brge	.-10     	; 0x167e <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1688:	10 92 8d 01 	sts	0x018D, r1
    168c:	28 c0       	rjmp	.+80     	; 0x16de <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    168e:	ec eb       	ldi	r30, 0xBC	; 188
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	84 ec       	ldi	r24, 0xC4	; 196
    1694:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1696:	ec eb       	ldi	r30, 0xBC	; 188
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	88 23       	and	r24, r24
    169e:	dc f7       	brge	.-10     	; 0x1696 <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    16a0:	e9 eb       	ldi	r30, 0xB9	; 185
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	88 7f       	andi	r24, 0xF8	; 248
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	80 35       	cpi	r24, 0x50	; 80
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <i2cReadWithCommand+0x108>
    16b4:	49 c0       	rjmp	.+146    	; 0x1748 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    16b6:	e9 81       	ldd	r30, Y+1	; 0x01
    16b8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ba:	25 81       	ldd	r18, Z+5	; 0x05
    16bc:	36 81       	ldd	r19, Z+6	; 0x06
    16be:	80 91 8d 01 	lds	r24, 0x018D
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	d9 01       	movw	r26, r18
    16c8:	a8 0f       	add	r26, r24
    16ca:	b9 1f       	adc	r27, r25
    16cc:	eb eb       	ldi	r30, 0xBB	; 187
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    16d4:	80 91 8d 01 	lds	r24, 0x018D
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	80 93 8d 01 	sts	0x018D, r24
    16de:	80 91 8d 01 	lds	r24, 0x018D
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	e9 81       	ldd	r30, Y+1	; 0x01
    16e8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ea:	87 81       	ldd	r24, Z+7	; 0x07
    16ec:	90 85       	ldd	r25, Z+8	; 0x08
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	28 17       	cp	r18, r24
    16f2:	39 07       	cpc	r19, r25
    16f4:	60 f2       	brcs	.-104    	; 0x168e <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    16f6:	ec eb       	ldi	r30, 0xBC	; 188
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	84 e8       	ldi	r24, 0x84	; 132
    16fc:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16fe:	ec eb       	ldi	r30, 0xBC	; 188
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 23       	and	r24, r24
    1706:	dc f7       	brge	.-10     	; 0x16fe <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1708:	e9 eb       	ldi	r30, 0xB9	; 185
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	88 7f       	andi	r24, 0xF8	; 248
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	88 35       	cpi	r24, 0x58	; 88
    1718:	91 05       	cpc	r25, r1
    171a:	b1 f4       	brne	.+44     	; 0x1748 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    171c:	e9 81       	ldd	r30, Y+1	; 0x01
    171e:	fa 81       	ldd	r31, Y+2	; 0x02
    1720:	25 81       	ldd	r18, Z+5	; 0x05
    1722:	36 81       	ldd	r19, Z+6	; 0x06
    1724:	80 91 8d 01 	lds	r24, 0x018D
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	d9 01       	movw	r26, r18
    172e:	a8 0f       	add	r26, r24
    1730:	b9 1f       	adc	r27, r25
    1732:	eb eb       	ldi	r30, 0xBB	; 187
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    173a:	ec eb       	ldi	r30, 0xBC	; 188
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	84 e9       	ldi	r24, 0x94	; 148
    1740:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	8c 83       	std	Y+4, r24	; 0x04
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1748:	ec eb       	ldi	r30, 0xBC	; 188
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	84 e9       	ldi	r24, 0x94	; 148
    174e:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1750:	1c 82       	std	Y+4, r1	; 0x04
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <LED>:
/// LED操作関数 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->消灯　1->点灯 </param>
void LED(unsigned char target, bool status)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <LED+0x6>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	58 f5       	brcc	.+86     	; 0x17cc <LED+0x6a>
	if(status)	cbi(PORTA,target);
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	88 23       	and	r24, r24
    177a:	a9 f0       	breq	.+42     	; 0x17a6 <LED+0x44>
    177c:	a2 e2       	ldi	r26, 0x22	; 34
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e2 e2       	ldi	r30, 0x22	; 34
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <LED+0x38>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <LED+0x34>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <LED+0x6a>
	else		sbi(PORTA,target);
    17a6:	a2 e2       	ldi	r26, 0x22	; 34
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e2 e2       	ldi	r30, 0x22	; 34
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <LED+0x62>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <LED+0x5e>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LEDInit>:

void LEDInit(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    17de:	a1 e2       	ldi	r26, 0x21	; 33
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e1 e2       	ldi	r30, 0x21	; 33
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	87 60       	ori	r24, 0x07	; 7
    17ea:	8c 93       	st	X, r24
	PORTA |= 0x07;
    17ec:	a2 e2       	ldi	r26, 0x22	; 34
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e2       	ldi	r30, 0x22	; 34
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	87 60       	ori	r24, 0x07	; 7
    17f8:	8c 93       	st	X, r24
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <wait_us>:
#include <avr/io.h>
void wait_us(uint16_t t){
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <wait_us+0x6>
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
  static unsigned char lpcnt;
  __asm__ __volatile__("\n"
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02

00001812 <CPU_wait_entry10>:
    1812:	24 e0       	ldi	r18, 0x04	; 4

00001814 <CPU_wait_lp10>:
    1814:	00 00       	nop
    1816:	2a 95       	dec	r18
    1818:	e9 f7       	brne	.-6      	; 0x1814 <CPU_wait_lp10>
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	d1 f7       	brne	.-12     	; 0x1812 <CPU_wait_entry10>
    181e:	20 93 8e 01 	sts	0x018E, r18
    "sbiw %1,1\n\t"
    "brne CPU_wait_entry%=\n\t"
    :"=&a"(lpcnt)
    :"w"(t)
  );
}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <wait_ms>:
void wait_ms(uint16_t t){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <wait_ms+0x6>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <wait_ms+0x1a>
	while(t--) wait_us(1000);
    183e:	88 ee       	ldi	r24, 0xE8	; 232
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	0e 94 00 0c 	call	0x1800	; 0x1800 <wait_us>
    1846:	1b 82       	std	Y+3, r1	; 0x03
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	11 f0       	breq	.+4      	; 0x1854 <wait_ms+0x28>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 23       	and	r24, r24
    1862:	69 f7       	brne	.-38     	; 0x183e <wait_ms+0x12>
	
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <mDrive+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <mDrive+0x8>
    1878:	00 d0       	rcall	.+0      	; 0x187a <mDrive+0xa>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9b 83       	std	Y+3, r25	; 0x03
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	6c 83       	std	Y+4, r22	; 0x04
    1884:	4d 83       	std	Y+5, r20	; 0x05
    1886:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1888:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    188a:	8e 81       	ldd	r24, Y+6	; 0x06
    188c:	85 30       	cpi	r24, 0x05	; 5
    188e:	50 f5       	brcc	.+84     	; 0x18e4 <mDrive+0x74>
	if(duty>100) duty=100;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	85 36       	cpi	r24, 0x65	; 101
    1894:	14 f0       	brlt	.+4      	; 0x189a <mDrive+0x2a>
    1896:	84 e6       	ldi	r24, 0x64	; 100
    1898:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	8c 39       	cpi	r24, 0x9C	; 156
    189e:	14 f4       	brge	.+4      	; 0x18a4 <mDrive+0x34>
    18a0:	8c e9       	ldi	r24, 0x9C	; 156
    18a2:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	21 f4       	brne	.+8      	; 0x18b2 <mDrive+0x42>
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	81 95       	neg	r24
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	88 23       	and	r24, r24
    18b6:	11 f4       	brne	.+4      	; 0x18bc <mDrive+0x4c>
    18b8:	19 82       	std	Y+1, r1	; 0x01
    18ba:	08 c0       	rjmp	.+16     	; 0x18cc <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <mDrive+0x58>
    18c2:	8f e7       	ldi	r24, 0x7F	; 127
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <mDrive+0x5c>
	else w_data = duty;
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    18cc:	ea 81       	ldd	r30, Y+2	; 0x02
    18ce:	fb 81       	ldd	r31, Y+3	; 0x03
    18d0:	21 81       	ldd	r18, Z+1	; 0x01
    18d2:	32 81       	ldd	r19, Z+2	; 0x02
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	f9 01       	movw	r30, r18
    18dc:	e8 0f       	add	r30, r24
    18de:	f9 1f       	adc	r31, r25
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	80 83       	st	Z, r24
}
    18e4:	26 96       	adiw	r28, 0x06	; 6
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <mAngle+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <mAngle+0x8>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	7c 83       	std	Y+4, r23	; 0x04
    190a:	6b 83       	std	Y+3, r22	; 0x03
    190c:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	88 23       	and	r24, r24
    1912:	a9 f0       	breq	.+42     	; 0x193e <mAngle+0x48>
		angle/=6;
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	26 e0       	ldi	r18, 0x06	; 6
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	b9 01       	movw	r22, r18
    191e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__divmodhi4>
    1922:	cb 01       	movw	r24, r22
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	81 81       	ldd	r24, Z+1	; 0x01
    192e:	92 81       	ldd	r25, Z+2	; 0x02
    1930:	fc 01       	movw	r30, r24
    1932:	34 96       	adiw	r30, 0x04	; 4
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	8f 71       	andi	r24, 0x1F	; 31
    1938:	80 64       	ori	r24, 0x40	; 64
    193a:	80 83       	st	Z, r24
    193c:	07 c0       	rjmp	.+14     	; 0x194c <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    193e:	e9 81       	ldd	r30, Y+1	; 0x01
    1940:	fa 81       	ldd	r31, Y+2	; 0x02
    1942:	81 81       	ldd	r24, Z+1	; 0x01
    1944:	92 81       	ldd	r25, Z+2	; 0x02
    1946:	fc 01       	movw	r30, r24
    1948:	34 96       	adiw	r30, 0x04	; 4
    194a:	10 82       	st	Z, r1
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <aDrive+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <aDrive+0x8>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	6b 83       	std	Y+3, r22	; 0x03
    196e:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	88 23       	and	r24, r24
    1974:	41 f0       	breq	.+16     	; 0x1986 <aDrive+0x2a>
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	01 80       	ldd	r0, Z+1	; 0x01
    197c:	f2 81       	ldd	r31, Z+2	; 0x02
    197e:	e0 2d       	mov	r30, r0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	80 83       	st	Z, r24
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1986:	e9 81       	ldd	r30, Y+1	; 0x01
    1988:	fa 81       	ldd	r31, Y+2	; 0x02
    198a:	01 80       	ldd	r0, Z+1	; 0x01
    198c:	f2 81       	ldd	r31, Z+2	; 0x02
    198e:	e0 2d       	mov	r30, r0
    1990:	10 82       	st	Z, r1

}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    19a8:	a4 e2       	ldi	r26, 0x24	; 36
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e4 e2       	ldi	r30, 0x24	; 36
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 7f       	andi	r24, 0xF0	; 240
    19b4:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    19b6:	a5 e2       	ldi	r26, 0x25	; 37
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e2       	ldi	r30, 0x25	; 37
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 60       	ori	r24, 0x0F	; 15
    19c2:	8c 93       	st	X, r24
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <Switch>:
/// スイッチ値取得関数 
/// </summary>
/// <param name="target"> メイン基盤上のスライドスイッチ番号　1〜4 </param>
/// <return> スイッチの状態 ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <Switch+0x6>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    19d6:	e3 e2       	ldi	r30, 0x23	; 35
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 95       	com	r24
    19de:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <Switch+0x2c>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <Switch+0x28>
    19fa:	ca 01       	movw	r24, r20
    19fc:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	90 70       	andi	r25, 0x00	; 0
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <Group>:

__inline__ unsigned char Group(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1a1a:	e3 e2       	ldi	r30, 0x23	; 35
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 95       	com	r24
    1a22:	86 95       	lsr	r24
    1a24:	86 95       	lsr	r24
    1a26:	83 70       	andi	r24, 0x03	; 3
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <Channel>:

__inline__ unsigned char Channel(void)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1a36:	e3 e2       	ldi	r30, 0x23	; 35
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 95       	com	r24
    1a3e:	83 70       	andi	r24, 0x03	; 3
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	89 27       	eor	r24, r25
    1a58:	88 23       	and	r24, r24
    1a5a:	71 f4       	brne	.+28     	; 0x1a78 <beep+0x32>
    1a5c:	80 91 36 01 	lds	r24, 0x0136
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	89 27       	eor	r24, r25
    1a64:	88 23       	and	r24, r24
    1a66:	41 f4       	brne	.+16     	; 0x1a78 <beep+0x32>
    1a68:	a2 e2       	ldi	r26, 0x22	; 34
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e2 e2       	ldi	r30, 0x22	; 34
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 60       	ori	r24, 0x08	; 8
    1a74:	8c 93       	st	X, r24
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1a78:	80 91 36 01 	lds	r24, 0x0136
    1a7c:	88 23       	and	r24, r24
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <beep+0x48>
    1a80:	a2 e2       	ldi	r26, 0x22	; 34
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e2       	ldi	r30, 0x22	; 34
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	87 7f       	andi	r24, 0xF7	; 247
    1a8c:	8c 93       	st	X, r24
}
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <BeepInit>:

void BeepInit()
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1a9e:	a1 e2       	ldi	r26, 0x21	; 33
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e1 e2       	ldi	r30, 0x21	; 33
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 60       	ori	r24, 0x08	; 8
    1aaa:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1aac:	a2 e2       	ldi	r26, 0x22	; 34
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e2 e2       	ldi	r30, 0x22	; 34
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	87 7f       	andi	r24, 0xF7	; 247
    1ab8:	8c 93       	st	X, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <i2cCheck>:

void i2cCheck(bool flag)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	69 81       	ldd	r22, Y+1	; 0x01
    1ad0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LED>
	beep(!(flag));
    1ad4:	99 81       	ldd	r25, Y+1	; 0x01
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 27       	eor	r24, r25
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
	if(!flag){
    1ae2:	99 81       	ldd	r25, Y+1	; 0x01
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	89 27       	eor	r24, r25
    1ae8:	88 23       	and	r24, r24
    1aea:	31 f0       	breq	.+12     	; 0x1af8 <i2cCheck+0x38>
		PORTC = 0x04;
    1aec:	e8 e2       	ldi	r30, 0x28	; 40
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	80 83       	st	Z, r24
		cli();
    1af4:	f8 94       	cli
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <i2cCheck+0x36>
		while(1);
	}
}
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <Emergency+0x6>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <Emergency+0x8>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9b 83       	std	Y+3, r25	; 0x03
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
    1b10:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	71 f4       	brne	.+28     	; 0x1b34 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1b18:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1c:	01 80       	ldd	r0, Z+1	; 0x01
    1b1e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b20:	e0 2d       	mov	r30, r0
    1b22:	8a e6       	ldi	r24, 0x6A	; 106
    1b24:	80 83       	st	Z, r24
		beep(1);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
		eflag=1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 93 a1 01 	sts	0x01A1, r24
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <Emergency+0x60>
		}
	else if(act==E_OFF){
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	69 f4       	brne	.+26     	; 0x1b54 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3e:	01 80       	ldd	r0, Z+1	; 0x01
    1b40:	f2 81       	ldd	r31, Z+2	; 0x02
    1b42:	e0 2d       	mov	r30, r0
    1b44:	85 e5       	ldi	r24, 0x55	; 85
    1b46:	80 83       	st	Z, r24
		beep(0);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
		eflag=0;
    1b4e:	10 92 a1 01 	sts	0x01A1, r1
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	01 80       	ldd	r0, Z+1	; 0x01
    1b5a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	9b 81       	ldd	r25, Y+3	; 0x03
    1b64:	0e 94 2d 0a 	call	0x145a	; 0x145a <i2cRead>
    1b68:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6e:	05 80       	ldd	r0, Z+5	; 0x05
    1b70:	f6 81       	ldd	r31, Z+6	; 0x06
    1b72:	e0 2d       	mov	r30, r0
    1b74:	80 81       	ld	r24, Z
    1b76:	8a 36       	cpi	r24, 0x6A	; 106
    1b78:	31 f4       	brne	.+12     	; 0x1b86 <Emergency+0x86>
		beep(1);
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <beep>
		eflag=1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 a1 01 	sts	0x01A1, r24
		}
	if(*(emergency->read.buf)==0x55){
    1b86:	ea 81       	ldd	r30, Y+2	; 0x02
    1b88:	fb 81       	ldd	r31, Y+3	; 0x03
    1b8a:	05 80       	ldd	r0, Z+5	; 0x05
    1b8c:	f6 81       	ldd	r31, Z+6	; 0x06
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	80 81       	ld	r24, Z
    1b92:	85 35       	cpi	r24, 0x55	; 85
    1b94:	d9 f4       	brne	.+54     	; 0x1bcc <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1b96:	a0 e6       	ldi	r26, 0x60	; 96
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e0 e6       	ldi	r30, 0x60	; 96
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 60       	ori	r24, 0x08	; 8
    1ba2:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1ba4:	a0 e6       	ldi	r26, 0x60	; 96
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e0 e6       	ldi	r30, 0x60	; 96
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 7b       	andi	r24, 0xBF	; 191
    1bb0:	8c 93       	st	X, r24
		wdt_reset();
    1bb2:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1bb4:	88 e1       	ldi	r24, 0x18	; 24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	28 e0       	ldi	r18, 0x08	; 8
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	a8 95       	wdr
    1bc0:	80 93 60 00 	sts	0x0060, r24
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	20 93 60 00 	sts	0x0060, r18
    1bca:	ff cf       	rjmp	.-2      	; 0x1bca <Emergency+0xca>
		while(1);
		}
	return tmp;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <EmergencyStatus>:

bool EmergencyStatus()
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1be6:	80 91 a1 01 	lds	r24, 0x01A1
    1bea:	88 23       	and	r24, r24
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <EmergencyStatus+0x16>
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <EmergencyStatus+0x1a>
	else return 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <__divmodhi4>:
    1c00:	97 fb       	bst	r25, 7
    1c02:	09 2e       	mov	r0, r25
    1c04:	07 26       	eor	r0, r23
    1c06:	0a d0       	rcall	.+20     	; 0x1c1c <__divmodhi4_neg1>
    1c08:	77 fd       	sbrc	r23, 7
    1c0a:	04 d0       	rcall	.+8      	; 0x1c14 <__divmodhi4_neg2>
    1c0c:	0c d0       	rcall	.+24     	; 0x1c26 <__udivmodhi4>
    1c0e:	06 d0       	rcall	.+12     	; 0x1c1c <__divmodhi4_neg1>
    1c10:	00 20       	and	r0, r0
    1c12:	1a f4       	brpl	.+6      	; 0x1c1a <__divmodhi4_exit>

00001c14 <__divmodhi4_neg2>:
    1c14:	70 95       	com	r23
    1c16:	61 95       	neg	r22
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255

00001c1a <__divmodhi4_exit>:
    1c1a:	08 95       	ret

00001c1c <__divmodhi4_neg1>:
    1c1c:	f6 f7       	brtc	.-4      	; 0x1c1a <__divmodhi4_exit>
    1c1e:	90 95       	com	r25
    1c20:	81 95       	neg	r24
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	08 95       	ret

00001c26 <__udivmodhi4>:
    1c26:	aa 1b       	sub	r26, r26
    1c28:	bb 1b       	sub	r27, r27
    1c2a:	51 e1       	ldi	r21, 0x11	; 17
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <__udivmodhi4_ep>

00001c2e <__udivmodhi4_loop>:
    1c2e:	aa 1f       	adc	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	a6 17       	cp	r26, r22
    1c34:	b7 07       	cpc	r27, r23
    1c36:	10 f0       	brcs	.+4      	; 0x1c3c <__udivmodhi4_ep>
    1c38:	a6 1b       	sub	r26, r22
    1c3a:	b7 0b       	sbc	r27, r23

00001c3c <__udivmodhi4_ep>:
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	5a 95       	dec	r21
    1c42:	a9 f7       	brne	.-22     	; 0x1c2e <__udivmodhi4_loop>
    1c44:	80 95       	com	r24
    1c46:	90 95       	com	r25
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	08 95       	ret

00001c4e <_exit>:
    1c4e:	f8 94       	cli

00001c50 <__stop_program>:
    1c50:	ff cf       	rjmp	.-2      	; 0x1c50 <__stop_program>
