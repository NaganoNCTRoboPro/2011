
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001c32  00001cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800134  00800134  00001cfa  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000341  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001519  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000155b  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  000055cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000573  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_20>
      54:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_28>
      74:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e3       	ldi	r30, 0x32	; 50
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 33       	cpi	r26, 0x34	; 52
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e3       	ldi	r26, 0x34	; 52
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ec 97       	sbiw	r28, 0x3c	; 60
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e6:	8c e0       	ldi	r24, 0x0C	; 12
      e8:	fe 01       	movw	r30, r28
      ea:	3e 96       	adiw	r30, 0x0e	; 14
      ec:	df 01       	movw	r26, r30
      ee:	98 2f       	mov	r25, r24
      f0:	1d 92       	st	X+, r1
      f2:	9a 95       	dec	r25
      f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x22>
	unsigned char action,uAction,dAction,e_flag, AirPort;
	int8_t uDuty;
	int16_t dDuty,count;

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	8a 8f       	std	Y+26, r24	; 0x1a
      fa:	ce 01       	movw	r24, r28
      fc:	0e 96       	adiw	r24, 0x0e	; 14
      fe:	9c 8f       	std	Y+28, r25	; 0x1c
     100:	8b 8f       	std	Y+27, r24	; 0x1b
     102:	84 e0       	ldi	r24, 0x04	; 4
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	9e 8f       	std	Y+30, r25	; 0x1e
     108:	8d 8f       	std	Y+29, r24	; 0x1d
     10a:	ce 01       	movw	r24, r28
     10c:	0e 96       	adiw	r24, 0x0e	; 14
     10e:	04 96       	adiw	r24, 0x04	; 4
     110:	98 a3       	std	Y+32, r25	; 0x20
     112:	8f 8f       	std	Y+31, r24	; 0x1f
     114:	84 e0       	ldi	r24, 0x04	; 4
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9a a3       	std	Y+34, r25	; 0x22
     11a:	89 a3       	std	Y+33, r24	; 0x21
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     11c:	80 e4       	ldi	r24, 0x40	; 64
     11e:	8b a3       	std	Y+35, r24	; 0x23
     120:	ce 01       	movw	r24, r28
     122:	0e 96       	adiw	r24, 0x0e	; 14
     124:	08 96       	adiw	r24, 0x08	; 8
     126:	9d a3       	std	Y+37, r25	; 0x25
     128:	8c a3       	std	Y+36, r24	; 0x24
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	9f a3       	std	Y+39, r25	; 0x27
     130:	8e a3       	std	Y+38, r24	; 0x26
     132:	ce 01       	movw	r24, r28
     134:	0e 96       	adiw	r24, 0x0e	; 14
     136:	09 96       	adiw	r24, 0x09	; 9
     138:	99 a7       	std	Y+41, r25	; 0x29
     13a:	88 a7       	std	Y+40, r24	; 0x28
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	9b a7       	std	Y+43, r25	; 0x2b
     142:	8a a7       	std	Y+42, r24	; 0x2a
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     144:	80 e1       	ldi	r24, 0x10	; 16
     146:	8c a7       	std	Y+44, r24	; 0x2c
     148:	ce 01       	movw	r24, r28
     14a:	0e 96       	adiw	r24, 0x0e	; 14
     14c:	0a 96       	adiw	r24, 0x0a	; 10
     14e:	9e a7       	std	Y+46, r25	; 0x2e
     150:	8d a7       	std	Y+45, r24	; 0x2d
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	98 ab       	std	Y+48, r25	; 0x30
     158:	8f a7       	std	Y+47, r24	; 0x2f
     15a:	ce 01       	movw	r24, r28
     15c:	0e 96       	adiw	r24, 0x0e	; 14
     15e:	0b 96       	adiw	r24, 0x0b	; 11
     160:	9a ab       	std	Y+50, r25	; 0x32
     162:	89 ab       	std	Y+49, r24	; 0x31
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9c ab       	std	Y+52, r25	; 0x34
     16a:	8b ab       	std	Y+51, r24	; 0x33

	/*この辺にi2c関連の初期化をすればいいと思う*/

	bool i2cStatus;
	wait_ms(21);
     16c:	85 e1       	ldi	r24, 0x15	; 21
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>
/*---------------------------------------------------------------*/
// 						書きかえちゃダメよ！
/*---------------------------------------------------------------*/
	LEDInit();
     174:	0e 94 83 0b 	call	0x1706	; 0x1706 <LEDInit>
	SwitchInit();
     178:	0e 94 c0 0c 	call	0x1980	; 0x1980 <SwitchInit>
	BeepInit();
     17c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <BeepInit>
	DDRC |= 0x04;
     180:	a7 e2       	ldi	r26, 0x27	; 39
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	e7 e2       	ldi	r30, 0x27	; 39
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	84 60       	ori	r24, 0x04	; 4
     18c:	8c 93       	st	X, r24
	PORTC = 0x04;
     18e:	e8 e2       	ldi	r30, 0x28	; 40
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	80 83       	st	Z, r24
		
	initI2CMaster(100);
     196:	84 e6       	ldi	r24, 0x64	; 100
     198:	0e 94 0c 09 	call	0x1218	; 0x1218 <initI2CMaster>

	wdt_reset();
     19c:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	2d e0       	ldi	r18, 0x0D	; 13
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	a8 95       	wdr
     1aa:	80 93 60 00 	sts	0x0060, r24
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	68 e0       	ldi	r22, 0x08	; 8
     1ba:	4a e0       	ldi	r20, 0x0A	; 10
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	0e 94 94 05 	call	0xb28	; 0xb28 <uart_init>
	uart_setbuffer(0,buf,36);
     1c2:	24 e3       	ldi	r18, 0x34	; 52
     1c4:	31 e0       	ldi	r19, 0x01	; 1
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	b9 01       	movw	r22, r18
     1cc:	44 e2       	ldi	r20, 0x24	; 36
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	0e 94 27 06 	call	0xc4e	; 0xc4e <uart_setbuffer>
	wait_ms(100);
     1d4:	84 e6       	ldi	r24, 0x64	; 100
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 e1       	ldi	r22, 0x18	; 24
     1e2:	40 e4       	ldi	r20, 0x40	; 64
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0e 94 94 05 	call	0xb28	; 0xb28 <uart_init>
	mu2_command("EI","08");
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	23 e0       	ldi	r18, 0x03	; 3
     1f0:	31 e0       	ldi	r19, 0x01	; 1
     1f2:	b9 01       	movw	r22, r18
     1f4:	0e 94 8a 04 	call	0x914	; 0x914 <mu2_command>
	mu2_command("DI","80");
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	29 e0       	ldi	r18, 0x09	; 9
     1fe:	31 e0       	ldi	r19, 0x01	; 1
     200:	b9 01       	movw	r22, r18
     202:	0e 94 8a 04 	call	0x914	; 0x914 <mu2_command>
	mu2_command("GI","04");
     206:	8c e0       	ldi	r24, 0x0C	; 12
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	2f e0       	ldi	r18, 0x0F	; 15
     20c:	31 e0       	ldi	r19, 0x01	; 1
     20e:	b9 01       	movw	r22, r18
     210:	0e 94 8a 04 	call	0x914	; 0x914 <mu2_command>
	mu2_command("CH","2E");
     214:	82 e1       	ldi	r24, 0x12	; 18
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	25 e1       	ldi	r18, 0x15	; 21
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	b9 01       	movw	r22, r18
     21e:	0e 94 8a 04 	call	0x914	; 0x914 <mu2_command>
	mu2_command("BR","48");
     222:	88 e1       	ldi	r24, 0x18	; 24
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	2b e1       	ldi	r18, 0x1B	; 27
     228:	31 e0       	ldi	r19, 0x01	; 1
     22a:	b9 01       	movw	r22, r18
     22c:	0e 94 8a 04 	call	0x914	; 0x914 <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	60 e9       	ldi	r22, 0x90	; 144
     236:	43 e0       	ldi	r20, 0x03	; 3
     238:	51 e0       	ldi	r21, 0x01	; 1
     23a:	0e 94 94 05 	call	0xb28	; 0xb28 <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
	sei();
     256:	78 94       	sei
	wait_ms(500);
     258:	84 ef       	ldi	r24, 0xF4	; 244
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>
	PORTC &= 0xFB;
     260:	a8 e2       	ldi	r26, 0x28	; 40
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e8 e2       	ldi	r30, 0x28	; 40
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	8b 7f       	andi	r24, 0xFB	; 251
     26c:	8c 93       	st	X, r24
	wait_ms(25);
     26e:	89 e1       	ldi	r24, 0x19	; 25
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     276:	0e 94 9b 03 	call	0x736	; 0x736 <Toggle_RC_Rx_Buffer>
     27a:	9d 87       	std	Y+13, r25	; 0x0d
     27c:	8c 87       	std	Y+12, r24	; 0x0c
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     27e:	ec 85       	ldd	r30, Y+12	; 0x0c
     280:	fd 85       	ldd	r31, Y+13	; 0x0d
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	82 70       	andi	r24, 0x02	; 2
     286:	88 23       	and	r24, r24
     288:	09 f4       	brne	.+2      	; 0x28c <main+0x1be>
     28a:	9a c0       	rjmp	.+308    	; 0x3c0 <main+0x2f2>
     28c:	ec 85       	ldd	r30, Y+12	; 0x0c
     28e:	fd 85       	ldd	r31, Y+13	; 0x0d
     290:	80 81       	ld	r24, Z
     292:	81 70       	andi	r24, 0x01	; 1
     294:	88 23       	and	r24, r24
     296:	09 f4       	brne	.+2      	; 0x29a <main+0x1cc>
     298:	93 c0       	rjmp	.+294    	; 0x3c0 <main+0x2f2>
     29a:	ec 85       	ldd	r30, Y+12	; 0x0c
     29c:	fd 85       	ldd	r31, Y+13	; 0x0d
     29e:	80 81       	ld	r24, Z
     2a0:	80 71       	andi	r24, 0x10	; 16
     2a2:	88 23       	and	r24, r24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <main+0x1da>
     2a6:	8c c0       	rjmp	.+280    	; 0x3c0 <main+0x2f2>
     2a8:	ec 85       	ldd	r30, Y+12	; 0x0c
     2aa:	fd 85       	ldd	r31, Y+13	; 0x0d
     2ac:	82 81       	ldd	r24, Z+2	; 0x02
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8d 30       	cpi	r24, 0x0D	; 13
     2b6:	91 05       	cpc	r25, r1
     2b8:	0c f4       	brge	.+2      	; 0x2bc <main+0x1ee>
     2ba:	82 c0       	rjmp	.+260    	; 0x3c0 <main+0x2f2>
     2bc:	ec 85       	ldd	r30, Y+12	; 0x0c
     2be:	fd 85       	ldd	r31, Y+13	; 0x0d
     2c0:	83 81       	ldd	r24, Z+3	; 0x03
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8d 30       	cpi	r24, 0x0D	; 13
     2ca:	91 05       	cpc	r25, r1
     2cc:	0c f4       	brge	.+2      	; 0x2d0 <main+0x202>
     2ce:	78 c0       	rjmp	.+240    	; 0x3c0 <main+0x2f2>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	68 e1       	ldi	r22, 0x18	; 24
     2ee:	43 e0       	ldi	r20, 0x03	; 3
     2f0:	51 e0       	ldi	r21, 0x01	; 1
     2f2:	0e 94 94 05 	call	0xb28	; 0xb28 <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	23 e0       	ldi	r18, 0x03	; 3
     2fc:	31 e0       	ldi	r19, 0x01	; 1
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 0c 05 	call	0xa18	; 0xa18 <mu2_command_eeprom>
     304:	8f ab       	std	Y+55, r24	; 0x37
     306:	af a9       	ldd	r26, Y+55	; 0x37
     308:	aa 23       	and	r26, r26
     30a:	11 f0       	breq	.+4      	; 0x310 <main+0x242>
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	bf ab       	std	Y+55, r27	; 0x37
     310:	9f a9       	ldd	r25, Y+55	; 0x37
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	69 2f       	mov	r22, r25
     316:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     31a:	86 e0       	ldi	r24, 0x06	; 6
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	29 e0       	ldi	r18, 0x09	; 9
     320:	31 e0       	ldi	r19, 0x01	; 1
     322:	b9 01       	movw	r22, r18
     324:	0e 94 0c 05 	call	0xa18	; 0xa18 <mu2_command_eeprom>
     328:	88 af       	std	Y+56, r24	; 0x38
     32a:	88 ad       	ldd	r24, Y+56	; 0x38
     32c:	88 23       	and	r24, r24
     32e:	11 f0       	breq	.+4      	; 0x334 <main+0x266>
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	98 af       	std	Y+56, r25	; 0x38
     334:	98 ad       	ldd	r25, Y+56	; 0x38
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	69 2f       	mov	r22, r25
     33a:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     33e:	8c e0       	ldi	r24, 0x0C	; 12
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	2f e0       	ldi	r18, 0x0F	; 15
     344:	31 e0       	ldi	r19, 0x01	; 1
     346:	b9 01       	movw	r22, r18
     348:	0e 94 0c 05 	call	0xa18	; 0xa18 <mu2_command_eeprom>
     34c:	89 af       	std	Y+57, r24	; 0x39
     34e:	a9 ad       	ldd	r26, Y+57	; 0x39
     350:	aa 23       	and	r26, r26
     352:	11 f0       	breq	.+4      	; 0x358 <main+0x28a>
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	b9 af       	std	Y+57, r27	; 0x39
     358:	99 ad       	ldd	r25, Y+57	; 0x39
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	69 2f       	mov	r22, r25
     35e:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     362:	82 e1       	ldi	r24, 0x12	; 18
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	25 e1       	ldi	r18, 0x15	; 21
     368:	31 e0       	ldi	r19, 0x01	; 1
     36a:	b9 01       	movw	r22, r18
     36c:	0e 94 0c 05 	call	0xa18	; 0xa18 <mu2_command_eeprom>
     370:	8a af       	std	Y+58, r24	; 0x3a
     372:	8a ad       	ldd	r24, Y+58	; 0x3a
     374:	88 23       	and	r24, r24
     376:	11 f0       	breq	.+4      	; 0x37c <main+0x2ae>
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	9a af       	std	Y+58, r25	; 0x3a
     37c:	9a ad       	ldd	r25, Y+58	; 0x3a
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	69 2f       	mov	r22, r25
     382:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     386:	88 e1       	ldi	r24, 0x18	; 24
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	2b e1       	ldi	r18, 0x1B	; 27
     38c:	31 e0       	ldi	r19, 0x01	; 1
     38e:	b9 01       	movw	r22, r18
     390:	0e 94 0c 05 	call	0xa18	; 0xa18 <mu2_command_eeprom>
     394:	8b af       	std	Y+59, r24	; 0x3b
     396:	ab ad       	ldd	r26, Y+59	; 0x3b
     398:	aa 23       	and	r26, r26
     39a:	11 f0       	breq	.+4      	; 0x3a0 <main+0x2d2>
     39c:	b1 e0       	ldi	r27, 0x01	; 1
     39e:	bb af       	std	Y+59, r27	; 0x3b
     3a0:	9b ad       	ldd	r25, Y+59	; 0x3b
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	69 2f       	mov	r22, r25
     3a6:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				wait_ms(100);
     3aa:	84 e6       	ldi	r24, 0x64	; 100
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	60 e9       	ldi	r22, 0x90	; 144
     3b8:	43 e0       	ldi	r20, 0x03	; 3
     3ba:	51 e0       	ldi	r21, 0x01	; 1
     3bc:	0e 94 94 05 	call	0xb28	; 0xb28 <uart_init>
			}
/*-------------------------------------------------------------------------*/
		if(controller->detail.Button.X&&count<70){
     3c0:	ec 85       	ldd	r30, Y+12	; 0x0c
     3c2:	fd 85       	ldd	r31, Y+13	; 0x0d
     3c4:	80 81       	ld	r24, Z
     3c6:	81 70       	andi	r24, 0x01	; 1
     3c8:	88 23       	and	r24, r24
     3ca:	09 f4       	brne	.+2      	; 0x3ce <main+0x300>
     3cc:	46 c0       	rjmp	.+140    	; 0x45a <main+0x38c>
     3ce:	8a 81       	ldd	r24, Y+2	; 0x02
     3d0:	9b 81       	ldd	r25, Y+3	; 0x03
     3d2:	86 34       	cpi	r24, 0x46	; 70
     3d4:	91 05       	cpc	r25, r1
     3d6:	0c f0       	brlt	.+2      	; 0x3da <main+0x30c>
     3d8:	40 c0       	rjmp	.+128    	; 0x45a <main+0x38c>
			uDuty = dDuty = 100;
     3da:	84 e6       	ldi	r24, 0x64	; 100
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9d 83       	std	Y+5, r25	; 0x05
     3e0:	8c 83       	std	Y+4, r24	; 0x04
     3e2:	84 e6       	ldi	r24, 0x64	; 100
     3e4:	8e 83       	std	Y+6, r24	; 0x06
			count++;
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
			dDuty -= count*6;
     3f0:	2a 81       	ldd	r18, Y+2	; 0x02
     3f2:	3b 81       	ldd	r19, Y+3	; 0x03
     3f4:	c9 01       	movw	r24, r18
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	82 0f       	add	r24, r18
     3fc:	93 1f       	adc	r25, r19
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	22 27       	eor	r18, r18
     404:	33 27       	eor	r19, r19
     406:	28 1b       	sub	r18, r24
     408:	39 0b       	sbc	r19, r25
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	9d 83       	std	Y+5, r25	; 0x05
     414:	8c 83       	std	Y+4, r24	; 0x04
			mDrive(&Motor,CCW,uDuty,0);	//BLUE
     416:	ce 01       	movw	r24, r28
     418:	4a 96       	adiw	r24, 0x1a	; 26
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	4e 81       	ldd	r20, Y+6	; 0x06
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	0e 94 28 0c 	call	0x1850	; 0x1850 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     424:	8b 8d       	ldd	r24, Y+27	; 0x1b
     426:	9c 8d       	ldd	r25, Y+28	; 0x1c
     428:	dc 01       	movw	r26, r24
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     42e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     430:	80 81       	ld	r24, Z
     432:	8c 93       	st	X, r24
			mDrive(&Motor,CW,(int8_t)dDuty,2);	//ORANGE
     434:	2c 81       	ldd	r18, Y+4	; 0x04
     436:	ce 01       	movw	r24, r28
     438:	4a 96       	adiw	r24, 0x1a	; 26
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	42 2f       	mov	r20, r18
     43e:	22 e0       	ldi	r18, 0x02	; 2
     440:	0e 94 28 0c 	call	0x1850	; 0x1850 <mDrive>
			Motor.write.buf[3] = Motor.write.buf[2];
     444:	8b 8d       	ldd	r24, Y+27	; 0x1b
     446:	9c 8d       	ldd	r25, Y+28	; 0x1c
     448:	dc 01       	movw	r26, r24
     44a:	13 96       	adiw	r26, 0x03	; 3
     44c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     44e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     450:	fc 01       	movw	r30, r24
     452:	32 96       	adiw	r30, 0x02	; 2
     454:	80 81       	ld	r24, Z
     456:	8c 93       	st	X, r24
     458:	cc c0       	rjmp	.+408    	; 0x5f2 <main+0x524>
			

		/*ここにプログラムを記述するとよろしいのではないのかと思われます*/

		
			if(	controller->detail.AnalogR.Y<0x05	||
     45a:	ec 85       	ldd	r30, Y+12	; 0x0c
     45c:	fd 85       	ldd	r31, Y+13	; 0x0d
     45e:	83 81       	ldd	r24, Z+3	; 0x03
     460:	8f 70       	andi	r24, 0x0F	; 15
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	85 30       	cpi	r24, 0x05	; 5
     468:	91 05       	cpc	r25, r1
     46a:	4c f0       	brlt	.+18     	; 0x47e <main+0x3b0>
     46c:	ec 85       	ldd	r30, Y+12	; 0x0c
     46e:	fd 85       	ldd	r31, Y+13	; 0x0d
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	88 2f       	mov	r24, r24
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	85 30       	cpi	r24, 0x05	; 5
     47a:	91 05       	cpc	r25, r1
     47c:	34 f4       	brge	.+12     	; 0x48a <main+0x3bc>
				controller->detail.AnalogL.Y<0x05	)
				{
					uDuty = 0;
     47e:	1e 82       	std	Y+6, r1	; 0x06
					dDuty = 100;
     480:	84 e6       	ldi	r24, 0x64	; 100
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	9d 83       	std	Y+5, r25	; 0x05
     486:	8c 83       	std	Y+4, r24	; 0x04
     488:	2a c0       	rjmp	.+84     	; 0x4de <main+0x410>
				}
			else if(	controller->detail.AnalogR.Y>0x09	||
     48a:	ec 85       	ldd	r30, Y+12	; 0x0c
     48c:	fd 85       	ldd	r31, Y+13	; 0x0d
     48e:	83 81       	ldd	r24, Z+3	; 0x03
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	8a 30       	cpi	r24, 0x0A	; 10
     498:	91 05       	cpc	r25, r1
     49a:	4c f4       	brge	.+18     	; 0x4ae <main+0x3e0>
     49c:	ec 85       	ldd	r30, Y+12	; 0x0c
     49e:	fd 85       	ldd	r31, Y+13	; 0x0d
     4a0:	82 81       	ldd	r24, Z+2	; 0x02
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	88 2f       	mov	r24, r24
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	8a 30       	cpi	r24, 0x0A	; 10
     4aa:	91 05       	cpc	r25, r1
     4ac:	2c f0       	brlt	.+10     	; 0x4b8 <main+0x3ea>
						controller->detail.AnalogL.Y>0x09	)
				{
					uDuty = 100;
     4ae:	84 e6       	ldi	r24, 0x64	; 100
     4b0:	8e 83       	std	Y+6, r24	; 0x06
					dDuty = 0;
     4b2:	1d 82       	std	Y+5, r1	; 0x05
     4b4:	1c 82       	std	Y+4, r1	; 0x04
     4b6:	13 c0       	rjmp	.+38     	; 0x4de <main+0x410>
				}
			else if(controller->detail.Button.B)
     4b8:	ec 85       	ldd	r30, Y+12	; 0x0c
     4ba:	fd 85       	ldd	r31, Y+13	; 0x0d
     4bc:	80 81       	ld	r24, Z
     4be:	84 70       	andi	r24, 0x04	; 4
     4c0:	88 23       	and	r24, r24
     4c2:	39 f0       	breq	.+14     	; 0x4d2 <main+0x404>
				{
					uDuty = dDuty = 50;
     4c4:	82 e3       	ldi	r24, 0x32	; 50
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	9d 83       	std	Y+5, r25	; 0x05
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	82 e3       	ldi	r24, 0x32	; 50
     4ce:	8e 83       	std	Y+6, r24	; 0x06
     4d0:	06 c0       	rjmp	.+12     	; 0x4de <main+0x410>
				}
			else
				{
					uDuty = dDuty = 100;
     4d2:	84 e6       	ldi	r24, 0x64	; 100
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	9d 83       	std	Y+5, r25	; 0x05
     4d8:	8c 83       	std	Y+4, r24	; 0x04
     4da:	84 e6       	ldi	r24, 0x64	; 100
     4dc:	8e 83       	std	Y+6, r24	; 0x06
				}
		
			if(	controller->detail.Button.L			||
     4de:	ec 85       	ldd	r30, Y+12	; 0x0c
     4e0:	fd 85       	ldd	r31, Y+13	; 0x0d
     4e2:	81 81       	ldd	r24, Z+1	; 0x01
     4e4:	80 72       	andi	r24, 0x20	; 32
     4e6:	88 23       	and	r24, r24
     4e8:	a1 f4       	brne	.+40     	; 0x512 <main+0x444>
     4ea:	ec 85       	ldd	r30, Y+12	; 0x0c
     4ec:	fd 85       	ldd	r31, Y+13	; 0x0d
     4ee:	83 81       	ldd	r24, Z+3	; 0x03
     4f0:	82 95       	swap	r24
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	91 05       	cpc	r25, r1
     4fc:	54 f0       	brlt	.+20     	; 0x512 <main+0x444>
     4fe:	ec 85       	ldd	r30, Y+12	; 0x0c
     500:	fd 85       	ldd	r31, Y+13	; 0x0d
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	82 95       	swap	r24
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	88 2f       	mov	r24, r24
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	85 30       	cpi	r24, 0x05	; 5
     50e:	91 05       	cpc	r25, r1
     510:	2c f4       	brge	.+10     	; 0x51c <main+0x44e>
				controller->detail.AnalogR.X<0x05	||
				controller->detail.AnalogL.X<0x05	)
				{
					uAction=CW;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CCW;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	89 87       	std	Y+9, r24	; 0x09
     51a:	39 c0       	rjmp	.+114    	; 0x58e <main+0x4c0>
				}
			else if( 	controller->detail.Button.R			||
     51c:	ec 85       	ldd	r30, Y+12	; 0x0c
     51e:	fd 85       	ldd	r31, Y+13	; 0x0d
     520:	81 81       	ldd	r24, Z+1	; 0x01
     522:	80 74       	andi	r24, 0x40	; 64
     524:	88 23       	and	r24, r24
     526:	a1 f4       	brne	.+40     	; 0x550 <main+0x482>
     528:	ec 85       	ldd	r30, Y+12	; 0x0c
     52a:	fd 85       	ldd	r31, Y+13	; 0x0d
     52c:	83 81       	ldd	r24, Z+3	; 0x03
     52e:	82 95       	swap	r24
     530:	8f 70       	andi	r24, 0x0F	; 15
     532:	88 2f       	mov	r24, r24
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	8a 30       	cpi	r24, 0x0A	; 10
     538:	91 05       	cpc	r25, r1
     53a:	54 f4       	brge	.+20     	; 0x550 <main+0x482>
     53c:	ec 85       	ldd	r30, Y+12	; 0x0c
     53e:	fd 85       	ldd	r31, Y+13	; 0x0d
     540:	82 81       	ldd	r24, Z+2	; 0x02
     542:	82 95       	swap	r24
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	88 2f       	mov	r24, r24
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	8a 30       	cpi	r24, 0x0A	; 10
     54c:	91 05       	cpc	r25, r1
     54e:	2c f0       	brlt	.+10     	; 0x55a <main+0x48c>
						controller->detail.AnalogR.X>0x09	||
						controller->detail.AnalogL.X>0x09	)
				{
					uAction=CCW;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	8a 87       	std	Y+10, r24	; 0x0a
					dAction=CW;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	89 87       	std	Y+9, r24	; 0x09
     558:	1a c0       	rjmp	.+52     	; 0x58e <main+0x4c0>
				}
			else if(controller->detail.Button.LEFT)
     55a:	ec 85       	ldd	r30, Y+12	; 0x0c
     55c:	fd 85       	ldd	r31, Y+13	; 0x0d
     55e:	80 81       	ld	r24, Z
     560:	80 78       	andi	r24, 0x80	; 128
     562:	88 23       	and	r24, r24
     564:	29 f0       	breq	.+10     	; 0x570 <main+0x4a2>
				{
					uAction = dAction = CW;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	89 87       	std	Y+9, r24	; 0x09
     56a:	89 85       	ldd	r24, Y+9	; 0x09
     56c:	8a 87       	std	Y+10, r24	; 0x0a
     56e:	0f c0       	rjmp	.+30     	; 0x58e <main+0x4c0>
				}
			else if(controller->detail.Button.RIGHT)
     570:	ec 85       	ldd	r30, Y+12	; 0x0c
     572:	fd 85       	ldd	r31, Y+13	; 0x0d
     574:	80 81       	ld	r24, Z
     576:	80 72       	andi	r24, 0x20	; 32
     578:	88 23       	and	r24, r24
     57a:	29 f0       	breq	.+10     	; 0x586 <main+0x4b8>
				{
					uAction = dAction = CCW;
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	89 87       	std	Y+9, r24	; 0x09
     580:	89 85       	ldd	r24, Y+9	; 0x09
     582:	8a 87       	std	Y+10, r24	; 0x0a
     584:	04 c0       	rjmp	.+8      	; 0x58e <main+0x4c0>
				}
			else
				{
					uAction = dAction = BRAKE;
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	89 87       	std	Y+9, r24	; 0x09
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	8a 87       	std	Y+10, r24	; 0x0a
				}

			mDrive(&Motor,uDuty?uAction:BRAKE,uDuty,0);	//BLUE
     58e:	8e 81       	ldd	r24, Y+6	; 0x06
     590:	88 23       	and	r24, r24
     592:	19 f0       	breq	.+6      	; 0x59a <main+0x4cc>
     594:	8a 85       	ldd	r24, Y+10	; 0x0a
     596:	8e ab       	std	Y+54, r24	; 0x36
     598:	02 c0       	rjmp	.+4      	; 0x59e <main+0x4d0>
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	9e ab       	std	Y+54, r25	; 0x36
     59e:	ce 01       	movw	r24, r28
     5a0:	4a 96       	adiw	r24, 0x1a	; 26
     5a2:	6e a9       	ldd	r22, Y+54	; 0x36
     5a4:	4e 81       	ldd	r20, Y+6	; 0x06
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	0e 94 28 0c 	call	0x1850	; 0x1850 <mDrive>
			Motor.write.buf[1] = Motor.write.buf[0];
     5ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5b0:	dc 01       	movw	r26, r24
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5b6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5b8:	80 81       	ld	r24, Z
     5ba:	8c 93       	st	X, r24
			mDrive(&Motor,dDuty?dAction:BRAKE,dDuty,2);	//ORANGE
     5bc:	8c 81       	ldd	r24, Y+4	; 0x04
     5be:	9d 81       	ldd	r25, Y+5	; 0x05
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	19 f0       	breq	.+6      	; 0x5ca <main+0x4fc>
     5c4:	a9 85       	ldd	r26, Y+9	; 0x09
     5c6:	ad ab       	std	Y+53, r26	; 0x35
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <main+0x500>
     5ca:	b3 e0       	ldi	r27, 0x03	; 3
     5cc:	bd ab       	std	Y+53, r27	; 0x35
     5ce:	2c 81       	ldd	r18, Y+4	; 0x04
     5d0:	ce 01       	movw	r24, r28
     5d2:	4a 96       	adiw	r24, 0x1a	; 26
     5d4:	6d a9       	ldd	r22, Y+53	; 0x35
     5d6:	42 2f       	mov	r20, r18
     5d8:	22 e0       	ldi	r18, 0x02	; 2
     5da:	0e 94 28 0c 	call	0x1850	; 0x1850 <mDrive>
			Motor.write.buf[3] = Motor.write.buf[2];
     5de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5e2:	dc 01       	movw	r26, r24
     5e4:	13 96       	adiw	r26, 0x03	; 3
     5e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ea:	fc 01       	movw	r30, r24
     5ec:	32 96       	adiw	r30, 0x02	; 2
     5ee:	80 81       	ld	r24, Z
     5f0:	8c 93       	st	X, r24
		}
/*-------------------------------------------------------------------------------------------------------------------------*/
		action = FREE;
     5f2:	1b 86       	std	Y+11, r1	; 0x0b
		if(controller->detail.Button.Y)
     5f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     5f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     5f8:	80 81       	ld	r24, Z
     5fa:	88 70       	andi	r24, 0x08	; 8
     5fc:	88 23       	and	r24, r24
     5fe:	29 f0       	breq	.+10     	; 0x60a <main+0x53c>
			{
				action = CW;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x03;
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	8f 83       	std	Y+7, r24	; 0x07
     608:	15 c0       	rjmp	.+42     	; 0x634 <main+0x566>
			}
		else if(controller->detail.Button.ZL)
     60a:	ec 85       	ldd	r30, Y+12	; 0x0c
     60c:	fd 85       	ldd	r31, Y+13	; 0x0d
     60e:	81 81       	ldd	r24, Z+1	; 0x01
     610:	88 70       	andi	r24, 0x08	; 8
     612:	88 23       	and	r24, r24
     614:	29 f0       	breq	.+10     	; 0x620 <main+0x552>
			{
				action = CW;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x01;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	8f 83       	std	Y+7, r24	; 0x07
     61e:	0a c0       	rjmp	.+20     	; 0x634 <main+0x566>
			}
		else if(controller->detail.Button.ZR)
     620:	ec 85       	ldd	r30, Y+12	; 0x0c
     622:	fd 85       	ldd	r31, Y+13	; 0x0d
     624:	81 81       	ldd	r24, Z+1	; 0x01
     626:	80 71       	andi	r24, 0x10	; 16
     628:	88 23       	and	r24, r24
     62a:	21 f0       	breq	.+8      	; 0x634 <main+0x566>
			{
				action = CW;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	8b 87       	std	Y+11, r24	; 0x0b
				AirPort = 0x02;
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	8f 83       	std	Y+7, r24	; 0x07
			}
		aDrive(&Air,AirPort,action);
     634:	8b 85       	ldd	r24, Y+11	; 0x0b
     636:	8c af       	std	Y+60, r24	; 0x3c
     638:	9c ad       	ldd	r25, Y+60	; 0x3c
     63a:	99 23       	and	r25, r25
     63c:	11 f0       	breq	.+4      	; 0x642 <main+0x574>
     63e:	a1 e0       	ldi	r26, 0x01	; 1
     640:	ac af       	std	Y+60, r26	; 0x3c
     642:	2c ad       	ldd	r18, Y+60	; 0x3c
     644:	ce 01       	movw	r24, r28
     646:	83 96       	adiw	r24, 0x23	; 35
     648:	6f 81       	ldd	r22, Y+7	; 0x07
     64a:	42 2f       	mov	r20, r18
     64c:	0e 94 9e 0c 	call	0x193c	; 0x193c <aDrive>
/*-------------------------------------------------------------------------------------------------------------------------*/
		/*バルスモード*/
		/*バルス!!!!!*/
		if(controller->detail.Button.A||(controller->detail.Button.SELECT&&controller->detail.Button.START)) e_flag=E_ON;
     650:	ec 85       	ldd	r30, Y+12	; 0x0c
     652:	fd 85       	ldd	r31, Y+13	; 0x0d
     654:	80 81       	ld	r24, Z
     656:	82 70       	andi	r24, 0x02	; 2
     658:	88 23       	and	r24, r24
     65a:	61 f4       	brne	.+24     	; 0x674 <main+0x5a6>
     65c:	ec 85       	ldd	r30, Y+12	; 0x0c
     65e:	fd 85       	ldd	r31, Y+13	; 0x0d
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	81 70       	andi	r24, 0x01	; 1
     664:	88 23       	and	r24, r24
     666:	49 f0       	breq	.+18     	; 0x67a <main+0x5ac>
     668:	ec 85       	ldd	r30, Y+12	; 0x0c
     66a:	fd 85       	ldd	r31, Y+13	; 0x0d
     66c:	81 81       	ldd	r24, Z+1	; 0x01
     66e:	84 70       	andi	r24, 0x04	; 4
     670:	88 23       	and	r24, r24
     672:	19 f0       	breq	.+6      	; 0x67a <main+0x5ac>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	88 87       	std	Y+8, r24	; 0x08
     678:	0a c0       	rjmp	.+20     	; 0x68e <main+0x5c0>
		/*復活!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     67a:	ec 85       	ldd	r30, Y+12	; 0x0c
     67c:	fd 85       	ldd	r31, Y+13	; 0x0d
     67e:	81 81       	ldd	r24, Z+1	; 0x01
     680:	82 70       	andi	r24, 0x02	; 2
     682:	88 23       	and	r24, r24
     684:	19 f0       	breq	.+6      	; 0x68c <main+0x5be>
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	88 87       	std	Y+8, r24	; 0x08
     68a:	01 c0       	rjmp	.+2      	; 0x68e <main+0x5c0>
		else e_flag=E_KEEP;	
     68c:	18 86       	std	Y+8, r1	; 0x08

		i2cStatus = true;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	08 2f       	mov	r16, r24
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	28 85       	ldd	r18, Y+8	; 0x08
     69a:	ce 01       	movw	r24, r28
     69c:	8c 96       	adiw	r24, 0x2c	; 44
     69e:	62 2f       	mov	r22, r18
     6a0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <Emergency>
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	80 23       	and	r24, r16
     6aa:	91 23       	and	r25, r17
     6ac:	19 82       	std	Y+1, r1	; 0x01
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	11 f0       	breq	.+4      	; 0x6b6 <main+0x5e8>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(8);
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	08 2f       	mov	r16, r24
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	ce 01       	movw	r24, r28
     6be:	4a 96       	adiw	r24, 0x1a	; 26
     6c0:	0e 94 43 09 	call	0x1286	; 0x1286 <i2cWrite>
     6c4:	88 2f       	mov	r24, r24
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	80 23       	and	r24, r16
     6ca:	91 23       	and	r25, r17
     6cc:	19 82       	std	Y+1, r1	; 0x01
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	11 f0       	breq	.+4      	; 0x6d6 <main+0x608>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(8);
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	08 2f       	mov	r16, r24
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	ce 01       	movw	r24, r28
     6e6:	83 96       	adiw	r24, 0x23	; 35
     6e8:	0e 94 43 09 	call	0x1286	; 0x1286 <i2cWrite>
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	80 23       	and	r24, r16
     6f2:	91 23       	and	r25, r17
     6f4:	19 82       	std	Y+1, r1	; 0x01
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	11 f0       	breq	.+4      	; 0x6fe <main+0x630>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	88 e0       	ldi	r24, 0x08	; 8
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	08 2f       	mov	r16, r24
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	ce 01       	movw	r24, r28
     70e:	8c 96       	adiw	r24, 0x2c	; 44
     710:	0e 94 43 09 	call	0x1286	; 0x1286 <i2cWrite>
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	80 23       	and	r24, r16
     71a:	91 23       	and	r25, r17
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	11 f0       	breq	.+4      	; 0x726 <main+0x658>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cCheck>
		wait_ms(21);
     72c:	85 e1       	ldi	r24, 0x15	; 21
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 98 0b 	call	0x1730	; 0x1730 <wait_ms>
     734:	a0 cd       	rjmp	.-1216   	; 0x276 <main+0x1a8>

00000736 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
	cli();
     73e:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     740:	10 92 58 01 	sts	0x0158, r1
     744:	15 c0       	rjmp	.+42     	; 0x770 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     746:	80 91 58 01 	lds	r24, 0x0158
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	80 91 58 01 	lds	r24, 0x0158
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	e5 5a       	subi	r30, 0xA5	; 165
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	80 81       	ld	r24, Z
     75e:	f9 01       	movw	r30, r18
     760:	e1 5a       	subi	r30, 0xA1	; 161
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     766:	80 91 58 01 	lds	r24, 0x0158
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 58 01 	sts	0x0158, r24
     770:	80 91 58 01 	lds	r24, 0x0158
     774:	84 30       	cpi	r24, 0x04	; 4
     776:	38 f3       	brcs	.-50     	; 0x746 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     778:	78 94       	sei
	return &keepCtrlData;
     77a:	8f e5       	ldi	r24, 0x5F	; 95
     77c:	91 e0       	ldi	r25, 0x01	; 1
}
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <__vector_20>:


ISR(USART0_RX_vect)
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	00 90 5b 00 	lds	r0, 0x005B
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	ef 93       	push	r30
     7aa:	ff 93       	push	r31
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     7b4:	e6 ec       	ldi	r30, 0xC6	; 198
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	80 93 7b 01 	sts	0x017B, r24

	if(phase){
     7be:	80 91 5a 01 	lds	r24, 0x015A
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <__vector_20+0x44>
     7c6:	59 c0       	rjmp	.+178    	; 0x87a <__vector_20+0xf6>
		packet[cnt] = val;
     7c8:	80 91 59 01 	lds	r24, 0x0159
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	20 91 7b 01 	lds	r18, 0x017B
     7d4:	fc 01       	movw	r30, r24
     7d6:	ed 59       	subi	r30, 0x9D	; 157
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	20 83       	st	Z, r18
		uart1_putchar(packet[cnt]);
     7dc:	80 91 59 01 	lds	r24, 0x0159
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	ed 59       	subi	r30, 0x9D	; 157
     7e8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ea:	80 81       	ld	r24, Z
     7ec:	0e 94 90 06 	call	0xd20	; 0xd20 <uart1_putchar>
		if(cnt<2){
     7f0:	80 91 59 01 	lds	r24, 0x0159
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	c8 f4       	brcc	.+50     	; 0x82a <__vector_20+0xa6>
			if(val != check[cnt]){
     7f8:	80 91 59 01 	lds	r24, 0x0159
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	e2 5e       	subi	r30, 0xE2	; 226
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	90 81       	ld	r25, Z
     808:	80 91 7b 01 	lds	r24, 0x017B
     80c:	98 17       	cp	r25, r24
     80e:	79 f1       	breq	.+94     	; 0x86e <__vector_20+0xea>
				phase = false;
     810:	10 92 5a 01 	sts	0x015A, r1
				uart1_putchar('@');
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	0e 94 90 06 	call	0xd20	; 0xd20 <uart1_putchar>
				LED(0,false);
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
				beep(1);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
     828:	22 c0       	rjmp	.+68     	; 0x86e <__vector_20+0xea>
			}
		}else if(cnt==10){
     82a:	80 91 59 01 	lds	r24, 0x0159
     82e:	8a 30       	cpi	r24, 0x0A	; 10
     830:	f1 f4       	brne	.+60     	; 0x86e <__vector_20+0xea>
			ctrlData.buf[0] = packet[5];
     832:	80 91 68 01 	lds	r24, 0x0168
     836:	80 93 5b 01 	sts	0x015B, r24
			ctrlData.buf[1] = packet[6];
     83a:	80 91 69 01 	lds	r24, 0x0169
     83e:	80 93 5c 01 	sts	0x015C, r24
			ctrlData.buf[2] = packet[7];
     842:	80 91 6a 01 	lds	r24, 0x016A
     846:	80 93 5d 01 	sts	0x015D, r24
			ctrlData.buf[3] = packet[8];
     84a:	80 91 6b 01 	lds	r24, 0x016B
     84e:	80 93 5e 01 	sts	0x015E, r24
			phase = false;
     852:	10 92 5a 01 	sts	0x015A, r1
			wdt_reset();
     856:	a8 95       	wdr
			LED(0,true);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
			if(EmergencyStatus()) beep(0);
     860:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <EmergencyStatus>
     864:	88 23       	and	r24, r24
     866:	19 f0       	breq	.+6      	; 0x86e <__vector_20+0xea>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
		}
		cnt++;
     86e:	80 91 59 01 	lds	r24, 0x0159
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 59 01 	sts	0x0159, r24
     878:	09 c0       	rjmp	.+18     	; 0x88c <__vector_20+0x108>
	}else{
		if(val=='*'){
     87a:	80 91 7b 01 	lds	r24, 0x017B
     87e:	8a 32       	cpi	r24, 0x2A	; 42
     880:	29 f4       	brne	.+10     	; 0x88c <__vector_20+0x108>
		cnt = 0;
     882:	10 92 59 01 	sts	0x0159, r1
		phase = true;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 5a 01 	sts	0x015A, r24
		}
	}

}
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	bf 91       	pop	r27
     896:	af 91       	pop	r26
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	7f 91       	pop	r23
     89e:	6f 91       	pop	r22
     8a0:	5f 91       	pop	r21
     8a2:	4f 91       	pop	r20
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	00 92 5b 00 	sts	0x005B, r0
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <Byte2Str>:
/// バイト（0x00〜0xFF）の数を2桁の文字列に変換
/// </summary>
/// <param name="num">変換対象の数字</param>
/// <param name="str">変換後の文字列を格納する領域</param>
void Byte2Str(unsigned char num, char *str)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <Byte2Str+0x6>
     8be:	0f 92       	push	r0
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	7b 83       	std	Y+3, r23	; 0x03
     8c8:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	82 95       	swap	r24
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	88 2f       	mov	r24, r24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	fc 01       	movw	r30, r24
     8d6:	ee 5d       	subi	r30, 0xDE	; 222
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	80 81       	ld	r24, Z
     8dc:	ea 81       	ldd	r30, Y+2	; 0x02
     8de:	fb 81       	ldd	r31, Y+3	; 0x03
     8e0:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	9b 81       	ldd	r25, Y+3	; 0x03
     8e6:	dc 01       	movw	r26, r24
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	8f 70       	andi	r24, 0x0F	; 15
     8f2:	90 70       	andi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	ee 5d       	subi	r30, 0xDE	; 222
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	80 81       	ld	r24, Z
     8fc:	8c 93       	st	X, r24
	str[2] = '\0';
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	9b 81       	ldd	r25, Y+3	; 0x03
     902:	fc 01       	movw	r30, r24
     904:	32 96       	adiw	r30, 0x02	; 2
     906:	10 82       	st	Z, r1
}
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	00 d0       	rcall	.+0      	; 0x91e <mu2_command+0xa>
     91e:	00 d0       	rcall	.+0      	; 0x920 <mu2_command+0xc>
     920:	0f 92       	push	r0
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	7c 83       	std	Y+4, r23	; 0x04
     92c:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     92e:	80 e4       	ldi	r24, 0x40	; 64
     930:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(cmd[0]);
     934:	e9 81       	ldd	r30, Y+1	; 0x01
     936:	fa 81       	ldd	r31, Y+2	; 0x02
     938:	80 81       	ld	r24, Z
     93a:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(cmd[1]);
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	9a 81       	ldd	r25, Y+2	; 0x02
     942:	fc 01       	movw	r30, r24
     944:	31 96       	adiw	r30, 0x01	; 1
     946:	80 81       	ld	r24, Z
     948:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
     94c:	0a c0       	rjmp	.+20     	; 0x962 <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     94e:	eb 81       	ldd	r30, Y+3	; 0x03
     950:	fc 81       	ldd	r31, Y+4	; 0x04
     952:	80 81       	ld	r24, Z
     954:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
		val++;
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	9c 83       	std	Y+4, r25	; 0x04
     960:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     962:	eb 81       	ldd	r30, Y+3	; 0x03
     964:	fc 81       	ldd	r31, Y+4	; 0x04
     966:	80 81       	ld	r24, Z
     968:	88 23       	and	r24, r24
     96a:	89 f7       	brne	.-30     	; 0x94e <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     96c:	8d e0       	ldi	r24, 0x0D	; 13
     96e:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(0x0a);
     972:	8a e0       	ldi	r24, 0x0A	; 10
     974:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	for(i=0;i<10;i++){
     978:	10 92 7c 01 	sts	0x017C, r1
     97c:	32 c0       	rjmp	.+100    	; 0x9e2 <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     97e:	80 91 7c 01 	lds	r24, 0x017C
     982:	08 2f       	mov	r16, r24
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <uart0_getchar>
     98a:	f8 01       	movw	r30, r16
     98c:	e3 58       	subi	r30, 0x83	; 131
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     992:	80 91 7c 01 	lds	r24, 0x017C
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	fc 01       	movw	r30, r24
     99c:	e3 58       	subi	r30, 0x83	; 131
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	80 81       	ld	r24, Z
     9a2:	0e 94 90 06 	call	0xd20	; 0xd20 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     9a6:	80 91 7c 01 	lds	r24, 0x017C
     9aa:	88 23       	and	r24, r24
     9ac:	a9 f0       	breq	.+42     	; 0x9d8 <mu2_command+0xc4>
     9ae:	80 91 7c 01 	lds	r24, 0x017C
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	fc 01       	movw	r30, r24
     9ba:	e3 58       	subi	r30, 0x83	; 131
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	80 81       	ld	r24, Z
     9c0:	8d 30       	cpi	r24, 0x0D	; 13
     9c2:	51 f4       	brne	.+20     	; 0x9d8 <mu2_command+0xc4>
     9c4:	80 91 7c 01 	lds	r24, 0x017C
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	e3 58       	subi	r30, 0x83	; 131
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	80 81       	ld	r24, Z
     9d4:	8a 30       	cpi	r24, 0x0A	; 10
     9d6:	49 f0       	breq	.+18     	; 0x9ea <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     9d8:	80 91 7c 01 	lds	r24, 0x017C
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 7c 01 	sts	0x017C, r24
     9e2:	80 91 7c 01 	lds	r24, 0x017C
     9e6:	8a 30       	cpi	r24, 0x0A	; 10
     9e8:	50 f2       	brcs	.-108    	; 0x97e <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     9ea:	80 91 7e 01 	lds	r24, 0x017E
     9ee:	85 34       	cpi	r24, 0x45	; 69
     9f0:	39 f4       	brne	.+14     	; 0xa00 <mu2_command+0xec>
     9f2:	80 91 7f 01 	lds	r24, 0x017F
     9f6:	82 35       	cpi	r24, 0x52	; 82
     9f8:	19 f4       	brne	.+6      	; 0xa00 <mu2_command+0xec>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8d 83       	std	Y+5, r24	; 0x05
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <mu2_command+0xee>
	return 0;
     a00:	1d 82       	std	Y+5, r1	; 0x05
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
}
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	00 d0       	rcall	.+0      	; 0xa22 <mu2_command_eeprom+0xa>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <mu2_command_eeprom+0xc>
     a24:	0f 92       	push	r0
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	7c 83       	std	Y+4, r23	; 0x04
     a30:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a38:	e9 81       	ldd	r30, Y+1	; 0x01
     a3a:	fa 81       	ldd	r31, Y+2	; 0x02
     a3c:	80 81       	ld	r24, Z
     a3e:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	fc 01       	movw	r30, r24
     a48:	31 96       	adiw	r30, 0x01	; 1
     a4a:	80 81       	ld	r24, Z
     a4c:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a52:	eb 81       	ldd	r30, Y+3	; 0x03
     a54:	fc 81       	ldd	r31, Y+4	; 0x04
     a56:	80 81       	ld	r24, Z
     a58:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
		val++;
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a66:	eb 81       	ldd	r30, Y+3	; 0x03
     a68:	fc 81       	ldd	r31, Y+4	; 0x04
     a6a:	80 81       	ld	r24, Z
     a6c:	88 23       	and	r24, r24
     a6e:	89 f7       	brne	.-30     	; 0xa52 <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     a70:	8f e2       	ldi	r24, 0x2F	; 47
     a72:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar('W');
     a76:	87 e5       	ldi	r24, 0x57	; 87
     a78:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(0x0d);
     a7c:	8d e0       	ldi	r24, 0x0D	; 13
     a7e:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	uart0_putchar(0x0a);
     a82:	8a e0       	ldi	r24, 0x0A	; 10
     a84:	0e 94 70 06 	call	0xce0	; 0xce0 <uart0_putchar>
	for(i=0;i<10;i++){
     a88:	10 92 7c 01 	sts	0x017C, r1
     a8c:	32 c0       	rjmp	.+100    	; 0xaf2 <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     a8e:	80 91 7c 01 	lds	r24, 0x017C
     a92:	08 2f       	mov	r16, r24
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <uart0_getchar>
     a9a:	f8 01       	movw	r30, r16
     a9c:	e3 58       	subi	r30, 0x83	; 131
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     aa2:	80 91 7c 01 	lds	r24, 0x017C
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	fc 01       	movw	r30, r24
     aac:	e3 58       	subi	r30, 0x83	; 131
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	80 81       	ld	r24, Z
     ab2:	0e 94 90 06 	call	0xd20	; 0xd20 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     ab6:	80 91 7c 01 	lds	r24, 0x017C
     aba:	88 23       	and	r24, r24
     abc:	a9 f0       	breq	.+42     	; 0xae8 <mu2_command_eeprom+0xd0>
     abe:	80 91 7c 01 	lds	r24, 0x017C
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	fc 01       	movw	r30, r24
     aca:	e3 58       	subi	r30, 0x83	; 131
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 81       	ld	r24, Z
     ad0:	8d 30       	cpi	r24, 0x0D	; 13
     ad2:	51 f4       	brne	.+20     	; 0xae8 <mu2_command_eeprom+0xd0>
     ad4:	80 91 7c 01 	lds	r24, 0x017C
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	fc 01       	movw	r30, r24
     ade:	e3 58       	subi	r30, 0x83	; 131
     ae0:	fe 4f       	sbci	r31, 0xFE	; 254
     ae2:	80 81       	ld	r24, Z
     ae4:	8a 30       	cpi	r24, 0x0A	; 10
     ae6:	49 f0       	breq	.+18     	; 0xafa <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     ae8:	80 91 7c 01 	lds	r24, 0x017C
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 93 7c 01 	sts	0x017C, r24
     af2:	80 91 7c 01 	lds	r24, 0x017C
     af6:	8a 30       	cpi	r24, 0x0A	; 10
     af8:	50 f2       	brcs	.-108    	; 0xa8e <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     afa:	80 91 7e 01 	lds	r24, 0x017E
     afe:	85 34       	cpi	r24, 0x45	; 69
     b00:	39 f4       	brne	.+14     	; 0xb10 <mu2_command_eeprom+0xf8>
     b02:	80 91 7f 01 	lds	r24, 0x017F
     b06:	82 35       	cpi	r24, 0x52	; 82
     b08:	19 f4       	brne	.+6      	; 0xb10 <mu2_command_eeprom+0xf8>
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	8d 83       	std	Y+5, r24	; 0x05
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <mu2_command_eeprom+0xfa>
	return 0;
     b10:	1d 82       	std	Y+5, r1	; 0x05
     b12:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2d 97       	sbiw	r28, 0x0d	; 13
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	6d 83       	std	Y+5, r22	; 0x05
     b42:	5f 83       	std	Y+7, r21	; 0x07
     b44:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	9d 87       	std	Y+13, r25	; 0x0d
     b4c:	8c 87       	std	Y+12, r24	; 0x0c
     b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b50:	9d 85       	ldd	r25, Y+13	; 0x0d
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	31 f0       	breq	.+12     	; 0xb62 <uart_init+0x3a>
     b56:	8c 85       	ldd	r24, Y+12	; 0x0c
     b58:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	91 05       	cpc	r25, r1
     b5e:	b1 f1       	breq	.+108    	; 0xbcc <uart_init+0xa4>
     b60:	64 c0       	rjmp	.+200    	; 0xc2a <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     b62:	e1 ec       	ldi	r30, 0xC1	; 193
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     b68:	a2 ec       	ldi	r26, 0xC2	; 194
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e2 ec       	ldi	r30, 0xC2	; 194
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	86 60       	ori	r24, 0x06	; 6
     b74:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     b76:	1a 82       	std	Y+2, r1	; 0x02
     b78:	19 82       	std	Y+1, r1	; 0x01
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <uart_init+0x5e>
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	23 e1       	ldi	r18, 0x13	; 19
     b8c:	88 38       	cpi	r24, 0x88	; 136
     b8e:	92 07       	cpc	r25, r18
     b90:	ac f3       	brlt	.-22     	; 0xb7c <uart_init+0x54>
			UCSR0B = option;					
     b92:	e1 ec       	ldi	r30, 0xC1	; 193
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	8d 81       	ldd	r24, Y+5	; 0x05
     b98:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     b9a:	e5 ec       	ldi	r30, 0xC5	; 197
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	89 2f       	mov	r24, r25
     ba4:	99 27       	eor	r25, r25
     ba6:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     ba8:	e4 ec       	ldi	r30, 0xC4	; 196
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8e 81       	ldd	r24, Y+6	; 0x06
     bae:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     bb0:	e0 ec       	ldi	r30, 0xC0	; 192
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     bb6:	a0 ec       	ldi	r26, 0xC0	; 192
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e0 ec       	ldi	r30, 0xC0	; 192
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	83 7e       	andi	r24, 0xE3	; 227
     bc2:	8c 93       	st	X, r24
			UDR0 = 0;
     bc4:	e6 ec       	ldi	r30, 0xC6	; 198
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	10 82       	st	Z, r1
     bca:	34 c0       	rjmp	.+104    	; 0xc34 <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     bcc:	ed ec       	ldi	r30, 0xCD	; 205
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	8e 81       	ldd	r24, Y+6	; 0x06
     bd2:	9f 81       	ldd	r25, Y+7	; 0x07
     bd4:	89 2f       	mov	r24, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     bda:	ec ec       	ldi	r30, 0xCC	; 204
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     be2:	1a 82       	std	Y+2, r1	; 0x02
     be4:	19 82       	std	Y+1, r1	; 0x01
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <uart_init+0xca>
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	23 e1       	ldi	r18, 0x13	; 19
     bf8:	88 38       	cpi	r24, 0x88	; 136
     bfa:	92 07       	cpc	r25, r18
     bfc:	ac f3       	brlt	.-22     	; 0xbe8 <uart_init+0xc0>
			UCSR1B |= option;
     bfe:	a9 ec       	ldi	r26, 0xC9	; 201
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e9 ec       	ldi	r30, 0xC9	; 201
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	89 2b       	or	r24, r25
     c0c:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     c0e:	e8 ec       	ldi	r30, 0xC8	; 200
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     c14:	a8 ec       	ldi	r26, 0xC8	; 200
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e8 ec       	ldi	r30, 0xC8	; 200
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	83 7e       	andi	r24, 0xE3	; 227
     c20:	8c 93       	st	X, r24
			UDR1 = 0;
     c22:	ee ec       	ldi	r30, 0xCE	; 206
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	10 82       	st	Z, r1
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <uart_init+0x10c>
			break;
		default:
			return -1;
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	9f ef       	ldi	r25, 0xFF	; 255
     c2e:	99 87       	std	Y+9, r25	; 0x09
     c30:	88 87       	std	Y+8, r24	; 0x08
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <uart_init+0x110>
	}
	return 0;
     c34:	19 86       	std	Y+9, r1	; 0x09
     c36:	18 86       	std	Y+8, r1	; 0x08
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	99 85       	ldd	r25, Y+9	; 0x09
}
     c3c:	2d 96       	adiw	r28, 0x0d	; 13
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <uart_setbuffer+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <uart_setbuffer+0x8>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <uart_setbuffer+0xa>
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	7c 83       	std	Y+4, r23	; 0x04
     c62:	6b 83       	std	Y+3, r22	; 0x03
     c64:	5e 83       	std	Y+6, r21	; 0x06
     c66:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	99 23       	and	r25, r25
     c6e:	cc f0       	brlt	.+50     	; 0xca2 <uart_setbuffer+0x54>
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	91 05       	cpc	r25, r1
     c78:	a4 f4       	brge	.+40     	; 0xca2 <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     c7a:	29 81       	ldd	r18, Y+1	; 0x01
     c7c:	3a 81       	ldd	r19, Y+2	; 0x02
     c7e:	c9 01       	movw	r24, r18
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	87 57       	subi	r24, 0x77	; 119
     c92:	9e 4f       	sbci	r25, 0xFE	; 254
     c94:	4d 81       	ldd	r20, Y+5	; 0x05
     c96:	5e 81       	ldd	r21, Y+6	; 0x06
     c98:	2b 81       	ldd	r18, Y+3	; 0x03
     c9a:	3c 81       	ldd	r19, Y+4	; 0x04
     c9c:	b9 01       	movw	r22, r18
     c9e:	0e 94 1f 08 	call	0x103e	; 0x103e <RingInit>
}
     ca2:	26 96       	adiw	r28, 0x06	; 6
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     cbc:	e0 ec       	ldi	r30, 0xC0	; 192
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	88 23       	and	r24, r24
     cc4:	dc f7       	brge	.-10     	; 0xcbc <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     cc6:	a0 ec       	ldi	r26, 0xC0	; 192
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e0 ec       	ldi	r30, 0xC0	; 192
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 77       	andi	r24, 0x7F	; 127
     cd2:	8c 93       	st	X, r24
	return UDR0;
     cd4:	e6 ec       	ldi	r30, 0xC6	; 198
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <uart0_putchar>:

int uart0_putchar(char c)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     cec:	e0 ec       	ldi	r30, 0xC0	; 192
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	80 72       	andi	r24, 0x20	; 32
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	b9 f3       	breq	.-18     	; 0xcec <uart0_putchar+0xc>
	UDR0 = c;
     cfe:	e6 ec       	ldi	r30, 0xC6	; 198
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     d06:	a0 ec       	ldi	r26, 0xC0	; 192
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e0 ec       	ldi	r30, 0xC0	; 192
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8f 7d       	andi	r24, 0xDF	; 223
     d12:	8c 93       	st	X, r24
	
	return 0;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <uart1_putchar>:

int uart1_putchar(char c)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	8a 30       	cpi	r24, 0x0A	; 10
     d30:	a1 f4       	brne	.+40     	; 0xd5a <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     d32:	e8 ec       	ldi	r30, 0xC8	; 200
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	80 72       	andi	r24, 0x20	; 32
     d3e:	90 70       	andi	r25, 0x00	; 0
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	b9 f3       	breq	.-18     	; 0xd32 <uart1_putchar+0x12>
		UDR1 = '\r';
     d44:	ee ec       	ldi	r30, 0xCE	; 206
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8d e0       	ldi	r24, 0x0D	; 13
     d4a:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     d4c:	a8 ec       	ldi	r26, 0xC8	; 200
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e8 ec       	ldi	r30, 0xC8	; 200
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8f 7d       	andi	r24, 0xDF	; 223
     d58:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     d5a:	e8 ec       	ldi	r30, 0xC8	; 200
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	80 72       	andi	r24, 0x20	; 32
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	b9 f3       	breq	.-18     	; 0xd5a <uart1_putchar+0x3a>
	UDR1 = c;
     d6c:	ee ec       	ldi	r30, 0xCE	; 206
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     d74:	a8 ec       	ldi	r26, 0xC8	; 200
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e8 ec       	ldi	r30, 0xC8	; 200
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7d       	andi	r24, 0xDF	; 223
     d80:	8c 93       	st	X, r24

	return 0;
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
}
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	00 d0       	rcall	.+0      	; 0xd94 <uart0_buf_putchar+0x6>
     d94:	0f 92       	push	r0
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     da0:	ef e5       	ldi	r30, 0x5F	; 95
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 93 87 01 	sts	0x0187, r24
	cli();
     daa:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	8a 30       	cpi	r24, 0x0A	; 10
     db0:	61 f4       	brne	.+24     	; 0xdca <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     db2:	89 e8       	ldi	r24, 0x89	; 137
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	6d e0       	ldi	r22, 0x0D	; 13
     db8:	0e 94 4d 08 	call	0x109a	; 0x109a <RingPut>
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	29 f4       	brne	.+10     	; 0xdca <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f ef       	ldi	r25, 0xFF	; 255
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     dca:	89 e8       	ldi	r24, 0x89	; 137
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	6b 81       	ldd	r22, Y+3	; 0x03
     dd0:	0e 94 4d 08 	call	0x109a	; 0x109a <RingPut>
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	21 f4       	brne	.+8      	; 0xde0 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	9f ef       	ldi	r25, 0xFF	; 255
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     de0:	a1 ec       	ldi	r26, 0xC1	; 193
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e1 ec       	ldi	r30, 0xC1	; 193
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 62       	ori	r24, 0x20	; 32
     dec:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     dee:	ef e5       	ldi	r30, 0x5F	; 95
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 91 87 01 	lds	r24, 0x0187
     df6:	80 83       	st	Z, r24

	return ret;
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <uart1_buf_putchar+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     e16:	1a 82       	std	Y+2, r1	; 0x02
     e18:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     e1a:	ef e5       	ldi	r30, 0x5F	; 95
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 93 87 01 	sts	0x0187, r24
	cli();
     e24:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	8a 30       	cpi	r24, 0x0A	; 10
     e2a:	61 f4       	brne	.+24     	; 0xe44 <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     e2c:	82 e9       	ldi	r24, 0x92	; 146
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	6d e0       	ldi	r22, 0x0D	; 13
     e32:	0e 94 4d 08 	call	0x109a	; 0x109a <RingPut>
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	29 f4       	brne	.+10     	; 0xe44 <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     e44:	82 e9       	ldi	r24, 0x92	; 146
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	6b 81       	ldd	r22, Y+3	; 0x03
     e4a:	0e 94 4d 08 	call	0x109a	; 0x109a <RingPut>
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	21 f4       	brne	.+8      	; 0xe5a <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     e5a:	a9 ec       	ldi	r26, 0xC9	; 201
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e9 ec       	ldi	r30, 0xC9	; 201
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 62       	ori	r24, 0x20	; 32
     e66:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     e68:	ef e5       	ldi	r30, 0x5F	; 95
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 91 87 01 	lds	r24, 0x0187
     e70:	80 83       	st	Z, r24

	return ret;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <__vector_21>:


ISR(USART0_UDRE_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	00 90 5b 00 	lds	r0, 0x005B
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     eb4:	89 e8       	ldi	r24, 0x89	; 137
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	9e 01       	movw	r18, r28
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	b9 01       	movw	r22, r18
     ec0:	0e 94 a0 08 	call	0x1140	; 0x1140 <RingGet>
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	61 f0       	breq	.+24     	; 0xee0 <__vector_21+0x5e>
		UDR0 = c;
     ec8:	e6 ec       	ldi	r30, 0xC6	; 198
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREクリア
     ed0:	a0 ec       	ldi	r26, 0xC0	; 192
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e0 ec       	ldi	r30, 0xC0	; 192
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7d       	andi	r24, 0xDF	; 223
     edc:	8c 93       	st	X, r24
     ede:	0e c0       	rjmp	.+28     	; 0xefc <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     ee0:	a1 ec       	ldi	r26, 0xC1	; 193
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 ec       	ldi	r30, 0xC1	; 193
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7d       	andi	r24, 0xDF	; 223
     eec:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     eee:	a0 ec       	ldi	r26, 0xC0	; 192
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e0 ec       	ldi	r30, 0xC0	; 192
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7d       	andi	r24, 0xDF	; 223
     efa:	8c 93       	st	X, r24
	}
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	00 92 5b 00 	sts	0x005B, r0
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_29>:

ISR(USART1_UDRE_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	00 90 5b 00 	lds	r0, 0x005B
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
     f5c:	82 e9       	ldi	r24, 0x92	; 146
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	9e 01       	movw	r18, r28
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 a0 08 	call	0x1140	; 0x1140 <RingGet>
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	61 f0       	breq	.+24     	; 0xf88 <__vector_29+0x5e>
		UDR1 = c;
     f70:	ee ec       	ldi	r30, 0xCE	; 206
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREクリア
     f78:	a8 ec       	ldi	r26, 0xC8	; 200
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 ec       	ldi	r30, 0xC8	; 200
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	8c 93       	st	X, r24
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
     f88:	a9 ec       	ldi	r26, 0xC9	; 201
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e9 ec       	ldi	r30, 0xC9	; 201
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7d       	andi	r24, 0xDF	; 223
     f94:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
     f96:	a8 ec       	ldi	r26, 0xC8	; 200
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e8 ec       	ldi	r30, 0xC8	; 200
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	8c 93       	st	X, r24
	}
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	00 92 5b 00 	sts	0x005B, r0
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	00 90 5b 00 	lds	r0, 0x005B
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    1002:	ee ec       	ldi	r30, 0xCE	; 206
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	20 81       	ld	r18, Z
    1008:	82 e9       	ldi	r24, 0x92	; 146
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	62 2f       	mov	r22, r18
    100e:	0e 94 4d 08 	call	0x109a	; 0x109a <RingPut>
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	00 92 5b 00 	sts	0x005B, r0
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <RingInit>:
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <RingInit+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <RingInit+0x8>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <RingInit+0xa>
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	7c 83       	std	Y+4, r23	; 0x04
    1052:	6b 83       	std	Y+3, r22	; 0x03
    1054:	5e 83       	std	Y+6, r21	; 0x06
    1056:	4d 83       	std	Y+5, r20	; 0x05
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	97 83       	std	Z+7, r25	; 0x07
    106e:	86 83       	std	Z+6, r24	; 0x06
    1070:	e9 81       	ldd	r30, Y+1	; 0x01
    1072:	fa 81       	ldd	r31, Y+2	; 0x02
    1074:	13 82       	std	Z+3, r1	; 0x03
    1076:	12 82       	std	Z+2, r1	; 0x02
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	15 82       	std	Z+5, r1	; 0x05
    107e:	14 82       	std	Z+4, r1	; 0x04
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 87       	std	Z+8, r24	; 0x08
    1088:	26 96       	adiw	r28, 0x06	; 6
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <RingPut>:
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <RingPut+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <RingPut+0x8>
    10a2:	0f 92       	push	r0
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	6b 83       	std	Y+3, r22	; 0x03
    10ae:	e9 81       	ldd	r30, Y+1	; 0x01
    10b0:	fa 81       	ldd	r31, Y+2	; 0x02
    10b2:	80 85       	ldd	r24, Z+8	; 0x08
    10b4:	88 23       	and	r24, r24
    10b6:	71 f4       	brne	.+28     	; 0x10d4 <RingPut+0x3a>
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	22 81       	ldd	r18, Z+2	; 0x02
    10be:	33 81       	ldd	r19, Z+3	; 0x03
    10c0:	e9 81       	ldd	r30, Y+1	; 0x01
    10c2:	fa 81       	ldd	r31, Y+2	; 0x02
    10c4:	84 81       	ldd	r24, Z+4	; 0x04
    10c6:	95 81       	ldd	r25, Z+5	; 0x05
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <RingPut+0x3a>
    10ce:	1d 82       	std	Y+5, r1	; 0x05
    10d0:	1c 82       	std	Y+4, r1	; 0x04
    10d2:	2c c0       	rjmp	.+88     	; 0x112c <RingPut+0x92>
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	20 81       	ld	r18, Z
    10da:	31 81       	ldd	r19, Z+1	; 0x01
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	84 81       	ldd	r24, Z+4	; 0x04
    10e2:	95 81       	ldd	r25, Z+5	; 0x05
    10e4:	f9 01       	movw	r30, r18
    10e6:	e8 0f       	add	r30, r24
    10e8:	f9 1f       	adc	r31, r25
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	80 83       	st	Z, r24
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	84 81       	ldd	r24, Z+4	; 0x04
    10f4:	95 81       	ldd	r25, Z+5	; 0x05
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	e9 81       	ldd	r30, Y+1	; 0x01
    10fa:	fa 81       	ldd	r31, Y+2	; 0x02
    10fc:	95 83       	std	Z+5, r25	; 0x05
    10fe:	84 83       	std	Z+4, r24	; 0x04
    1100:	e9 81       	ldd	r30, Y+1	; 0x01
    1102:	fa 81       	ldd	r31, Y+2	; 0x02
    1104:	24 81       	ldd	r18, Z+4	; 0x04
    1106:	35 81       	ldd	r19, Z+5	; 0x05
    1108:	e9 81       	ldd	r30, Y+1	; 0x01
    110a:	fa 81       	ldd	r31, Y+2	; 0x02
    110c:	86 81       	ldd	r24, Z+6	; 0x06
    110e:	97 81       	ldd	r25, Z+7	; 0x07
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	21 f4       	brne	.+8      	; 0x111e <RingPut+0x84>
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	15 82       	std	Z+5, r1	; 0x05
    111c:	14 82       	std	Z+4, r1	; 0x04
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	10 86       	std	Z+8, r1	; 0x08
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9d 83       	std	Y+5, r25	; 0x05
    112a:	8c 83       	std	Y+4, r24	; 0x04
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <RingGet>:
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <RingGet+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <RingGet+0x8>
    1148:	00 d0       	rcall	.+0      	; 0x114a <RingGet+0xa>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	7c 83       	std	Y+4, r23	; 0x04
    1154:	6b 83       	std	Y+3, r22	; 0x03
    1156:	e9 81       	ldd	r30, Y+1	; 0x01
    1158:	fa 81       	ldd	r31, Y+2	; 0x02
    115a:	80 85       	ldd	r24, Z+8	; 0x08
    115c:	88 23       	and	r24, r24
    115e:	d9 f5       	brne	.+118    	; 0x11d6 <RingGet+0x96>
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	f9 01       	movw	r30, r18
    1172:	e8 0f       	add	r30, r24
    1174:	f9 1f       	adc	r31, r25
    1176:	80 81       	ld	r24, Z
    1178:	eb 81       	ldd	r30, Y+3	; 0x03
    117a:	fc 81       	ldd	r31, Y+4	; 0x04
    117c:	80 83       	st	Z, r24
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	e9 81       	ldd	r30, Y+1	; 0x01
    118a:	fa 81       	ldd	r31, Y+2	; 0x02
    118c:	93 83       	std	Z+3, r25	; 0x03
    118e:	82 83       	std	Z+2, r24	; 0x02
    1190:	e9 81       	ldd	r30, Y+1	; 0x01
    1192:	fa 81       	ldd	r31, Y+2	; 0x02
    1194:	22 81       	ldd	r18, Z+2	; 0x02
    1196:	33 81       	ldd	r19, Z+3	; 0x03
    1198:	e9 81       	ldd	r30, Y+1	; 0x01
    119a:	fa 81       	ldd	r31, Y+2	; 0x02
    119c:	86 81       	ldd	r24, Z+6	; 0x06
    119e:	97 81       	ldd	r25, Z+7	; 0x07
    11a0:	28 17       	cp	r18, r24
    11a2:	39 07       	cpc	r19, r25
    11a4:	21 f4       	brne	.+8      	; 0x11ae <RingGet+0x6e>
    11a6:	e9 81       	ldd	r30, Y+1	; 0x01
    11a8:	fa 81       	ldd	r31, Y+2	; 0x02
    11aa:	13 82       	std	Z+3, r1	; 0x03
    11ac:	12 82       	std	Z+2, r1	; 0x02
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	22 81       	ldd	r18, Z+2	; 0x02
    11b4:	33 81       	ldd	r19, Z+3	; 0x03
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	84 81       	ldd	r24, Z+4	; 0x04
    11bc:	95 81       	ldd	r25, Z+5	; 0x05
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	21 f4       	brne	.+8      	; 0x11cc <RingGet+0x8c>
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 87       	std	Z+8, r24	; 0x08
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <RingGet+0xa0>
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	10 82       	st	Z, r1
    11dc:	1e 82       	std	Y+6, r1	; 0x06
    11de:	1d 82       	std	Y+5, r1	; 0x05
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	26 96       	adiw	r28, 0x06	; 6
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <isRingEmpty>:
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <isRingEmpty+0x6>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	80 85       	ldd	r24, Z+8	; 0x08
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <initI2CMaster+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <initI2CMaster+0x8>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    1228:	88 eb       	ldi	r24, 0xB8	; 184
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9b 83       	std	Y+3, r25	; 0x03
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	9e e4       	ldi	r25, 0x4E	; 78
    123a:	b9 01       	movw	r22, r18
    123c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__divmodhi4>
    1240:	cb 01       	movw	r24, r22
    1242:	40 97       	sbiw	r24, 0x10	; 16
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8c 83       	std	Y+4, r24	; 0x04
    1248:	ec 81       	ldd	r30, Y+4	; 0x04
    124a:	fd 81       	ldd	r31, Y+5	; 0x05
    124c:	ff 23       	and	r31, r31
    124e:	2c f4       	brge	.+10     	; 0x125a <initI2CMaster+0x42>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	9d 83       	std	Y+5, r25	; 0x05
    1258:	8c 83       	std	Y+4, r24	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	95 95       	asr	r25
    1260:	87 95       	ror	r24
    1262:	ea 81       	ldd	r30, Y+2	; 0x02
    1264:	fb 81       	ldd	r31, Y+3	; 0x03
    1266:	80 83       	st	Z, r24
		TWSR = 0;
    1268:	e9 eb       	ldi	r30, 0xB9	; 185
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
		TWCR = I2CEN;
    126e:	ec eb       	ldi	r30, 0xBC	; 188
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	80 83       	st	Z, r24
    }
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <i2cWrite+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
			cli();
    1296:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1298:	ec eb       	ldi	r30, 0xBC	; 188
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	84 ea       	ldi	r24, 0xA4	; 164
    129e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    12a0:	ec eb       	ldi	r30, 0xBC	; 188
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	dc f7       	brge	.-10     	; 0x12a0 <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    12aa:	e9 eb       	ldi	r30, 0xB9	; 185
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	88 7f       	andi	r24, 0xF8	; 248
    12b6:	90 70       	andi	r25, 0x00	; 0
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <i2cWrite+0x3a>
    12be:	58 c0       	rjmp	.+176    	; 0x1370 <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    12c0:	ab eb       	ldi	r26, 0xBB	; 187
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	80 81       	ld	r24, Z
    12ca:	88 0f       	add	r24, r24
    12cc:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    12ce:	ec eb       	ldi	r30, 0xBC	; 188
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	84 e8       	ldi	r24, 0x84	; 132
    12d4:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    12d6:	ec eb       	ldi	r30, 0xBC	; 188
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	88 23       	and	r24, r24
    12de:	dc f7       	brge	.-10     	; 0x12d6 <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    12e0:	e9 eb       	ldi	r30, 0xB9	; 185
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	88 7f       	andi	r24, 0xF8	; 248
    12ec:	90 70       	andi	r25, 0x00	; 0
    12ee:	88 31       	cpi	r24, 0x18	; 24
    12f0:	91 05       	cpc	r25, r1
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <i2cWrite+0x70>
    12f4:	3d c0       	rjmp	.+122    	; 0x1370 <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    12f6:	10 92 88 01 	sts	0x0188, r1
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    12fc:	ab eb       	ldi	r26, 0xBB	; 187
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e9 81       	ldd	r30, Y+1	; 0x01
    1302:	fa 81       	ldd	r31, Y+2	; 0x02
    1304:	21 81       	ldd	r18, Z+1	; 0x01
    1306:	32 81       	ldd	r19, Z+2	; 0x02
    1308:	80 91 88 01 	lds	r24, 0x0188
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	e8 0f       	add	r30, r24
    1314:	f9 1f       	adc	r31, r25
    1316:	80 81       	ld	r24, Z
    1318:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    131a:	ec eb       	ldi	r30, 0xBC	; 188
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	84 e8       	ldi	r24, 0x84	; 132
    1320:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1322:	ec eb       	ldi	r30, 0xBC	; 188
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 23       	and	r24, r24
    132a:	dc f7       	brge	.-10     	; 0x1322 <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    132c:	e9 eb       	ldi	r30, 0xB9	; 185
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	88 7f       	andi	r24, 0xF8	; 248
    1338:	90 70       	andi	r25, 0x00	; 0
    133a:	88 32       	cpi	r24, 0x28	; 40
    133c:	91 05       	cpc	r25, r1
    133e:	c1 f4       	brne	.+48     	; 0x1370 <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1340:	80 91 88 01 	lds	r24, 0x0188
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 93 88 01 	sts	0x0188, r24
    134a:	80 91 88 01 	lds	r24, 0x0188
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	94 81       	ldd	r25, Z+4	; 0x04
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	70 f2       	brcs	.-100    	; 0x12fc <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1360:	ec eb       	ldi	r30, 0xBC	; 188
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	84 e9       	ldi	r24, 0x94	; 148
    1366:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    1368:	78 94       	sei
		return true;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	06 c0       	rjmp	.+12     	; 0x137c <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1370:	ec eb       	ldi	r30, 0xBC	; 188
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	84 e9       	ldi	r24, 0x94	; 148
    1376:	80 83       	st	Z, r24
		sei();
    1378:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    137a:	1b 82       	std	Y+3, r1	; 0x03
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <i2cRead>:

bool i2cRead(Slave *slave)
    {
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <i2cRead+0x6>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
		cli();
    139a:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    139c:	ec eb       	ldi	r30, 0xBC	; 188
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	84 ea       	ldi	r24, 0xA4	; 164
    13a2:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    13a4:	ec eb       	ldi	r30, 0xBC	; 188
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	dc f7       	brge	.-10     	; 0x13a4 <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    13ae:	e9 eb       	ldi	r30, 0xB9	; 185
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 7f       	andi	r24, 0xF8	; 248
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <i2cRead+0x3a>
    13c2:	80 c0       	rjmp	.+256    	; 0x14c4 <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    13c4:	ab eb       	ldi	r26, 0xBB	; 187
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ca:	fa 81       	ldd	r31, Y+2	; 0x02
    13cc:	80 81       	ld	r24, Z
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    13da:	ec eb       	ldi	r30, 0xBC	; 188
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	84 e8       	ldi	r24, 0x84	; 132
    13e0:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13e2:	ec eb       	ldi	r30, 0xBC	; 188
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	dc f7       	brge	.-10     	; 0x13e2 <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    13ec:	e9 eb       	ldi	r30, 0xB9	; 185
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	88 7f       	andi	r24, 0xF8	; 248
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	80 34       	cpi	r24, 0x40	; 64
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <i2cRead+0x78>
    1400:	61 c0       	rjmp	.+194    	; 0x14c4 <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    1402:	10 92 88 01 	sts	0x0188, r1
    1406:	28 c0       	rjmp	.+80     	; 0x1458 <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1408:	ec eb       	ldi	r30, 0xBC	; 188
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	84 ec       	ldi	r24, 0xC4	; 196
    140e:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1410:	ec eb       	ldi	r30, 0xBC	; 188
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	88 23       	and	r24, r24
    1418:	dc f7       	brge	.-10     	; 0x1410 <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    141a:	e9 eb       	ldi	r30, 0xB9	; 185
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	88 7f       	andi	r24, 0xF8	; 248
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	80 35       	cpi	r24, 0x50	; 80
    142a:	91 05       	cpc	r25, r1
    142c:	09 f0       	breq	.+2      	; 0x1430 <i2cRead+0xa6>
    142e:	4a c0       	rjmp	.+148    	; 0x14c4 <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	25 81       	ldd	r18, Z+5	; 0x05
    1436:	36 81       	ldd	r19, Z+6	; 0x06
    1438:	80 91 88 01 	lds	r24, 0x0188
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	d9 01       	movw	r26, r18
    1442:	a8 0f       	add	r26, r24
    1444:	b9 1f       	adc	r27, r25
    1446:	eb eb       	ldi	r30, 0xBB	; 187
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    144e:	80 91 88 01 	lds	r24, 0x0188
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 93 88 01 	sts	0x0188, r24
    1458:	80 91 88 01 	lds	r24, 0x0188
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	87 81       	ldd	r24, Z+7	; 0x07
    1466:	90 85       	ldd	r25, Z+8	; 0x08
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	60 f2       	brcs	.-104    	; 0x1408 <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1470:	ec eb       	ldi	r30, 0xBC	; 188
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	84 e8       	ldi	r24, 0x84	; 132
    1476:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1478:	ec eb       	ldi	r30, 0xBC	; 188
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	dc f7       	brge	.-10     	; 0x1478 <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1482:	e9 eb       	ldi	r30, 0xB9	; 185
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	88 7f       	andi	r24, 0xF8	; 248
    148e:	90 70       	andi	r25, 0x00	; 0
    1490:	88 35       	cpi	r24, 0x58	; 88
    1492:	91 05       	cpc	r25, r1
    1494:	b9 f4       	brne	.+46     	; 0x14c4 <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    1496:	e9 81       	ldd	r30, Y+1	; 0x01
    1498:	fa 81       	ldd	r31, Y+2	; 0x02
    149a:	25 81       	ldd	r18, Z+5	; 0x05
    149c:	36 81       	ldd	r19, Z+6	; 0x06
    149e:	80 91 88 01 	lds	r24, 0x0188
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	d9 01       	movw	r26, r18
    14a8:	a8 0f       	add	r26, r24
    14aa:	b9 1f       	adc	r27, r25
    14ac:	eb eb       	ldi	r30, 0xBB	; 187
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14b4:	ec eb       	ldi	r30, 0xBC	; 188
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	84 e9       	ldi	r24, 0x94	; 148
    14ba:	80 83       	st	Z, r24
		sei();
    14bc:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14c4:	ec eb       	ldi	r30, 0xBC	; 188
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	84 e9       	ldi	r24, 0x94	; 148
    14ca:	80 83       	st	Z, r24
		sei();
    14cc:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    14ce:	1b 82       	std	Y+3, r1	; 0x03
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <i2cReadWithCommand+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <i2cReadWithCommand+0x8>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    14f0:	ec eb       	ldi	r30, 0xBC	; 188
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	84 ea       	ldi	r24, 0xA4	; 164
    14f6:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14f8:	ec eb       	ldi	r30, 0xBC	; 188
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 23       	and	r24, r24
    1500:	dc f7       	brge	.-10     	; 0x14f8 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    1502:	ab eb       	ldi	r26, 0xBB	; 187
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	80 81       	ld	r24, Z
    150c:	88 0f       	add	r24, r24
    150e:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1510:	ec eb       	ldi	r30, 0xBC	; 188
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	84 e8       	ldi	r24, 0x84	; 132
    1516:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1518:	ec eb       	ldi	r30, 0xBC	; 188
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 23       	and	r24, r24
    1520:	dc f7       	brge	.-10     	; 0x1518 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    1522:	e9 eb       	ldi	r30, 0xB9	; 185
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	88 7f       	andi	r24, 0xF8	; 248
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	80 34       	cpi	r24, 0x40	; 64
    1532:	91 05       	cpc	r25, r1
    1534:	09 f0       	breq	.+2      	; 0x1538 <i2cReadWithCommand+0x5a>
    1536:	a0 c0       	rjmp	.+320    	; 0x1678 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1538:	eb eb       	ldi	r30, 0xBB	; 187
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1540:	ec eb       	ldi	r30, 0xBC	; 188
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	84 e8       	ldi	r24, 0x84	; 132
    1546:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1548:	ec eb       	ldi	r30, 0xBC	; 188
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 23       	and	r24, r24
    1550:	dc f7       	brge	.-10     	; 0x1548 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    1552:	e9 eb       	ldi	r30, 0xB9	; 185
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 7f       	andi	r24, 0xF8	; 248
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	88 32       	cpi	r24, 0x28	; 40
    1562:	91 05       	cpc	r25, r1
    1564:	09 f0       	breq	.+2      	; 0x1568 <i2cReadWithCommand+0x8a>
    1566:	88 c0       	rjmp	.+272    	; 0x1678 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1568:	ec eb       	ldi	r30, 0xBC	; 188
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	84 ea       	ldi	r24, 0xA4	; 164
    156e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1570:	ec eb       	ldi	r30, 0xBC	; 188
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 23       	and	r24, r24
    1578:	dc f7       	brge	.-10     	; 0x1570 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    157a:	e9 eb       	ldi	r30, 0xB9	; 185
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	88 7f       	andi	r24, 0xF8	; 248
    1586:	90 70       	andi	r25, 0x00	; 0
    1588:	80 31       	cpi	r24, 0x10	; 16
    158a:	91 05       	cpc	r25, r1
    158c:	09 f0       	breq	.+2      	; 0x1590 <i2cReadWithCommand+0xb2>
    158e:	74 c0       	rjmp	.+232    	; 0x1678 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    1590:	ab eb       	ldi	r26, 0xBB	; 187
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	80 81       	ld	r24, Z
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	81 60       	ori	r24, 0x01	; 1
    15a4:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    15a6:	ec eb       	ldi	r30, 0xBC	; 188
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	84 e8       	ldi	r24, 0x84	; 132
    15ac:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    15ae:	ec eb       	ldi	r30, 0xBC	; 188
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	dc f7       	brge	.-10     	; 0x15ae <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    15b8:	10 92 88 01 	sts	0x0188, r1
    15bc:	28 c0       	rjmp	.+80     	; 0x160e <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15be:	ec eb       	ldi	r30, 0xBC	; 188
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	84 ec       	ldi	r24, 0xC4	; 196
    15c4:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    15c6:	ec eb       	ldi	r30, 0xBC	; 188
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 23       	and	r24, r24
    15ce:	dc f7       	brge	.-10     	; 0x15c6 <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    15d0:	e9 eb       	ldi	r30, 0xB9	; 185
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	88 7f       	andi	r24, 0xF8	; 248
    15dc:	90 70       	andi	r25, 0x00	; 0
    15de:	80 35       	cpi	r24, 0x50	; 80
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <i2cReadWithCommand+0x108>
    15e4:	49 c0       	rjmp	.+146    	; 0x1678 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	25 81       	ldd	r18, Z+5	; 0x05
    15ec:	36 81       	ldd	r19, Z+6	; 0x06
    15ee:	80 91 88 01 	lds	r24, 0x0188
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	d9 01       	movw	r26, r18
    15f8:	a8 0f       	add	r26, r24
    15fa:	b9 1f       	adc	r27, r25
    15fc:	eb eb       	ldi	r30, 0xBB	; 187
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1604:	80 91 88 01 	lds	r24, 0x0188
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	80 93 88 01 	sts	0x0188, r24
    160e:	80 91 88 01 	lds	r24, 0x0188
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	87 81       	ldd	r24, Z+7	; 0x07
    161c:	90 85       	ldd	r25, Z+8	; 0x08
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	28 17       	cp	r18, r24
    1622:	39 07       	cpc	r19, r25
    1624:	60 f2       	brcs	.-104    	; 0x15be <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1626:	ec eb       	ldi	r30, 0xBC	; 188
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	84 e8       	ldi	r24, 0x84	; 132
    162c:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    162e:	ec eb       	ldi	r30, 0xBC	; 188
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 23       	and	r24, r24
    1636:	dc f7       	brge	.-10     	; 0x162e <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1638:	e9 eb       	ldi	r30, 0xB9	; 185
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	88 7f       	andi	r24, 0xF8	; 248
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	88 35       	cpi	r24, 0x58	; 88
    1648:	91 05       	cpc	r25, r1
    164a:	b1 f4       	brne	.+44     	; 0x1678 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    164c:	e9 81       	ldd	r30, Y+1	; 0x01
    164e:	fa 81       	ldd	r31, Y+2	; 0x02
    1650:	25 81       	ldd	r18, Z+5	; 0x05
    1652:	36 81       	ldd	r19, Z+6	; 0x06
    1654:	80 91 88 01 	lds	r24, 0x0188
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	d9 01       	movw	r26, r18
    165e:	a8 0f       	add	r26, r24
    1660:	b9 1f       	adc	r27, r25
    1662:	eb eb       	ldi	r30, 0xBB	; 187
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    166a:	ec eb       	ldi	r30, 0xBC	; 188
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	84 e9       	ldi	r24, 0x94	; 148
    1670:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	8c 83       	std	Y+4, r24	; 0x04
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1678:	ec eb       	ldi	r30, 0xBC	; 188
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	84 e9       	ldi	r24, 0x94	; 148
    167e:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1680:	1c 82       	std	Y+4, r1	; 0x04
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <LED>:
/// LED操作関数 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->消灯　1->点灯 </param>
void LED(unsigned char target, bool status)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <LED+0x6>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	58 f5       	brcc	.+86     	; 0x16fc <LED+0x6a>
	if(status)	cbi(PORTA,target);
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	88 23       	and	r24, r24
    16aa:	a9 f0       	breq	.+42     	; 0x16d6 <LED+0x44>
    16ac:	a2 e2       	ldi	r26, 0x22	; 34
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e2 e2       	ldi	r30, 0x22	; 34
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <LED+0x38>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <LED+0x34>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <LED+0x6a>
	else		sbi(PORTA,target);
    16d6:	a2 e2       	ldi	r26, 0x22	; 34
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e2       	ldi	r30, 0x22	; 34
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <LED+0x62>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <LED+0x5e>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <LEDInit>:

void LEDInit(void)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    170e:	a1 e2       	ldi	r26, 0x21	; 33
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e1 e2       	ldi	r30, 0x21	; 33
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	87 60       	ori	r24, 0x07	; 7
    171a:	8c 93       	st	X, r24
	PORTA |= 0x07;
    171c:	a2 e2       	ldi	r26, 0x22	; 34
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e2       	ldi	r30, 0x22	; 34
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	87 60       	ori	r24, 0x07	; 7
    1728:	8c 93       	st	X, r24
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <wait_ms>:
#include <avr/io.h>
void wait_ms(uint16_t t){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <wait_ms+0x6>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <wait_ms+0x8>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9b 83       	std	Y+3, r25	; 0x03
    1740:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tt;
	TCCR2A = 0;
    1742:	e0 eb       	ldi	r30, 0xB0	; 176
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	10 82       	st	Z, r1
	TCCR2B = 1;
    1748:	e1 eb       	ldi	r30, 0xB1	; 177
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 83       	st	Z, r24
	OCR2A = 45;
    1750:	e3 eb       	ldi	r30, 0xB3	; 179
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8d e2       	ldi	r24, 0x2D	; 45
    1756:	80 83       	st	Z, r24

	for(tt=100;t--;){
    1758:	84 e6       	ldi	r24, 0x64	; 100
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	20 c0       	rjmp	.+64     	; 0x179e <wait_ms+0x6e>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
    175e:	e2 eb       	ldi	r30, 0xB2	; 178
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	10 82       	st	Z, r1
    1764:	e7 e3       	ldi	r30, 0x37	; 55
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	82 70       	andi	r24, 0x02	; 2
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	b9 f3       	breq	.-18     	; 0x1764 <wait_ms+0x34>
			TIFR2 |= 0x02;
    1776:	a7 e3       	ldi	r26, 0x37	; 55
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	8c 93       	st	X, r24
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 45;

	for(tt=100;t--;){
		while(tt--){
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	88 23       	and	r24, r24
    178c:	11 f0       	breq	.+4      	; 0x1792 <wait_ms+0x62>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	99 81       	ldd	r25, Y+1	; 0x01
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	99 83       	std	Y+1, r25	; 0x01
    179a:	88 23       	and	r24, r24
    179c:	01 f7       	brne	.-64     	; 0x175e <wait_ms+0x2e>
	uint8_t tt;
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 45;

	for(tt=100;t--;){
    179e:	1c 82       	std	Y+4, r1	; 0x04
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	11 f0       	breq	.+4      	; 0x17ac <wait_ms+0x7c>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	8c 83       	std	Y+4, r24	; 0x04
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	8a 83       	std	Y+2, r24	; 0x02
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	88 23       	and	r24, r24
    17ba:	21 f7       	brne	.-56     	; 0x1784 <wait_ms+0x54>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
			TIFR2 |= 0x02;
		}
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <wait_us>:
void wait_us(uint16_t t){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <wait_us+0x6>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
	TCCR2A = 0;
    17dc:	e0 eb       	ldi	r30, 0xB0	; 176
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	10 82       	st	Z, r1
	TCCR2B = 1;
    17e2:	e1 eb       	ldi	r30, 0xB1	; 177
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 83       	st	Z, r24
	OCR2A = 1;
    17ea:	e3 eb       	ldi	r30, 0xB3	; 179
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 83       	st	Z, r24
	t>>=1;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	96 95       	lsr	r25
    17f8:	87 95       	ror	r24
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <wait_us+0x5a>
	while(t--){
		for(TCNT2=0;!(TIFR2&0x02););
    1800:	e2 eb       	ldi	r30, 0xB2	; 178
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	10 82       	st	Z, r1
    1806:	e7 e3       	ldi	r30, 0x37	; 55
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	82 70       	andi	r24, 0x02	; 2
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	b9 f3       	breq	.-18     	; 0x1806 <wait_us+0x3a>
		TIFR2 |= 0x02;
    1818:	a7 e3       	ldi	r26, 0x37	; 55
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e3       	ldi	r30, 0x37	; 55
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8c 93       	st	X, r24
void wait_us(uint16_t t){
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 1;
	t>>=1;
	while(t--){
    1826:	1b 82       	std	Y+3, r1	; 0x03
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	11 f0       	breq	.+4      	; 0x1834 <wait_us+0x68>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 23       	and	r24, r24
    1842:	f1 f6       	brne	.-68     	; 0x1800 <wait_us+0x34>
		for(TCNT2=0;!(TIFR2&0x02););
		TIFR2 |= 0x02;
	}
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <mDrive+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <mDrive+0x8>
    1858:	00 d0       	rcall	.+0      	; 0x185a <mDrive+0xa>
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	9b 83       	std	Y+3, r25	; 0x03
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6c 83       	std	Y+4, r22	; 0x04
    1864:	4d 83       	std	Y+5, r20	; 0x05
    1866:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1868:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    186a:	8e 81       	ldd	r24, Y+6	; 0x06
    186c:	85 30       	cpi	r24, 0x05	; 5
    186e:	50 f5       	brcc	.+84     	; 0x18c4 <mDrive+0x74>
	if(duty>100) duty=100;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	85 36       	cpi	r24, 0x65	; 101
    1874:	14 f0       	brlt	.+4      	; 0x187a <mDrive+0x2a>
    1876:	84 e6       	ldi	r24, 0x64	; 100
    1878:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	8c 39       	cpi	r24, 0x9C	; 156
    187e:	14 f4       	brge	.+4      	; 0x1884 <mDrive+0x34>
    1880:	8c e9       	ldi	r24, 0x9C	; 156
    1882:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	21 f4       	brne	.+8      	; 0x1892 <mDrive+0x42>
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	81 95       	neg	r24
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	88 23       	and	r24, r24
    1896:	11 f4       	brne	.+4      	; 0x189c <mDrive+0x4c>
    1898:	19 82       	std	Y+1, r1	; 0x01
    189a:	08 c0       	rjmp	.+16     	; 0x18ac <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	19 f4       	brne	.+6      	; 0x18a8 <mDrive+0x58>
    18a2:	8f e7       	ldi	r24, 0x7F	; 127
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <mDrive+0x5c>
	else w_data = duty;
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    18ac:	ea 81       	ldd	r30, Y+2	; 0x02
    18ae:	fb 81       	ldd	r31, Y+3	; 0x03
    18b0:	21 81       	ldd	r18, Z+1	; 0x01
    18b2:	32 81       	ldd	r19, Z+2	; 0x02
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	f9 01       	movw	r30, r18
    18bc:	e8 0f       	add	r30, r24
    18be:	f9 1f       	adc	r31, r25
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	80 83       	st	Z, r24
}
    18c4:	26 96       	adiw	r28, 0x06	; 6
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <mAngle+0x6>
    18dc:	00 d0       	rcall	.+0      	; 0x18de <mAngle+0x8>
    18de:	0f 92       	push	r0
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	7c 83       	std	Y+4, r23	; 0x04
    18ea:	6b 83       	std	Y+3, r22	; 0x03
    18ec:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	88 23       	and	r24, r24
    18f2:	a9 f0       	breq	.+42     	; 0x191e <mAngle+0x48>
		angle/=6;
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	26 e0       	ldi	r18, 0x06	; 6
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	b9 01       	movw	r22, r18
    18fe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__divmodhi4>
    1902:	cb 01       	movw	r24, r22
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    1908:	e9 81       	ldd	r30, Y+1	; 0x01
    190a:	fa 81       	ldd	r31, Y+2	; 0x02
    190c:	81 81       	ldd	r24, Z+1	; 0x01
    190e:	92 81       	ldd	r25, Z+2	; 0x02
    1910:	fc 01       	movw	r30, r24
    1912:	34 96       	adiw	r30, 0x04	; 4
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	8f 71       	andi	r24, 0x1F	; 31
    1918:	80 64       	ori	r24, 0x40	; 64
    191a:	80 83       	st	Z, r24
    191c:	07 c0       	rjmp	.+14     	; 0x192c <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	81 81       	ldd	r24, Z+1	; 0x01
    1924:	92 81       	ldd	r25, Z+2	; 0x02
    1926:	fc 01       	movw	r30, r24
    1928:	34 96       	adiw	r30, 0x04	; 4
    192a:	10 82       	st	Z, r1
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <aDrive+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <aDrive+0x8>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6b 83       	std	Y+3, r22	; 0x03
    194e:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	88 23       	and	r24, r24
    1954:	41 f0       	breq	.+16     	; 0x1966 <aDrive+0x2a>
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	01 80       	ldd	r0, Z+1	; 0x01
    195c:	f2 81       	ldd	r31, Z+2	; 0x02
    195e:	e0 2d       	mov	r30, r0
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	80 83       	st	Z, r24
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	01 80       	ldd	r0, Z+1	; 0x01
    196c:	f2 81       	ldd	r31, Z+2	; 0x02
    196e:	e0 2d       	mov	r30, r0
    1970:	10 82       	st	Z, r1

}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1988:	a4 e2       	ldi	r26, 0x24	; 36
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e4 e2       	ldi	r30, 0x24	; 36
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 7f       	andi	r24, 0xF0	; 240
    1994:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1996:	a5 e2       	ldi	r26, 0x25	; 37
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e2       	ldi	r30, 0x25	; 37
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8f 60       	ori	r24, 0x0F	; 15
    19a2:	8c 93       	st	X, r24
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <Switch>:
/// スイッチ値取得関数 
/// </summary>
/// <param name="target"> メイン基盤上のスライドスイッチ番号　1〜4 </param>
/// <return> スイッチの状態 ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <Switch+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    19b6:	e3 e2       	ldi	r30, 0x23	; 35
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 95       	com	r24
    19be:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <Switch+0x2c>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <Switch+0x28>
    19da:	ca 01       	movw	r24, r20
    19dc:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	90 70       	andi	r25, 0x00	; 0
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <Group>:

__inline__ unsigned char Group(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    19fa:	e3 e2       	ldi	r30, 0x23	; 35
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 95       	com	r24
    1a02:	86 95       	lsr	r24
    1a04:	86 95       	lsr	r24
    1a06:	83 70       	andi	r24, 0x03	; 3
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <Channel>:

__inline__ unsigned char Channel(void)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1a16:	e3 e2       	ldi	r30, 0x23	; 35
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 95       	com	r24
    1a1e:	83 70       	andi	r24, 0x03	; 3
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	89 27       	eor	r24, r25
    1a38:	88 23       	and	r24, r24
    1a3a:	71 f4       	brne	.+28     	; 0x1a58 <beep+0x32>
    1a3c:	80 91 32 01 	lds	r24, 0x0132
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	89 27       	eor	r24, r25
    1a44:	88 23       	and	r24, r24
    1a46:	41 f4       	brne	.+16     	; 0x1a58 <beep+0x32>
    1a48:	a2 e2       	ldi	r26, 0x22	; 34
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e2 e2       	ldi	r30, 0x22	; 34
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	88 60       	ori	r24, 0x08	; 8
    1a54:	8c 93       	st	X, r24
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1a58:	80 91 32 01 	lds	r24, 0x0132
    1a5c:	88 23       	and	r24, r24
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <beep+0x48>
    1a60:	a2 e2       	ldi	r26, 0x22	; 34
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e2 e2       	ldi	r30, 0x22	; 34
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	87 7f       	andi	r24, 0xF7	; 247
    1a6c:	8c 93       	st	X, r24
}
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <BeepInit>:

void BeepInit()
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1a7e:	a1 e2       	ldi	r26, 0x21	; 33
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e1 e2       	ldi	r30, 0x21	; 33
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 60       	ori	r24, 0x08	; 8
    1a8a:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1a8c:	a2 e2       	ldi	r26, 0x22	; 34
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e2       	ldi	r30, 0x22	; 34
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	87 7f       	andi	r24, 0xF7	; 247
    1a98:	8c 93       	st	X, r24
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <i2cCheck>:

void i2cCheck(bool flag)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	69 81       	ldd	r22, Y+1	; 0x01
    1ab0:	0e 94 49 0b 	call	0x1692	; 0x1692 <LED>
	beep(!(flag));
    1ab4:	99 81       	ldd	r25, Y+1	; 0x01
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 27       	eor	r24, r25
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
	if(!flag){
    1ac2:	99 81       	ldd	r25, Y+1	; 0x01
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 27       	eor	r24, r25
    1ac8:	88 23       	and	r24, r24
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <i2cCheck+0x38>
		PORTC = 0x04;
    1acc:	e8 e2       	ldi	r30, 0x28	; 40
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	80 83       	st	Z, r24
		cli();
    1ad4:	f8 94       	cli
    1ad6:	ff cf       	rjmp	.-2      	; 0x1ad6 <i2cCheck+0x36>
		while(1);
	}
}
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <Emergency+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <Emergency+0x8>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	71 f4       	brne	.+28     	; 0x1b14 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1af8:	ea 81       	ldd	r30, Y+2	; 0x02
    1afa:	fb 81       	ldd	r31, Y+3	; 0x03
    1afc:	01 80       	ldd	r0, Z+1	; 0x01
    1afe:	f2 81       	ldd	r31, Z+2	; 0x02
    1b00:	e0 2d       	mov	r30, r0
    1b02:	8a e6       	ldi	r24, 0x6A	; 106
    1b04:	80 83       	st	Z, r24
		beep(1);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
		eflag=1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 9b 01 	sts	0x019B, r24
    1b12:	16 c0       	rjmp	.+44     	; 0x1b40 <Emergency+0x60>
		}
	else if(act==E_OFF){
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	69 f4       	brne	.+26     	; 0x1b34 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1e:	01 80       	ldd	r0, Z+1	; 0x01
    1b20:	f2 81       	ldd	r31, Z+2	; 0x02
    1b22:	e0 2d       	mov	r30, r0
    1b24:	85 e5       	ldi	r24, 0x55	; 85
    1b26:	80 83       	st	Z, r24
		beep(0);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
		eflag=0;
    1b2e:	10 92 9b 01 	sts	0x019B, r1
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1b34:	ea 81       	ldd	r30, Y+2	; 0x02
    1b36:	fb 81       	ldd	r31, Y+3	; 0x03
    1b38:	01 80       	ldd	r0, Z+1	; 0x01
    1b3a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b3c:	e0 2d       	mov	r30, r0
    1b3e:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	0e 94 c5 09 	call	0x138a	; 0x138a <i2cRead>
    1b48:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4e:	05 80       	ldd	r0, Z+5	; 0x05
    1b50:	f6 81       	ldd	r31, Z+6	; 0x06
    1b52:	e0 2d       	mov	r30, r0
    1b54:	80 81       	ld	r24, Z
    1b56:	8a 36       	cpi	r24, 0x6A	; 106
    1b58:	31 f4       	brne	.+12     	; 0x1b66 <Emergency+0x86>
		beep(1);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <beep>
		eflag=1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 9b 01 	sts	0x019B, r24
		}
	if(*(emergency->read.buf)==0x55){
    1b66:	ea 81       	ldd	r30, Y+2	; 0x02
    1b68:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6a:	05 80       	ldd	r0, Z+5	; 0x05
    1b6c:	f6 81       	ldd	r31, Z+6	; 0x06
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	80 81       	ld	r24, Z
    1b72:	85 35       	cpi	r24, 0x55	; 85
    1b74:	d9 f4       	brne	.+54     	; 0x1bac <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1b76:	a0 e6       	ldi	r26, 0x60	; 96
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e0 e6       	ldi	r30, 0x60	; 96
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 60       	ori	r24, 0x08	; 8
    1b82:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1b84:	a0 e6       	ldi	r26, 0x60	; 96
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e0 e6       	ldi	r30, 0x60	; 96
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7b       	andi	r24, 0xBF	; 191
    1b90:	8c 93       	st	X, r24
		wdt_reset();
    1b92:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1b94:	88 e1       	ldi	r24, 0x18	; 24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	28 e0       	ldi	r18, 0x08	; 8
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	a8 95       	wdr
    1ba0:	80 93 60 00 	sts	0x0060, r24
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	20 93 60 00 	sts	0x0060, r18
    1baa:	ff cf       	rjmp	.-2      	; 0x1baa <Emergency+0xca>
		while(1);
		}
	return tmp;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <EmergencyStatus>:

bool EmergencyStatus()
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1bc6:	80 91 9b 01 	lds	r24, 0x019B
    1bca:	88 23       	and	r24, r24
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <EmergencyStatus+0x16>
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <EmergencyStatus+0x1a>
	else return 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <__divmodhi4>:
    1be0:	97 fb       	bst	r25, 7
    1be2:	09 2e       	mov	r0, r25
    1be4:	07 26       	eor	r0, r23
    1be6:	0a d0       	rcall	.+20     	; 0x1bfc <__divmodhi4_neg1>
    1be8:	77 fd       	sbrc	r23, 7
    1bea:	04 d0       	rcall	.+8      	; 0x1bf4 <__divmodhi4_neg2>
    1bec:	0c d0       	rcall	.+24     	; 0x1c06 <__udivmodhi4>
    1bee:	06 d0       	rcall	.+12     	; 0x1bfc <__divmodhi4_neg1>
    1bf0:	00 20       	and	r0, r0
    1bf2:	1a f4       	brpl	.+6      	; 0x1bfa <__divmodhi4_exit>

00001bf4 <__divmodhi4_neg2>:
    1bf4:	70 95       	com	r23
    1bf6:	61 95       	neg	r22
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bfa <__divmodhi4_exit>:
    1bfa:	08 95       	ret

00001bfc <__divmodhi4_neg1>:
    1bfc:	f6 f7       	brtc	.-4      	; 0x1bfa <__divmodhi4_exit>
    1bfe:	90 95       	com	r25
    1c00:	81 95       	neg	r24
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	08 95       	ret

00001c06 <__udivmodhi4>:
    1c06:	aa 1b       	sub	r26, r26
    1c08:	bb 1b       	sub	r27, r27
    1c0a:	51 e1       	ldi	r21, 0x11	; 17
    1c0c:	07 c0       	rjmp	.+14     	; 0x1c1c <__udivmodhi4_ep>

00001c0e <__udivmodhi4_loop>:
    1c0e:	aa 1f       	adc	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	a6 17       	cp	r26, r22
    1c14:	b7 07       	cpc	r27, r23
    1c16:	10 f0       	brcs	.+4      	; 0x1c1c <__udivmodhi4_ep>
    1c18:	a6 1b       	sub	r26, r22
    1c1a:	b7 0b       	sbc	r27, r23

00001c1c <__udivmodhi4_ep>:
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	5a 95       	dec	r21
    1c22:	a9 f7       	brne	.-22     	; 0x1c0e <__udivmodhi4_loop>
    1c24:	80 95       	com	r24
    1c26:	90 95       	com	r25
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	08 95       	ret

00001c2e <_exit>:
    1c2e:	f8 94       	cli

00001c30 <__stop_program>:
    1c30:	ff cf       	rjmp	.-2      	; 0x1c30 <__stop_program>
