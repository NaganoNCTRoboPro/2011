
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001c50  00001ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800134  00800134  00001d18  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000341  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014fe  00000000  00000000  000021d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001537  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  000055ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052d  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_20>
      54:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_28>
      74:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 33       	cpi	r26, 0x34	; 52
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e3       	ldi	r26, 0x34	; 52
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	e9 97       	sbiw	r28, 0x39	; 57
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e6:	8c e0       	ldi	r24, 0x0C	; 12
      e8:	fe 01       	movw	r30, r28
      ea:	3b 96       	adiw	r30, 0x0b	; 11
      ec:	df 01       	movw	r26, r30
      ee:	98 2f       	mov	r25, r24
      f0:	1d 92       	st	X+, r1
      f2:	9a 95       	dec	r25
      f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x22>
	unsigned char action, uDuty, dDuty, i,e_flag, AirPort,count=0;
      f6:	1a 82       	std	Y+2, r1	; 0x02

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	8f 8b       	std	Y+23, r24	; 0x17
      fc:	ce 01       	movw	r24, r28
      fe:	0b 96       	adiw	r24, 0x0b	; 11
     100:	99 8f       	std	Y+25, r25	; 0x19
     102:	88 8f       	std	Y+24, r24	; 0x18
     104:	84 e0       	ldi	r24, 0x04	; 4
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	9b 8f       	std	Y+27, r25	; 0x1b
     10a:	8a 8f       	std	Y+26, r24	; 0x1a
     10c:	ce 01       	movw	r24, r28
     10e:	0b 96       	adiw	r24, 0x0b	; 11
     110:	04 96       	adiw	r24, 0x04	; 4
     112:	9d 8f       	std	Y+29, r25	; 0x1d
     114:	8c 8f       	std	Y+28, r24	; 0x1c
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	9f 8f       	std	Y+31, r25	; 0x1f
     11c:	8e 8f       	std	Y+30, r24	; 0x1e
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     11e:	80 e4       	ldi	r24, 0x40	; 64
     120:	88 a3       	std	Y+32, r24	; 0x20
     122:	ce 01       	movw	r24, r28
     124:	0b 96       	adiw	r24, 0x0b	; 11
     126:	08 96       	adiw	r24, 0x08	; 8
     128:	9a a3       	std	Y+34, r25	; 0x22
     12a:	89 a3       	std	Y+33, r24	; 0x21
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	9c a3       	std	Y+36, r25	; 0x24
     132:	8b a3       	std	Y+35, r24	; 0x23
     134:	ce 01       	movw	r24, r28
     136:	0b 96       	adiw	r24, 0x0b	; 11
     138:	09 96       	adiw	r24, 0x09	; 9
     13a:	9e a3       	std	Y+38, r25	; 0x26
     13c:	8d a3       	std	Y+37, r24	; 0x25
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	98 a7       	std	Y+40, r25	; 0x28
     144:	8f a3       	std	Y+39, r24	; 0x27
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	89 a7       	std	Y+41, r24	; 0x29
     14a:	ce 01       	movw	r24, r28
     14c:	0b 96       	adiw	r24, 0x0b	; 11
     14e:	0a 96       	adiw	r24, 0x0a	; 10
     150:	9b a7       	std	Y+43, r25	; 0x2b
     152:	8a a7       	std	Y+42, r24	; 0x2a
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	9d a7       	std	Y+45, r25	; 0x2d
     15a:	8c a7       	std	Y+44, r24	; 0x2c
     15c:	ce 01       	movw	r24, r28
     15e:	0b 96       	adiw	r24, 0x0b	; 11
     160:	0b 96       	adiw	r24, 0x0b	; 11
     162:	9f a7       	std	Y+47, r25	; 0x2f
     164:	8e a7       	std	Y+46, r24	; 0x2e
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	99 ab       	std	Y+49, r25	; 0x31
     16c:	88 ab       	std	Y+48, r24	; 0x30

	bool i2cStatus;
/*---------------------------------------------------------------*/
// 						èëÇ´Ç©Ç¶ÇøÇ·É_ÉÅÇÊÅI
/*---------------------------------------------------------------*/
	LEDInit();
     16e:	0e 94 98 0b 	call	0x1730	; 0x1730 <LEDInit>
	SwitchInit();
     172:	0e 94 cf 0c 	call	0x199e	; 0x199e <SwitchInit>
	BeepInit();
     176:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <BeepInit>
	DDRC |= 0x04;
     17a:	a7 e2       	ldi	r26, 0x27	; 39
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	e7 e2       	ldi	r30, 0x27	; 39
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	84 60       	ori	r24, 0x04	; 4
     186:	8c 93       	st	X, r24
	PORTC = 0x04;
     188:	e8 e2       	ldi	r30, 0x28	; 40
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	84 e0       	ldi	r24, 0x04	; 4
     18e:	80 83       	st	Z, r24
		
	initI2CMaster(100);
     190:	84 e6       	ldi	r24, 0x64	; 100
     192:	0e 94 21 09 	call	0x1242	; 0x1242 <initI2CMaster>

	wdt_reset();
     196:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2d e0       	ldi	r18, 0x0D	; 13
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	a8 95       	wdr
     1a4:	80 93 60 00 	sts	0x0060, r24
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	68 e0       	ldi	r22, 0x08	; 8
     1b4:	4a e0       	ldi	r20, 0x0A	; 10
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	0e 94 a9 05 	call	0xb52	; 0xb52 <uart_init>
	uart_setbuffer(0,buf,36);
     1bc:	24 e3       	ldi	r18, 0x34	; 52
     1be:	31 e0       	ldi	r19, 0x01	; 1
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	b9 01       	movw	r22, r18
     1c6:	44 e2       	ldi	r20, 0x24	; 36
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 3c 06 	call	0xc78	; 0xc78 <uart_setbuffer>
	wait_ms(100);
     1ce:	84 e6       	ldi	r24, 0x64	; 100
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	68 e1       	ldi	r22, 0x18	; 24
     1dc:	40 e4       	ldi	r20, 0x40	; 64
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	0e 94 a9 05 	call	0xb52	; 0xb52 <uart_init>
	mu2_command("EI","08");
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	23 e0       	ldi	r18, 0x03	; 3
     1ea:	31 e0       	ldi	r19, 0x01	; 1
     1ec:	b9 01       	movw	r22, r18
     1ee:	0e 94 9f 04 	call	0x93e	; 0x93e <mu2_command>
	mu2_command("DI","80");
     1f2:	86 e0       	ldi	r24, 0x06	; 6
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	29 e0       	ldi	r18, 0x09	; 9
     1f8:	31 e0       	ldi	r19, 0x01	; 1
     1fa:	b9 01       	movw	r22, r18
     1fc:	0e 94 9f 04 	call	0x93e	; 0x93e <mu2_command>
	mu2_command("GI","04");
     200:	8c e0       	ldi	r24, 0x0C	; 12
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	2f e0       	ldi	r18, 0x0F	; 15
     206:	31 e0       	ldi	r19, 0x01	; 1
     208:	b9 01       	movw	r22, r18
     20a:	0e 94 9f 04 	call	0x93e	; 0x93e <mu2_command>
	mu2_command("CH","2E");
     20e:	82 e1       	ldi	r24, 0x12	; 18
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	25 e1       	ldi	r18, 0x15	; 21
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	b9 01       	movw	r22, r18
     218:	0e 94 9f 04 	call	0x93e	; 0x93e <mu2_command>
	mu2_command("BR","48");
     21c:	88 e1       	ldi	r24, 0x18	; 24
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	2b e1       	ldi	r18, 0x1B	; 27
     222:	31 e0       	ldi	r19, 0x01	; 1
     224:	b9 01       	movw	r22, r18
     226:	0e 94 9f 04 	call	0x93e	; 0x93e <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	60 e9       	ldi	r22, 0x90	; 144
     230:	43 e0       	ldi	r20, 0x03	; 3
     232:	51 e0       	ldi	r21, 0x01	; 1
     234:	0e 94 a9 05 	call	0xb52	; 0xb52 <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
	sei();
     250:	78 94       	sei
	wait_ms(500);
     252:	84 ef       	ldi	r24, 0xF4	; 244
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_ms>
	PORTC &= 0xFB;
     25a:	a8 e2       	ldi	r26, 0x28	; 40
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	e8 e2       	ldi	r30, 0x28	; 40
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	8b 7f       	andi	r24, 0xFB	; 251
     266:	8c 93       	st	X, r24
	wait_ms(25);
     268:	89 e1       	ldi	r24, 0x19	; 25
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_ms>

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     270:	0e 94 b0 03 	call	0x760	; 0x760 <Toggle_RC_Rx_Buffer>
     274:	9a 87       	std	Y+10, r25	; 0x0a
     276:	89 87       	std	Y+9, r24	; 0x09
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     278:	e9 85       	ldd	r30, Y+9	; 0x09
     27a:	fa 85       	ldd	r31, Y+10	; 0x0a
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	82 70       	andi	r24, 0x02	; 2
     280:	88 23       	and	r24, r24
     282:	09 f4       	brne	.+2      	; 0x286 <main+0x1b8>
     284:	9a c0       	rjmp	.+308    	; 0x3ba <main+0x2ec>
     286:	e9 85       	ldd	r30, Y+9	; 0x09
     288:	fa 85       	ldd	r31, Y+10	; 0x0a
     28a:	80 81       	ld	r24, Z
     28c:	81 70       	andi	r24, 0x01	; 1
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <main+0x1c6>
     292:	93 c0       	rjmp	.+294    	; 0x3ba <main+0x2ec>
     294:	e9 85       	ldd	r30, Y+9	; 0x09
     296:	fa 85       	ldd	r31, Y+10	; 0x0a
     298:	80 81       	ld	r24, Z
     29a:	80 71       	andi	r24, 0x10	; 16
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0x1d4>
     2a0:	8c c0       	rjmp	.+280    	; 0x3ba <main+0x2ec>
     2a2:	e9 85       	ldd	r30, Y+9	; 0x09
     2a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	8d 30       	cpi	r24, 0x0D	; 13
     2b0:	91 05       	cpc	r25, r1
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <main+0x1e8>
     2b4:	82 c0       	rjmp	.+260    	; 0x3ba <main+0x2ec>
     2b6:	e9 85       	ldd	r30, Y+9	; 0x09
     2b8:	fa 85       	ldd	r31, Y+10	; 0x0a
     2ba:	83 81       	ldd	r24, Z+3	; 0x03
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	8d 30       	cpi	r24, 0x0D	; 13
     2c4:	91 05       	cpc	r25, r1
     2c6:	0c f4       	brge	.+2      	; 0x2ca <main+0x1fc>
     2c8:	78 c0       	rjmp	.+240    	; 0x3ba <main+0x2ec>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	68 e1       	ldi	r22, 0x18	; 24
     2e8:	43 e0       	ldi	r20, 0x03	; 3
     2ea:	51 e0       	ldi	r21, 0x01	; 1
     2ec:	0e 94 a9 05 	call	0xb52	; 0xb52 <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	31 e0       	ldi	r19, 0x01	; 1
     2f8:	b9 01       	movw	r22, r18
     2fa:	0e 94 21 05 	call	0xa42	; 0xa42 <mu2_command_eeprom>
     2fe:	8c ab       	std	Y+52, r24	; 0x34
     300:	ac a9       	ldd	r26, Y+52	; 0x34
     302:	aa 23       	and	r26, r26
     304:	11 f0       	breq	.+4      	; 0x30a <main+0x23c>
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	bc ab       	std	Y+52, r27	; 0x34
     30a:	9c a9       	ldd	r25, Y+52	; 0x34
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	69 2f       	mov	r22, r25
     310:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	29 e0       	ldi	r18, 0x09	; 9
     31a:	31 e0       	ldi	r19, 0x01	; 1
     31c:	b9 01       	movw	r22, r18
     31e:	0e 94 21 05 	call	0xa42	; 0xa42 <mu2_command_eeprom>
     322:	8d ab       	std	Y+53, r24	; 0x35
     324:	8d a9       	ldd	r24, Y+53	; 0x35
     326:	88 23       	and	r24, r24
     328:	11 f0       	breq	.+4      	; 0x32e <main+0x260>
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9d ab       	std	Y+53, r25	; 0x35
     32e:	9d a9       	ldd	r25, Y+53	; 0x35
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	69 2f       	mov	r22, r25
     334:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     338:	8c e0       	ldi	r24, 0x0C	; 12
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	2f e0       	ldi	r18, 0x0F	; 15
     33e:	31 e0       	ldi	r19, 0x01	; 1
     340:	b9 01       	movw	r22, r18
     342:	0e 94 21 05 	call	0xa42	; 0xa42 <mu2_command_eeprom>
     346:	8e ab       	std	Y+54, r24	; 0x36
     348:	ae a9       	ldd	r26, Y+54	; 0x36
     34a:	aa 23       	and	r26, r26
     34c:	11 f0       	breq	.+4      	; 0x352 <main+0x284>
     34e:	b1 e0       	ldi	r27, 0x01	; 1
     350:	be ab       	std	Y+54, r27	; 0x36
     352:	9e a9       	ldd	r25, Y+54	; 0x36
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	69 2f       	mov	r22, r25
     358:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     35c:	82 e1       	ldi	r24, 0x12	; 18
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	25 e1       	ldi	r18, 0x15	; 21
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	b9 01       	movw	r22, r18
     366:	0e 94 21 05 	call	0xa42	; 0xa42 <mu2_command_eeprom>
     36a:	8f ab       	std	Y+55, r24	; 0x37
     36c:	8f a9       	ldd	r24, Y+55	; 0x37
     36e:	88 23       	and	r24, r24
     370:	11 f0       	breq	.+4      	; 0x376 <main+0x2a8>
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	9f ab       	std	Y+55, r25	; 0x37
     376:	9f a9       	ldd	r25, Y+55	; 0x37
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	69 2f       	mov	r22, r25
     37c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     380:	88 e1       	ldi	r24, 0x18	; 24
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	2b e1       	ldi	r18, 0x1B	; 27
     386:	31 e0       	ldi	r19, 0x01	; 1
     388:	b9 01       	movw	r22, r18
     38a:	0e 94 21 05 	call	0xa42	; 0xa42 <mu2_command_eeprom>
     38e:	88 af       	std	Y+56, r24	; 0x38
     390:	a8 ad       	ldd	r26, Y+56	; 0x38
     392:	aa 23       	and	r26, r26
     394:	11 f0       	breq	.+4      	; 0x39a <main+0x2cc>
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	b8 af       	std	Y+56, r27	; 0x38
     39a:	98 ad       	ldd	r25, Y+56	; 0x38
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	69 2f       	mov	r22, r25
     3a0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				wait_ms(100);
     3a4:	84 e6       	ldi	r24, 0x64	; 100
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	60 e9       	ldi	r22, 0x90	; 144
     3b2:	43 e0       	ldi	r20, 0x03	; 3
     3b4:	51 e0       	ldi	r21, 0x01	; 1
     3b6:	0e 94 a9 05 	call	0xb52	; 0xb52 <uart_init>
			}
/*-------------------------------------------------------------------------*/
		if(controller->detail.Button.X&&count<36){
     3ba:	e9 85       	ldd	r30, Y+9	; 0x09
     3bc:	fa 85       	ldd	r31, Y+10	; 0x0a
     3be:	80 81       	ld	r24, Z
     3c0:	81 70       	andi	r24, 0x01	; 1
     3c2:	88 23       	and	r24, r24
     3c4:	51 f1       	breq	.+84     	; 0x41a <main+0x34c>
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	84 32       	cpi	r24, 0x24	; 36
     3ca:	38 f5       	brcc	.+78     	; 0x41a <main+0x34c>
			uDuty = dDuty = 100;
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	8e 83       	std	Y+6, r24	; 0x06
     3d0:	8e 81       	ldd	r24, Y+6	; 0x06
     3d2:	8f 83       	std	Y+7, r24	; 0x07
			count++;
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	8a 83       	std	Y+2, r24	; 0x02
			for(i=0;i<2;i++) mDrive(&Motor,CCW,uDuty,i);	//BLUE
     3da:	1d 82       	std	Y+5, r1	; 0x05
     3dc:	0b c0       	rjmp	.+22     	; 0x3f4 <main+0x326>
     3de:	2f 81       	ldd	r18, Y+7	; 0x07
     3e0:	ce 01       	movw	r24, r28
     3e2:	47 96       	adiw	r24, 0x17	; 23
     3e4:	62 e0       	ldi	r22, 0x02	; 2
     3e6:	42 2f       	mov	r20, r18
     3e8:	2d 81       	ldd	r18, Y+5	; 0x05
     3ea:	0e 94 37 0c 	call	0x186e	; 0x186e <mDrive>
     3ee:	8d 81       	ldd	r24, Y+5	; 0x05
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	8d 83       	std	Y+5, r24	; 0x05
     3f4:	8d 81       	ldd	r24, Y+5	; 0x05
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	90 f3       	brcs	.-28     	; 0x3de <main+0x310>
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <main+0x344>
			for(;i<4;i++) mDrive(&Motor,CW,dDuty,i);	//ORANGE
     3fc:	2e 81       	ldd	r18, Y+6	; 0x06
     3fe:	ce 01       	movw	r24, r28
     400:	47 96       	adiw	r24, 0x17	; 23
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	42 2f       	mov	r20, r18
     406:	2d 81       	ldd	r18, Y+5	; 0x05
     408:	0e 94 37 0c 	call	0x186e	; 0x186e <mDrive>
     40c:	8d 81       	ldd	r24, Y+5	; 0x05
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	8d 83       	std	Y+5, r24	; 0x05
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	84 30       	cpi	r24, 0x04	; 4
     416:	90 f3       	brcs	.-28     	; 0x3fc <main+0x32e>
     418:	01 c1       	rjmp	.+514    	; 0x61c <main+0x54e>
		}else{
			

		/*Ç±Ç±Ç…ÉvÉçÉOÉâÉÄÇãLèqÇ∑ÇÈÇ∆ÇÊÇÎÇµÇ¢ÇÃÇ≈ÇÕÇ»Ç¢ÇÃÇ©Ç∆évÇÌÇÍÇ‹Ç∑*/

		action = BRAKE;
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	88 87       	std	Y+8, r24	; 0x08

		if(controller->detail.AnalogR.Y<0x05||controller->detail.AnalogL.Y<0x05) {
     41e:	e9 85       	ldd	r30, Y+9	; 0x09
     420:	fa 85       	ldd	r31, Y+10	; 0x0a
     422:	83 81       	ldd	r24, Z+3	; 0x03
     424:	8f 70       	andi	r24, 0x0F	; 15
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	85 30       	cpi	r24, 0x05	; 5
     42c:	91 05       	cpc	r25, r1
     42e:	4c f0       	brlt	.+18     	; 0x442 <main+0x374>
     430:	e9 85       	ldd	r30, Y+9	; 0x09
     432:	fa 85       	ldd	r31, Y+10	; 0x0a
     434:	82 81       	ldd	r24, Z+2	; 0x02
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	85 30       	cpi	r24, 0x05	; 5
     43e:	91 05       	cpc	r25, r1
     440:	24 f4       	brge	.+8      	; 0x44a <main+0x37c>
			uDuty = 0;
     442:	1f 82       	std	Y+7, r1	; 0x07
			dDuty = 100;
     444:	84 e6       	ldi	r24, 0x64	; 100
     446:	8e 83       	std	Y+6, r24	; 0x06
     448:	1a c0       	rjmp	.+52     	; 0x47e <main+0x3b0>
		}
		else if(controller->detail.AnalogR.Y>0x09||controller->detail.AnalogL.Y>0x09) {
     44a:	e9 85       	ldd	r30, Y+9	; 0x09
     44c:	fa 85       	ldd	r31, Y+10	; 0x0a
     44e:	83 81       	ldd	r24, Z+3	; 0x03
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	8a 30       	cpi	r24, 0x0A	; 10
     458:	91 05       	cpc	r25, r1
     45a:	4c f4       	brge	.+18     	; 0x46e <main+0x3a0>
     45c:	e9 85       	ldd	r30, Y+9	; 0x09
     45e:	fa 85       	ldd	r31, Y+10	; 0x0a
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	8f 70       	andi	r24, 0x0F	; 15
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8a 30       	cpi	r24, 0x0A	; 10
     46a:	91 05       	cpc	r25, r1
     46c:	24 f0       	brlt	.+8      	; 0x476 <main+0x3a8>
			uDuty = 100;
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	8f 83       	std	Y+7, r24	; 0x07
			dDuty = 0;
     472:	1e 82       	std	Y+6, r1	; 0x06
     474:	04 c0       	rjmp	.+8      	; 0x47e <main+0x3b0>
		}
		else {
			uDuty = dDuty = 100;
     476:	84 e6       	ldi	r24, 0x64	; 100
     478:	8e 83       	std	Y+6, r24	; 0x06
     47a:	8e 81       	ldd	r24, Y+6	; 0x06
     47c:	8f 83       	std	Y+7, r24	; 0x07
		}


		if(controller->detail.Button.B) {
     47e:	e9 85       	ldd	r30, Y+9	; 0x09
     480:	fa 85       	ldd	r31, Y+10	; 0x0a
     482:	80 81       	ld	r24, Z
     484:	84 70       	andi	r24, 0x04	; 4
     486:	88 23       	and	r24, r24
     488:	21 f0       	breq	.+8      	; 0x492 <main+0x3c4>
			uDuty = dDuty = 50;
     48a:	82 e3       	ldi	r24, 0x32	; 50
     48c:	8e 83       	std	Y+6, r24	; 0x06
     48e:	8e 81       	ldd	r24, Y+6	; 0x06
     490:	8f 83       	std	Y+7, r24	; 0x07
		}

		if(controller->detail.Button.L||controller->detail.AnalogR.X<0x05||controller->detail.AnalogL.X<0x05) {
     492:	e9 85       	ldd	r30, Y+9	; 0x09
     494:	fa 85       	ldd	r31, Y+10	; 0x0a
     496:	81 81       	ldd	r24, Z+1	; 0x01
     498:	80 72       	andi	r24, 0x20	; 32
     49a:	88 23       	and	r24, r24
     49c:	a1 f4       	brne	.+40     	; 0x4c6 <main+0x3f8>
     49e:	e9 85       	ldd	r30, Y+9	; 0x09
     4a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     4a2:	83 81       	ldd	r24, Z+3	; 0x03
     4a4:	82 95       	swap	r24
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	85 30       	cpi	r24, 0x05	; 5
     4ae:	91 05       	cpc	r25, r1
     4b0:	54 f0       	brlt	.+20     	; 0x4c6 <main+0x3f8>
     4b2:	e9 85       	ldd	r30, Y+9	; 0x09
     4b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	82 95       	swap	r24
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	85 30       	cpi	r24, 0x05	; 5
     4c2:	91 05       	cpc	r25, r1
     4c4:	1c f4       	brge	.+6      	; 0x4cc <main+0x3fe>
			action=CW;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	88 87       	std	Y+8, r24	; 0x08
     4ca:	2e c0       	rjmp	.+92     	; 0x528 <main+0x45a>
		}
		else if(controller->detail.Button.R||controller->detail.AnalogR.X>0x09||controller->detail.AnalogL.X>0x09) {
     4cc:	e9 85       	ldd	r30, Y+9	; 0x09
     4ce:	fa 85       	ldd	r31, Y+10	; 0x0a
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	80 74       	andi	r24, 0x40	; 64
     4d4:	88 23       	and	r24, r24
     4d6:	a1 f4       	brne	.+40     	; 0x500 <main+0x432>
     4d8:	e9 85       	ldd	r30, Y+9	; 0x09
     4da:	fa 85       	ldd	r31, Y+10	; 0x0a
     4dc:	83 81       	ldd	r24, Z+3	; 0x03
     4de:	82 95       	swap	r24
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	8a 30       	cpi	r24, 0x0A	; 10
     4e8:	91 05       	cpc	r25, r1
     4ea:	54 f4       	brge	.+20     	; 0x500 <main+0x432>
     4ec:	e9 85       	ldd	r30, Y+9	; 0x09
     4ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     4f0:	82 81       	ldd	r24, Z+2	; 0x02
     4f2:	82 95       	swap	r24
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	8a 30       	cpi	r24, 0x0A	; 10
     4fc:	91 05       	cpc	r25, r1
     4fe:	1c f0       	brlt	.+6      	; 0x506 <main+0x438>
			action=CCW;
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	88 87       	std	Y+8, r24	; 0x08
     504:	11 c0       	rjmp	.+34     	; 0x528 <main+0x45a>
		}
		else if(controller->detail.Button.LEFT) {
     506:	e9 85       	ldd	r30, Y+9	; 0x09
     508:	fa 85       	ldd	r31, Y+10	; 0x0a
     50a:	80 81       	ld	r24, Z
     50c:	80 78       	andi	r24, 0x80	; 128
     50e:	88 23       	and	r24, r24
     510:	19 f0       	breq	.+6      	; 0x518 <main+0x44a>
			action=CW;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	88 87       	std	Y+8, r24	; 0x08
     516:	08 c0       	rjmp	.+16     	; 0x528 <main+0x45a>
		}
		else if(controller->detail.Button.RIGHT) {
     518:	e9 85       	ldd	r30, Y+9	; 0x09
     51a:	fa 85       	ldd	r31, Y+10	; 0x0a
     51c:	80 81       	ld	r24, Z
     51e:	80 72       	andi	r24, 0x20	; 32
     520:	88 23       	and	r24, r24
     522:	11 f0       	breq	.+4      	; 0x528 <main+0x45a>
			action=CCW;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	88 87       	std	Y+8, r24	; 0x08
		}
		for(i=0;i<2;i++) mDrive(&Motor,uDuty?action:BRAKE,uDuty,i);	//BLUE
     528:	1d 82       	std	Y+5, r1	; 0x05
     52a:	13 c0       	rjmp	.+38     	; 0x552 <main+0x484>
     52c:	8f 81       	ldd	r24, Y+7	; 0x07
     52e:	88 23       	and	r24, r24
     530:	19 f0       	breq	.+6      	; 0x538 <main+0x46a>
     532:	88 85       	ldd	r24, Y+8	; 0x08
     534:	8b ab       	std	Y+51, r24	; 0x33
     536:	02 c0       	rjmp	.+4      	; 0x53c <main+0x46e>
     538:	93 e0       	ldi	r25, 0x03	; 3
     53a:	9b ab       	std	Y+51, r25	; 0x33
     53c:	2f 81       	ldd	r18, Y+7	; 0x07
     53e:	ce 01       	movw	r24, r28
     540:	47 96       	adiw	r24, 0x17	; 23
     542:	6b a9       	ldd	r22, Y+51	; 0x33
     544:	42 2f       	mov	r20, r18
     546:	2d 81       	ldd	r18, Y+5	; 0x05
     548:	0e 94 37 0c 	call	0x186e	; 0x186e <mDrive>
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	8d 83       	std	Y+5, r24	; 0x05
     552:	8d 81       	ldd	r24, Y+5	; 0x05
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	50 f3       	brcs	.-44     	; 0x52c <main+0x45e>


		if(controller->detail.Button.R||controller->detail.AnalogR.X>0x09||controller->detail.AnalogL.X>0x09) {
     558:	e9 85       	ldd	r30, Y+9	; 0x09
     55a:	fa 85       	ldd	r31, Y+10	; 0x0a
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	80 74       	andi	r24, 0x40	; 64
     560:	88 23       	and	r24, r24
     562:	a1 f4       	brne	.+40     	; 0x58c <main+0x4be>
     564:	e9 85       	ldd	r30, Y+9	; 0x09
     566:	fa 85       	ldd	r31, Y+10	; 0x0a
     568:	83 81       	ldd	r24, Z+3	; 0x03
     56a:	82 95       	swap	r24
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	8a 30       	cpi	r24, 0x0A	; 10
     574:	91 05       	cpc	r25, r1
     576:	54 f4       	brge	.+20     	; 0x58c <main+0x4be>
     578:	e9 85       	ldd	r30, Y+9	; 0x09
     57a:	fa 85       	ldd	r31, Y+10	; 0x0a
     57c:	82 81       	ldd	r24, Z+2	; 0x02
     57e:	82 95       	swap	r24
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	8a 30       	cpi	r24, 0x0A	; 10
     588:	91 05       	cpc	r25, r1
     58a:	1c f0       	brlt	.+6      	; 0x592 <main+0x4c4>
			action=CW;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	88 87       	std	Y+8, r24	; 0x08
     590:	42 c0       	rjmp	.+132    	; 0x616 <main+0x548>
		}
		else if(controller->detail.Button.L||controller->detail.AnalogR.X<0x05||controller->detail.AnalogL.X<0x05) {
     592:	e9 85       	ldd	r30, Y+9	; 0x09
     594:	fa 85       	ldd	r31, Y+10	; 0x0a
     596:	81 81       	ldd	r24, Z+1	; 0x01
     598:	80 72       	andi	r24, 0x20	; 32
     59a:	88 23       	and	r24, r24
     59c:	a1 f4       	brne	.+40     	; 0x5c6 <main+0x4f8>
     59e:	e9 85       	ldd	r30, Y+9	; 0x09
     5a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a2:	83 81       	ldd	r24, Z+3	; 0x03
     5a4:	82 95       	swap	r24
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	85 30       	cpi	r24, 0x05	; 5
     5ae:	91 05       	cpc	r25, r1
     5b0:	54 f0       	brlt	.+20     	; 0x5c6 <main+0x4f8>
     5b2:	e9 85       	ldd	r30, Y+9	; 0x09
     5b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	82 95       	swap	r24
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	88 2f       	mov	r24, r24
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	85 30       	cpi	r24, 0x05	; 5
     5c2:	91 05       	cpc	r25, r1
     5c4:	1c f4       	brge	.+6      	; 0x5cc <main+0x4fe>
			action=CCW;
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	88 87       	std	Y+8, r24	; 0x08
     5ca:	25 c0       	rjmp	.+74     	; 0x616 <main+0x548>
		}
		else if(controller->detail.Button.LEFT) {
     5cc:	e9 85       	ldd	r30, Y+9	; 0x09
     5ce:	fa 85       	ldd	r31, Y+10	; 0x0a
     5d0:	80 81       	ld	r24, Z
     5d2:	80 78       	andi	r24, 0x80	; 128
     5d4:	88 23       	and	r24, r24
     5d6:	19 f0       	breq	.+6      	; 0x5de <main+0x510>
			action=CW;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	88 87       	std	Y+8, r24	; 0x08
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <main+0x548>
		}
		else if(controller->detail.Button.RIGHT) {
     5de:	e9 85       	ldd	r30, Y+9	; 0x09
     5e0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5e2:	80 81       	ld	r24, Z
     5e4:	80 72       	andi	r24, 0x20	; 32
     5e6:	88 23       	and	r24, r24
     5e8:	b1 f0       	breq	.+44     	; 0x616 <main+0x548>
			action=CCW;
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	88 87       	std	Y+8, r24	; 0x08
     5ee:	13 c0       	rjmp	.+38     	; 0x616 <main+0x548>
		}
		for(;i<4;i++) mDrive(&Motor,dDuty?action:BRAKE,dDuty,i);	//ORANGE
     5f0:	8e 81       	ldd	r24, Y+6	; 0x06
     5f2:	88 23       	and	r24, r24
     5f4:	19 f0       	breq	.+6      	; 0x5fc <main+0x52e>
     5f6:	a8 85       	ldd	r26, Y+8	; 0x08
     5f8:	aa ab       	std	Y+50, r26	; 0x32
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <main+0x532>
     5fc:	b3 e0       	ldi	r27, 0x03	; 3
     5fe:	ba ab       	std	Y+50, r27	; 0x32
     600:	2e 81       	ldd	r18, Y+6	; 0x06
     602:	ce 01       	movw	r24, r28
     604:	47 96       	adiw	r24, 0x17	; 23
     606:	6a a9       	ldd	r22, Y+50	; 0x32
     608:	42 2f       	mov	r20, r18
     60a:	2d 81       	ldd	r18, Y+5	; 0x05
     60c:	0e 94 37 0c 	call	0x186e	; 0x186e <mDrive>
     610:	8d 81       	ldd	r24, Y+5	; 0x05
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	8d 83       	std	Y+5, r24	; 0x05
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	84 30       	cpi	r24, 0x04	; 4
     61a:	50 f3       	brcs	.-44     	; 0x5f0 <main+0x522>
}		
		action = FREE;
     61c:	18 86       	std	Y+8, r1	; 0x08
		if(controller->detail.Button.Y) {
     61e:	e9 85       	ldd	r30, Y+9	; 0x09
     620:	fa 85       	ldd	r31, Y+10	; 0x0a
     622:	80 81       	ld	r24, Z
     624:	88 70       	andi	r24, 0x08	; 8
     626:	88 23       	and	r24, r24
     628:	29 f0       	breq	.+10     	; 0x634 <main+0x566>
			action = CW;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	88 87       	std	Y+8, r24	; 0x08
			AirPort = 0x03;
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	15 c0       	rjmp	.+42     	; 0x65e <main+0x590>
		}
		else if(controller->detail.Button.ZL) {
     634:	e9 85       	ldd	r30, Y+9	; 0x09
     636:	fa 85       	ldd	r31, Y+10	; 0x0a
     638:	81 81       	ldd	r24, Z+1	; 0x01
     63a:	88 70       	andi	r24, 0x08	; 8
     63c:	88 23       	and	r24, r24
     63e:	29 f0       	breq	.+10     	; 0x64a <main+0x57c>
			action = CW;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	88 87       	std	Y+8, r24	; 0x08
			AirPort = 0x01;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	0a c0       	rjmp	.+20     	; 0x65e <main+0x590>
		}
		else if(controller->detail.Button.ZR) {
     64a:	e9 85       	ldd	r30, Y+9	; 0x09
     64c:	fa 85       	ldd	r31, Y+10	; 0x0a
     64e:	81 81       	ldd	r24, Z+1	; 0x01
     650:	80 71       	andi	r24, 0x10	; 16
     652:	88 23       	and	r24, r24
     654:	21 f0       	breq	.+8      	; 0x65e <main+0x590>
			action = CW;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	88 87       	std	Y+8, r24	; 0x08
			AirPort = 0x02;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	8b 83       	std	Y+3, r24	; 0x03
		}
		aDrive(&Air,AirPort,action);
     65e:	88 85       	ldd	r24, Y+8	; 0x08
     660:	89 af       	std	Y+57, r24	; 0x39
     662:	99 ad       	ldd	r25, Y+57	; 0x39
     664:	99 23       	and	r25, r25
     666:	11 f0       	breq	.+4      	; 0x66c <main+0x59e>
     668:	a1 e0       	ldi	r26, 0x01	; 1
     66a:	a9 af       	std	Y+57, r26	; 0x39
     66c:	29 ad       	ldd	r18, Y+57	; 0x39
     66e:	ce 01       	movw	r24, r28
     670:	80 96       	adiw	r24, 0x20	; 32
     672:	6b 81       	ldd	r22, Y+3	; 0x03
     674:	42 2f       	mov	r20, r18
     676:	0e 94 ad 0c 	call	0x195a	; 0x195a <aDrive>

		/*ÉoÉãÉXÉÇÅ[Éh*/
		/*ÉoÉãÉX!!!!!*/
		if(controller->detail.Button.A||(controller->detail.Button.SELECT&&controller->detail.Button.START)) e_flag=E_ON;
     67a:	e9 85       	ldd	r30, Y+9	; 0x09
     67c:	fa 85       	ldd	r31, Y+10	; 0x0a
     67e:	80 81       	ld	r24, Z
     680:	82 70       	andi	r24, 0x02	; 2
     682:	88 23       	and	r24, r24
     684:	61 f4       	brne	.+24     	; 0x69e <main+0x5d0>
     686:	e9 85       	ldd	r30, Y+9	; 0x09
     688:	fa 85       	ldd	r31, Y+10	; 0x0a
     68a:	81 81       	ldd	r24, Z+1	; 0x01
     68c:	81 70       	andi	r24, 0x01	; 1
     68e:	88 23       	and	r24, r24
     690:	49 f0       	breq	.+18     	; 0x6a4 <main+0x5d6>
     692:	e9 85       	ldd	r30, Y+9	; 0x09
     694:	fa 85       	ldd	r31, Y+10	; 0x0a
     696:	81 81       	ldd	r24, Z+1	; 0x01
     698:	84 70       	andi	r24, 0x04	; 4
     69a:	88 23       	and	r24, r24
     69c:	19 f0       	breq	.+6      	; 0x6a4 <main+0x5d6>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	8c 83       	std	Y+4, r24	; 0x04
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <main+0x5ea>
		/*ïúäà!!!!!!!*/
		else if(controller->detail.Button.HOME) e_flag=E_OFF;
     6a4:	e9 85       	ldd	r30, Y+9	; 0x09
     6a6:	fa 85       	ldd	r31, Y+10	; 0x0a
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	82 70       	andi	r24, 0x02	; 2
     6ac:	88 23       	and	r24, r24
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <main+0x5e8>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	8c 83       	std	Y+4, r24	; 0x04
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <main+0x5ea>
		else e_flag=E_KEEP;	
     6b6:	1c 82       	std	Y+4, r1	; 0x04

		i2cStatus = true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	08 2f       	mov	r16, r24
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	2c 81       	ldd	r18, Y+4	; 0x04
     6c4:	ce 01       	movw	r24, r28
     6c6:	89 96       	adiw	r24, 0x29	; 41
     6c8:	62 2f       	mov	r22, r18
     6ca:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <Emergency>
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	80 23       	and	r24, r16
     6d4:	91 23       	and	r25, r17
     6d6:	19 82       	std	Y+1, r1	; 0x01
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	11 f0       	breq	.+4      	; 0x6e0 <main+0x612>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(4);
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	08 2f       	mov	r16, r24
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	ce 01       	movw	r24, r28
     6e8:	47 96       	adiw	r24, 0x17	; 23
     6ea:	0e 94 58 09 	call	0x12b0	; 0x12b0 <i2cWrite>
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	80 23       	and	r24, r16
     6f4:	91 23       	and	r25, r17
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	11 f0       	breq	.+4      	; 0x700 <main+0x632>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	84 e0       	ldi	r24, 0x04	; 4
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(4);
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	08 2f       	mov	r16, r24
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	ce 01       	movw	r24, r28
     710:	80 96       	adiw	r24, 0x20	; 32
     712:	0e 94 58 09 	call	0x12b0	; 0x12b0 <i2cWrite>
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	80 23       	and	r24, r16
     71c:	91 23       	and	r25, r17
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	00 97       	sbiw	r24, 0x00	; 0
     722:	11 f0       	breq	.+4      	; 0x728 <main+0x65a>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	08 2f       	mov	r16, r24
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	ce 01       	movw	r24, r28
     738:	89 96       	adiw	r24, 0x29	; 41
     73a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <i2cWrite>
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	80 23       	and	r24, r16
     744:	91 23       	and	r25, r17
     746:	19 82       	std	Y+1, r1	; 0x01
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	11 f0       	breq	.+4      	; 0x750 <main+0x682>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2cCheck>
		wait_ms(15);
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_ms>
     75e:	88 cd       	rjmp	.-1264   	; 0x270 <main+0x1a2>

00000760 <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
	cli();
     768:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     76a:	10 92 58 01 	sts	0x0158, r1
     76e:	15 c0       	rjmp	.+42     	; 0x79a <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     770:	80 91 58 01 	lds	r24, 0x0158
     774:	28 2f       	mov	r18, r24
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	80 91 58 01 	lds	r24, 0x0158
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	e5 5a       	subi	r30, 0xA5	; 165
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	80 81       	ld	r24, Z
     788:	f9 01       	movw	r30, r18
     78a:	e1 5a       	subi	r30, 0xA1	; 161
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     790:	80 91 58 01 	lds	r24, 0x0158
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	80 93 58 01 	sts	0x0158, r24
     79a:	80 91 58 01 	lds	r24, 0x0158
     79e:	84 30       	cpi	r24, 0x04	; 4
     7a0:	38 f3       	brcs	.-50     	; 0x770 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     7a2:	78 94       	sei
	return &keepCtrlData;
     7a4:	8f e5       	ldi	r24, 0x5F	; 95
     7a6:	91 e0       	ldi	r25, 0x01	; 1
}
     7a8:	cf 91       	pop	r28
     7aa:	df 91       	pop	r29
     7ac:	08 95       	ret

000007ae <__vector_20>:


ISR(USART0_RX_vect)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	00 90 5b 00 	lds	r0, 0x005B
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     7de:	e6 ec       	ldi	r30, 0xC6	; 198
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	80 93 7b 01 	sts	0x017B, r24

	if(phase){
     7e8:	80 91 5a 01 	lds	r24, 0x015A
     7ec:	88 23       	and	r24, r24
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <__vector_20+0x44>
     7f0:	59 c0       	rjmp	.+178    	; 0x8a4 <__vector_20+0xf6>
		packet[cnt] = val;
     7f2:	80 91 59 01 	lds	r24, 0x0159
     7f6:	88 2f       	mov	r24, r24
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	20 91 7b 01 	lds	r18, 0x017B
     7fe:	fc 01       	movw	r30, r24
     800:	ed 59       	subi	r30, 0x9D	; 157
     802:	fe 4f       	sbci	r31, 0xFE	; 254
     804:	20 83       	st	Z, r18
		uart1_putchar(packet[cnt]);
     806:	80 91 59 01 	lds	r24, 0x0159
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	fc 01       	movw	r30, r24
     810:	ed 59       	subi	r30, 0x9D	; 157
     812:	fe 4f       	sbci	r31, 0xFE	; 254
     814:	80 81       	ld	r24, Z
     816:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart1_putchar>
		if(cnt<2){
     81a:	80 91 59 01 	lds	r24, 0x0159
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	c8 f4       	brcc	.+50     	; 0x854 <__vector_20+0xa6>
			if(val != check[cnt]){
     822:	80 91 59 01 	lds	r24, 0x0159
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	e2 5e       	subi	r30, 0xE2	; 226
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	90 81       	ld	r25, Z
     832:	80 91 7b 01 	lds	r24, 0x017B
     836:	98 17       	cp	r25, r24
     838:	79 f1       	breq	.+94     	; 0x898 <__vector_20+0xea>
				phase = false;
     83a:	10 92 5a 01 	sts	0x015A, r1
				uart1_putchar('@');
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart1_putchar>
				LED(0,false);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
				beep(1);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
     852:	22 c0       	rjmp	.+68     	; 0x898 <__vector_20+0xea>
			}
		}else if(cnt==10){
     854:	80 91 59 01 	lds	r24, 0x0159
     858:	8a 30       	cpi	r24, 0x0A	; 10
     85a:	f1 f4       	brne	.+60     	; 0x898 <__vector_20+0xea>
			ctrlData.buf[0] = packet[5];
     85c:	80 91 68 01 	lds	r24, 0x0168
     860:	80 93 5b 01 	sts	0x015B, r24
			ctrlData.buf[1] = packet[6];
     864:	80 91 69 01 	lds	r24, 0x0169
     868:	80 93 5c 01 	sts	0x015C, r24
			ctrlData.buf[2] = packet[7];
     86c:	80 91 6a 01 	lds	r24, 0x016A
     870:	80 93 5d 01 	sts	0x015D, r24
			ctrlData.buf[3] = packet[8];
     874:	80 91 6b 01 	lds	r24, 0x016B
     878:	80 93 5e 01 	sts	0x015E, r24
			phase = false;
     87c:	10 92 5a 01 	sts	0x015A, r1
			wdt_reset();
     880:	a8 95       	wdr
			LED(0,true);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
			if(EmergencyStatus()) beep(0);
     88a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <EmergencyStatus>
     88e:	88 23       	and	r24, r24
     890:	19 f0       	breq	.+6      	; 0x898 <__vector_20+0xea>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
		}
		cnt++;
     898:	80 91 59 01 	lds	r24, 0x0159
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	80 93 59 01 	sts	0x0159, r24
     8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__vector_20+0x108>
	}else{
		if(val=='*'){
     8a4:	80 91 7b 01 	lds	r24, 0x017B
     8a8:	8a 32       	cpi	r24, 0x2A	; 42
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <__vector_20+0x108>
		cnt = 0;
     8ac:	10 92 59 01 	sts	0x0159, r1
		phase = true;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 5a 01 	sts	0x015A, r24
		}
	}

}
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	00 92 5b 00 	sts	0x005B, r0
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <Byte2Str>:
/// ÉoÉCÉgÅi0x00Å`0xFFÅjÇÃêîÇ2åÖÇÃï∂éöóÒÇ…ïœä∑
/// </summary>
/// <param name="num">ïœä∑ëŒè€ÇÃêîéö</param>
/// <param name="str">ïœä∑å„ÇÃï∂éöóÒÇäiî[Ç∑ÇÈóÃàÊ</param>
void Byte2Str(unsigned char num, char *str)
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <Byte2Str+0x6>
     8e8:	0f 92       	push	r0
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	7b 83       	std	Y+3, r23	; 0x03
     8f2:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	82 95       	swap	r24
     8f8:	8f 70       	andi	r24, 0x0F	; 15
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	ee 5d       	subi	r30, 0xDE	; 222
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	80 81       	ld	r24, Z
     906:	ea 81       	ldd	r30, Y+2	; 0x02
     908:	fb 81       	ldd	r31, Y+3	; 0x03
     90a:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
     910:	dc 01       	movw	r26, r24
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	8f 70       	andi	r24, 0x0F	; 15
     91c:	90 70       	andi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	ee 5d       	subi	r30, 0xDE	; 222
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	80 81       	ld	r24, Z
     926:	8c 93       	st	X, r24
	str[2] = '\0';
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	9b 81       	ldd	r25, Y+3	; 0x03
     92c:	fc 01       	movw	r30, r24
     92e:	32 96       	adiw	r30, 0x02	; 2
     930:	10 82       	st	Z, r1
}
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	00 d0       	rcall	.+0      	; 0x948 <mu2_command+0xa>
     948:	00 d0       	rcall	.+0      	; 0x94a <mu2_command+0xc>
     94a:	0f 92       	push	r0
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	7c 83       	std	Y+4, r23	; 0x04
     956:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     958:	80 e4       	ldi	r24, 0x40	; 64
     95a:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(cmd[0]);
     95e:	e9 81       	ldd	r30, Y+1	; 0x01
     960:	fa 81       	ldd	r31, Y+2	; 0x02
     962:	80 81       	ld	r24, Z
     964:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(cmd[1]);
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	fc 01       	movw	r30, r24
     96e:	31 96       	adiw	r30, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
     976:	0a c0       	rjmp	.+20     	; 0x98c <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     978:	eb 81       	ldd	r30, Y+3	; 0x03
     97a:	fc 81       	ldd	r31, Y+4	; 0x04
     97c:	80 81       	ld	r24, Z
     97e:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
		val++;
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     98c:	eb 81       	ldd	r30, Y+3	; 0x03
     98e:	fc 81       	ldd	r31, Y+4	; 0x04
     990:	80 81       	ld	r24, Z
     992:	88 23       	and	r24, r24
     994:	89 f7       	brne	.-30     	; 0x978 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     996:	8d e0       	ldi	r24, 0x0D	; 13
     998:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(0x0a);
     99c:	8a e0       	ldi	r24, 0x0A	; 10
     99e:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	for(i=0;i<10;i++){
     9a2:	10 92 7c 01 	sts	0x017C, r1
     9a6:	32 c0       	rjmp	.+100    	; 0xa0c <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     9a8:	80 91 7c 01 	lds	r24, 0x017C
     9ac:	08 2f       	mov	r16, r24
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	0e 94 6f 06 	call	0xcde	; 0xcde <uart0_getchar>
     9b4:	f8 01       	movw	r30, r16
     9b6:	e3 58       	subi	r30, 0x83	; 131
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     9bc:	80 91 7c 01 	lds	r24, 0x017C
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	e3 58       	subi	r30, 0x83	; 131
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	80 81       	ld	r24, Z
     9cc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     9d0:	80 91 7c 01 	lds	r24, 0x017C
     9d4:	88 23       	and	r24, r24
     9d6:	a9 f0       	breq	.+42     	; 0xa02 <mu2_command+0xc4>
     9d8:	80 91 7c 01 	lds	r24, 0x017C
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	fc 01       	movw	r30, r24
     9e4:	e3 58       	subi	r30, 0x83	; 131
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	80 81       	ld	r24, Z
     9ea:	8d 30       	cpi	r24, 0x0D	; 13
     9ec:	51 f4       	brne	.+20     	; 0xa02 <mu2_command+0xc4>
     9ee:	80 91 7c 01 	lds	r24, 0x017C
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	e3 58       	subi	r30, 0x83	; 131
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	8a 30       	cpi	r24, 0x0A	; 10
     a00:	49 f0       	breq	.+18     	; 0xa14 <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     a02:	80 91 7c 01 	lds	r24, 0x017C
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 7c 01 	sts	0x017C, r24
     a0c:	80 91 7c 01 	lds	r24, 0x017C
     a10:	8a 30       	cpi	r24, 0x0A	; 10
     a12:	50 f2       	brcs	.-108    	; 0x9a8 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     a14:	80 91 7e 01 	lds	r24, 0x017E
     a18:	85 34       	cpi	r24, 0x45	; 69
     a1a:	39 f4       	brne	.+14     	; 0xa2a <mu2_command+0xec>
     a1c:	80 91 7f 01 	lds	r24, 0x017F
     a20:	82 35       	cpi	r24, 0x52	; 82
     a22:	19 f4       	brne	.+6      	; 0xa2a <mu2_command+0xec>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	8d 83       	std	Y+5, r24	; 0x05
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <mu2_command+0xee>
	return 0;
     a2a:	1d 82       	std	Y+5, r1	; 0x05
     a2c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	df 93       	push	r29
     a48:	cf 93       	push	r28
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <mu2_command_eeprom+0xa>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <mu2_command_eeprom+0xc>
     a4e:	0f 92       	push	r0
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	7c 83       	std	Y+4, r23	; 0x04
     a5a:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(cmd[0]);
     a62:	e9 81       	ldd	r30, Y+1	; 0x01
     a64:	fa 81       	ldd	r31, Y+2	; 0x02
     a66:	80 81       	ld	r24, Z
     a68:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(cmd[1]);
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	fc 01       	movw	r30, r24
     a72:	31 96       	adiw	r30, 0x01	; 1
     a74:	80 81       	ld	r24, Z
     a76:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a7c:	eb 81       	ldd	r30, Y+3	; 0x03
     a7e:	fc 81       	ldd	r31, Y+4	; 0x04
     a80:	80 81       	ld	r24, Z
     a82:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
		val++;
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	89 f7       	brne	.-30     	; 0xa7c <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     a9a:	8f e2       	ldi	r24, 0x2F	; 47
     a9c:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar('W');
     aa0:	87 e5       	ldi	r24, 0x57	; 87
     aa2:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(0x0d);
     aa6:	8d e0       	ldi	r24, 0x0D	; 13
     aa8:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	uart0_putchar(0x0a);
     aac:	8a e0       	ldi	r24, 0x0A	; 10
     aae:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart0_putchar>
	for(i=0;i<10;i++){
     ab2:	10 92 7c 01 	sts	0x017C, r1
     ab6:	32 c0       	rjmp	.+100    	; 0xb1c <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     ab8:	80 91 7c 01 	lds	r24, 0x017C
     abc:	08 2f       	mov	r16, r24
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	0e 94 6f 06 	call	0xcde	; 0xcde <uart0_getchar>
     ac4:	f8 01       	movw	r30, r16
     ac6:	e3 58       	subi	r30, 0x83	; 131
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     acc:	80 91 7c 01 	lds	r24, 0x017C
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	e3 58       	subi	r30, 0x83	; 131
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 81       	ld	r24, Z
     adc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     ae0:	80 91 7c 01 	lds	r24, 0x017C
     ae4:	88 23       	and	r24, r24
     ae6:	a9 f0       	breq	.+42     	; 0xb12 <mu2_command_eeprom+0xd0>
     ae8:	80 91 7c 01 	lds	r24, 0x017C
     aec:	88 2f       	mov	r24, r24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	fc 01       	movw	r30, r24
     af4:	e3 58       	subi	r30, 0x83	; 131
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	80 81       	ld	r24, Z
     afa:	8d 30       	cpi	r24, 0x0D	; 13
     afc:	51 f4       	brne	.+20     	; 0xb12 <mu2_command_eeprom+0xd0>
     afe:	80 91 7c 01 	lds	r24, 0x017C
     b02:	88 2f       	mov	r24, r24
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	fc 01       	movw	r30, r24
     b08:	e3 58       	subi	r30, 0x83	; 131
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	80 81       	ld	r24, Z
     b0e:	8a 30       	cpi	r24, 0x0A	; 10
     b10:	49 f0       	breq	.+18     	; 0xb24 <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     b12:	80 91 7c 01 	lds	r24, 0x017C
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	80 93 7c 01 	sts	0x017C, r24
     b1c:	80 91 7c 01 	lds	r24, 0x017C
     b20:	8a 30       	cpi	r24, 0x0A	; 10
     b22:	50 f2       	brcs	.-108    	; 0xab8 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     b24:	80 91 7e 01 	lds	r24, 0x017E
     b28:	85 34       	cpi	r24, 0x45	; 69
     b2a:	39 f4       	brne	.+14     	; 0xb3a <mu2_command_eeprom+0xf8>
     b2c:	80 91 7f 01 	lds	r24, 0x017F
     b30:	82 35       	cpi	r24, 0x52	; 82
     b32:	19 f4       	brne	.+6      	; 0xb3a <mu2_command_eeprom+0xf8>
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	8d 83       	std	Y+5, r24	; 0x05
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <mu2_command_eeprom+0xfa>
	return 0;
     b3a:	1d 82       	std	Y+5, r1	; 0x05
     b3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2d 97       	sbiw	r28, 0x0d	; 13
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	6d 83       	std	Y+5, r22	; 0x05
     b6c:	5f 83       	std	Y+7, r21	; 0x07
     b6e:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	9d 87       	std	Y+13, r25	; 0x0d
     b76:	8c 87       	std	Y+12, r24	; 0x0c
     b78:	8c 85       	ldd	r24, Y+12	; 0x0c
     b7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	31 f0       	breq	.+12     	; 0xb8c <uart_init+0x3a>
     b80:	8c 85       	ldd	r24, Y+12	; 0x0c
     b82:	9d 85       	ldd	r25, Y+13	; 0x0d
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	b1 f1       	breq	.+108    	; 0xbf6 <uart_init+0xa4>
     b8a:	64 c0       	rjmp	.+200    	; 0xc54 <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     b8c:	e1 ec       	ldi	r30, 0xC1	; 193
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     b92:	a2 ec       	ldi	r26, 0xC2	; 194
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e2 ec       	ldi	r30, 0xC2	; 194
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	86 60       	ori	r24, 0x06	; 6
     b9e:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     ba0:	1a 82       	std	Y+2, r1	; 0x02
     ba2:	19 82       	std	Y+1, r1	; 0x01
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <uart_init+0x5e>
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	23 e1       	ldi	r18, 0x13	; 19
     bb6:	88 38       	cpi	r24, 0x88	; 136
     bb8:	92 07       	cpc	r25, r18
     bba:	ac f3       	brlt	.-22     	; 0xba6 <uart_init+0x54>
			UCSR0B = option;					
     bbc:	e1 ec       	ldi	r30, 0xC1	; 193
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     bc4:	e5 ec       	ldi	r30, 0xC5	; 197
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	8e 81       	ldd	r24, Y+6	; 0x06
     bca:	9f 81       	ldd	r25, Y+7	; 0x07
     bcc:	89 2f       	mov	r24, r25
     bce:	99 27       	eor	r25, r25
     bd0:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     bd2:	e4 ec       	ldi	r30, 0xC4	; 196
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	8e 81       	ldd	r24, Y+6	; 0x06
     bd8:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     bda:	e0 ec       	ldi	r30, 0xC0	; 192
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     be0:	a0 ec       	ldi	r26, 0xC0	; 192
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e0 ec       	ldi	r30, 0xC0	; 192
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	83 7e       	andi	r24, 0xE3	; 227
     bec:	8c 93       	st	X, r24
			UDR0 = 0;
     bee:	e6 ec       	ldi	r30, 0xC6	; 198
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	10 82       	st	Z, r1
     bf4:	34 c0       	rjmp	.+104    	; 0xc5e <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     bf6:	ed ec       	ldi	r30, 0xCD	; 205
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8e 81       	ldd	r24, Y+6	; 0x06
     bfc:	9f 81       	ldd	r25, Y+7	; 0x07
     bfe:	89 2f       	mov	r24, r25
     c00:	99 27       	eor	r25, r25
     c02:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     c04:	ec ec       	ldi	r30, 0xCC	; 204
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     c0c:	1a 82       	std	Y+2, r1	; 0x02
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	05 c0       	rjmp	.+10     	; 0xc1c <uart_init+0xca>
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	23 e1       	ldi	r18, 0x13	; 19
     c22:	88 38       	cpi	r24, 0x88	; 136
     c24:	92 07       	cpc	r25, r18
     c26:	ac f3       	brlt	.-22     	; 0xc12 <uart_init+0xc0>
			UCSR1B |= option;
     c28:	a9 ec       	ldi	r26, 0xC9	; 201
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e9 ec       	ldi	r30, 0xC9	; 201
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	90 81       	ld	r25, Z
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	89 2b       	or	r24, r25
     c36:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     c38:	e8 ec       	ldi	r30, 0xC8	; 200
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     c3e:	a8 ec       	ldi	r26, 0xC8	; 200
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e8 ec       	ldi	r30, 0xC8	; 200
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	83 7e       	andi	r24, 0xE3	; 227
     c4a:	8c 93       	st	X, r24
			UDR1 = 0;
     c4c:	ee ec       	ldi	r30, 0xCE	; 206
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	10 82       	st	Z, r1
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <uart_init+0x10c>
			break;
		default:
			return -1;
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	9f ef       	ldi	r25, 0xFF	; 255
     c58:	99 87       	std	Y+9, r25	; 0x09
     c5a:	88 87       	std	Y+8, r24	; 0x08
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <uart_init+0x110>
	}
	return 0;
     c5e:	19 86       	std	Y+9, r1	; 0x09
     c60:	18 86       	std	Y+8, r1	; 0x08
     c62:	88 85       	ldd	r24, Y+8	; 0x08
     c64:	99 85       	ldd	r25, Y+9	; 0x09
}
     c66:	2d 96       	adiw	r28, 0x0d	; 13
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <uart_setbuffer+0x6>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <uart_setbuffer+0x8>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <uart_setbuffer+0xa>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	7c 83       	std	Y+4, r23	; 0x04
     c8c:	6b 83       	std	Y+3, r22	; 0x03
     c8e:	5e 83       	std	Y+6, r21	; 0x06
     c90:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	99 23       	and	r25, r25
     c98:	cc f0       	brlt	.+50     	; 0xccc <uart_setbuffer+0x54>
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f4       	brge	.+40     	; 0xccc <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     ca4:	29 81       	ldd	r18, Y+1	; 0x01
     ca6:	3a 81       	ldd	r19, Y+2	; 0x02
     ca8:	c9 01       	movw	r24, r18
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	87 57       	subi	r24, 0x77	; 119
     cbc:	9e 4f       	sbci	r25, 0xFE	; 254
     cbe:	4d 81       	ldd	r20, Y+5	; 0x05
     cc0:	5e 81       	ldd	r21, Y+6	; 0x06
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	b9 01       	movw	r22, r18
     cc8:	0e 94 34 08 	call	0x1068	; 0x1068 <RingInit>
}
     ccc:	26 96       	adiw	r28, 0x06	; 6
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     ce6:	e0 ec       	ldi	r30, 0xC0	; 192
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 23       	and	r24, r24
     cee:	dc f7       	brge	.-10     	; 0xce6 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     cf0:	a0 ec       	ldi	r26, 0xC0	; 192
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e0 ec       	ldi	r30, 0xC0	; 192
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 77       	andi	r24, 0x7F	; 127
     cfc:	8c 93       	st	X, r24
	return UDR0;
     cfe:	e6 ec       	ldi	r30, 0xC6	; 198
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <uart0_putchar>:

int uart0_putchar(char c)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     d16:	e0 ec       	ldi	r30, 0xC0	; 192
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	80 72       	andi	r24, 0x20	; 32
     d22:	90 70       	andi	r25, 0x00	; 0
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	b9 f3       	breq	.-18     	; 0xd16 <uart0_putchar+0xc>
	UDR0 = c;
     d28:	e6 ec       	ldi	r30, 0xC6	; 198
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     d30:	a0 ec       	ldi	r26, 0xC0	; 192
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e0 ec       	ldi	r30, 0xC0	; 192
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	8c 93       	st	X, r24
	
	return 0;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
}
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <uart1_putchar>:

int uart1_putchar(char c)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8a 30       	cpi	r24, 0x0A	; 10
     d5a:	a1 f4       	brne	.+40     	; 0xd84 <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     d5c:	e8 ec       	ldi	r30, 0xC8	; 200
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	80 72       	andi	r24, 0x20	; 32
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	b9 f3       	breq	.-18     	; 0xd5c <uart1_putchar+0x12>
		UDR1 = '\r';
     d6e:	ee ec       	ldi	r30, 0xCE	; 206
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	8d e0       	ldi	r24, 0x0D	; 13
     d74:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     d76:	a8 ec       	ldi	r26, 0xC8	; 200
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e8 ec       	ldi	r30, 0xC8	; 200
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8f 7d       	andi	r24, 0xDF	; 223
     d82:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     d84:	e8 ec       	ldi	r30, 0xC8	; 200
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	80 72       	andi	r24, 0x20	; 32
     d90:	90 70       	andi	r25, 0x00	; 0
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	b9 f3       	breq	.-18     	; 0xd84 <uart1_putchar+0x3a>
	UDR1 = c;
     d96:	ee ec       	ldi	r30, 0xCE	; 206
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     d9e:	a8 ec       	ldi	r26, 0xC8	; 200
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e8 ec       	ldi	r30, 0xC8	; 200
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8f 7d       	andi	r24, 0xDF	; 223
     daa:	8c 93       	st	X, r24

	return 0;
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <uart0_buf_putchar+0x6>
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     dc6:	1a 82       	std	Y+2, r1	; 0x02
     dc8:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     dca:	ef e5       	ldi	r30, 0x5F	; 95
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 93 87 01 	sts	0x0187, r24
	cli();
     dd4:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	8a 30       	cpi	r24, 0x0A	; 10
     dda:	61 f4       	brne	.+24     	; 0xdf4 <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     ddc:	89 e8       	ldi	r24, 0x89	; 137
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	6d e0       	ldi	r22, 0x0D	; 13
     de2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RingPut>
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	29 f4       	brne	.+10     	; 0xdf4 <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     df4:	89 e8       	ldi	r24, 0x89	; 137
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	6b 81       	ldd	r22, Y+3	; 0x03
     dfa:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RingPut>
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	21 f4       	brne	.+8      	; 0xe0a <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     e0a:	a1 ec       	ldi	r26, 0xC1	; 193
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e1 ec       	ldi	r30, 0xC1	; 193
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 62       	ori	r24, 0x20	; 32
     e16:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     e18:	ef e5       	ldi	r30, 0x5F	; 95
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 91 87 01 	lds	r24, 0x0187
     e20:	80 83       	st	Z, r24

	return ret;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <uart1_buf_putchar+0x6>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     e44:	ef e5       	ldi	r30, 0x5F	; 95
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 93 87 01 	sts	0x0187, r24
	cli();
     e4e:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	8a 30       	cpi	r24, 0x0A	; 10
     e54:	61 f4       	brne	.+24     	; 0xe6e <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     e56:	82 e9       	ldi	r24, 0x92	; 146
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	6d e0       	ldi	r22, 0x0D	; 13
     e5c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RingPut>
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f4       	brne	.+10     	; 0xe6e <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	9f ef       	ldi	r25, 0xFF	; 255
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     e6e:	82 e9       	ldi	r24, 0x92	; 146
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	6b 81       	ldd	r22, Y+3	; 0x03
     e74:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RingPut>
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	21 f4       	brne	.+8      	; 0xe84 <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     e84:	a9 ec       	ldi	r26, 0xC9	; 201
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e9 ec       	ldi	r30, 0xC9	; 201
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 62       	ori	r24, 0x20	; 32
     e90:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     e92:	ef e5       	ldi	r30, 0x5F	; 95
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 91 87 01 	lds	r24, 0x0187
     e9a:	80 83       	st	Z, r24

	return ret;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <__vector_21>:


ISR(USART0_UDRE_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	00 90 5b 00 	lds	r0, 0x005B
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     ede:	89 e8       	ldi	r24, 0x89	; 137
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9e 01       	movw	r18, r28
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	b9 01       	movw	r22, r18
     eea:	0e 94 b5 08 	call	0x116a	; 0x116a <RingGet>
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	61 f0       	breq	.+24     	; 0xf0a <__vector_21+0x5e>
		UDR0 = c;
     ef2:	e6 ec       	ldi	r30, 0xC6	; 198
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREÉNÉäÉA
     efa:	a0 ec       	ldi	r26, 0xC0	; 192
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e0 ec       	ldi	r30, 0xC0	; 192
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 7d       	andi	r24, 0xDF	; 223
     f06:	8c 93       	st	X, r24
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
     f0a:	a1 ec       	ldi	r26, 0xC1	; 193
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 ec       	ldi	r30, 0xC1	; 193
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
     f18:	a0 ec       	ldi	r26, 0xC0	; 192
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e0 ec       	ldi	r30, 0xC0	; 192
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	8c 93       	st	X, r24
	}
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	00 92 5b 00 	sts	0x005B, r0
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_29>:

ISR(USART1_UDRE_vect)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	00 90 5b 00 	lds	r0, 0x005B
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	4f 93       	push	r20
     f6a:	5f 93       	push	r21
     f6c:	6f 93       	push	r22
     f6e:	7f 93       	push	r23
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	af 93       	push	r26
     f76:	bf 93       	push	r27
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
     f86:	82 e9       	ldi	r24, 0x92	; 146
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	9e 01       	movw	r18, r28
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	b9 01       	movw	r22, r18
     f92:	0e 94 b5 08 	call	0x116a	; 0x116a <RingGet>
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	61 f0       	breq	.+24     	; 0xfb2 <__vector_29+0x5e>
		UDR1 = c;
     f9a:	ee ec       	ldi	r30, 0xCE	; 206
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREÉNÉäÉA
     fa2:	a8 ec       	ldi	r26, 0xC8	; 200
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 ec       	ldi	r30, 0xC8	; 200
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7d       	andi	r24, 0xDF	; 223
     fae:	8c 93       	st	X, r24
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
     fb2:	a9 ec       	ldi	r26, 0xC9	; 201
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e9 ec       	ldi	r30, 0xC9	; 201
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
     fc0:	a8 ec       	ldi	r26, 0xC8	; 200
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e8 ec       	ldi	r30, 0xC8	; 200
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	8c 93       	st	X, r24
	}
}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	00 92 5b 00 	sts	0x005B, r0
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	00 90 5b 00 	lds	r0, 0x005B
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    102c:	ee ec       	ldi	r30, 0xCE	; 206
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	20 81       	ld	r18, Z
    1032:	82 e9       	ldi	r24, 0x92	; 146
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	62 2f       	mov	r22, r18
    1038:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RingPut>
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	00 92 5b 00 	sts	0x005B, r0
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <RingInit+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <RingInit+0x8>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <RingInit+0xa>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	7c 83       	std	Y+4, r23	; 0x04
    107c:	6b 83       	std	Y+3, r22	; 0x03
    107e:	5e 83       	std	Y+6, r21	; 0x06
    1080:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
	ring->size = size;
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	97 83       	std	Z+7, r25	; 0x07
    1098:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	13 82       	std	Z+3, r1	; 0x03
    10a0:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	15 82       	std	Z+5, r1	; 0x05
    10a8:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    10aa:	e9 81       	ldd	r30, Y+1	; 0x01
    10ac:	fa 81       	ldd	r31, Y+2	; 0x02
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 87       	std	Z+8, r24	; 0x08
}
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <RingPut+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <RingPut+0x8>
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	80 85       	ldd	r24, Z+8	; 0x08
    10de:	88 23       	and	r24, r24
    10e0:	71 f4       	brne	.+28     	; 0x10fe <RingPut+0x3a>
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	22 81       	ldd	r18, Z+2	; 0x02
    10e8:	33 81       	ldd	r19, Z+3	; 0x03
    10ea:	e9 81       	ldd	r30, Y+1	; 0x01
    10ec:	fa 81       	ldd	r31, Y+2	; 0x02
    10ee:	84 81       	ldd	r24, Z+4	; 0x04
    10f0:	95 81       	ldd	r25, Z+5	; 0x05
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	19 f4       	brne	.+6      	; 0x10fe <RingPut+0x3a>
		return FALSE;
    10f8:	1d 82       	std	Y+5, r1	; 0x05
    10fa:	1c 82       	std	Y+4, r1	; 0x04
    10fc:	2c c0       	rjmp	.+88     	; 0x1156 <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    10fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1100:	fa 81       	ldd	r31, Y+2	; 0x02
    1102:	20 81       	ld	r18, Z
    1104:	31 81       	ldd	r19, Z+1	; 0x01
    1106:	e9 81       	ldd	r30, Y+1	; 0x01
    1108:	fa 81       	ldd	r31, Y+2	; 0x02
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	95 81       	ldd	r25, Z+5	; 0x05
    110e:	f9 01       	movw	r30, r18
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	80 83       	st	Z, r24
	ring->wp++;
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	84 81       	ldd	r24, Z+4	; 0x04
    111e:	95 81       	ldd	r25, Z+5	; 0x05
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	e9 81       	ldd	r30, Y+1	; 0x01
    1124:	fa 81       	ldd	r31, Y+2	; 0x02
    1126:	95 83       	std	Z+5, r25	; 0x05
    1128:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	24 81       	ldd	r18, Z+4	; 0x04
    1130:	35 81       	ldd	r19, Z+5	; 0x05
    1132:	e9 81       	ldd	r30, Y+1	; 0x01
    1134:	fa 81       	ldd	r31, Y+2	; 0x02
    1136:	86 81       	ldd	r24, Z+6	; 0x06
    1138:	97 81       	ldd	r25, Z+7	; 0x07
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	21 f4       	brne	.+8      	; 0x1148 <RingPut+0x84>
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	15 82       	std	Z+5, r1	; 0x05
    1146:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9d 83       	std	Y+5, r25	; 0x05
    1154:	8c 83       	std	Y+4, r24	; 0x04
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <RingGet+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <RingGet+0x8>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <RingGet+0xa>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	7c 83       	std	Y+4, r23	; 0x04
    117e:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    1180:	e9 81       	ldd	r30, Y+1	; 0x01
    1182:	fa 81       	ldd	r31, Y+2	; 0x02
    1184:	80 85       	ldd	r24, Z+8	; 0x08
    1186:	88 23       	and	r24, r24
    1188:	d9 f5       	brne	.+118    	; 0x1200 <RingGet+0x96>
		*value = ring->buf[ring->rp];
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	20 81       	ld	r18, Z
    1190:	31 81       	ldd	r19, Z+1	; 0x01
    1192:	e9 81       	ldd	r30, Y+1	; 0x01
    1194:	fa 81       	ldd	r31, Y+2	; 0x02
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	f9 01       	movw	r30, r18
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	80 81       	ld	r24, Z
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	80 83       	st	Z, r24
		ring->rp++;
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	93 83       	std	Z+3, r25	; 0x03
    11b8:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	22 81       	ldd	r18, Z+2	; 0x02
    11c0:	33 81       	ldd	r19, Z+3	; 0x03
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	86 81       	ldd	r24, Z+6	; 0x06
    11c8:	97 81       	ldd	r25, Z+7	; 0x07
    11ca:	28 17       	cp	r18, r24
    11cc:	39 07       	cpc	r19, r25
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <RingGet+0x6e>
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	13 82       	std	Z+3, r1	; 0x03
    11d6:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	22 81       	ldd	r18, Z+2	; 0x02
    11de:	33 81       	ldd	r19, Z+3	; 0x03
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	95 81       	ldd	r25, Z+5	; 0x05
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <RingGet+0x8c>
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <RingGet+0xa0>
	}else{			// ÉäÉìÉOÉoÉbÉtÉ@Ç™ãÛÇÃÇ∆Ç´
		*value = 0;
    1200:	eb 81       	ldd	r30, Y+3	; 0x03
    1202:	fc 81       	ldd	r31, Y+4	; 0x04
    1204:	10 82       	st	Z, r1
		return FALSE;
    1206:	1e 82       	std	Y+6, r1	; 0x06
    1208:	1d 82       	std	Y+5, r1	; 0x05
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <isRingEmpty+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <initI2CMaster+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <initI2CMaster+0x8>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    1252:	88 eb       	ldi	r24, 0xB8	; 184
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	80 e2       	ldi	r24, 0x20	; 32
    1262:	9e e4       	ldi	r25, 0x4E	; 78
    1264:	b9 01       	movw	r22, r18
    1266:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__divmodhi4>
    126a:	cb 01       	movw	r24, r22
    126c:	40 97       	sbiw	r24, 0x10	; 16
    126e:	9d 83       	std	Y+5, r25	; 0x05
    1270:	8c 83       	std	Y+4, r24	; 0x04
    1272:	ec 81       	ldd	r30, Y+4	; 0x04
    1274:	fd 81       	ldd	r31, Y+5	; 0x05
    1276:	ff 23       	and	r31, r31
    1278:	2c f4       	brge	.+10     	; 0x1284 <initI2CMaster+0x42>
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	9d 83       	std	Y+5, r25	; 0x05
    1282:	8c 83       	std	Y+4, r24	; 0x04
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	95 95       	asr	r25
    128a:	87 95       	ror	r24
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	80 83       	st	Z, r24
		TWSR = 0;
    1292:	e9 eb       	ldi	r30, 0xB9	; 185
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	10 82       	st	Z, r1
		TWCR = I2CEN;
    1298:	ec eb       	ldi	r30, 0xBC	; 188
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	80 83       	st	Z, r24
    }
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <i2cWrite+0x6>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
			cli();
    12c0:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    12c2:	ec eb       	ldi	r30, 0xBC	; 188
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	84 ea       	ldi	r24, 0xA4	; 164
    12c8:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    12ca:	ec eb       	ldi	r30, 0xBC	; 188
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	dc f7       	brge	.-10     	; 0x12ca <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    12d4:	e9 eb       	ldi	r30, 0xB9	; 185
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	88 7f       	andi	r24, 0xF8	; 248
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <i2cWrite+0x3a>
    12e8:	58 c0       	rjmp	.+176    	; 0x139a <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    12ea:	ab eb       	ldi	r26, 0xBB	; 187
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	80 81       	ld	r24, Z
    12f4:	88 0f       	add	r24, r24
    12f6:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    12f8:	ec eb       	ldi	r30, 0xBC	; 188
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	84 e8       	ldi	r24, 0x84	; 132
    12fe:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1300:	ec eb       	ldi	r30, 0xBC	; 188
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 23       	and	r24, r24
    1308:	dc f7       	brge	.-10     	; 0x1300 <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    130a:	e9 eb       	ldi	r30, 0xB9	; 185
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	88 7f       	andi	r24, 0xF8	; 248
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	88 31       	cpi	r24, 0x18	; 24
    131a:	91 05       	cpc	r25, r1
    131c:	09 f0       	breq	.+2      	; 0x1320 <i2cWrite+0x70>
    131e:	3d c0       	rjmp	.+122    	; 0x139a <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    1320:	10 92 88 01 	sts	0x0188, r1
    1324:	27 c0       	rjmp	.+78     	; 0x1374 <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    1326:	ab eb       	ldi	r26, 0xBB	; 187
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e9 81       	ldd	r30, Y+1	; 0x01
    132c:	fa 81       	ldd	r31, Y+2	; 0x02
    132e:	21 81       	ldd	r18, Z+1	; 0x01
    1330:	32 81       	ldd	r19, Z+2	; 0x02
    1332:	80 91 88 01 	lds	r24, 0x0188
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	e8 0f       	add	r30, r24
    133e:	f9 1f       	adc	r31, r25
    1340:	80 81       	ld	r24, Z
    1342:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    1344:	ec eb       	ldi	r30, 0xBC	; 188
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	84 e8       	ldi	r24, 0x84	; 132
    134a:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    134c:	ec eb       	ldi	r30, 0xBC	; 188
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 23       	and	r24, r24
    1354:	dc f7       	brge	.-10     	; 0x134c <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    1356:	e9 eb       	ldi	r30, 0xB9	; 185
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	88 7f       	andi	r24, 0xF8	; 248
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	88 32       	cpi	r24, 0x28	; 40
    1366:	91 05       	cpc	r25, r1
    1368:	c1 f4       	brne	.+48     	; 0x139a <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    136a:	80 91 88 01 	lds	r24, 0x0188
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 88 01 	sts	0x0188, r24
    1374:	80 91 88 01 	lds	r24, 0x0188
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	83 81       	ldd	r24, Z+3	; 0x03
    1382:	94 81       	ldd	r25, Z+4	; 0x04
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	70 f2       	brcs	.-100    	; 0x1326 <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    138a:	ec eb       	ldi	r30, 0xBC	; 188
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	84 e9       	ldi	r24, 0x94	; 148
    1390:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    1392:	78 94       	sei
		return true;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    139a:	ec eb       	ldi	r30, 0xBC	; 188
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	84 e9       	ldi	r24, 0x94	; 148
    13a0:	80 83       	st	Z, r24
		sei();
    13a2:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    13a4:	1b 82       	std	Y+3, r1	; 0x03
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <i2cRead+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
		cli();
    13c4:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    13c6:	ec eb       	ldi	r30, 0xBC	; 188
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	84 ea       	ldi	r24, 0xA4	; 164
    13cc:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    13ce:	ec eb       	ldi	r30, 0xBC	; 188
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	dc f7       	brge	.-10     	; 0x13ce <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    13d8:	e9 eb       	ldi	r30, 0xB9	; 185
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	88 7f       	andi	r24, 0xF8	; 248
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <i2cRead+0x3a>
    13ec:	80 c0       	rjmp	.+256    	; 0x14ee <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    13ee:	ab eb       	ldi	r26, 0xBB	; 187
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e9 81       	ldd	r30, Y+1	; 0x01
    13f4:	fa 81       	ldd	r31, Y+2	; 0x02
    13f6:	80 81       	ld	r24, Z
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1404:	ec eb       	ldi	r30, 0xBC	; 188
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	84 e8       	ldi	r24, 0x84	; 132
    140a:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    140c:	ec eb       	ldi	r30, 0xBC	; 188
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 23       	and	r24, r24
    1414:	dc f7       	brge	.-10     	; 0x140c <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    1416:	e9 eb       	ldi	r30, 0xB9	; 185
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	88 7f       	andi	r24, 0xF8	; 248
    1422:	90 70       	andi	r25, 0x00	; 0
    1424:	80 34       	cpi	r24, 0x40	; 64
    1426:	91 05       	cpc	r25, r1
    1428:	09 f0       	breq	.+2      	; 0x142c <i2cRead+0x78>
    142a:	61 c0       	rjmp	.+194    	; 0x14ee <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    142c:	10 92 88 01 	sts	0x0188, r1
    1430:	28 c0       	rjmp	.+80     	; 0x1482 <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1432:	ec eb       	ldi	r30, 0xBC	; 188
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	84 ec       	ldi	r24, 0xC4	; 196
    1438:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    143a:	ec eb       	ldi	r30, 0xBC	; 188
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	dc f7       	brge	.-10     	; 0x143a <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1444:	e9 eb       	ldi	r30, 0xB9	; 185
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	88 7f       	andi	r24, 0xF8	; 248
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	80 35       	cpi	r24, 0x50	; 80
    1454:	91 05       	cpc	r25, r1
    1456:	09 f0       	breq	.+2      	; 0x145a <i2cRead+0xa6>
    1458:	4a c0       	rjmp	.+148    	; 0x14ee <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	25 81       	ldd	r18, Z+5	; 0x05
    1460:	36 81       	ldd	r19, Z+6	; 0x06
    1462:	80 91 88 01 	lds	r24, 0x0188
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	d9 01       	movw	r26, r18
    146c:	a8 0f       	add	r26, r24
    146e:	b9 1f       	adc	r27, r25
    1470:	eb eb       	ldi	r30, 0xBB	; 187
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1478:	80 91 88 01 	lds	r24, 0x0188
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	80 93 88 01 	sts	0x0188, r24
    1482:	80 91 88 01 	lds	r24, 0x0188
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	87 81       	ldd	r24, Z+7	; 0x07
    1490:	90 85       	ldd	r25, Z+8	; 0x08
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	28 17       	cp	r18, r24
    1496:	39 07       	cpc	r19, r25
    1498:	60 f2       	brcs	.-104    	; 0x1432 <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    149a:	ec eb       	ldi	r30, 0xBC	; 188
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	84 e8       	ldi	r24, 0x84	; 132
    14a0:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    14a2:	ec eb       	ldi	r30, 0xBC	; 188
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	dc f7       	brge	.-10     	; 0x14a2 <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    14ac:	e9 eb       	ldi	r30, 0xB9	; 185
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 7f       	andi	r24, 0xF8	; 248
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 35       	cpi	r24, 0x58	; 88
    14bc:	91 05       	cpc	r25, r1
    14be:	b9 f4       	brne	.+46     	; 0x14ee <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	25 81       	ldd	r18, Z+5	; 0x05
    14c6:	36 81       	ldd	r19, Z+6	; 0x06
    14c8:	80 91 88 01 	lds	r24, 0x0188
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	d9 01       	movw	r26, r18
    14d2:	a8 0f       	add	r26, r24
    14d4:	b9 1f       	adc	r27, r25
    14d6:	eb eb       	ldi	r30, 0xBB	; 187
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14de:	ec eb       	ldi	r30, 0xBC	; 188
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	84 e9       	ldi	r24, 0x94	; 148
    14e4:	80 83       	st	Z, r24
		sei();
    14e6:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14ee:	ec eb       	ldi	r30, 0xBC	; 188
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	84 e9       	ldi	r24, 0x94	; 148
    14f4:	80 83       	st	Z, r24
		sei();
    14f6:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    14f8:	1b 82       	std	Y+3, r1	; 0x03
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <i2cReadWithCommand+0x6>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <i2cReadWithCommand+0x8>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    151a:	ec eb       	ldi	r30, 0xBC	; 188
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	84 ea       	ldi	r24, 0xA4	; 164
    1520:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    1522:	ec eb       	ldi	r30, 0xBC	; 188
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	dc f7       	brge	.-10     	; 0x1522 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    152c:	ab eb       	ldi	r26, 0xBB	; 187
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	80 81       	ld	r24, Z
    1536:	88 0f       	add	r24, r24
    1538:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    153a:	ec eb       	ldi	r30, 0xBC	; 188
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	84 e8       	ldi	r24, 0x84	; 132
    1540:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1542:	ec eb       	ldi	r30, 0xBC	; 188
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	88 23       	and	r24, r24
    154a:	dc f7       	brge	.-10     	; 0x1542 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    154c:	e9 eb       	ldi	r30, 0xB9	; 185
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	88 7f       	andi	r24, 0xF8	; 248
    1558:	90 70       	andi	r25, 0x00	; 0
    155a:	80 34       	cpi	r24, 0x40	; 64
    155c:	91 05       	cpc	r25, r1
    155e:	09 f0       	breq	.+2      	; 0x1562 <i2cReadWithCommand+0x5a>
    1560:	a0 c0       	rjmp	.+320    	; 0x16a2 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1562:	eb eb       	ldi	r30, 0xBB	; 187
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    156a:	ec eb       	ldi	r30, 0xBC	; 188
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	84 e8       	ldi	r24, 0x84	; 132
    1570:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1572:	ec eb       	ldi	r30, 0xBC	; 188
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 23       	and	r24, r24
    157a:	dc f7       	brge	.-10     	; 0x1572 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    157c:	e9 eb       	ldi	r30, 0xB9	; 185
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	88 7f       	andi	r24, 0xF8	; 248
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	88 32       	cpi	r24, 0x28	; 40
    158c:	91 05       	cpc	r25, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <i2cReadWithCommand+0x8a>
    1590:	88 c0       	rjmp	.+272    	; 0x16a2 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1592:	ec eb       	ldi	r30, 0xBC	; 188
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	84 ea       	ldi	r24, 0xA4	; 164
    1598:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    159a:	ec eb       	ldi	r30, 0xBC	; 188
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 23       	and	r24, r24
    15a2:	dc f7       	brge	.-10     	; 0x159a <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    15a4:	e9 eb       	ldi	r30, 0xB9	; 185
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 7f       	andi	r24, 0xF8	; 248
    15b0:	90 70       	andi	r25, 0x00	; 0
    15b2:	80 31       	cpi	r24, 0x10	; 16
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <i2cReadWithCommand+0xb2>
    15b8:	74 c0       	rjmp	.+232    	; 0x16a2 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    15ba:	ab eb       	ldi	r26, 0xBB	; 187
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	80 81       	ld	r24, Z
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    15d0:	ec eb       	ldi	r30, 0xBC	; 188
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	84 e8       	ldi	r24, 0x84	; 132
    15d6:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    15d8:	ec eb       	ldi	r30, 0xBC	; 188
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	88 23       	and	r24, r24
    15e0:	dc f7       	brge	.-10     	; 0x15d8 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    15e2:	10 92 88 01 	sts	0x0188, r1
    15e6:	28 c0       	rjmp	.+80     	; 0x1638 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15e8:	ec eb       	ldi	r30, 0xBC	; 188
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	84 ec       	ldi	r24, 0xC4	; 196
    15ee:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    15f0:	ec eb       	ldi	r30, 0xBC	; 188
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	88 23       	and	r24, r24
    15f8:	dc f7       	brge	.-10     	; 0x15f0 <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    15fa:	e9 eb       	ldi	r30, 0xB9	; 185
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	88 7f       	andi	r24, 0xF8	; 248
    1606:	90 70       	andi	r25, 0x00	; 0
    1608:	80 35       	cpi	r24, 0x50	; 80
    160a:	91 05       	cpc	r25, r1
    160c:	09 f0       	breq	.+2      	; 0x1610 <i2cReadWithCommand+0x108>
    160e:	49 c0       	rjmp	.+146    	; 0x16a2 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    1610:	e9 81       	ldd	r30, Y+1	; 0x01
    1612:	fa 81       	ldd	r31, Y+2	; 0x02
    1614:	25 81       	ldd	r18, Z+5	; 0x05
    1616:	36 81       	ldd	r19, Z+6	; 0x06
    1618:	80 91 88 01 	lds	r24, 0x0188
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	d9 01       	movw	r26, r18
    1622:	a8 0f       	add	r26, r24
    1624:	b9 1f       	adc	r27, r25
    1626:	eb eb       	ldi	r30, 0xBB	; 187
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    162e:	80 91 88 01 	lds	r24, 0x0188
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	80 93 88 01 	sts	0x0188, r24
    1638:	80 91 88 01 	lds	r24, 0x0188
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	87 81       	ldd	r24, Z+7	; 0x07
    1646:	90 85       	ldd	r25, Z+8	; 0x08
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	28 17       	cp	r18, r24
    164c:	39 07       	cpc	r19, r25
    164e:	60 f2       	brcs	.-104    	; 0x15e8 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    1650:	ec eb       	ldi	r30, 0xBC	; 188
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	84 e8       	ldi	r24, 0x84	; 132
    1656:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1658:	ec eb       	ldi	r30, 0xBC	; 188
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	88 23       	and	r24, r24
    1660:	dc f7       	brge	.-10     	; 0x1658 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1662:	e9 eb       	ldi	r30, 0xB9	; 185
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	88 7f       	andi	r24, 0xF8	; 248
    166e:	90 70       	andi	r25, 0x00	; 0
    1670:	88 35       	cpi	r24, 0x58	; 88
    1672:	91 05       	cpc	r25, r1
    1674:	b1 f4       	brne	.+44     	; 0x16a2 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	25 81       	ldd	r18, Z+5	; 0x05
    167c:	36 81       	ldd	r19, Z+6	; 0x06
    167e:	80 91 88 01 	lds	r24, 0x0188
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	d9 01       	movw	r26, r18
    1688:	a8 0f       	add	r26, r24
    168a:	b9 1f       	adc	r27, r25
    168c:	eb eb       	ldi	r30, 0xBB	; 187
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    1694:	ec eb       	ldi	r30, 0xBC	; 188
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	84 e9       	ldi	r24, 0x94	; 148
    169a:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	8c 83       	std	Y+4, r24	; 0x04
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    16a2:	ec eb       	ldi	r30, 0xBC	; 188
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	84 e9       	ldi	r24, 0x94	; 148
    16a8:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    16aa:	1c 82       	std	Y+4, r1	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <LED>:
/// LEDëÄçÏä÷êî 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->è¡ìîÅ@1->ì_ìî </param>
void LED(unsigned char target, bool status)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <LED+0x6>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	58 f5       	brcc	.+86     	; 0x1726 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	88 23       	and	r24, r24
    16d4:	a9 f0       	breq	.+42     	; 0x1700 <LED+0x44>
    16d6:	a2 e2       	ldi	r26, 0x22	; 34
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e2       	ldi	r30, 0x22	; 34
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <LED+0x38>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <LED+0x34>
    16f8:	80 95       	com	r24
    16fa:	84 23       	and	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	13 c0       	rjmp	.+38     	; 0x1726 <LED+0x6a>
	else		sbi(PORTA,target);
    1700:	a2 e2       	ldi	r26, 0x22	; 34
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e2       	ldi	r30, 0x22	; 34
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <LED+0x62>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <LED+0x5e>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <LEDInit>:

void LEDInit(void)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    1738:	a1 e2       	ldi	r26, 0x21	; 33
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e1 e2       	ldi	r30, 0x21	; 33
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	87 60       	ori	r24, 0x07	; 7
    1744:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1746:	a2 e2       	ldi	r26, 0x22	; 34
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e2 e2       	ldi	r30, 0x22	; 34
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	87 60       	ori	r24, 0x07	; 7
    1752:	8c 93       	st	X, r24
}
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <wait_ms>:
#include <avr/io.h>
void wait_ms(uint16_t t){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <wait_ms+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <wait_ms+0x8>
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9b 83       	std	Y+3, r25	; 0x03
    176a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tt;
	TCCR2A = 0;
    176c:	e0 eb       	ldi	r30, 0xB0	; 176
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	10 82       	st	Z, r1
	TCCR2B = 1;
    1772:	e1 eb       	ldi	r30, 0xB1	; 177
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 83       	st	Z, r24
	OCR2A = 200;
    177a:	e3 eb       	ldi	r30, 0xB3	; 179
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	80 83       	st	Z, r24

	for(tt=100;t--;){
    1782:	84 e6       	ldi	r24, 0x64	; 100
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	20 c0       	rjmp	.+64     	; 0x17c8 <wait_ms+0x6e>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
    1788:	e2 eb       	ldi	r30, 0xB2	; 178
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	82 70       	andi	r24, 0x02	; 2
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	b9 f3       	breq	.-18     	; 0x178e <wait_ms+0x34>
			TIFR2 |= 0x02;
    17a0:	a7 e3       	ldi	r26, 0x37	; 55
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e7 e3       	ldi	r30, 0x37	; 55
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	8c 93       	st	X, r24
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
		while(tt--){
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	88 23       	and	r24, r24
    17b6:	11 f0       	breq	.+4      	; 0x17bc <wait_ms+0x62>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	91 50       	subi	r25, 0x01	; 1
    17c2:	99 83       	std	Y+1, r25	; 0x01
    17c4:	88 23       	and	r24, r24
    17c6:	01 f7       	brne	.-64     	; 0x1788 <wait_ms+0x2e>
	uint8_t tt;
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
    17c8:	1c 82       	std	Y+4, r1	; 0x04
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <wait_ms+0x7c>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	8c 83       	std	Y+4, r24	; 0x04
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	9b 81       	ldd	r25, Y+3	; 0x03
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9b 83       	std	Y+3, r25	; 0x03
    17de:	8a 83       	std	Y+2, r24	; 0x02
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	88 23       	and	r24, r24
    17e4:	21 f7       	brne	.-56     	; 0x17ae <wait_ms+0x54>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
			TIFR2 |= 0x02;
		}
	}
}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <wait_us>:
void wait_us(uint16_t t){
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <wait_us+0x6>
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
	TCCR2A = 0;
    1806:	e0 eb       	ldi	r30, 0xB0	; 176
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	10 82       	st	Z, r1
	TCCR2B = 1;
    180c:	e1 eb       	ldi	r30, 0xB1	; 177
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	80 83       	st	Z, r24
	OCR2A = 20;
    1814:	e3 eb       	ldi	r30, 0xB3	; 179
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	84 e1       	ldi	r24, 0x14	; 20
    181a:	80 83       	st	Z, r24
    181c:	13 c0       	rjmp	.+38     	; 0x1844 <wait_us+0x4e>
	while(t--){
		for(TCNT2=0;!(TIFR2&0x02););
    181e:	e2 eb       	ldi	r30, 0xB2	; 178
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	10 82       	st	Z, r1
    1824:	e7 e3       	ldi	r30, 0x37	; 55
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	82 70       	andi	r24, 0x02	; 2
    1830:	90 70       	andi	r25, 0x00	; 0
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	b9 f3       	breq	.-18     	; 0x1824 <wait_us+0x2e>
		TIFR2 |= 0x02;
    1836:	a7 e3       	ldi	r26, 0x37	; 55
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e7 e3       	ldi	r30, 0x37	; 55
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	82 60       	ori	r24, 0x02	; 2
    1842:	8c 93       	st	X, r24
}
void wait_us(uint16_t t){
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 20;
	while(t--){
    1844:	1b 82       	std	Y+3, r1	; 0x03
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	11 f0       	breq	.+4      	; 0x1852 <wait_us+0x5c>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	8b 83       	std	Y+3, r24	; 0x03
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 23       	and	r24, r24
    1860:	f1 f6       	brne	.-68     	; 0x181e <wait_us+0x28>
		for(TCNT2=0;!(TIFR2&0x02););
		TIFR2 |= 0x02;
	}
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <mDrive+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <mDrive+0x8>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <mDrive+0xa>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	6c 83       	std	Y+4, r22	; 0x04
    1882:	4d 83       	std	Y+5, r20	; 0x05
    1884:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1886:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1888:	8e 81       	ldd	r24, Y+6	; 0x06
    188a:	85 30       	cpi	r24, 0x05	; 5
    188c:	50 f5       	brcc	.+84     	; 0x18e2 <mDrive+0x74>
	if(duty>100) duty=100;
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	85 36       	cpi	r24, 0x65	; 101
    1892:	14 f0       	brlt	.+4      	; 0x1898 <mDrive+0x2a>
    1894:	84 e6       	ldi	r24, 0x64	; 100
    1896:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	8c 39       	cpi	r24, 0x9C	; 156
    189c:	14 f4       	brge	.+4      	; 0x18a2 <mDrive+0x34>
    189e:	8c e9       	ldi	r24, 0x9C	; 156
    18a0:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <mDrive+0x42>
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	81 95       	neg	r24
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	88 23       	and	r24, r24
    18b4:	11 f4       	brne	.+4      	; 0x18ba <mDrive+0x4c>
    18b6:	19 82       	std	Y+1, r1	; 0x01
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	19 f4       	brne	.+6      	; 0x18c6 <mDrive+0x58>
    18c0:	8f e7       	ldi	r24, 0x7F	; 127
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <mDrive+0x5c>
	else w_data = duty;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    18ca:	ea 81       	ldd	r30, Y+2	; 0x02
    18cc:	fb 81       	ldd	r31, Y+3	; 0x03
    18ce:	21 81       	ldd	r18, Z+1	; 0x01
    18d0:	32 81       	ldd	r19, Z+2	; 0x02
    18d2:	8e 81       	ldd	r24, Y+6	; 0x06
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	f9 01       	movw	r30, r18
    18da:	e8 0f       	add	r30, r24
    18dc:	f9 1f       	adc	r31, r25
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	80 83       	st	Z, r24
}
    18e2:	26 96       	adiw	r28, 0x06	; 6
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <mAngle+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <mAngle+0x8>
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	7c 83       	std	Y+4, r23	; 0x04
    1908:	6b 83       	std	Y+3, r22	; 0x03
    190a:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	88 23       	and	r24, r24
    1910:	a9 f0       	breq	.+42     	; 0x193c <mAngle+0x48>
		angle/=6;
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	26 e0       	ldi	r18, 0x06	; 6
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	b9 01       	movw	r22, r18
    191c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__divmodhi4>
    1920:	cb 01       	movw	r24, r22
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	92 81       	ldd	r25, Z+2	; 0x02
    192e:	fc 01       	movw	r30, r24
    1930:	34 96       	adiw	r30, 0x04	; 4
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	8f 71       	andi	r24, 0x1F	; 31
    1936:	80 64       	ori	r24, 0x40	; 64
    1938:	80 83       	st	Z, r24
    193a:	07 c0       	rjmp	.+14     	; 0x194a <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	81 81       	ldd	r24, Z+1	; 0x01
    1942:	92 81       	ldd	r25, Z+2	; 0x02
    1944:	fc 01       	movw	r30, r24
    1946:	34 96       	adiw	r30, 0x04	; 4
    1948:	10 82       	st	Z, r1
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <aDrive+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <aDrive+0x8>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	6b 83       	std	Y+3, r22	; 0x03
    196c:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	88 23       	and	r24, r24
    1972:	41 f0       	breq	.+16     	; 0x1984 <aDrive+0x2a>
    1974:	e9 81       	ldd	r30, Y+1	; 0x01
    1976:	fa 81       	ldd	r31, Y+2	; 0x02
    1978:	01 80       	ldd	r0, Z+1	; 0x01
    197a:	f2 81       	ldd	r31, Z+2	; 0x02
    197c:	e0 2d       	mov	r30, r0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	80 83       	st	Z, r24
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	01 80       	ldd	r0, Z+1	; 0x01
    198a:	f2 81       	ldd	r31, Z+2	; 0x02
    198c:	e0 2d       	mov	r30, r0
    198e:	10 82       	st	Z, r1

}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    19a6:	a4 e2       	ldi	r26, 0x24	; 36
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e4 e2       	ldi	r30, 0x24	; 36
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 7f       	andi	r24, 0xF0	; 240
    19b2:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    19b4:	a5 e2       	ldi	r26, 0x25	; 37
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e2       	ldi	r30, 0x25	; 37
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8f 60       	ori	r24, 0x0F	; 15
    19c0:	8c 93       	st	X, r24
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <Switch>:
/// ÉXÉCÉbÉ`íléÊìæä÷êî 
/// </summary>
/// <param name="target"> ÉÅÉCÉìäÓî’è„ÇÃÉXÉâÉCÉhÉXÉCÉbÉ`î‘çÜÅ@1Å`4 </param>
/// <return> ÉXÉCÉbÉ`ÇÃèÛë‘ ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <Switch+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    19d4:	e3 e2       	ldi	r30, 0x23	; 35
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 95       	com	r24
    19dc:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	a9 01       	movw	r20, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <Switch+0x2c>
    19f0:	55 95       	asr	r21
    19f2:	47 95       	ror	r20
    19f4:	8a 95       	dec	r24
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <Switch+0x28>
    19f8:	ca 01       	movw	r24, r20
    19fa:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	90 70       	andi	r25, 0x00	; 0
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <Group>:

__inline__ unsigned char Group(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1a18:	e3 e2       	ldi	r30, 0x23	; 35
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 95       	com	r24
    1a20:	86 95       	lsr	r24
    1a22:	86 95       	lsr	r24
    1a24:	83 70       	andi	r24, 0x03	; 3
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <Channel>:

__inline__ unsigned char Channel(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1a34:	e3 e2       	ldi	r30, 0x23	; 35
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 95       	com	r24
    1a3c:	83 70       	andi	r24, 0x03	; 3
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	89 27       	eor	r24, r25
    1a56:	88 23       	and	r24, r24
    1a58:	71 f4       	brne	.+28     	; 0x1a76 <beep+0x32>
    1a5a:	80 91 32 01 	lds	r24, 0x0132
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	89 27       	eor	r24, r25
    1a62:	88 23       	and	r24, r24
    1a64:	41 f4       	brne	.+16     	; 0x1a76 <beep+0x32>
    1a66:	a2 e2       	ldi	r26, 0x22	; 34
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e2 e2       	ldi	r30, 0x22	; 34
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 60       	ori	r24, 0x08	; 8
    1a72:	8c 93       	st	X, r24
    1a74:	0b c0       	rjmp	.+22     	; 0x1a8c <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1a76:	80 91 32 01 	lds	r24, 0x0132
    1a7a:	88 23       	and	r24, r24
    1a7c:	39 f0       	breq	.+14     	; 0x1a8c <beep+0x48>
    1a7e:	a2 e2       	ldi	r26, 0x22	; 34
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e2 e2       	ldi	r30, 0x22	; 34
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	87 7f       	andi	r24, 0xF7	; 247
    1a8a:	8c 93       	st	X, r24
}
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <BeepInit>:

void BeepInit()
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1a9c:	a1 e2       	ldi	r26, 0x21	; 33
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e1 e2       	ldi	r30, 0x21	; 33
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	88 60       	ori	r24, 0x08	; 8
    1aa8:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1aaa:	a2 e2       	ldi	r26, 0x22	; 34
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e2 e2       	ldi	r30, 0x22	; 34
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	87 7f       	andi	r24, 0xF7	; 247
    1ab6:	8c 93       	st	X, r24
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <i2cCheck>:

void i2cCheck(bool flag)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	69 81       	ldd	r22, Y+1	; 0x01
    1ace:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LED>
	beep(!(flag));
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 27       	eor	r24, r25
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
	if(!flag){
    1ae0:	99 81       	ldd	r25, Y+1	; 0x01
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	89 27       	eor	r24, r25
    1ae6:	88 23       	and	r24, r24
    1ae8:	31 f0       	breq	.+12     	; 0x1af6 <i2cCheck+0x38>
		PORTC = 0x04;
    1aea:	e8 e2       	ldi	r30, 0x28	; 40
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	80 83       	st	Z, r24
		cli();
    1af2:	f8 94       	cli
    1af4:	ff cf       	rjmp	.-2      	; 0x1af4 <i2cCheck+0x36>
		while(1);
	}
}
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <Emergency+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <Emergency+0x8>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	71 f4       	brne	.+28     	; 0x1b32 <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1b16:	ea 81       	ldd	r30, Y+2	; 0x02
    1b18:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1a:	01 80       	ldd	r0, Z+1	; 0x01
    1b1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	8a e6       	ldi	r24, 0x6A	; 106
    1b22:	80 83       	st	Z, r24
		beep(1);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
		eflag=1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	80 93 9b 01 	sts	0x019B, r24
    1b30:	16 c0       	rjmp	.+44     	; 0x1b5e <Emergency+0x60>
		}
	else if(act==E_OFF){
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	69 f4       	brne	.+26     	; 0x1b52 <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1b38:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3c:	01 80       	ldd	r0, Z+1	; 0x01
    1b3e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b40:	e0 2d       	mov	r30, r0
    1b42:	85 e5       	ldi	r24, 0x55	; 85
    1b44:	80 83       	st	Z, r24
		beep(0);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
		eflag=0;
    1b4c:	10 92 9b 01 	sts	0x019B, r1
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1b52:	ea 81       	ldd	r30, Y+2	; 0x02
    1b54:	fb 81       	ldd	r31, Y+3	; 0x03
    1b56:	01 80       	ldd	r0, Z+1	; 0x01
    1b58:	f2 81       	ldd	r31, Z+2	; 0x02
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	9b 81       	ldd	r25, Y+3	; 0x03
    1b62:	0e 94 da 09 	call	0x13b4	; 0x13b4 <i2cRead>
    1b66:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1b68:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6c:	05 80       	ldd	r0, Z+5	; 0x05
    1b6e:	f6 81       	ldd	r31, Z+6	; 0x06
    1b70:	e0 2d       	mov	r30, r0
    1b72:	80 81       	ld	r24, Z
    1b74:	8a 36       	cpi	r24, 0x6A	; 106
    1b76:	31 f4       	brne	.+12     	; 0x1b84 <Emergency+0x86>
		beep(1);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <beep>
		eflag=1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 9b 01 	sts	0x019B, r24
		}
	if(*(emergency->read.buf)==0x55){
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	05 80       	ldd	r0, Z+5	; 0x05
    1b8a:	f6 81       	ldd	r31, Z+6	; 0x06
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	80 81       	ld	r24, Z
    1b90:	85 35       	cpi	r24, 0x55	; 85
    1b92:	d9 f4       	brne	.+54     	; 0x1bca <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1b94:	a0 e6       	ldi	r26, 0x60	; 96
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e0 e6       	ldi	r30, 0x60	; 96
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 60       	ori	r24, 0x08	; 8
    1ba0:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1ba2:	a0 e6       	ldi	r26, 0x60	; 96
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e0 e6       	ldi	r30, 0x60	; 96
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8f 7b       	andi	r24, 0xBF	; 191
    1bae:	8c 93       	st	X, r24
		wdt_reset();
    1bb0:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1bb2:	88 e1       	ldi	r24, 0x18	; 24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	28 e0       	ldi	r18, 0x08	; 8
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	a8 95       	wdr
    1bbe:	80 93 60 00 	sts	0x0060, r24
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	20 93 60 00 	sts	0x0060, r18
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <EmergencyStatus>:

bool EmergencyStatus()
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1be4:	80 91 9b 01 	lds	r24, 0x019B
    1be8:	88 23       	and	r24, r24
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <EmergencyStatus+0x16>
    1bec:	19 82       	std	Y+1, r1	; 0x01
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <EmergencyStatus+0x1a>
	else return 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <__divmodhi4>:
    1bfe:	97 fb       	bst	r25, 7
    1c00:	09 2e       	mov	r0, r25
    1c02:	07 26       	eor	r0, r23
    1c04:	0a d0       	rcall	.+20     	; 0x1c1a <__divmodhi4_neg1>
    1c06:	77 fd       	sbrc	r23, 7
    1c08:	04 d0       	rcall	.+8      	; 0x1c12 <__divmodhi4_neg2>
    1c0a:	0c d0       	rcall	.+24     	; 0x1c24 <__udivmodhi4>
    1c0c:	06 d0       	rcall	.+12     	; 0x1c1a <__divmodhi4_neg1>
    1c0e:	00 20       	and	r0, r0
    1c10:	1a f4       	brpl	.+6      	; 0x1c18 <__divmodhi4_exit>

00001c12 <__divmodhi4_neg2>:
    1c12:	70 95       	com	r23
    1c14:	61 95       	neg	r22
    1c16:	7f 4f       	sbci	r23, 0xFF	; 255

00001c18 <__divmodhi4_exit>:
    1c18:	08 95       	ret

00001c1a <__divmodhi4_neg1>:
    1c1a:	f6 f7       	brtc	.-4      	; 0x1c18 <__divmodhi4_exit>
    1c1c:	90 95       	com	r25
    1c1e:	81 95       	neg	r24
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	08 95       	ret

00001c24 <__udivmodhi4>:
    1c24:	aa 1b       	sub	r26, r26
    1c26:	bb 1b       	sub	r27, r27
    1c28:	51 e1       	ldi	r21, 0x11	; 17
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <__udivmodhi4_ep>

00001c2c <__udivmodhi4_loop>:
    1c2c:	aa 1f       	adc	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	a6 17       	cp	r26, r22
    1c32:	b7 07       	cpc	r27, r23
    1c34:	10 f0       	brcs	.+4      	; 0x1c3a <__udivmodhi4_ep>
    1c36:	a6 1b       	sub	r26, r22
    1c38:	b7 0b       	sbc	r27, r23

00001c3a <__udivmodhi4_ep>:
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	5a 95       	dec	r21
    1c40:	a9 f7       	brne	.-22     	; 0x1c2c <__udivmodhi4_loop>
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	08 95       	ret

00001c4c <_exit>:
    1c4c:	f8 94       	cli

00001c4e <__stop_program>:
    1c4e:	ff cf       	rjmp	.-2      	; 0x1c4e <__stop_program>
