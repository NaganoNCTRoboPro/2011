
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001cca  00001d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800138  00800138  00001d96  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000362  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b2  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  0000382a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015e9  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  000057b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d3  00000000  00000000  00005b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_20>
      54:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_28>
      74:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ec       	ldi	r30, 0xCA	; 202
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 33       	cpi	r26, 0x38	; 56
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a8 e3       	ldi	r26, 0x38	; 56
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3a       	cpi	r26, 0xA2	; 162
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define AIR	  0x40
#define THROW 0x40
#define CATCH 0x50

int main(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	c6 54       	subi	r28, 0x46	; 70
      dc:	d0 40       	sbci	r29, 0x00	; 0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
	union controller_data *controller;
	int8_t slaveBuf[12]={0};
      e8:	8c e0       	ldi	r24, 0x0C	; 12
      ea:	fe 01       	movw	r30, r28
      ec:	76 96       	adiw	r30, 0x16	; 22
      ee:	df 01       	movw	r26, r30
      f0:	98 2f       	mov	r25, r24
      f2:	1d 92       	st	X+, r1
      f4:	9a 95       	dec	r25
      f6:	e9 f7       	brne	.-6      	; 0xf2 <main+0x24>
	int16_t blueDuty;
	int16_t orangeDuty;
	int16_t count = 0;
*/

	Slave Motor = {MOTOR,{(int8_t*)&slaveBuf[0],4},{(int8_t*)&slaveBuf[4],4}};
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	8a a3       	std	Y+34, r24	; 0x22
      fc:	ce 01       	movw	r24, r28
      fe:	46 96       	adiw	r24, 0x16	; 22
     100:	9c a3       	std	Y+36, r25	; 0x24
     102:	8b a3       	std	Y+35, r24	; 0x23
     104:	84 e0       	ldi	r24, 0x04	; 4
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	9e a3       	std	Y+38, r25	; 0x26
     10a:	8d a3       	std	Y+37, r24	; 0x25
     10c:	ce 01       	movw	r24, r28
     10e:	46 96       	adiw	r24, 0x16	; 22
     110:	04 96       	adiw	r24, 0x04	; 4
     112:	98 a7       	std	Y+40, r25	; 0x28
     114:	8f a3       	std	Y+39, r24	; 0x27
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	9a a7       	std	Y+42, r25	; 0x2a
     11c:	89 a7       	std	Y+41, r24	; 0x29
	Slave Air	= {AIR,{(int8_t*)&slaveBuf[8],1},{(int8_t*)&slaveBuf[9],1}};
     11e:	80 e4       	ldi	r24, 0x40	; 64
     120:	8b a7       	std	Y+43, r24	; 0x2b
     122:	ce 01       	movw	r24, r28
     124:	46 96       	adiw	r24, 0x16	; 22
     126:	08 96       	adiw	r24, 0x08	; 8
     128:	9d a7       	std	Y+45, r25	; 0x2d
     12a:	8c a7       	std	Y+44, r24	; 0x2c
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	9f a7       	std	Y+47, r25	; 0x2f
     132:	8e a7       	std	Y+46, r24	; 0x2e
     134:	ce 01       	movw	r24, r28
     136:	46 96       	adiw	r24, 0x16	; 22
     138:	09 96       	adiw	r24, 0x09	; 9
     13a:	99 ab       	std	Y+49, r25	; 0x31
     13c:	88 ab       	std	Y+48, r24	; 0x30
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	9b ab       	std	Y+51, r25	; 0x33
     144:	8a ab       	std	Y+50, r24	; 0x32
	Slave Emer	= {ESTOP,{(int8_t*)&slaveBuf[10],1},{(int8_t*)&slaveBuf[11],1}};
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	8c ab       	std	Y+52, r24	; 0x34
     14a:	ce 01       	movw	r24, r28
     14c:	46 96       	adiw	r24, 0x16	; 22
     14e:	0a 96       	adiw	r24, 0x0a	; 10
     150:	9e ab       	std	Y+54, r25	; 0x36
     152:	8d ab       	std	Y+53, r24	; 0x35
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	98 af       	std	Y+56, r25	; 0x38
     15a:	8f ab       	std	Y+55, r24	; 0x37
     15c:	ce 01       	movw	r24, r28
     15e:	46 96       	adiw	r24, 0x16	; 22
     160:	0b 96       	adiw	r24, 0x0b	; 11
     162:	9a af       	std	Y+58, r25	; 0x3a
     164:	89 af       	std	Y+57, r24	; 0x39
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	9c af       	std	Y+60, r25	; 0x3c
     16c:	8b af       	std	Y+59, r24	; 0x3b

	/*この辺にi2c関連の初期化をすればいいと思う*/

	bool i2cStatus;
	initCtrlData();
     16e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <initCtrlData>

	TCCR2A = 0;
     172:	e0 eb       	ldi	r30, 0xB0	; 176
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	10 82       	st	Z, r1
	TCCR2B = 1;
     178:	e1 eb       	ldi	r30, 0xB1	; 177
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 83       	st	Z, r24
/*---------------------------------------------------------------*/
// 						書きかえちゃダメよ！
/*---------------------------------------------------------------*/
	LEDInit();
     180:	0e 94 27 0c 	call	0x184e	; 0x184e <LEDInit>
	SwitchInit();
     184:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <SwitchInit>
	BeepInit();
     188:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <BeepInit>
	DDRC |= 0x04;
     18c:	a7 e2       	ldi	r26, 0x27	; 39
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e7 e2       	ldi	r30, 0x27	; 39
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	84 60       	ori	r24, 0x04	; 4
     198:	8c 93       	st	X, r24
	PORTC = 0x04;
     19a:	e8 e2       	ldi	r30, 0x28	; 40
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	80 83       	st	Z, r24
	
		
	initI2CMaster(100);
     1a2:	84 e6       	ldi	r24, 0x64	; 100
     1a4:	0e 94 b0 09 	call	0x1360	; 0x1360 <initI2CMaster>

	wdt_reset();
     1a8:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     1aa:	88 e1       	ldi	r24, 0x18	; 24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2d e0       	ldi	r18, 0x0D	; 13
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	a8 95       	wdr
     1b6:	80 93 60 00 	sts	0x0060, r24
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	20 93 60 00 	sts	0x0060, r18
	
	uart_init(1,UART_TE,BR_115200);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	68 e0       	ldi	r22, 0x08	; 8
     1c6:	4a e0       	ldi	r20, 0x0A	; 10
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 38 06 	call	0xc70	; 0xc70 <uart_init>
	uart_setbuffer(0,buf,36);
     1ce:	28 e3       	ldi	r18, 0x38	; 56
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	b9 01       	movw	r22, r18
     1d8:	44 e2       	ldi	r20, 0x24	; 36
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	0e 94 cb 06 	call	0xd96	; 0xd96 <uart_setbuffer>
	wait_ms(100);
     1e0:	84 e6       	ldi	r24, 0x64	; 100
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <wait_ms>
	uart_init(0,UART_RE|UART_TE,BR_19200);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	68 e1       	ldi	r22, 0x18	; 24
     1ee:	40 e4       	ldi	r20, 0x40	; 64
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	0e 94 38 06 	call	0xc70	; 0xc70 <uart_init>
	mu2_command("EI","08");
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	23 e0       	ldi	r18, 0x03	; 3
     1fc:	31 e0       	ldi	r19, 0x01	; 1
     1fe:	b9 01       	movw	r22, r18
     200:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mu2_command>
	mu2_command("DI","80");
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	29 e0       	ldi	r18, 0x09	; 9
     20a:	31 e0       	ldi	r19, 0x01	; 1
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mu2_command>
	mu2_command("GI","04");
     212:	8c e0       	ldi	r24, 0x0C	; 12
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	2f e0       	ldi	r18, 0x0F	; 15
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	b9 01       	movw	r22, r18
     21c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mu2_command>
	mu2_command("CH","2E");
     220:	82 e1       	ldi	r24, 0x12	; 18
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	25 e1       	ldi	r18, 0x15	; 21
     226:	31 e0       	ldi	r19, 0x01	; 1
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mu2_command>
	mu2_command("BR","48");
     22e:	88 e1       	ldi	r24, 0x18	; 24
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	2b e1       	ldi	r18, 0x1B	; 27
     234:	31 e0       	ldi	r19, 0x01	; 1
     236:	b9 01       	movw	r22, r18
     238:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mu2_command>
	uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	60 e9       	ldi	r22, 0x90	; 144
     242:	43 e0       	ldi	r20, 0x03	; 3
     244:	51 e0       	ldi	r21, 0x01	; 1
     246:	0e 94 38 06 	call	0xc70	; 0xc70 <uart_init>
	LED(0,false);LED(1,false);LED(2,false);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
	sei();
     262:	78 94       	sei
	wait_ms(1500);
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	95 e0       	ldi	r25, 0x05	; 5
     268:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <wait_ms>
	PORTC &= 0xFB;
     26c:	a8 e2       	ldi	r26, 0x28	; 40
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e8 e2       	ldi	r30, 0x28	; 40
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	8b 7f       	andi	r24, 0xFB	; 251
     278:	8c 93       	st	X, r24
//	wait_ms(25);
	TCCR1A = 0;
     27a:	e0 e8       	ldi	r30, 0x80	; 128
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
	TCCR1B = 5;
     280:	e1 e8       	ldi	r30, 0x81	; 129
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	80 83       	st	Z, r24
	TIMSK1 = 1;
     288:	ef e6       	ldi	r30, 0x6F	; 111
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 83       	st	Z, r24
	TCNT1 = 0;
     290:	e4 e8       	ldi	r30, 0x84	; 132
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	11 82       	std	Z+1, r1	; 0x01
     296:	10 82       	st	Z, r1

// Entry
// 	carveEnable = false
	carveEnable = false;
     298:	1b 8a       	std	Y+19, r1	; 0x13
// 	carveEnableCount = 0
	carveEnableCount = 0;
     29a:	1a 8a       	std	Y+18, r1	; 0x12
     29c:	19 8a       	std	Y+17, r1	; 0x11
//	timeCount = 0
	timeCount = 0;
     29e:	18 8a       	std	Y+16, r1	; 0x10
     2a0:	1f 86       	std	Y+15, r1	; 0x0f

	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     2a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Toggle_RC_Rx_Buffer>
     2a6:	9d 8b       	std	Y+21, r25	; 0x15
     2a8:	8c 8b       	std	Y+20, r24	; 0x14
		if(controller->detail.Button.HOME&&controller->detail.Button.X && controller->detail.Button.UP&&
     2aa:	ec 89       	ldd	r30, Y+20	; 0x14
     2ac:	fd 89       	ldd	r31, Y+21	; 0x15
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	82 70       	andi	r24, 0x02	; 2
     2b2:	88 23       	and	r24, r24
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0x1ea>
     2b6:	c2 c0       	rjmp	.+388    	; 0x43c <main+0x36e>
     2b8:	ec 89       	ldd	r30, Y+20	; 0x14
     2ba:	fd 89       	ldd	r31, Y+21	; 0x15
     2bc:	80 81       	ld	r24, Z
     2be:	81 70       	andi	r24, 0x01	; 1
     2c0:	88 23       	and	r24, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x1f8>
     2c4:	bb c0       	rjmp	.+374    	; 0x43c <main+0x36e>
     2c6:	ec 89       	ldd	r30, Y+20	; 0x14
     2c8:	fd 89       	ldd	r31, Y+21	; 0x15
     2ca:	80 81       	ld	r24, Z
     2cc:	80 71       	andi	r24, 0x10	; 16
     2ce:	88 23       	and	r24, r24
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <main+0x206>
     2d2:	b4 c0       	rjmp	.+360    	; 0x43c <main+0x36e>
     2d4:	ec 89       	ldd	r30, Y+20	; 0x14
     2d6:	fd 89       	ldd	r31, Y+21	; 0x15
     2d8:	82 81       	ldd	r24, Z+2	; 0x02
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	8d 30       	cpi	r24, 0x0D	; 13
     2e2:	91 05       	cpc	r25, r1
     2e4:	0c f4       	brge	.+2      	; 0x2e8 <main+0x21a>
     2e6:	aa c0       	rjmp	.+340    	; 0x43c <main+0x36e>
     2e8:	ec 89       	ldd	r30, Y+20	; 0x14
     2ea:	fd 89       	ldd	r31, Y+21	; 0x15
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	8d 30       	cpi	r24, 0x0D	; 13
     2f6:	91 05       	cpc	r25, r1
     2f8:	0c f4       	brge	.+2      	; 0x2fc <main+0x22e>
     2fa:	a0 c0       	rjmp	.+320    	; 0x43c <main+0x36e>
			controller->detail.AnalogL.Y >12 &&	controller->detail.AnalogR.Y >12){
				LED(0,false);LED(1,false);LED(2,false);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				uart_init(0,UART_RE|UART_TE,BR_4800);			
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	68 e1       	ldi	r22, 0x18	; 24
     31a:	43 e0       	ldi	r20, 0x03	; 3
     31c:	51 e0       	ldi	r21, 0x01	; 1
     31e:	0e 94 38 06 	call	0xc70	; 0xc70 <uart_init>
				LED(2,mu2_command_eeprom("EI","08"));		
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	23 e0       	ldi	r18, 0x03	; 3
     328:	31 e0       	ldi	r19, 0x01	; 1
     32a:	b9 01       	movw	r22, r18
     32c:	0e 94 b0 05 	call	0xb60	; 0xb60 <mu2_command_eeprom>
     330:	22 96       	adiw	r28, 0x02	; 2
     332:	8f af       	std	Y+63, r24	; 0x3f
     334:	22 97       	sbiw	r28, 0x02	; 2
     336:	22 96       	adiw	r28, 0x02	; 2
     338:	af ad       	ldd	r26, Y+63	; 0x3f
     33a:	22 97       	sbiw	r28, 0x02	; 2
     33c:	aa 23       	and	r26, r26
     33e:	21 f0       	breq	.+8      	; 0x348 <main+0x27a>
     340:	b1 e0       	ldi	r27, 0x01	; 1
     342:	22 96       	adiw	r28, 0x02	; 2
     344:	bf af       	std	Y+63, r27	; 0x3f
     346:	22 97       	sbiw	r28, 0x02	; 2
     348:	22 96       	adiw	r28, 0x02	; 2
     34a:	9f ad       	ldd	r25, Y+63	; 0x3f
     34c:	22 97       	sbiw	r28, 0x02	; 2
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	69 2f       	mov	r22, r25
     352:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				LED(2,mu2_command_eeprom("DI","80"));		
     356:	86 e0       	ldi	r24, 0x06	; 6
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	29 e0       	ldi	r18, 0x09	; 9
     35c:	31 e0       	ldi	r19, 0x01	; 1
     35e:	b9 01       	movw	r22, r18
     360:	0e 94 b0 05 	call	0xb60	; 0xb60 <mu2_command_eeprom>
     364:	23 96       	adiw	r28, 0x03	; 3
     366:	8f af       	std	Y+63, r24	; 0x3f
     368:	23 97       	sbiw	r28, 0x03	; 3
     36a:	23 96       	adiw	r28, 0x03	; 3
     36c:	8f ad       	ldd	r24, Y+63	; 0x3f
     36e:	23 97       	sbiw	r28, 0x03	; 3
     370:	88 23       	and	r24, r24
     372:	21 f0       	breq	.+8      	; 0x37c <main+0x2ae>
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	23 96       	adiw	r28, 0x03	; 3
     378:	9f af       	std	Y+63, r25	; 0x3f
     37a:	23 97       	sbiw	r28, 0x03	; 3
     37c:	23 96       	adiw	r28, 0x03	; 3
     37e:	9f ad       	ldd	r25, Y+63	; 0x3f
     380:	23 97       	sbiw	r28, 0x03	; 3
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	69 2f       	mov	r22, r25
     386:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				LED(2,mu2_command_eeprom("GI","04"));
     38a:	8c e0       	ldi	r24, 0x0C	; 12
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	2f e0       	ldi	r18, 0x0F	; 15
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	b9 01       	movw	r22, r18
     394:	0e 94 b0 05 	call	0xb60	; 0xb60 <mu2_command_eeprom>
     398:	24 96       	adiw	r28, 0x04	; 4
     39a:	8f af       	std	Y+63, r24	; 0x3f
     39c:	24 97       	sbiw	r28, 0x04	; 4
     39e:	24 96       	adiw	r28, 0x04	; 4
     3a0:	af ad       	ldd	r26, Y+63	; 0x3f
     3a2:	24 97       	sbiw	r28, 0x04	; 4
     3a4:	aa 23       	and	r26, r26
     3a6:	21 f0       	breq	.+8      	; 0x3b0 <main+0x2e2>
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	24 96       	adiw	r28, 0x04	; 4
     3ac:	bf af       	std	Y+63, r27	; 0x3f
     3ae:	24 97       	sbiw	r28, 0x04	; 4
     3b0:	24 96       	adiw	r28, 0x04	; 4
     3b2:	9f ad       	ldd	r25, Y+63	; 0x3f
     3b4:	24 97       	sbiw	r28, 0x04	; 4
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	69 2f       	mov	r22, r25
     3ba:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				LED(2,mu2_command_eeprom("CH","2E"));
     3be:	82 e1       	ldi	r24, 0x12	; 18
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	25 e1       	ldi	r18, 0x15	; 21
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	b9 01       	movw	r22, r18
     3c8:	0e 94 b0 05 	call	0xb60	; 0xb60 <mu2_command_eeprom>
     3cc:	25 96       	adiw	r28, 0x05	; 5
     3ce:	8f af       	std	Y+63, r24	; 0x3f
     3d0:	25 97       	sbiw	r28, 0x05	; 5
     3d2:	25 96       	adiw	r28, 0x05	; 5
     3d4:	8f ad       	ldd	r24, Y+63	; 0x3f
     3d6:	25 97       	sbiw	r28, 0x05	; 5
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <main+0x316>
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	25 96       	adiw	r28, 0x05	; 5
     3e0:	9f af       	std	Y+63, r25	; 0x3f
     3e2:	25 97       	sbiw	r28, 0x05	; 5
     3e4:	25 96       	adiw	r28, 0x05	; 5
     3e6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3e8:	25 97       	sbiw	r28, 0x05	; 5
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	69 2f       	mov	r22, r25
     3ee:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				LED(2,mu2_command_eeprom("BR","48"));
     3f2:	88 e1       	ldi	r24, 0x18	; 24
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	2b e1       	ldi	r18, 0x1B	; 27
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 b0 05 	call	0xb60	; 0xb60 <mu2_command_eeprom>
     400:	26 96       	adiw	r28, 0x06	; 6
     402:	8f af       	std	Y+63, r24	; 0x3f
     404:	26 97       	sbiw	r28, 0x06	; 6
     406:	26 96       	adiw	r28, 0x06	; 6
     408:	af ad       	ldd	r26, Y+63	; 0x3f
     40a:	26 97       	sbiw	r28, 0x06	; 6
     40c:	aa 23       	and	r26, r26
     40e:	21 f0       	breq	.+8      	; 0x418 <main+0x34a>
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	26 96       	adiw	r28, 0x06	; 6
     414:	bf af       	std	Y+63, r27	; 0x3f
     416:	26 97       	sbiw	r28, 0x06	; 6
     418:	26 96       	adiw	r28, 0x06	; 6
     41a:	9f ad       	ldd	r25, Y+63	; 0x3f
     41c:	26 97       	sbiw	r28, 0x06	; 6
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	69 2f       	mov	r22, r25
     422:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				wait_ms(100);
     426:	84 e6       	ldi	r24, 0x64	; 100
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <wait_ms>
				uart_init(0,UART_RE|UART_RXCIE,BR_4800);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	60 e9       	ldi	r22, 0x90	; 144
     434:	43 e0       	ldi	r20, 0x03	; 3
     436:	51 e0       	ldi	r21, 0x01	; 1
     438:	0e 94 38 06 	call	0xc70	; 0xc70 <uart_init>
		/*ここにプログラムを記述するとよろしいのではないのかと思われます*/
/* 新式 */

// Do
// もし上ボタンが押されていないなら
	if( ! controller->detail.Button.UP )
     43c:	ec 89       	ldd	r30, Y+20	; 0x14
     43e:	fd 89       	ldd	r31, Y+21	; 0x15
     440:	80 81       	ld	r24, Z
     442:	80 71       	andi	r24, 0x10	; 16
     444:	88 23       	and	r24, r24
     446:	09 f0       	breq	.+2      	; 0x44a <main+0x37c>
     448:	ca c0       	rjmp	.+404    	; 0x5de <main+0x510>
		{
			// アナログスティックのステータスを取得する
				analogX = controller->detail.AnalogR.X;
     44a:	ec 89       	ldd	r30, Y+20	; 0x14
     44c:	fd 89       	ldd	r31, Y+21	; 0x15
     44e:	83 81       	ldd	r24, Z+3	; 0x03
     450:	82 95       	swap	r24
     452:	8f 70       	andi	r24, 0x0F	; 15
     454:	8b 83       	std	Y+3, r24	; 0x03
				analogY = controller->detail.AnalogR.Y;
     456:	ec 89       	ldd	r30, Y+20	; 0x14
     458:	fd 89       	ldd	r31, Y+21	; 0x15
     45a:	83 81       	ldd	r24, Z+3	; 0x03
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	8a 83       	std	Y+2, r24	; 0x02

			// もしcarveEnableCountが○未満ならcarveEnableCountをインクリメント
			// そうでなければcarveEnableを真にする
				if( carveEnableCount < 40 )
     460:	89 89       	ldd	r24, Y+17	; 0x11
     462:	9a 89       	ldd	r25, Y+18	; 0x12
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	91 05       	cpc	r25, r1
     468:	34 f4       	brge	.+12     	; 0x476 <main+0x3a8>
					{			
						carveEnableCount++;
     46a:	89 89       	ldd	r24, Y+17	; 0x11
     46c:	9a 89       	ldd	r25, Y+18	; 0x12
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	9a 8b       	std	Y+18, r25	; 0x12
     472:	89 8b       	std	Y+17, r24	; 0x11
     474:	02 c0       	rjmp	.+4      	; 0x47a <main+0x3ac>
					}
				else
					{
						carveEnable = true;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	8b 8b       	std	Y+19, r24	; 0x13
					}
			// motorDutyをBボタンが押されていたら30,そうでなければ100
				motorDuty = ( controller->detail.Button.B ) ? 70:50;
     47a:	ec 89       	ldd	r30, Y+20	; 0x14
     47c:	fd 89       	ldd	r31, Y+21	; 0x15
     47e:	80 81       	ld	r24, Z
     480:	84 70       	andi	r24, 0x04	; 4
     482:	88 23       	and	r24, r24
     484:	39 f0       	breq	.+14     	; 0x494 <main+0x3c6>
     486:	86 e4       	ldi	r24, 0x46	; 70
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	21 96       	adiw	r28, 0x01	; 1
     48c:	9f af       	std	Y+63, r25	; 0x3f
     48e:	8e af       	std	Y+62, r24	; 0x3e
     490:	21 97       	sbiw	r28, 0x01	; 1
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <main+0x3d2>
     494:	a2 e3       	ldi	r26, 0x32	; 50
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	21 96       	adiw	r28, 0x01	; 1
     49a:	bf af       	std	Y+63, r27	; 0x3f
     49c:	ae af       	std	Y+62, r26	; 0x3e
     49e:	21 97       	sbiw	r28, 0x01	; 1
     4a0:	21 96       	adiw	r28, 0x01	; 1
     4a2:	8e ad       	ldd	r24, Y+62	; 0x3e
     4a4:	9f ad       	ldd	r25, Y+63	; 0x3f
     4a6:	21 97       	sbiw	r28, 0x01	; 1
     4a8:	9e 87       	std	Y+14, r25	; 0x0e
     4aa:	8d 87       	std	Y+13, r24	; 0x0d
			
			// もしLボタンが押されていたら、全駆動体に+motorDutyをセット
				if( controller->detail.Button.L )
     4ac:	ec 89       	ldd	r30, Y+20	; 0x14
     4ae:	fd 89       	ldd	r31, Y+21	; 0x15
     4b0:	81 81       	ldd	r24, Z+1	; 0x01
     4b2:	80 72       	andi	r24, 0x20	; 32
     4b4:	88 23       	and	r24, r24
     4b6:	49 f0       	breq	.+18     	; 0x4ca <main+0x3fc>
					{
						blueDuty = +motorDuty;
     4b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     4bc:	9c 87       	std	Y+12, r25	; 0x0c
     4be:	8b 87       	std	Y+11, r24	; 0x0b
						orangeDuty = +motorDuty;
     4c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4c4:	9a 87       	std	Y+10, r25	; 0x0a
     4c6:	89 87       	std	Y+9, r24	; 0x09
     4c8:	8e c0       	rjmp	.+284    	; 0x5e6 <main+0x518>
					}
			// そうでなくRボタンが押されていたら、全駆動体に-motorDutyをセット
				else if( controller->detail.Button.R )
     4ca:	ec 89       	ldd	r30, Y+20	; 0x14
     4cc:	fd 89       	ldd	r31, Y+21	; 0x15
     4ce:	81 81       	ldd	r24, Z+1	; 0x01
     4d0:	80 74       	andi	r24, 0x40	; 64
     4d2:	88 23       	and	r24, r24
     4d4:	79 f0       	breq	.+30     	; 0x4f4 <main+0x426>
					{
						blueDuty = -motorDuty;
     4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     4da:	90 95       	com	r25
     4dc:	81 95       	neg	r24
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	9c 87       	std	Y+12, r25	; 0x0c
     4e2:	8b 87       	std	Y+11, r24	; 0x0b
						orangeDuty = -motorDuty;
     4e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     4e8:	90 95       	com	r25
     4ea:	81 95       	neg	r24
     4ec:	9f 4f       	sbci	r25, 0xFF	; 255
     4ee:	9a 87       	std	Y+10, r25	; 0x0a
     4f0:	89 87       	std	Y+9, r24	; 0x09
     4f2:	79 c0       	rjmp	.+242    	; 0x5e6 <main+0x518>
					}
			// そうでなく←ボタンが押されていたら、青の駆動体は正、橙の駆動体は負にmotorDutyをセット
				else if( controller->detail.Button.LEFT )
     4f4:	ec 89       	ldd	r30, Y+20	; 0x14
     4f6:	fd 89       	ldd	r31, Y+21	; 0x15
     4f8:	80 81       	ld	r24, Z
     4fa:	80 78       	andi	r24, 0x80	; 128
     4fc:	88 23       	and	r24, r24
     4fe:	61 f0       	breq	.+24     	; 0x518 <main+0x44a>
					{
						blueDuty = +motorDuty;
     500:	8d 85       	ldd	r24, Y+13	; 0x0d
     502:	9e 85       	ldd	r25, Y+14	; 0x0e
     504:	9c 87       	std	Y+12, r25	; 0x0c
     506:	8b 87       	std	Y+11, r24	; 0x0b
						orangeDuty = -motorDuty;
     508:	8d 85       	ldd	r24, Y+13	; 0x0d
     50a:	9e 85       	ldd	r25, Y+14	; 0x0e
     50c:	90 95       	com	r25
     50e:	81 95       	neg	r24
     510:	9f 4f       	sbci	r25, 0xFF	; 255
     512:	9a 87       	std	Y+10, r25	; 0x0a
     514:	89 87       	std	Y+9, r24	; 0x09
     516:	67 c0       	rjmp	.+206    	; 0x5e6 <main+0x518>
					}
			// そうでなく→ボタンが押されていたら、青の駆動体は負、橙の駆動体は正にmotorDutyをセット
				else if( controller->detail.Button.RIGHT )
     518:	ec 89       	ldd	r30, Y+20	; 0x14
     51a:	fd 89       	ldd	r31, Y+21	; 0x15
     51c:	80 81       	ld	r24, Z
     51e:	80 72       	andi	r24, 0x20	; 32
     520:	88 23       	and	r24, r24
     522:	61 f0       	breq	.+24     	; 0x53c <main+0x46e>
					{
						blueDuty = -motorDuty;
     524:	8d 85       	ldd	r24, Y+13	; 0x0d
     526:	9e 85       	ldd	r25, Y+14	; 0x0e
     528:	90 95       	com	r25
     52a:	81 95       	neg	r24
     52c:	9f 4f       	sbci	r25, 0xFF	; 255
     52e:	9c 87       	std	Y+12, r25	; 0x0c
     530:	8b 87       	std	Y+11, r24	; 0x0b
						orangeDuty = +motorDuty;
     532:	8d 85       	ldd	r24, Y+13	; 0x0d
     534:	9e 85       	ldd	r25, Y+14	; 0x0e
     536:	9a 87       	std	Y+10, r25	; 0x0a
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	55 c0       	rjmp	.+170    	; 0x5e6 <main+0x518>
					}
			// アナログスティックが左に傾いていれば，
				// アナログスティックが上に傾いていれば，青の駆動体は正，橙の駆動体は0にmotorDutyをセット
				// アナログスティックが下に傾いていれば，青の駆動体は0，青の駆動体は正にmotorDutyをセット
				// アナログスティックが上下に傾いていなければ，全駆動体に+motorDutyをセット
				else if( analogX < 0x05 )
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	e8 f4       	brcc	.+58     	; 0x57c <main+0x4ae>
					{
						if( analogY > 0x09 )
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	8a 30       	cpi	r24, 0x0A	; 10
     546:	38 f0       	brcs	.+14     	; 0x556 <main+0x488>
							{
								blueDuty = +motorDuty;
     548:	8d 85       	ldd	r24, Y+13	; 0x0d
     54a:	9e 85       	ldd	r25, Y+14	; 0x0e
     54c:	9c 87       	std	Y+12, r25	; 0x0c
     54e:	8b 87       	std	Y+11, r24	; 0x0b
								orangeDuty = 0;
     550:	1a 86       	std	Y+10, r1	; 0x0a
     552:	19 86       	std	Y+9, r1	; 0x09
     554:	48 c0       	rjmp	.+144    	; 0x5e6 <main+0x518>
							}
						else if( analogY < 0x05 )
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	38 f4       	brcc	.+14     	; 0x56a <main+0x49c>
							{
								blueDuty = 0;
     55c:	1c 86       	std	Y+12, r1	; 0x0c
     55e:	1b 86       	std	Y+11, r1	; 0x0b
								orangeDuty = +motorDuty;
     560:	8d 85       	ldd	r24, Y+13	; 0x0d
     562:	9e 85       	ldd	r25, Y+14	; 0x0e
     564:	9a 87       	std	Y+10, r25	; 0x0a
     566:	89 87       	std	Y+9, r24	; 0x09
     568:	3e c0       	rjmp	.+124    	; 0x5e6 <main+0x518>
							}
						else
							{
								blueDuty = +motorDuty;
     56a:	8d 85       	ldd	r24, Y+13	; 0x0d
     56c:	9e 85       	ldd	r25, Y+14	; 0x0e
     56e:	9c 87       	std	Y+12, r25	; 0x0c
     570:	8b 87       	std	Y+11, r24	; 0x0b
								orangeDuty = +motorDuty;
     572:	8d 85       	ldd	r24, Y+13	; 0x0d
     574:	9e 85       	ldd	r25, Y+14	; 0x0e
     576:	9a 87       	std	Y+10, r25	; 0x0a
     578:	89 87       	std	Y+9, r24	; 0x09
     57a:	35 c0       	rjmp	.+106    	; 0x5e6 <main+0x518>
					}
			// アナログスティックが右に傾いていれば，
				// アナログスティックが上に傾いていれば，青の駆動体は負，橙の駆動体は0にmotorDutyをセット
				// アナログスティックが下に傾いていれば，青の駆動体は0，青の駆動体は負にmotorDutyをセット
				// アナログスティックが上下に傾いていなければ，全駆動体に-motorDutyをセット
				else if( analogX > 0x09 )
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	8a 30       	cpi	r24, 0x0A	; 10
     580:	48 f1       	brcs	.+82     	; 0x5d4 <main+0x506>
					{
						if( analogY > 0x09 )
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	8a 30       	cpi	r24, 0x0A	; 10
     586:	50 f0       	brcs	.+20     	; 0x59c <main+0x4ce>
							{
								blueDuty = -motorDuty;
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	90 95       	com	r25
     58e:	81 95       	neg	r24
     590:	9f 4f       	sbci	r25, 0xFF	; 255
     592:	9c 87       	std	Y+12, r25	; 0x0c
     594:	8b 87       	std	Y+11, r24	; 0x0b
								orangeDuty = 0;
     596:	1a 86       	std	Y+10, r1	; 0x0a
     598:	19 86       	std	Y+9, r1	; 0x09
     59a:	25 c0       	rjmp	.+74     	; 0x5e6 <main+0x518>
							}
						else if( analogY < 0x05 )
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	85 30       	cpi	r24, 0x05	; 5
     5a0:	50 f4       	brcc	.+20     	; 0x5b6 <main+0x4e8>
							{
								blueDuty = 0;
     5a2:	1c 86       	std	Y+12, r1	; 0x0c
     5a4:	1b 86       	std	Y+11, r1	; 0x0b
								orangeDuty = -motorDuty;
     5a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5aa:	90 95       	com	r25
     5ac:	81 95       	neg	r24
     5ae:	9f 4f       	sbci	r25, 0xFF	; 255
     5b0:	9a 87       	std	Y+10, r25	; 0x0a
     5b2:	89 87       	std	Y+9, r24	; 0x09
     5b4:	18 c0       	rjmp	.+48     	; 0x5e6 <main+0x518>
							}
						else
							{
								blueDuty = -motorDuty;
     5b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ba:	90 95       	com	r25
     5bc:	81 95       	neg	r24
     5be:	9f 4f       	sbci	r25, 0xFF	; 255
     5c0:	9c 87       	std	Y+12, r25	; 0x0c
     5c2:	8b 87       	std	Y+11, r24	; 0x0b
								orangeDuty = -motorDuty;
     5c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5c8:	90 95       	com	r25
     5ca:	81 95       	neg	r24
     5cc:	9f 4f       	sbci	r25, 0xFF	; 255
     5ce:	9a 87       	std	Y+10, r25	; 0x0a
     5d0:	89 87       	std	Y+9, r24	; 0x09
     5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <main+0x518>
							}
					}
			// そうでなければ、停止
				else
					{
						blueDuty = 0;
     5d4:	1c 86       	std	Y+12, r1	; 0x0c
     5d6:	1b 86       	std	Y+11, r1	; 0x0b
						orangeDuty = 0;
     5d8:	1a 86       	std	Y+10, r1	; 0x0a
     5da:	19 86       	std	Y+9, r1	; 0x09
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <main+0x518>
		}
*/
// そうでなければ (↑ボタンが押下 かつ carveEnable が偽)、停止
	else 
		{
			blueDuty = 0;
     5de:	1c 86       	std	Y+12, r1	; 0x0c
     5e0:	1b 86       	std	Y+11, r1	; 0x0b
			orangeDuty = 0;
     5e2:	1a 86       	std	Y+10, r1	; 0x0a
     5e4:	19 86       	std	Y+9, r1	; 0x09
		}

// もし blueDuty が0なら、青の駆動体をブレーキ、そうでなければCW
	blueAct = ( blueDuty == 0 || blueDuty == -0 ) ? BRAKE : CW;
     5e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <main+0x528>
     5ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	19 f4       	brne	.+6      	; 0x5fc <main+0x52e>
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	9e af       	std	Y+62, r25	; 0x3e
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <main+0x532>
     5fc:	a1 e0       	ldi	r26, 0x01	; 1
     5fe:	ae af       	std	Y+62, r26	; 0x3e
     600:	be ad       	ldd	r27, Y+62	; 0x3e
     602:	b8 87       	std	Y+8, r27	; 0x08

// もし orangeDuty が0なら、橙の駆動体をブレーキ、そうでなければCCW
	orangeAct = ( orangeDuty == 0 || orangeDuty == -0 ) ? BRAKE : CCW;
     604:	89 85       	ldd	r24, Y+9	; 0x09
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	00 97       	sbiw	r24, 0x00	; 0
     60a:	21 f0       	breq	.+8      	; 0x614 <main+0x546>
     60c:	89 85       	ldd	r24, Y+9	; 0x09
     60e:	9a 85       	ldd	r25, Y+10	; 0x0a
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	19 f4       	brne	.+6      	; 0x61a <main+0x54c>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	8d af       	std	Y+61, r24	; 0x3d
     618:	02 c0       	rjmp	.+4      	; 0x61e <main+0x550>
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	9d af       	std	Y+61, r25	; 0x3d
     61e:	ad ad       	ldd	r26, Y+61	; 0x3d
     620:	af 83       	std	Y+7, r26	; 0x07

//	モータドライブ関数をコール
	mDrive(&Motor, blueAct, blueDuty, 0);
     622:	2b 85       	ldd	r18, Y+11	; 0x0b
     624:	ce 01       	movw	r24, r28
     626:	82 96       	adiw	r24, 0x22	; 34
     628:	68 85       	ldd	r22, Y+8	; 0x08
     62a:	42 2f       	mov	r20, r18
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <mDrive>
	mDrive(&Motor, blueAct, blueDuty, 1);
     632:	2b 85       	ldd	r18, Y+11	; 0x0b
     634:	ce 01       	movw	r24, r28
     636:	82 96       	adiw	r24, 0x22	; 34
     638:	68 85       	ldd	r22, Y+8	; 0x08
     63a:	42 2f       	mov	r20, r18
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <mDrive>
	mDrive(&Motor, orangeAct, orangeDuty, 2);
     642:	29 85       	ldd	r18, Y+9	; 0x09
     644:	ce 01       	movw	r24, r28
     646:	82 96       	adiw	r24, 0x22	; 34
     648:	6f 81       	ldd	r22, Y+7	; 0x07
     64a:	42 2f       	mov	r20, r18
     64c:	22 e0       	ldi	r18, 0x02	; 2
     64e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <mDrive>
	mDrive(&Motor, orangeAct, orangeDuty, 3);
     652:	29 85       	ldd	r18, Y+9	; 0x09
     654:	ce 01       	movw	r24, r28
     656:	82 96       	adiw	r24, 0x22	; 34
     658:	6f 81       	ldd	r22, Y+7	; 0x07
     65a:	42 2f       	mov	r20, r18
     65c:	23 e0       	ldi	r18, 0x03	; 3
     65e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <mDrive>

//	i2cで転送
/*-------------------------------------------------------------------------------------------------------------------------*/
		airAct = FREE;
     662:	1e 82       	std	Y+6, r1	; 0x06
		if(controller->detail.Button.Y)
     664:	ec 89       	ldd	r30, Y+20	; 0x14
     666:	fd 89       	ldd	r31, Y+21	; 0x15
     668:	80 81       	ld	r24, Z
     66a:	88 70       	andi	r24, 0x08	; 8
     66c:	88 23       	and	r24, r24
     66e:	29 f0       	breq	.+10     	; 0x67a <main+0x5ac>
			{
				airAct = CW;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	8e 83       	std	Y+6, r24	; 0x06
				airPort = 0x0C;
     674:	8c e0       	ldi	r24, 0x0C	; 12
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	15 c0       	rjmp	.+42     	; 0x6a4 <main+0x5d6>
			}
		else if(controller->detail.Button.ZL)
     67a:	ec 89       	ldd	r30, Y+20	; 0x14
     67c:	fd 89       	ldd	r31, Y+21	; 0x15
     67e:	81 81       	ldd	r24, Z+1	; 0x01
     680:	88 70       	andi	r24, 0x08	; 8
     682:	88 23       	and	r24, r24
     684:	29 f0       	breq	.+10     	; 0x690 <main+0x5c2>
			{
				airAct = CW;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	8e 83       	std	Y+6, r24	; 0x06
				airPort = 0x04;
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	8d 83       	std	Y+5, r24	; 0x05
     68e:	0a c0       	rjmp	.+20     	; 0x6a4 <main+0x5d6>
			}
		else if(controller->detail.Button.ZR)
     690:	ec 89       	ldd	r30, Y+20	; 0x14
     692:	fd 89       	ldd	r31, Y+21	; 0x15
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	80 71       	andi	r24, 0x10	; 16
     698:	88 23       	and	r24, r24
     69a:	21 f0       	breq	.+8      	; 0x6a4 <main+0x5d6>
			{
				airAct = CW;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	8e 83       	std	Y+6, r24	; 0x06
				airPort = 0x08;
     6a0:	88 e0       	ldi	r24, 0x08	; 8
     6a2:	8d 83       	std	Y+5, r24	; 0x05
			}
		aDrive(&Air, airPort, airAct);
     6a4:	be 81       	ldd	r27, Y+6	; 0x06
     6a6:	27 96       	adiw	r28, 0x07	; 7
     6a8:	bf af       	std	Y+63, r27	; 0x3f
     6aa:	27 97       	sbiw	r28, 0x07	; 7
     6ac:	27 96       	adiw	r28, 0x07	; 7
     6ae:	8f ad       	ldd	r24, Y+63	; 0x3f
     6b0:	27 97       	sbiw	r28, 0x07	; 7
     6b2:	88 23       	and	r24, r24
     6b4:	21 f0       	breq	.+8      	; 0x6be <main+0x5f0>
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	27 96       	adiw	r28, 0x07	; 7
     6ba:	9f af       	std	Y+63, r25	; 0x3f
     6bc:	27 97       	sbiw	r28, 0x07	; 7
     6be:	27 96       	adiw	r28, 0x07	; 7
     6c0:	2f ad       	ldd	r18, Y+63	; 0x3f
     6c2:	27 97       	sbiw	r28, 0x07	; 7
     6c4:	ce 01       	movw	r24, r28
     6c6:	8b 96       	adiw	r24, 0x2b	; 43
     6c8:	6d 81       	ldd	r22, Y+5	; 0x05
     6ca:	42 2f       	mov	r20, r18
     6cc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <aDrive>
/*-------------------------------------------------------------------------------------------------------------------------*/
		/*バルスモード*/
		/*バルス!!!!!*/
		if(controller->detail.Button.SELECT&&controller->detail.Button.START) e_flag=E_ON;
     6d0:	ec 89       	ldd	r30, Y+20	; 0x14
     6d2:	fd 89       	ldd	r31, Y+21	; 0x15
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	81 70       	andi	r24, 0x01	; 1
     6d8:	88 23       	and	r24, r24
     6da:	49 f0       	breq	.+18     	; 0x6ee <main+0x620>
     6dc:	ec 89       	ldd	r30, Y+20	; 0x14
     6de:	fd 89       	ldd	r31, Y+21	; 0x15
     6e0:	81 81       	ldd	r24, Z+1	; 0x01
     6e2:	84 70       	andi	r24, 0x04	; 4
     6e4:	88 23       	and	r24, r24
     6e6:	19 f0       	breq	.+6      	; 0x6ee <main+0x620>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	8c 83       	std	Y+4, r24	; 0x04
     6ec:	0f c0       	rjmp	.+30     	; 0x70c <main+0x63e>
		/*復活!!!!!!!*/
		else if(controller->detail.Button.HOME){
     6ee:	ec 89       	ldd	r30, Y+20	; 0x14
     6f0:	fd 89       	ldd	r31, Y+21	; 0x15
     6f2:	81 81       	ldd	r24, Z+1	; 0x01
     6f4:	82 70       	andi	r24, 0x02	; 2
     6f6:	88 23       	and	r24, r24
     6f8:	41 f0       	breq	.+16     	; 0x70a <main+0x63c>
			e_flag=E_OFF;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	8c 83       	std	Y+4, r24	; 0x04
			carveEnable = false;
     6fe:	1b 8a       	std	Y+19, r1	; 0x13
			carveEnableCount = 0;
     700:	1a 8a       	std	Y+18, r1	; 0x12
     702:	19 8a       	std	Y+17, r1	; 0x11
			timeCount = 0;
     704:	18 8a       	std	Y+16, r1	; 0x10
     706:	1f 86       	std	Y+15, r1	; 0x0f
     708:	01 c0       	rjmp	.+2      	; 0x70c <main+0x63e>
		}
		else e_flag=E_KEEP;	
     70a:	1c 82       	std	Y+4, r1	; 0x04

		i2cStatus = true;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= Emergency(&Emer,e_flag);
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	08 2f       	mov	r16, r24
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	2c 81       	ldd	r18, Y+4	; 0x04
     718:	ce 01       	movw	r24, r28
     71a:	c4 96       	adiw	r24, 0x34	; 52
     71c:	62 2f       	mov	r22, r18
     71e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <Emergency>
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	80 23       	and	r24, r16
     728:	91 23       	and	r25, r17
     72a:	19 82       	std	Y+1, r1	; 0x01
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	11 f0       	breq	.+4      	; 0x734 <main+0x666>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	89 83       	std	Y+1, r24	; 0x01
		i2cStatus &= i2cWrite(&Motor); wait_us(10);
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	08 2f       	mov	r16, r24
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	ce 01       	movw	r24, r28
     73c:	82 96       	adiw	r24, 0x22	; 34
     73e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <i2cWrite>
     742:	88 2f       	mov	r24, r24
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	80 23       	and	r24, r16
     748:	91 23       	and	r25, r17
     74a:	19 82       	std	Y+1, r1	; 0x01
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	11 f0       	breq	.+4      	; 0x754 <main+0x686>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	8a e0       	ldi	r24, 0x0A	; 10
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 3c 0c 	call	0x1878	; 0x1878 <wait_us>
		i2cStatus &= i2cWrite(&Air); wait_us(10);
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	08 2f       	mov	r16, r24
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	ce 01       	movw	r24, r28
     764:	8b 96       	adiw	r24, 0x2b	; 43
     766:	0e 94 e7 09 	call	0x13ce	; 0x13ce <i2cWrite>
     76a:	88 2f       	mov	r24, r24
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	80 23       	and	r24, r16
     770:	91 23       	and	r25, r17
     772:	19 82       	std	Y+1, r1	; 0x01
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	11 f0       	breq	.+4      	; 0x77c <main+0x6ae>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	8a e0       	ldi	r24, 0x0A	; 10
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 3c 0c 	call	0x1878	; 0x1878 <wait_us>
		i2cStatus &= i2cWrite(&Emer);
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	08 2f       	mov	r16, r24
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	ce 01       	movw	r24, r28
     78c:	c4 96       	adiw	r24, 0x34	; 52
     78e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <i2cWrite>
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	80 23       	and	r24, r16
     798:	91 23       	and	r25, r17
     79a:	19 82       	std	Y+1, r1	; 0x01
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	11 f0       	breq	.+4      	; 0x7a4 <main+0x6d6>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	89 83       	std	Y+1, r24	; 0x01

		i2cCheck(i2cStatus);
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <i2cCheck>
		wait_ms(25);
     7aa:	89 e1       	ldi	r24, 0x19	; 25
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <wait_ms>
     7b2:	77 cd       	rjmp	.-1298   	; 0x2a2 <main+0x1d4>

000007b4 <initCtrlData>:
static volatile uint8_t i=0,cnt=0;
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     7bc:	10 92 5c 01 	sts	0x015C, r1
     7c0:	15 c0       	rjmp	.+42     	; 0x7ec <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     7c2:	80 91 5c 01 	lds	r24, 0x015C
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	80 91 5c 01 	lds	r24, 0x015C
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	e2 5e       	subi	r30, 0xE2	; 226
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	80 81       	ld	r24, Z
     7da:	f9 01       	movw	r30, r18
     7dc:	e0 5a       	subi	r30, 0xA0	; 160
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	80 83       	st	Z, r24
static volatile bool phase = false;
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     7e2:	80 91 5c 01 	lds	r24, 0x015C
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 5c 01 	sts	0x015C, r24
     7ec:	80 91 5c 01 	lds	r24, 0x015C
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	38 f3       	brcs	.-50     	; 0x7c2 <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	08 95       	ret

000007fa <Toggle_RC_Rx_Buffer>:
		Sleep(5);
	}
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     7fa:	df 93       	push	r29
     7fc:	cf 93       	push	r28
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
	cli();
     802:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     804:	10 92 5c 01 	sts	0x015C, r1
     808:	15 c0       	rjmp	.+42     	; 0x834 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     80a:	80 91 5c 01 	lds	r24, 0x015C
     80e:	28 2f       	mov	r18, r24
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	80 91 5c 01 	lds	r24, 0x015C
     816:	88 2f       	mov	r24, r24
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	e0 5a       	subi	r30, 0xA0	; 160
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	80 81       	ld	r24, Z
     822:	f9 01       	movw	r30, r18
     824:	ec 59       	subi	r30, 0x9C	; 156
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	80 83       	st	Z, r24
}
*/
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     82a:	80 91 5c 01 	lds	r24, 0x015C
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 5c 01 	sts	0x015C, r24
     834:	80 91 5c 01 	lds	r24, 0x015C
     838:	84 30       	cpi	r24, 0x04	; 4
     83a:	38 f3       	brcs	.-50     	; 0x80a <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     83c:	78 94       	sei
	return &keepCtrlData;
     83e:	84 e6       	ldi	r24, 0x64	; 100
     840:	91 e0       	ldi	r25, 0x01	; 1
}
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	08 95       	ret

00000848 <__vector_20>:


ISR(USART0_RX_vect)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	00 90 5b 00 	lds	r0, 0x005B
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     878:	e6 ec       	ldi	r30, 0xC6	; 198
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 93 80 01 	sts	0x0180, r24

	if(phase){
     882:	80 91 5e 01 	lds	r24, 0x015E
     886:	88 23       	and	r24, r24
     888:	09 f4       	brne	.+2      	; 0x88c <__vector_20+0x44>
     88a:	52 c0       	rjmp	.+164    	; 0x930 <__vector_20+0xe8>
		packet[cnt] = val;
     88c:	80 91 5d 01 	lds	r24, 0x015D
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	20 91 80 01 	lds	r18, 0x0180
     898:	fc 01       	movw	r30, r24
     89a:	e8 59       	subi	r30, 0x98	; 152
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	20 83       	st	Z, r18
//		uart1_putchar(packet[cnt]);
		if(cnt<2){
     8a0:	80 91 5d 01 	lds	r24, 0x015D
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	b0 f4       	brcc	.+44     	; 0x8d4 <__vector_20+0x8c>
			if(val != check[cnt]){
     8a8:	80 91 5d 01 	lds	r24, 0x015D
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	ee 5d       	subi	r30, 0xDE	; 222
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	90 81       	ld	r25, Z
     8b8:	80 91 80 01 	lds	r24, 0x0180
     8bc:	98 17       	cp	r25, r24
     8be:	91 f1       	breq	.+100    	; 0x924 <__vector_20+0xdc>
				phase = false;
     8c0:	10 92 5e 01 	sts	0x015E, r1
//				uart1_putchar('@');
				LED(0,false);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
				beep(1);
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
     8d2:	28 c0       	rjmp	.+80     	; 0x924 <__vector_20+0xdc>
			}
		}else if(cnt==8){
     8d4:	80 91 5d 01 	lds	r24, 0x015D
     8d8:	88 30       	cpi	r24, 0x08	; 8
     8da:	21 f5       	brne	.+72     	; 0x924 <__vector_20+0xdc>
			ctrlData.buf[0] = packet[5];
     8dc:	80 91 6d 01 	lds	r24, 0x016D
     8e0:	80 93 60 01 	sts	0x0160, r24
			ctrlData.buf[1] = packet[6];
     8e4:	80 91 6e 01 	lds	r24, 0x016E
     8e8:	80 93 61 01 	sts	0x0161, r24
			ctrlData.buf[2] = packet[7];
     8ec:	80 91 6f 01 	lds	r24, 0x016F
     8f0:	80 93 62 01 	sts	0x0162, r24
			ctrlData.buf[3] = packet[8];
     8f4:	80 91 70 01 	lds	r24, 0x0170
     8f8:	80 93 63 01 	sts	0x0163, r24
			phase = false;
     8fc:	10 92 5e 01 	sts	0x015E, r1
			wdt_reset();
     900:	a8 95       	wdr
			LED(0,true);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
			if(EmergencyStatus()) beep(0);
     90a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <EmergencyStatus>
     90e:	88 23       	and	r24, r24
     910:	19 f0       	breq	.+6      	; 0x918 <__vector_20+0xd0>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
			ovf_cnt = 0;
     918:	10 92 5f 01 	sts	0x015F, r1
			TCNT1 = 0;
     91c:	e4 e8       	ldi	r30, 0x84	; 132
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	10 82       	st	Z, r1
		}
		cnt++;
     924:	80 91 5d 01 	lds	r24, 0x015D
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	80 93 5d 01 	sts	0x015D, r24
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__vector_20+0xfa>
	}else{
		if(val=='*'){
     930:	80 91 80 01 	lds	r24, 0x0180
     934:	8a 32       	cpi	r24, 0x2A	; 42
     936:	29 f4       	brne	.+10     	; 0x942 <__vector_20+0xfa>
		cnt = 0;
     938:	10 92 5d 01 	sts	0x015D, r1
		phase = true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 5e 01 	sts	0x015E, r24
		}
	}

}
     942:	cf 91       	pop	r28
     944:	df 91       	pop	r29
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	00 92 5b 00 	sts	0x005B, r0
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_15>:

ISR (TIMER1_OVF_vect){
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	00 90 5b 00 	lds	r0, 0x005B
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt++;
     992:	80 91 5f 01 	lds	r24, 0x015F
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	80 93 5f 01 	sts	0x015F, r24
	if(ovf_cnt>150){
     99c:	80 91 5f 01 	lds	r24, 0x015F
     9a0:	87 39       	cpi	r24, 0x97	; 151
     9a2:	f0 f0       	brcs	.+60     	; 0x9e0 <__vector_15+0x72>
		ovf_cnt = 0;
     9a4:	10 92 5f 01 	sts	0x015F, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     9a8:	10 92 5c 01 	sts	0x015C, r1
     9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     9ae:	80 91 5c 01 	lds	r24, 0x015C
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	80 91 5c 01 	lds	r24, 0x015C
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	fc 01       	movw	r30, r24
     9c0:	e2 5e       	subi	r30, 0xE2	; 226
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	80 81       	ld	r24, Z
     9c6:	f9 01       	movw	r30, r18
     9c8:	e0 5a       	subi	r30, 0xA0	; 160
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	80 83       	st	Z, r24

ISR (TIMER1_OVF_vect){
	ovf_cnt++;
	if(ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     9ce:	80 91 5c 01 	lds	r24, 0x015C
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	80 93 5c 01 	sts	0x015C, r24
     9d8:	80 91 5c 01 	lds	r24, 0x015C
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	38 f3       	brcs	.-50     	; 0x9ae <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     9e0:	cf 91       	pop	r28
     9e2:	df 91       	pop	r29
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	9f 91       	pop	r25
     9ea:	8f 91       	pop	r24
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	00 92 5b 00 	sts	0x005B, r0
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <Byte2Str>:
/// バイト（0x00〜0xFF）の数を2桁の文字列に変換
/// </summary>
/// <param name="num">変換対象の数字</param>
/// <param name="str">変換後の文字列を格納する領域</param>
void Byte2Str(unsigned char num, char *str)
{
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	00 d0       	rcall	.+0      	; 0xa06 <Byte2Str+0x6>
     a06:	0f 92       	push	r0
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	7b 83       	std	Y+3, r23	; 0x03
     a10:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = ascii[(num >> 4) & 0x0F];
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	82 95       	swap	r24
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	88 2f       	mov	r24, r24
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	ea 5d       	subi	r30, 0xDA	; 218
     a20:	fe 4f       	sbci	r31, 0xFE	; 254
     a22:	80 81       	ld	r24, Z
     a24:	ea 81       	ldd	r30, Y+2	; 0x02
     a26:	fb 81       	ldd	r31, Y+3	; 0x03
     a28:	80 83       	st	Z, r24
	str[1] = ascii[num&0x0F];
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	9b 81       	ldd	r25, Y+3	; 0x03
     a2e:	dc 01       	movw	r26, r24
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	ea 5d       	subi	r30, 0xDA	; 218
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	80 81       	ld	r24, Z
     a44:	8c 93       	st	X, r24
	str[2] = '\0';
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	fc 01       	movw	r30, r24
     a4c:	32 96       	adiw	r30, 0x02	; 2
     a4e:	10 82       	st	Z, r1
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	08 95       	ret

00000a5c <mu2_command>:

unsigned char mu2_command(const char *cmd, char *val){
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	00 d0       	rcall	.+0      	; 0xa66 <mu2_command+0xa>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <mu2_command+0xc>
     a68:	0f 92       	push	r0
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	7c 83       	std	Y+4, r23	; 0x04
     a74:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     a76:	80 e4       	ldi	r24, 0x40	; 64
     a78:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(cmd[0]);
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	80 81       	ld	r24, Z
     a82:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(cmd[1]);
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 96       	adiw	r30, 0x01	; 1
     a8e:	80 81       	ld	r24, Z
     a90:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <mu2_command+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     a96:	eb 81       	ldd	r30, Y+3	; 0x03
     a98:	fc 81       	ldd	r31, Y+4	; 0x04
     a9a:	80 81       	ld	r24, Z
     a9c:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
		val++;
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	9c 83       	std	Y+4, r25	; 0x04
     aa8:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     aaa:	eb 81       	ldd	r30, Y+3	; 0x03
     aac:	fc 81       	ldd	r31, Y+4	; 0x04
     aae:	80 81       	ld	r24, Z
     ab0:	88 23       	and	r24, r24
     ab2:	89 f7       	brne	.-30     	; 0xa96 <mu2_command+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(0x0a);
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	for(i=0;i<10;i++){
     ac0:	10 92 81 01 	sts	0x0181, r1
     ac4:	32 c0       	rjmp	.+100    	; 0xb2a <mu2_command+0xce>
		tmp[i] = uart0_getchar();
     ac6:	80 91 81 01 	lds	r24, 0x0181
     aca:	08 2f       	mov	r16, r24
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	0e 94 fe 06 	call	0xdfc	; 0xdfc <uart0_getchar>
     ad2:	f8 01       	movw	r30, r16
     ad4:	ee 57       	subi	r30, 0x7E	; 126
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     ada:	80 91 81 01 	lds	r24, 0x0181
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	ee 57       	subi	r30, 0x7E	; 126
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	80 81       	ld	r24, Z
     aea:	0e 94 34 07 	call	0xe68	; 0xe68 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     aee:	80 91 81 01 	lds	r24, 0x0181
     af2:	88 23       	and	r24, r24
     af4:	a9 f0       	breq	.+42     	; 0xb20 <mu2_command+0xc4>
     af6:	80 91 81 01 	lds	r24, 0x0181
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	fc 01       	movw	r30, r24
     b02:	ee 57       	subi	r30, 0x7E	; 126
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	80 81       	ld	r24, Z
     b08:	8d 30       	cpi	r24, 0x0D	; 13
     b0a:	51 f4       	brne	.+20     	; 0xb20 <mu2_command+0xc4>
     b0c:	80 91 81 01 	lds	r24, 0x0181
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	fc 01       	movw	r30, r24
     b16:	ee 57       	subi	r30, 0x7E	; 126
     b18:	fe 4f       	sbci	r31, 0xFE	; 254
     b1a:	80 81       	ld	r24, Z
     b1c:	8a 30       	cpi	r24, 0x0A	; 10
     b1e:	49 f0       	breq	.+18     	; 0xb32 <mu2_command+0xd6>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     b20:	80 91 81 01 	lds	r24, 0x0181
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	80 93 81 01 	sts	0x0181, r24
     b2a:	80 91 81 01 	lds	r24, 0x0181
     b2e:	8a 30       	cpi	r24, 0x0A	; 10
     b30:	50 f2       	brcs	.-108    	; 0xac6 <mu2_command+0x6a>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     b32:	80 91 83 01 	lds	r24, 0x0183
     b36:	85 34       	cpi	r24, 0x45	; 69
     b38:	39 f4       	brne	.+14     	; 0xb48 <mu2_command+0xec>
     b3a:	80 91 84 01 	lds	r24, 0x0184
     b3e:	82 35       	cpi	r24, 0x52	; 82
     b40:	19 f4       	brne	.+6      	; 0xb48 <mu2_command+0xec>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	8d 83       	std	Y+5, r24	; 0x05
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <mu2_command+0xee>
	return 0;
     b48:	1d 82       	std	Y+5, r1	; 0x05
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <mu2_command_eeprom>:

unsigned char mu2_command_eeprom(const char *cmd, char *val){
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	00 d0       	rcall	.+0      	; 0xb6a <mu2_command_eeprom+0xa>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <mu2_command_eeprom+0xc>
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	7c 83       	std	Y+4, r23	; 0x04
     b78:	6b 83       	std	Y+3, r22	; 0x03
	uart0_putchar('@');
     b7a:	80 e4       	ldi	r24, 0x40	; 64
     b7c:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(cmd[0]);
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	80 81       	ld	r24, Z
     b86:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(cmd[1]);
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	31 96       	adiw	r30, 0x01	; 1
     b92:	80 81       	ld	r24, Z
     b94:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
     b98:	0a c0       	rjmp	.+20     	; 0xbae <mu2_command_eeprom+0x4e>
	while(*val!='\0'){
		uart0_putchar(*val);
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	80 81       	ld	r24, Z
     ba0:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
		val++;
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	9c 83       	std	Y+4, r25	; 0x04
     bac:	8b 83       	std	Y+3, r24	; 0x03

unsigned char mu2_command_eeprom(const char *cmd, char *val){
	uart0_putchar('@');
	uart0_putchar(cmd[0]);
	uart0_putchar(cmd[1]);
	while(*val!='\0'){
     bae:	eb 81       	ldd	r30, Y+3	; 0x03
     bb0:	fc 81       	ldd	r31, Y+4	; 0x04
     bb2:	80 81       	ld	r24, Z
     bb4:	88 23       	and	r24, r24
     bb6:	89 f7       	brne	.-30     	; 0xb9a <mu2_command_eeprom+0x3a>
		uart0_putchar(*val);
		val++;
	}
	uart0_putchar('/');
     bb8:	8f e2       	ldi	r24, 0x2F	; 47
     bba:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar('W');
     bbe:	87 e5       	ldi	r24, 0x57	; 87
     bc0:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(0x0d);
     bc4:	8d e0       	ldi	r24, 0x0D	; 13
     bc6:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	uart0_putchar(0x0a);
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	0e 94 14 07 	call	0xe28	; 0xe28 <uart0_putchar>
	for(i=0;i<10;i++){
     bd0:	10 92 81 01 	sts	0x0181, r1
     bd4:	32 c0       	rjmp	.+100    	; 0xc3a <mu2_command_eeprom+0xda>
		tmp[i] = uart0_getchar();
     bd6:	80 91 81 01 	lds	r24, 0x0181
     bda:	08 2f       	mov	r16, r24
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	0e 94 fe 06 	call	0xdfc	; 0xdfc <uart0_getchar>
     be2:	f8 01       	movw	r30, r16
     be4:	ee 57       	subi	r30, 0x7E	; 126
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	80 83       	st	Z, r24
		uart1_putchar(tmp[i]);
     bea:	80 91 81 01 	lds	r24, 0x0181
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	fc 01       	movw	r30, r24
     bf4:	ee 57       	subi	r30, 0x7E	; 126
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	0e 94 34 07 	call	0xe68	; 0xe68 <uart1_putchar>
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
     bfe:	80 91 81 01 	lds	r24, 0x0181
     c02:	88 23       	and	r24, r24
     c04:	a9 f0       	breq	.+42     	; 0xc30 <mu2_command_eeprom+0xd0>
     c06:	80 91 81 01 	lds	r24, 0x0181
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	fc 01       	movw	r30, r24
     c12:	ee 57       	subi	r30, 0x7E	; 126
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	80 81       	ld	r24, Z
     c18:	8d 30       	cpi	r24, 0x0D	; 13
     c1a:	51 f4       	brne	.+20     	; 0xc30 <mu2_command_eeprom+0xd0>
     c1c:	80 91 81 01 	lds	r24, 0x0181
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	fc 01       	movw	r30, r24
     c26:	ee 57       	subi	r30, 0x7E	; 126
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	80 81       	ld	r24, Z
     c2c:	8a 30       	cpi	r24, 0x0A	; 10
     c2e:	49 f0       	breq	.+18     	; 0xc42 <mu2_command_eeprom+0xe2>
	}
	uart0_putchar('/');
	uart0_putchar('W');
	uart0_putchar(0x0d);
	uart0_putchar(0x0a);
	for(i=0;i<10;i++){
     c30:	80 91 81 01 	lds	r24, 0x0181
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 93 81 01 	sts	0x0181, r24
     c3a:	80 91 81 01 	lds	r24, 0x0181
     c3e:	8a 30       	cpi	r24, 0x0A	; 10
     c40:	50 f2       	brcs	.-108    	; 0xbd6 <mu2_command_eeprom+0x76>
		tmp[i] = uart0_getchar();
		uart1_putchar(tmp[i]);
		if(i>0&&tmp[i-1] == 0x0d && tmp[i] == 0x0a) break;
	} 
	if(tmp[1]=='E'&&tmp[2]=='R'){return 1;}
     c42:	80 91 83 01 	lds	r24, 0x0183
     c46:	85 34       	cpi	r24, 0x45	; 69
     c48:	39 f4       	brne	.+14     	; 0xc58 <mu2_command_eeprom+0xf8>
     c4a:	80 91 84 01 	lds	r24, 0x0184
     c4e:	82 35       	cpi	r24, 0x52	; 82
     c50:	19 f4       	brne	.+6      	; 0xc58 <mu2_command_eeprom+0xf8>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <mu2_command_eeprom+0xfa>
	return 0;
     c58:	1d 82       	std	Y+5, r1	; 0x05
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <uart_init>:
#define stop_uart0tx_interrupt()	cbi(UCSR0B,UDRIE0)
#define start_uart1tx_interrupt()	sbi(UCSR1B,UDRIE1)
#define stop_uart1tx_interrupt()	cbi(UCSR1B,UDRIE1)

int uart_init(int uart_no,unsigned char option,unsigned int baud)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	2d 97       	sbiw	r28, 0x0d	; 13
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	8b 83       	std	Y+3, r24	; 0x03
     c88:	6d 83       	std	Y+5, r22	; 0x05
     c8a:	5f 83       	std	Y+7, r21	; 0x07
     c8c:	4e 83       	std	Y+6, r20	; 0x06
	int i;
	switch( uart_no ){
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	9d 87       	std	Y+13, r25	; 0x0d
     c94:	8c 87       	std	Y+12, r24	; 0x0c
     c96:	8c 85       	ldd	r24, Y+12	; 0x0c
     c98:	9d 85       	ldd	r25, Y+13	; 0x0d
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	31 f0       	breq	.+12     	; 0xcaa <uart_init+0x3a>
     c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	b1 f1       	breq	.+108    	; 0xd14 <uart_init+0xa4>
     ca8:	64 c0       	rjmp	.+200    	; 0xd72 <uart_init+0x102>
		case 0:
			UCSR0B = 0x00;
     caa:	e1 ec       	ldi	r30, 0xC1	; 193
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	10 82       	st	Z, r1
			UCSR0C |= 0x06;
     cb0:	a2 ec       	ldi	r26, 0xC2	; 194
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e2 ec       	ldi	r30, 0xC2	; 194
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	86 60       	ori	r24, 0x06	; 6
     cbc:	8c 93       	st	X, r24
			for(i=0; i<5000; i++);		// Wait
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <uart_init+0x5e>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	23 e1       	ldi	r18, 0x13	; 19
     cd4:	88 38       	cpi	r24, 0x88	; 136
     cd6:	92 07       	cpc	r25, r18
     cd8:	ac f3       	brlt	.-22     	; 0xcc4 <uart_init+0x54>
			UCSR0B = option;					
     cda:	e1 ec       	ldi	r30, 0xC1	; 193
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	80 83       	st	Z, r24
			UBRR0H = (unsigned char)(baud>>8);
     ce2:	e5 ec       	ldi	r30, 0xC5	; 197
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	89 2f       	mov	r24, r25
     cec:	99 27       	eor	r25, r25
     cee:	80 83       	st	Z, r24
	 		UBRR0L = (unsigned char)baud;		
     cf0:	e4 ec       	ldi	r30, 0xC4	; 196
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	80 83       	st	Z, r24
			UCSR0A;						// DummyRead
     cf8:	e0 ec       	ldi	r30, 0xC0	; 192
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
			UCSR0A &= 0xe3;				// Clear Error Flag
     cfe:	a0 ec       	ldi	r26, 0xC0	; 192
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e0 ec       	ldi	r30, 0xC0	; 192
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	83 7e       	andi	r24, 0xE3	; 227
     d0a:	8c 93       	st	X, r24
			UDR0 = 0;
     d0c:	e6 ec       	ldi	r30, 0xC6	; 198
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	10 82       	st	Z, r1
     d12:	34 c0       	rjmp	.+104    	; 0xd7c <uart_init+0x10c>
			break;
		case 1:
			UBRR1H = (unsigned char)(baud>>8);
     d14:	ed ec       	ldi	r30, 0xCD	; 205
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	8e 81       	ldd	r24, Y+6	; 0x06
     d1a:	9f 81       	ldd	r25, Y+7	; 0x07
     d1c:	89 2f       	mov	r24, r25
     d1e:	99 27       	eor	r25, r25
     d20:	80 83       	st	Z, r24
	 		UBRR1L = (unsigned char)baud;	 
     d22:	ec ec       	ldi	r30, 0xCC	; 204
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	80 83       	st	Z, r24
			for(i=0; i<5000; i++);		// Wait
     d2a:	1a 82       	std	Y+2, r1	; 0x02
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <uart_init+0xca>
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	23 e1       	ldi	r18, 0x13	; 19
     d40:	88 38       	cpi	r24, 0x88	; 136
     d42:	92 07       	cpc	r25, r18
     d44:	ac f3       	brlt	.-22     	; 0xd30 <uart_init+0xc0>
			UCSR1B |= option;
     d46:	a9 ec       	ldi	r26, 0xC9	; 201
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 ec       	ldi	r30, 0xC9	; 201
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	90 81       	ld	r25, Z
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	89 2b       	or	r24, r25
     d54:	8c 93       	st	X, r24
			UCSR1A;						// DummyRead
     d56:	e8 ec       	ldi	r30, 0xC8	; 200
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
			UCSR1A &= 0xe3;				// Clear Error Flag
     d5c:	a8 ec       	ldi	r26, 0xC8	; 200
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 ec       	ldi	r30, 0xC8	; 200
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	83 7e       	andi	r24, 0xE3	; 227
     d68:	8c 93       	st	X, r24
			UDR1 = 0;
     d6a:	ee ec       	ldi	r30, 0xCE	; 206
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	10 82       	st	Z, r1
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <uart_init+0x10c>
			break;
		default:
			return -1;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	99 87       	std	Y+9, r25	; 0x09
     d78:	88 87       	std	Y+8, r24	; 0x08
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <uart_init+0x110>
	}
	return 0;
     d7c:	19 86       	std	Y+9, r1	; 0x09
     d7e:	18 86       	std	Y+8, r1	; 0x08
     d80:	88 85       	ldd	r24, Y+8	; 0x08
     d82:	99 85       	ldd	r25, Y+9	; 0x09
}
     d84:	2d 96       	adiw	r28, 0x0d	; 13
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <uart_setbuffer>:

void uart_setbuffer(int uart_no, unsigned char *buf, int size)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <uart_setbuffer+0x6>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <uart_setbuffer+0x8>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <uart_setbuffer+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	7c 83       	std	Y+4, r23	; 0x04
     daa:	6b 83       	std	Y+3, r22	; 0x03
     dac:	5e 83       	std	Y+6, r21	; 0x06
     dae:	4d 83       	std	Y+5, r20	; 0x05
	if( uart_no<0 || uart_no>=UART_NUM )	return;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	99 23       	and	r25, r25
     db6:	cc f0       	brlt	.+50     	; 0xdea <uart_setbuffer+0x54>
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	91 05       	cpc	r25, r1
     dc0:	a4 f4       	brge	.+40     	; 0xdea <uart_setbuffer+0x54>
	RingInit(&(__uartbuf[uart_no]), buf, size);
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
     dc4:	3a 81       	ldd	r19, Y+2	; 0x02
     dc6:	c9 01       	movw	r24, r18
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	81 57       	subi	r24, 0x71	; 113
     dda:	9e 4f       	sbci	r25, 0xFE	; 254
     ddc:	4d 81       	ldd	r20, Y+5	; 0x05
     dde:	5e 81       	ldd	r21, Y+6	; 0x06
     de0:	2b 81       	ldd	r18, Y+3	; 0x03
     de2:	3c 81       	ldd	r19, Y+4	; 0x04
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 c3 08 	call	0x1186	; 0x1186 <RingInit>
}
     dea:	26 96       	adiw	r28, 0x06	; 6
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <uart0_getchar>:

unsigned char uart0_getchar(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	while( !bit_is_set(UCSR0A,RXC0) );
     e04:	e0 ec       	ldi	r30, 0xC0	; 192
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	dc f7       	brge	.-10     	; 0xe04 <uart0_getchar+0x8>
	cbi(UCSR0A,RXC0);
     e0e:	a0 ec       	ldi	r26, 0xC0	; 192
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e0 ec       	ldi	r30, 0xC0	; 192
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 77       	andi	r24, 0x7F	; 127
     e1a:	8c 93       	st	X, r24
	return UDR0;
     e1c:	e6 ec       	ldi	r30, 0xC6	; 198
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <uart0_putchar>:

int uart0_putchar(char c)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#else
#endif*/
	while( !bit_is_set(UCSR0A,UDRE0) );
     e34:	e0 ec       	ldi	r30, 0xC0	; 192
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	80 72       	andi	r24, 0x20	; 32
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	b9 f3       	breq	.-18     	; 0xe34 <uart0_putchar+0xc>
	UDR0 = c;
     e46:	e6 ec       	ldi	r30, 0xC6	; 198
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	80 83       	st	Z, r24
	cbi(UCSR0A,UDRE0);
     e4e:	a0 ec       	ldi	r26, 0xC0	; 192
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e0 ec       	ldi	r30, 0xC0	; 192
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8f 7d       	andi	r24, 0xDF	; 223
     e5a:	8c 93       	st	X, r24
	
	return 0;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
}
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <uart1_putchar>:

int uart1_putchar(char c)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	8a 30       	cpi	r24, 0x0A	; 10
     e78:	a1 f4       	brne	.+40     	; 0xea2 <uart1_putchar+0x3a>
		while( !bit_is_set(UCSR1A,UDRE1) );
     e7a:	e8 ec       	ldi	r30, 0xC8	; 200
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 72       	andi	r24, 0x20	; 32
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <uart1_putchar+0x12>
		UDR1 = '\r';
     e8c:	ee ec       	ldi	r30, 0xCE	; 206
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	8d e0       	ldi	r24, 0x0D	; 13
     e92:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);
     e94:	a8 ec       	ldi	r26, 0xC8	; 200
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e8 ec       	ldi	r30, 0xC8	; 200
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7d       	andi	r24, 0xDF	; 223
     ea0:	8c 93       	st	X, r24
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	while( !bit_is_set(UCSR1A,UDRE1) );
     ea2:	e8 ec       	ldi	r30, 0xC8	; 200
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	80 72       	andi	r24, 0x20	; 32
     eae:	90 70       	andi	r25, 0x00	; 0
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	b9 f3       	breq	.-18     	; 0xea2 <uart1_putchar+0x3a>
	UDR1 = c;
     eb4:	ee ec       	ldi	r30, 0xCE	; 206
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	80 83       	st	Z, r24
	cbi(UCSR1A,UDRE1);
     ebc:	a8 ec       	ldi	r26, 0xC8	; 200
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e8 ec       	ldi	r30, 0xC8	; 200
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7d       	andi	r24, 0xDF	; 223
     ec8:	8c 93       	st	X, r24

	return 0;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <uart0_buf_putchar>:

int uart0_buf_putchar(char c)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <uart0_buf_putchar+0x6>
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     ee8:	ef e5       	ldi	r30, 0x5F	; 95
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 93 8c 01 	sts	0x018C, r24
	cli();
     ef2:	f8 94       	cli
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	8a 30       	cpi	r24, 0x0A	; 10
     ef8:	61 f4       	brne	.+24     	; 0xf12 <uart0_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[0], '\r') ){
     efa:	8f e8       	ldi	r24, 0x8F	; 143
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	6d e0       	ldi	r22, 0x0D	; 13
     f00:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <RingPut>
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	29 f4       	brne	.+10     	; 0xf12 <uart0_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	9f ef       	ldi	r25, 0xFF	; 255
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	12 c0       	rjmp	.+36     	; 0xf36 <uart0_buf_putchar+0x60>
#elif (UART0_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART0_LINE_FEED == LF_CODE)
#endif

	if( !RingPut(&__uartbuf[0], c) ){
     f12:	8f e8       	ldi	r24, 0x8F	; 143
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	6b 81       	ldd	r22, Y+3	; 0x03
     f18:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <RingPut>
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	21 f4       	brne	.+8      	; 0xf28 <uart0_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart0tx_interrupt();
     f28:	a1 ec       	ldi	r26, 0xC1	; 193
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 ec       	ldi	r30, 0xC1	; 193
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	8c 93       	st	X, r24
	
#if (UART0_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart0_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     f36:	ef e5       	ldi	r30, 0x5F	; 95
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 91 8c 01 	lds	r24, 0x018C
     f3e:	80 83       	st	Z, r24

	return ret;
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <uart1_buf_putchar>:

int uart1_buf_putchar(char c)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <uart1_buf_putchar+0x6>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	8b 83       	std	Y+3, r24	; 0x03
	int ret;
	
	ret = 0;
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	19 82       	std	Y+1, r1	; 0x01
	_uart_interrupt_status = SREG;
     f62:	ef e5       	ldi	r30, 0x5F	; 95
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 93 8c 01 	sts	0x018C, r24
	cli();
     f6c:	f8 94       	cli
	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
	if( c == '\n' ){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	8a 30       	cpi	r24, 0x0A	; 10
     f72:	61 f4       	brne	.+24     	; 0xf8c <uart1_buf_putchar+0x3c>
		if( !RingPut(&__uartbuf[1], '\r') ){
     f74:	88 e9       	ldi	r24, 0x98	; 152
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	6d e0       	ldi	r22, 0x0D	; 13
     f7a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <RingPut>
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	29 f4       	brne	.+10     	; 0xf8c <uart1_buf_putchar+0x3c>
			ret = -1;	// Buffer Full
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <uart1_buf_putchar+0x60>
	}
#elif (UART1_LINE_FEED == CR_CODE)				// CR
	if( c == '\n' )		c = '\r';
#elif (UART1_LINE_FEED == LF_CODE)
#endif
	if( !RingPut(&__uartbuf[1], c) ){
     f8c:	88 e9       	ldi	r24, 0x98	; 152
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	6b 81       	ldd	r22, Y+3	; 0x03
     f92:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <RingPut>
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	21 f4       	brne	.+8      	; 0xfa2 <uart1_buf_putchar+0x52>
		ret = -1;	// Buffer Full
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	}
	start_uart1tx_interrupt();
     fa2:	a9 ec       	ldi	r26, 0xC9	; 201
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 ec       	ldi	r30, 0xC9	; 201
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 62       	ori	r24, 0x20	; 32
     fae:	8c 93       	st	X, r24

	
#if (UART1_LINE_FEED == CR_CODE | LF_CODE)		// CRLF
_exit_uart1_buf_putchar:
#endif
	SREG = _uart_interrupt_status;
     fb0:	ef e5       	ldi	r30, 0x5F	; 95
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 91 8c 01 	lds	r24, 0x018C
     fb8:	80 83       	st	Z, r24

	return ret;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <__vector_21>:


ISR(USART0_UDRE_vect)
{
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	00 90 5b 00 	lds	r0, 0x005B
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;

	if( RingGet(&__uartbuf[0], &c) ){
     ffc:	8f e8       	ldi	r24, 0x8F	; 143
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	9e 01       	movw	r18, r28
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	b9 01       	movw	r22, r18
    1008:	0e 94 44 09 	call	0x1288	; 0x1288 <RingGet>
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	61 f0       	breq	.+24     	; 0x1028 <__vector_21+0x5e>
		UDR0 = c;
    1010:	e6 ec       	ldi	r30, 0xC6	; 198
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	80 83       	st	Z, r24
		cbi(UCSR0A,UDRE0);			// UDREクリア
    1018:	a0 ec       	ldi	r26, 0xC0	; 192
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e0 ec       	ldi	r30, 0xC0	; 192
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7d       	andi	r24, 0xDF	; 223
    1024:	8c 93       	st	X, r24
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <__vector_21+0x7a>
	}else{
		stop_uart0tx_interrupt();
    1028:	a1 ec       	ldi	r26, 0xC1	; 193
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e1 ec       	ldi	r30, 0xC1	; 193
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
		cbi(UCSR0A,UDRE0);
    1036:	a0 ec       	ldi	r26, 0xC0	; 192
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e0 ec       	ldi	r30, 0xC0	; 192
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7d       	andi	r24, 0xDF	; 223
    1042:	8c 93       	st	X, r24
	}
}
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	00 92 5b 00 	sts	0x005B, r0
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_29>:

ISR(USART1_UDRE_vect)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	00 90 5b 00 	lds	r0, 0x005B
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	2f 93       	push	r18
    1084:	3f 93       	push	r19
    1086:	4f 93       	push	r20
    1088:	5f 93       	push	r21
    108a:	6f 93       	push	r22
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	
	if( RingGet(&__uartbuf[1], &c) ){
    10a4:	88 e9       	ldi	r24, 0x98	; 152
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	9e 01       	movw	r18, r28
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	b9 01       	movw	r22, r18
    10b0:	0e 94 44 09 	call	0x1288	; 0x1288 <RingGet>
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <__vector_29+0x5e>
		UDR1 = c;
    10b8:	ee ec       	ldi	r30, 0xCE	; 206
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	80 83       	st	Z, r24
		cbi(UCSR1A,UDRE1);			// UDREクリア
    10c0:	a8 ec       	ldi	r26, 0xC8	; 200
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 ec       	ldi	r30, 0xC8	; 200
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7d       	andi	r24, 0xDF	; 223
    10cc:	8c 93       	st	X, r24
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <__vector_29+0x7a>
	}else{
		stop_uart1tx_interrupt();
    10d0:	a9 ec       	ldi	r26, 0xC9	; 201
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e9 ec       	ldi	r30, 0xC9	; 201
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7d       	andi	r24, 0xDF	; 223
    10dc:	8c 93       	st	X, r24
		cbi(UCSR1A,UDRE1);
    10de:	a8 ec       	ldi	r26, 0xC8	; 200
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 ec       	ldi	r30, 0xC8	; 200
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7d       	andi	r24, 0xDF	; 223
    10ea:	8c 93       	st	X, r24
	}
}
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	ff 91       	pop	r31
    10f4:	ef 91       	pop	r30
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	00 92 5b 00 	sts	0x005B, r0
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_28>:
		LED(0,true);
	}
}
*/
ISR(USART1_RX_vect)
{
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	00 90 5b 00 	lds	r0, 0x005B
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	RingPut(&(__uartbuf[1]), UDR1);
    114a:	ee ec       	ldi	r30, 0xCE	; 206
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	20 81       	ld	r18, Z
    1150:	88 e9       	ldi	r24, 0x98	; 152
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	62 2f       	mov	r22, r18
    1156:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <RingPut>
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	00 92 5b 00 	sts	0x005B, r0
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <RingInit>:
#include "ringbuffer.h"

__inline__ void RingInit(RingBuffer *ring, unsigned char *buf, unsigned int size)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <RingInit+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <RingInit+0x8>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <RingInit+0xa>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	7c 83       	std	Y+4, r23	; 0x04
    119a:	6b 83       	std	Y+3, r22	; 0x03
    119c:	5e 83       	std	Y+6, r21	; 0x06
    119e:	4d 83       	std	Y+5, r20	; 0x05
	ring->buf = buf;
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
	ring->size = size;
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	97 83       	std	Z+7, r25	; 0x07
    11b6:	86 83       	std	Z+6, r24	; 0x06
	ring->rp = 0;
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	13 82       	std	Z+3, r1	; 0x03
    11be:	12 82       	std	Z+2, r1	; 0x02
	ring->wp = 0;
    11c0:	e9 81       	ldd	r30, Y+1	; 0x01
    11c2:	fa 81       	ldd	r31, Y+2	; 0x02
    11c4:	15 82       	std	Z+5, r1	; 0x05
    11c6:	14 82       	std	Z+4, r1	; 0x04
	ring->empty = TRUE;
    11c8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ca:	fa 81       	ldd	r31, Y+2	; 0x02
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 87       	std	Z+8, r24	; 0x08
}
    11d0:	26 96       	adiw	r28, 0x06	; 6
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <RingPut>:

__inline__ int RingPut(RingBuffer *ring, unsigned char value)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <RingPut+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <RingPut+0x8>
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty && ring->rp == ring->wp ){
    11f6:	e9 81       	ldd	r30, Y+1	; 0x01
    11f8:	fa 81       	ldd	r31, Y+2	; 0x02
    11fa:	80 85       	ldd	r24, Z+8	; 0x08
    11fc:	88 23       	and	r24, r24
    11fe:	71 f4       	brne	.+28     	; 0x121c <RingPut+0x3a>
    1200:	e9 81       	ldd	r30, Y+1	; 0x01
    1202:	fa 81       	ldd	r31, Y+2	; 0x02
    1204:	22 81       	ldd	r18, Z+2	; 0x02
    1206:	33 81       	ldd	r19, Z+3	; 0x03
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	84 81       	ldd	r24, Z+4	; 0x04
    120e:	95 81       	ldd	r25, Z+5	; 0x05
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	19 f4       	brne	.+6      	; 0x121c <RingPut+0x3a>
		return FALSE;
    1216:	1d 82       	std	Y+5, r1	; 0x05
    1218:	1c 82       	std	Y+4, r1	; 0x04
    121a:	2c c0       	rjmp	.+88     	; 0x1274 <RingPut+0x92>
	}
	ring->buf[ring->wp] = value;
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	20 81       	ld	r18, Z
    1222:	31 81       	ldd	r19, Z+1	; 0x01
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	95 81       	ldd	r25, Z+5	; 0x05
    122c:	f9 01       	movw	r30, r18
    122e:	e8 0f       	add	r30, r24
    1230:	f9 1f       	adc	r31, r25
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	80 83       	st	Z, r24
	ring->wp++;
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	84 81       	ldd	r24, Z+4	; 0x04
    123c:	95 81       	ldd	r25, Z+5	; 0x05
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	e9 81       	ldd	r30, Y+1	; 0x01
    1242:	fa 81       	ldd	r31, Y+2	; 0x02
    1244:	95 83       	std	Z+5, r25	; 0x05
    1246:	84 83       	std	Z+4, r24	; 0x04
	if( ring->wp == ring->size ) ring->wp = 0;
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	fa 81       	ldd	r31, Y+2	; 0x02
    124c:	24 81       	ldd	r18, Z+4	; 0x04
    124e:	35 81       	ldd	r19, Z+5	; 0x05
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	86 81       	ldd	r24, Z+6	; 0x06
    1256:	97 81       	ldd	r25, Z+7	; 0x07
    1258:	28 17       	cp	r18, r24
    125a:	39 07       	cpc	r19, r25
    125c:	21 f4       	brne	.+8      	; 0x1266 <RingPut+0x84>
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	15 82       	std	Z+5, r1	; 0x05
    1264:	14 82       	std	Z+4, r1	; 0x04

	ring->empty = FALSE;
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	10 86       	std	Z+8, r1	; 0x08
	
	return TRUE;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9d 83       	std	Y+5, r25	; 0x05
    1272:	8c 83       	std	Y+4, r24	; 0x04
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <RingGet>:

__inline__ int RingGet(RingBuffer *ring, unsigned char *value)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <RingGet+0x6>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <RingGet+0x8>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <RingGet+0xa>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	7c 83       	std	Y+4, r23	; 0x04
    129c:	6b 83       	std	Y+3, r22	; 0x03
	if( !ring->empty ){
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	80 85       	ldd	r24, Z+8	; 0x08
    12a4:	88 23       	and	r24, r24
    12a6:	d9 f5       	brne	.+118    	; 0x131e <RingGet+0x96>
		*value = ring->buf[ring->rp];
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	f9 01       	movw	r30, r18
    12ba:	e8 0f       	add	r30, r24
    12bc:	f9 1f       	adc	r31, r25
    12be:	80 81       	ld	r24, Z
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	80 83       	st	Z, r24
		ring->rp++;
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
    12d6:	82 83       	std	Z+2, r24	; 0x02
		if( ring->rp == ring->size ) ring->rp = 0;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	22 81       	ldd	r18, Z+2	; 0x02
    12de:	33 81       	ldd	r19, Z+3	; 0x03
    12e0:	e9 81       	ldd	r30, Y+1	; 0x01
    12e2:	fa 81       	ldd	r31, Y+2	; 0x02
    12e4:	86 81       	ldd	r24, Z+6	; 0x06
    12e6:	97 81       	ldd	r25, Z+7	; 0x07
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <RingGet+0x6e>
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	13 82       	std	Z+3, r1	; 0x03
    12f4:	12 82       	std	Z+2, r1	; 0x02
		if( ring->rp == ring->wp )	ring->empty = TRUE;
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	22 81       	ldd	r18, Z+2	; 0x02
    12fc:	33 81       	ldd	r19, Z+3	; 0x03
    12fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1300:	fa 81       	ldd	r31, Y+2	; 0x02
    1302:	84 81       	ldd	r24, Z+4	; 0x04
    1304:	95 81       	ldd	r25, Z+5	; 0x05
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	21 f4       	brne	.+8      	; 0x1314 <RingGet+0x8c>
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	80 87       	std	Z+8, r24	; 0x08

		return TRUE;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <RingGet+0xa0>
	}else{			// リングバッファが空のとき
		*value = 0;
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	10 82       	st	Z, r1
		return FALSE;
    1324:	1e 82       	std	Y+6, r1	; 0x06
    1326:	1d 82       	std	Y+5, r1	; 0x05
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    132c:	26 96       	adiw	r28, 0x06	; 6
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <isRingEmpty>:

__inline__ int isRingEmpty(RingBuffer *ring)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <isRingEmpty+0x6>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
   return ring->empty;
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
    1350:	80 85       	ldd	r24, Z+8	; 0x08
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <initI2CMaster>:
	volatile bool i2cComFlag = false;
#endif

#if MASTER_COMPILE
void initI2CMaster(unsigned char speed)
    {
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <initI2CMaster+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <initI2CMaster+0x8>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
		TWBR = (((CLOCK_FREQ*1000)/speed)-16)/2;
    1370:	88 eb       	ldi	r24, 0xB8	; 184
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	9e e4       	ldi	r25, 0x4E	; 78
    1382:	b9 01       	movw	r22, r18
    1384:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__divmodhi4>
    1388:	cb 01       	movw	r24, r22
    138a:	40 97       	sbiw	r24, 0x10	; 16
    138c:	9d 83       	std	Y+5, r25	; 0x05
    138e:	8c 83       	std	Y+4, r24	; 0x04
    1390:	ec 81       	ldd	r30, Y+4	; 0x04
    1392:	fd 81       	ldd	r31, Y+5	; 0x05
    1394:	ff 23       	and	r31, r31
    1396:	2c f4       	brge	.+10     	; 0x13a2 <initI2CMaster+0x42>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	9d 83       	std	Y+5, r25	; 0x05
    13a0:	8c 83       	std	Y+4, r24	; 0x04
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	95 95       	asr	r25
    13a8:	87 95       	ror	r24
    13aa:	ea 81       	ldd	r30, Y+2	; 0x02
    13ac:	fb 81       	ldd	r31, Y+3	; 0x03
    13ae:	80 83       	st	Z, r24
		TWSR = 0;
    13b0:	e9 eb       	ldi	r30, 0xB9	; 185
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	10 82       	st	Z, r1
		TWCR = I2CEN;
    13b6:	ec eb       	ldi	r30, 0xBC	; 188
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	80 83       	st	Z, r24
    }
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <i2cWrite>:
	}
#endif

#if MASTER_COMPILE
bool i2cWrite(Slave *slave)
    {
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <i2cWrite+0x6>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
			cli();
    13de:	f8 94       	cli
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    13e0:	ec eb       	ldi	r30, 0xBC	; 188
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	84 ea       	ldi	r24, 0xA4	; 164
    13e6:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    13e8:	ec eb       	ldi	r30, 0xBC	; 188
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	88 23       	and	r24, r24
    13f0:	dc f7       	brge	.-10     	; 0x13e8 <i2cWrite+0x1a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x08) goto ERROR;
    13f2:	e9 eb       	ldi	r30, 0xB9	; 185
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 7f       	andi	r24, 0xF8	; 248
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	91 05       	cpc	r25, r1
    1404:	09 f0       	breq	.+2      	; 0x1408 <i2cWrite+0x3a>
    1406:	58 c0       	rjmp	.+176    	; 0x14b8 <i2cWrite+0xea>

		TWDR = (slave->addr<<1);
    1408:	ab eb       	ldi	r26, 0xBB	; 187
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	80 81       	ld	r24, Z
    1412:	88 0f       	add	r24, r24
    1414:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1416:	ec eb       	ldi	r30, 0xBC	; 188
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	84 e8       	ldi	r24, 0x84	; 132
    141c:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    141e:	ec eb       	ldi	r30, 0xBC	; 188
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 23       	and	r24, r24
    1426:	dc f7       	brge	.-10     	; 0x141e <i2cWrite+0x50>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;
    1428:	e9 eb       	ldi	r30, 0xB9	; 185
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 7f       	andi	r24, 0xF8	; 248
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	88 31       	cpi	r24, 0x18	; 24
    1438:	91 05       	cpc	r25, r1
    143a:	09 f0       	breq	.+2      	; 0x143e <i2cWrite+0x70>
    143c:	3d c0       	rjmp	.+122    	; 0x14b8 <i2cWrite+0xea>

		for(i=0;i<slave->write.size;i++){
    143e:	10 92 8d 01 	sts	0x018D, r1
    1442:	27 c0       	rjmp	.+78     	; 0x1492 <i2cWrite+0xc4>
			TWDR=slave->write.buf[i];
    1444:	ab eb       	ldi	r26, 0xBB	; 187
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e9 81       	ldd	r30, Y+1	; 0x01
    144a:	fa 81       	ldd	r31, Y+2	; 0x02
    144c:	21 81       	ldd	r18, Z+1	; 0x01
    144e:	32 81       	ldd	r19, Z+2	; 0x02
    1450:	80 91 8d 01 	lds	r24, 0x018D
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	f9 01       	movw	r30, r18
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	80 81       	ld	r24, Z
    1460:	8c 93       	st	X, r24
			TWCR=(1<<TWINT)|(1<<TWEN);
    1462:	ec eb       	ldi	r30, 0xBC	; 188
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	84 e8       	ldi	r24, 0x84	; 132
    1468:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    146a:	ec eb       	ldi	r30, 0xBC	; 188
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	dc f7       	brge	.-10     	; 0x146a <i2cWrite+0x9c>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
    1474:	e9 eb       	ldi	r30, 0xB9	; 185
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	88 7f       	andi	r24, 0xF8	; 248
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 32       	cpi	r24, 0x28	; 40
    1484:	91 05       	cpc	r25, r1
    1486:	c1 f4       	brne	.+48     	; 0x14b8 <i2cWrite+0xea>
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x18) goto ERROR;

		for(i=0;i<slave->write.size;i++){
    1488:	80 91 8d 01 	lds	r24, 0x018D
    148c:	8f 5f       	subi	r24, 0xFF	; 255
    148e:	80 93 8d 01 	sts	0x018D, r24
    1492:	80 91 8d 01 	lds	r24, 0x018D
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	83 81       	ldd	r24, Z+3	; 0x03
    14a0:	94 81       	ldd	r25, Z+4	; 0x04
    14a2:	28 17       	cp	r18, r24
    14a4:	39 07       	cpc	r19, r25
    14a6:	70 f2       	brcs	.-100    	; 0x1444 <i2cWrite+0x76>
		wdt_reset();

#endif
			if((TWSR&0xF8)!=0x28) goto ERROR;
			}
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14a8:	ec eb       	ldi	r30, 0xBC	; 188
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	84 e9       	ldi	r24, 0x94	; 148
    14ae:	80 83       	st	Z, r24

		wdt_disable();

#endif

		sei();
    14b0:	78 94       	sei
		return true;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <i2cWrite+0xf6>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    14b8:	ec eb       	ldi	r30, 0xBC	; 188
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	84 e9       	ldi	r24, 0x94	; 148
    14be:	80 83       	st	Z, r24
		sei();
    14c0:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    14c2:	1b 82       	std	Y+3, r1	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <i2cRead>:

bool i2cRead(Slave *slave)
    {
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <i2cRead+0x6>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
		cli();
    14e2:	f8 94       	cli

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    14e4:	ec eb       	ldi	r30, 0xBC	; 188
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	84 ea       	ldi	r24, 0xA4	; 164
    14ea:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    14ec:	ec eb       	ldi	r30, 0xBC	; 188
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	dc f7       	brge	.-10     	; 0x14ec <i2cRead+0x1a>
		if((TWSR&0xF8)!=0x08) goto ERROR;
    14f6:	e9 eb       	ldi	r30, 0xB9	; 185
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	88 7f       	andi	r24, 0xF8	; 248
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	88 30       	cpi	r24, 0x08	; 8
    1506:	91 05       	cpc	r25, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <i2cRead+0x3a>
    150a:	80 c0       	rjmp	.+256    	; 0x160c <i2cRead+0x13a>

		TWDR = (slave->addr<<1)|0x01;
    150c:	ab eb       	ldi	r26, 0xBB	; 187
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	80 81       	ld	r24, Z
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	81 60       	ori	r24, 0x01	; 1
    1520:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1522:	ec eb       	ldi	r30, 0xBC	; 188
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	84 e8       	ldi	r24, 0x84	; 132
    1528:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    152a:	ec eb       	ldi	r30, 0xBC	; 188
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 23       	and	r24, r24
    1532:	dc f7       	brge	.-10     	; 0x152a <i2cRead+0x58>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    1534:	e9 eb       	ldi	r30, 0xB9	; 185
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 7f       	andi	r24, 0xF8	; 248
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	80 34       	cpi	r24, 0x40	; 64
    1544:	91 05       	cpc	r25, r1
    1546:	09 f0       	breq	.+2      	; 0x154a <i2cRead+0x78>
    1548:	61 c0       	rjmp	.+194    	; 0x160c <i2cRead+0x13a>

		for(i=0;i<slave->read.size-1;i++){
    154a:	10 92 8d 01 	sts	0x018D, r1
    154e:	28 c0       	rjmp	.+80     	; 0x15a0 <i2cRead+0xce>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1550:	ec eb       	ldi	r30, 0xBC	; 188
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	84 ec       	ldi	r24, 0xC4	; 196
    1556:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    1558:	ec eb       	ldi	r30, 0xBC	; 188
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 23       	and	r24, r24
    1560:	dc f7       	brge	.-10     	; 0x1558 <i2cRead+0x86>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1562:	e9 eb       	ldi	r30, 0xB9	; 185
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 7f       	andi	r24, 0xF8	; 248
    156e:	90 70       	andi	r25, 0x00	; 0
    1570:	80 35       	cpi	r24, 0x50	; 80
    1572:	91 05       	cpc	r25, r1
    1574:	09 f0       	breq	.+2      	; 0x1578 <i2cRead+0xa6>
    1576:	4a c0       	rjmp	.+148    	; 0x160c <i2cRead+0x13a>
			slave->read.buf[i] = TWDR;
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	25 81       	ldd	r18, Z+5	; 0x05
    157e:	36 81       	ldd	r19, Z+6	; 0x06
    1580:	80 91 8d 01 	lds	r24, 0x018D
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	d9 01       	movw	r26, r18
    158a:	a8 0f       	add	r26, r24
    158c:	b9 1f       	adc	r27, r25
    158e:	eb eb       	ldi	r30, 0xBB	; 187
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8c 93       	st	X, r24
		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1596:	80 91 8d 01 	lds	r24, 0x018D
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 8d 01 	sts	0x018D, r24
    15a0:	80 91 8d 01 	lds	r24, 0x018D
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	87 81       	ldd	r24, Z+7	; 0x07
    15ae:	90 85       	ldd	r25, Z+8	; 0x08
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	60 f2       	brcs	.-104    	; 0x1550 <i2cRead+0x7e>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    15b8:	ec eb       	ldi	r30, 0xBC	; 188
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	84 e8       	ldi	r24, 0x84	; 132
    15be:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    15c0:	ec eb       	ldi	r30, 0xBC	; 188
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	dc f7       	brge	.-10     	; 0x15c0 <i2cRead+0xee>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    15ca:	e9 eb       	ldi	r30, 0xB9	; 185
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	90 70       	andi	r25, 0x00	; 0
    15d8:	88 35       	cpi	r24, 0x58	; 88
    15da:	91 05       	cpc	r25, r1
    15dc:	b9 f4       	brne	.+46     	; 0x160c <i2cRead+0x13a>
		slave->read.buf[i] = TWDR;
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	25 81       	ldd	r18, Z+5	; 0x05
    15e4:	36 81       	ldd	r19, Z+6	; 0x06
    15e6:	80 91 8d 01 	lds	r24, 0x018D
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	d9 01       	movw	r26, r18
    15f0:	a8 0f       	add	r26, r24
    15f2:	b9 1f       	adc	r27, r25
    15f4:	eb eb       	ldi	r30, 0xBB	; 187
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    15fc:	ec eb       	ldi	r30, 0xBC	; 188
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	84 e9       	ldi	r24, 0x94	; 148
    1602:	80 83       	st	Z, r24
		sei();
    1604:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	8b 83       	std	Y+3, r24	; 0x03
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <i2cRead+0x146>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    160c:	ec eb       	ldi	r30, 0xBC	; 188
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	84 e9       	ldi	r24, 0x94	; 148
    1612:	80 83       	st	Z, r24
		sei();
    1614:	78 94       	sei
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    1616:	1b 82       	std	Y+3, r1	; 0x03
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <i2cReadWithCommand>:

bool i2cReadWithCommand(Slave *slave, unsigned char command)
    {
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <i2cReadWithCommand+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <i2cReadWithCommand+0x8>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6b 83       	std	Y+3, r22	; 0x03
//		cli();

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    1638:	ec eb       	ldi	r30, 0xBC	; 188
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	84 ea       	ldi	r24, 0xA4	; 164
    163e:	80 83       	st	Z, r24
		wdt_reset();

		wdt_enable(WDT_RESET_TIME);

#endif
		while(!(TWCR&(1<<TWINT)));
    1640:	ec eb       	ldi	r30, 0xBC	; 188
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	dc f7       	brge	.-10     	; 0x1640 <i2cReadWithCommand+0x1a>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x08) goto ERROR;

		TWDR = (slave->addr<<1);
    164a:	ab eb       	ldi	r26, 0xBB	; 187
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e9 81       	ldd	r30, Y+1	; 0x01
    1650:	fa 81       	ldd	r31, Y+2	; 0x02
    1652:	80 81       	ld	r24, Z
    1654:	88 0f       	add	r24, r24
    1656:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    1658:	ec eb       	ldi	r30, 0xBC	; 188
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	84 e8       	ldi	r24, 0x84	; 132
    165e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1660:	ec eb       	ldi	r30, 0xBC	; 188
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	88 23       	and	r24, r24
    1668:	dc f7       	brge	.-10     	; 0x1660 <i2cReadWithCommand+0x3a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x40) goto ERROR;
    166a:	e9 eb       	ldi	r30, 0xB9	; 185
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	88 7f       	andi	r24, 0xF8	; 248
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	80 34       	cpi	r24, 0x40	; 64
    167a:	91 05       	cpc	r25, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <i2cReadWithCommand+0x5a>
    167e:	a0 c0       	rjmp	.+320    	; 0x17c0 <i2cReadWithCommand+0x19a>

		TWDR=command;
    1680:	eb eb       	ldi	r30, 0xBB	; 187
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1688:	ec eb       	ldi	r30, 0xBC	; 188
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	84 e8       	ldi	r24, 0x84	; 132
    168e:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1690:	ec eb       	ldi	r30, 0xBC	; 188
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	dc f7       	brge	.-10     	; 0x1690 <i2cReadWithCommand+0x6a>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x28) goto ERROR;
    169a:	e9 eb       	ldi	r30, 0xB9	; 185
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	88 7f       	andi	r24, 0xF8	; 248
    16a6:	90 70       	andi	r25, 0x00	; 0
    16a8:	88 32       	cpi	r24, 0x28	; 40
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <i2cReadWithCommand+0x8a>
    16ae:	88 c0       	rjmp	.+272    	; 0x17c0 <i2cReadWithCommand+0x19a>

		TWCR = (1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
    16b0:	ec eb       	ldi	r30, 0xBC	; 188
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	84 ea       	ldi	r24, 0xA4	; 164
    16b6:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16b8:	ec eb       	ldi	r30, 0xBC	; 188
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	88 23       	and	r24, r24
    16c0:	dc f7       	brge	.-10     	; 0x16b8 <i2cReadWithCommand+0x92>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x10) goto ERROR;
    16c2:	e9 eb       	ldi	r30, 0xB9	; 185
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 7f       	andi	r24, 0xF8	; 248
    16ce:	90 70       	andi	r25, 0x00	; 0
    16d0:	80 31       	cpi	r24, 0x10	; 16
    16d2:	91 05       	cpc	r25, r1
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <i2cReadWithCommand+0xb2>
    16d6:	74 c0       	rjmp	.+232    	; 0x17c0 <i2cReadWithCommand+0x19a>

		TWDR = (slave->addr<<1)|0x01;
    16d8:	ab eb       	ldi	r26, 0xBB	; 187
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e9 81       	ldd	r30, Y+1	; 0x01
    16de:	fa 81       	ldd	r31, Y+2	; 0x02
    16e0:	80 81       	ld	r24, Z
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	8c 93       	st	X, r24
		TWCR = (1<<TWINT)|(1<<TWEN);
    16ee:	ec eb       	ldi	r30, 0xBC	; 188
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	84 e8       	ldi	r24, 0x84	; 132
    16f4:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    16f6:	ec eb       	ldi	r30, 0xBC	; 188
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 23       	and	r24, r24
    16fe:	dc f7       	brge	.-10     	; 0x16f6 <i2cReadWithCommand+0xd0>
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    1700:	10 92 8d 01 	sts	0x018D, r1
    1704:	28 c0       	rjmp	.+80     	; 0x1756 <i2cReadWithCommand+0x130>
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1706:	ec eb       	ldi	r30, 0xBC	; 188
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	84 ec       	ldi	r24, 0xC4	; 196
    170c:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT)));
    170e:	ec eb       	ldi	r30, 0xBC	; 188
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 23       	and	r24, r24
    1716:	dc f7       	brge	.-10     	; 0x170e <i2cReadWithCommand+0xe8>
#if WDT_RESET_IN_I2C

			wdt_reset();

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
    1718:	e9 eb       	ldi	r30, 0xB9	; 185
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	88 7f       	andi	r24, 0xF8	; 248
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	80 35       	cpi	r24, 0x50	; 80
    1728:	91 05       	cpc	r25, r1
    172a:	09 f0       	breq	.+2      	; 0x172e <i2cReadWithCommand+0x108>
    172c:	49 c0       	rjmp	.+146    	; 0x17c0 <i2cReadWithCommand+0x19a>
			slave->read.buf[i] = TWDR;
    172e:	e9 81       	ldd	r30, Y+1	; 0x01
    1730:	fa 81       	ldd	r31, Y+2	; 0x02
    1732:	25 81       	ldd	r18, Z+5	; 0x05
    1734:	36 81       	ldd	r19, Z+6	; 0x06
    1736:	80 91 8d 01 	lds	r24, 0x018D
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	d9 01       	movw	r26, r18
    1740:	a8 0f       	add	r26, r24
    1742:	b9 1f       	adc	r27, r25
    1744:	eb eb       	ldi	r30, 0xBB	; 187
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8c 93       	st	X, r24
		wdt_reset();

#endif
//		if((TWSR&0xF8)!=0x40) goto ERROR;

		for(i=0;i<slave->read.size-1;i++){
    174c:	80 91 8d 01 	lds	r24, 0x018D
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	80 93 8d 01 	sts	0x018D, r24
    1756:	80 91 8d 01 	lds	r24, 0x018D
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	87 81       	ldd	r24, Z+7	; 0x07
    1764:	90 85       	ldd	r25, Z+8	; 0x08
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	60 f2       	brcs	.-104    	; 0x1706 <i2cReadWithCommand+0xe0>

#endif
			if((TWSR&0xF8)!=0x50) goto ERROR;
			slave->read.buf[i] = TWDR;
			}
		TWCR = (1<<TWINT)|(1<<TWEN);
    176e:	ec eb       	ldi	r30, 0xBC	; 188
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	84 e8       	ldi	r24, 0x84	; 132
    1774:	80 83       	st	Z, r24
		while(!(TWCR&(1<<TWINT)));
    1776:	ec eb       	ldi	r30, 0xBC	; 188
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	88 23       	and	r24, r24
    177e:	dc f7       	brge	.-10     	; 0x1776 <i2cReadWithCommand+0x150>
#if WDT_RESET_IN_I2C

		wdt_reset();

#endif
		if((TWSR&0xF8)!=0x58) goto ERROR;
    1780:	e9 eb       	ldi	r30, 0xB9	; 185
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	88 7f       	andi	r24, 0xF8	; 248
    178c:	90 70       	andi	r25, 0x00	; 0
    178e:	88 35       	cpi	r24, 0x58	; 88
    1790:	91 05       	cpc	r25, r1
    1792:	b1 f4       	brne	.+44     	; 0x17c0 <i2cReadWithCommand+0x19a>
		slave->read.buf[i] = TWDR;
    1794:	e9 81       	ldd	r30, Y+1	; 0x01
    1796:	fa 81       	ldd	r31, Y+2	; 0x02
    1798:	25 81       	ldd	r18, Z+5	; 0x05
    179a:	36 81       	ldd	r19, Z+6	; 0x06
    179c:	80 91 8d 01 	lds	r24, 0x018D
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	d9 01       	movw	r26, r18
    17a6:	a8 0f       	add	r26, r24
    17a8:	b9 1f       	adc	r27, r25
    17aa:	eb eb       	ldi	r30, 0xBB	; 187
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8c 93       	st	X, r24

		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    17b2:	ec eb       	ldi	r30, 0xBC	; 188
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	84 e9       	ldi	r24, 0x94	; 148
    17b8:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return true;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	8c 83       	std	Y+4, r24	; 0x04
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <i2cReadWithCommand+0x1a4>
	ERROR:
		TWCR=(1<<TWINT)|(1<<TWSTO) |(1<<TWEN);
    17c0:	ec eb       	ldi	r30, 0xBC	; 188
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	84 e9       	ldi	r24, 0x94	; 148
    17c6:	80 83       	st	Z, r24
#if WDT_RESET_IN_I2C

		wdt_disable();

#endif
		return false;
    17c8:	1c 82       	std	Y+4, r1	; 0x04
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <LED>:
/// LED操作関数 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->消灯　1->点灯 </param>
void LED(unsigned char target, bool status)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <LED+0x6>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	58 f5       	brcc	.+86     	; 0x1844 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	88 23       	and	r24, r24
    17f2:	a9 f0       	breq	.+42     	; 0x181e <LED+0x44>
    17f4:	a2 e2       	ldi	r26, 0x22	; 34
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e2       	ldi	r30, 0x22	; 34
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <LED+0x38>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <LED+0x34>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	13 c0       	rjmp	.+38     	; 0x1844 <LED+0x6a>
	else		sbi(PORTA,target);
    181e:	a2 e2       	ldi	r26, 0x22	; 34
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e2       	ldi	r30, 0x22	; 34
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <LED+0x62>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <LED+0x5e>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <LEDInit>:

void LEDInit(void)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    1856:	a1 e2       	ldi	r26, 0x21	; 33
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e2       	ldi	r30, 0x21	; 33
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	87 60       	ori	r24, 0x07	; 7
    1862:	8c 93       	st	X, r24
	PORTA |= 0x07;
    1864:	a2 e2       	ldi	r26, 0x22	; 34
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e2 e2       	ldi	r30, 0x22	; 34
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	87 60       	ori	r24, 0x07	; 7
    1870:	8c 93       	st	X, r24
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <wait_us>:
#include <avr/io.h>
void wait_us(uint16_t t){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <wait_us+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
  static unsigned char lpcnt;
  __asm__ __volatile__("\n"
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02

0000188a <CPU_wait_entry10>:
    188a:	24 e0       	ldi	r18, 0x04	; 4

0000188c <CPU_wait_lp10>:
    188c:	00 00       	nop
    188e:	2a 95       	dec	r18
    1890:	e9 f7       	brne	.-6      	; 0x188c <CPU_wait_lp10>
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	d1 f7       	brne	.-12     	; 0x188a <CPU_wait_entry10>
    1896:	20 93 8e 01 	sts	0x018E, r18
    "sbiw %1,1\n\t"
    "brne CPU_wait_entry%=\n\t"
    :"=&a"(lpcnt)
    :"w"(t)
  );
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <wait_ms>:
void wait_ms(uint16_t t){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <wait_ms+0x6>
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <wait_ms+0x1a>
	while(t--) wait_us(1000);
    18b6:	88 ee       	ldi	r24, 0xE8	; 232
    18b8:	93 e0       	ldi	r25, 0x03	; 3
    18ba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <wait_us>
    18be:	1b 82       	std	Y+3, r1	; 0x03
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	11 f0       	breq	.+4      	; 0x18cc <wait_ms+0x28>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 23       	and	r24, r24
    18da:	69 f7       	brne	.-38     	; 0x18b6 <wait_ms+0x12>
	
}
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <mDrive+0x6>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <mDrive+0x8>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <mDrive+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6c 83       	std	Y+4, r22	; 0x04
    18fc:	4d 83       	std	Y+5, r20	; 0x05
    18fe:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1900:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1902:	8e 81       	ldd	r24, Y+6	; 0x06
    1904:	85 30       	cpi	r24, 0x05	; 5
    1906:	50 f5       	brcc	.+84     	; 0x195c <mDrive+0x74>
	if(duty>100) duty=100;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	85 36       	cpi	r24, 0x65	; 101
    190c:	14 f0       	brlt	.+4      	; 0x1912 <mDrive+0x2a>
    190e:	84 e6       	ldi	r24, 0x64	; 100
    1910:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	8c 39       	cpi	r24, 0x9C	; 156
    1916:	14 f4       	brge	.+4      	; 0x191c <mDrive+0x34>
    1918:	8c e9       	ldi	r24, 0x9C	; 156
    191a:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	21 f4       	brne	.+8      	; 0x192a <mDrive+0x42>
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	81 95       	neg	r24
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	0d c0       	rjmp	.+26     	; 0x1944 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	88 23       	and	r24, r24
    192e:	11 f4       	brne	.+4      	; 0x1934 <mDrive+0x4c>
    1930:	19 82       	std	Y+1, r1	; 0x01
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	19 f4       	brne	.+6      	; 0x1940 <mDrive+0x58>
    193a:	8f e7       	ldi	r24, 0x7F	; 127
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <mDrive+0x5c>
	else w_data = duty;
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buf[no] = w_data;
    1944:	ea 81       	ldd	r30, Y+2	; 0x02
    1946:	fb 81       	ldd	r31, Y+3	; 0x03
    1948:	21 81       	ldd	r18, Z+1	; 0x01
    194a:	32 81       	ldd	r19, Z+2	; 0x02
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	f9 01       	movw	r30, r18
    1954:	e8 0f       	add	r30, r24
    1956:	f9 1f       	adc	r31, r25
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	80 83       	st	Z, r24
}
    195c:	26 96       	adiw	r28, 0x06	; 6
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <mAngle+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <mAngle+0x8>
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	7c 83       	std	Y+4, r23	; 0x04
    1982:	6b 83       	std	Y+3, r22	; 0x03
    1984:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	88 23       	and	r24, r24
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <mAngle+0x48>
		angle/=6;
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	26 e0       	ldi	r18, 0x06	; 6
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	b9 01       	movw	r22, r18
    1996:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__divmodhi4>
    199a:	cb 01       	movw	r24, r22
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buf[4] = 0x40|(angle&0x1f);
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	81 81       	ldd	r24, Z+1	; 0x01
    19a6:	92 81       	ldd	r25, Z+2	; 0x02
    19a8:	fc 01       	movw	r30, r24
    19aa:	34 96       	adiw	r30, 0x04	; 4
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	8f 71       	andi	r24, 0x1F	; 31
    19b0:	80 64       	ori	r24, 0x40	; 64
    19b2:	80 83       	st	Z, r24
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <mAngle+0x56>
		}
	else motor->write.buf[4] = 0x00;
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	81 81       	ldd	r24, Z+1	; 0x01
    19bc:	92 81       	ldd	r25, Z+2	; 0x02
    19be:	fc 01       	movw	r30, r24
    19c0:	34 96       	adiw	r30, 0x04	; 4
    19c2:	10 82       	st	Z, r1
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <aDrive+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <aDrive+0x8>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	6b 83       	std	Y+3, r22	; 0x03
    19e6:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buf) = port;
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	88 23       	and	r24, r24
    19ec:	41 f0       	breq	.+16     	; 0x19fe <aDrive+0x2a>
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	01 80       	ldd	r0, Z+1	; 0x01
    19f4:	f2 81       	ldd	r31, Z+2	; 0x02
    19f6:	e0 2d       	mov	r30, r0
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	80 83       	st	Z, r24
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <aDrive+0x36>

	else 	*(cylinder->write.buf) = 0x00;
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	01 80       	ldd	r0, Z+1	; 0x01
    1a04:	f2 81       	ldd	r31, Z+2	; 0x02
    1a06:	e0 2d       	mov	r30, r0
    1a08:	10 82       	st	Z, r1

}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1a20:	a4 e2       	ldi	r26, 0x24	; 36
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e4 e2       	ldi	r30, 0x24	; 36
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 7f       	andi	r24, 0xF0	; 240
    1a2c:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1a2e:	a5 e2       	ldi	r26, 0x25	; 37
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e2       	ldi	r30, 0x25	; 37
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	8f 60       	ori	r24, 0x0F	; 15
    1a3a:	8c 93       	st	X, r24
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <Switch>:
/// スイッチ値取得関数 
/// </summary>
/// <param name="target"> メイン基盤上のスライドスイッチ番号　1〜4 </param>
/// <return> スイッチの状態 ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <Switch+0x6>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1a4e:	e3 e2       	ldi	r30, 0x23	; 35
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 95       	com	r24
    1a56:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	a9 01       	movw	r20, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <Switch+0x2c>
    1a6a:	55 95       	asr	r21
    1a6c:	47 95       	ror	r20
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <Switch+0x28>
    1a72:	ca 01       	movw	r24, r20
    1a74:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	81 70       	andi	r24, 0x01	; 1
    1a7e:	90 70       	andi	r25, 0x00	; 0
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <Group>:

__inline__ unsigned char Group(void)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    1a92:	e3 e2       	ldi	r30, 0x23	; 35
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	80 95       	com	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	86 95       	lsr	r24
    1a9e:	83 70       	andi	r24, 0x03	; 3
}
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <Channel>:

__inline__ unsigned char Channel(void)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    1aae:	e3 e2       	ldi	r30, 0x23	; 35
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 95       	com	r24
    1ab6:	83 70       	andi	r24, 0x03	; 3
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <beep>:
#include "beep.h"

static bool ctrl=1;

void beep(bool act)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	89 27       	eor	r24, r25
    1ad0:	88 23       	and	r24, r24
    1ad2:	71 f4       	brne	.+28     	; 0x1af0 <beep+0x32>
    1ad4:	80 91 36 01 	lds	r24, 0x0136
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	89 27       	eor	r24, r25
    1adc:	88 23       	and	r24, r24
    1ade:	41 f4       	brne	.+16     	; 0x1af0 <beep+0x32>
    1ae0:	a2 e2       	ldi	r26, 0x22	; 34
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e2 e2       	ldi	r30, 0x22	; 34
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8c 93       	st	X, r24
    1aee:	0b c0       	rjmp	.+22     	; 0x1b06 <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1af0:	80 91 36 01 	lds	r24, 0x0136
    1af4:	88 23       	and	r24, r24
    1af6:	39 f0       	breq	.+14     	; 0x1b06 <beep+0x48>
    1af8:	a2 e2       	ldi	r26, 0x22	; 34
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e2 e2       	ldi	r30, 0x22	; 34
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	87 7f       	andi	r24, 0xF7	; 247
    1b04:	8c 93       	st	X, r24
}
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <BeepInit>:

void BeepInit()
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1b16:	a1 e2       	ldi	r26, 0x21	; 33
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e2       	ldi	r30, 0x21	; 33
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 60       	ori	r24, 0x08	; 8
    1b22:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1b24:	a2 e2       	ldi	r26, 0x22	; 34
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e2 e2       	ldi	r30, 0x22	; 34
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	8c 93       	st	X, r24
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <i2cCheck>:

void i2cCheck(bool flag)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	69 81       	ldd	r22, Y+1	; 0x01
    1b48:	0e 94 ed 0b 	call	0x17da	; 0x17da <LED>
	beep(!(flag));
    1b4c:	99 81       	ldd	r25, Y+1	; 0x01
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 27       	eor	r24, r25
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
	if(!flag){
    1b5a:	99 81       	ldd	r25, Y+1	; 0x01
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 27       	eor	r24, r25
    1b60:	88 23       	and	r24, r24
    1b62:	31 f0       	breq	.+12     	; 0x1b70 <i2cCheck+0x38>
		PORTC = 0x04;
    1b64:	e8 e2       	ldi	r30, 0x28	; 40
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	84 e0       	ldi	r24, 0x04	; 4
    1b6a:	80 83       	st	Z, r24
		cli();
    1b6c:	f8 94       	cli
    1b6e:	ff cf       	rjmp	.-2      	; 0x1b6e <i2cCheck+0x36>
		while(1);
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <Emergency+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <Emergency+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9b 83       	std	Y+3, r25	; 0x03
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	71 f4       	brne	.+28     	; 0x1bac <Emergency+0x34>
		*(emergency->write.buf) = 0x6A;
    1b90:	ea 81       	ldd	r30, Y+2	; 0x02
    1b92:	fb 81       	ldd	r31, Y+3	; 0x03
    1b94:	01 80       	ldd	r0, Z+1	; 0x01
    1b96:	f2 81       	ldd	r31, Z+2	; 0x02
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	8a e6       	ldi	r24, 0x6A	; 106
    1b9c:	80 83       	st	Z, r24
		beep(1);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
		eflag=1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 a1 01 	sts	0x01A1, r24
    1baa:	16 c0       	rjmp	.+44     	; 0x1bd8 <Emergency+0x60>
		}
	else if(act==E_OFF){
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	69 f4       	brne	.+26     	; 0x1bcc <Emergency+0x54>
		*(emergency->write.buf) = 0x55;
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	01 80       	ldd	r0, Z+1	; 0x01
    1bb8:	f2 81       	ldd	r31, Z+2	; 0x02
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	85 e5       	ldi	r24, 0x55	; 85
    1bbe:	80 83       	st	Z, r24
		beep(0);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
		eflag=0;
    1bc6:	10 92 a1 01 	sts	0x01A1, r1
    1bca:	06 c0       	rjmp	.+12     	; 0x1bd8 <Emergency+0x60>
		}
	else *(emergency->write.buf) = 0x00;
    1bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bce:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd0:	01 80       	ldd	r0, Z+1	; 0x01
    1bd2:	f2 81       	ldd	r31, Z+2	; 0x02
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <i2cRead>
    1be0:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buf)==0x6A){
    1be2:	ea 81       	ldd	r30, Y+2	; 0x02
    1be4:	fb 81       	ldd	r31, Y+3	; 0x03
    1be6:	05 80       	ldd	r0, Z+5	; 0x05
    1be8:	f6 81       	ldd	r31, Z+6	; 0x06
    1bea:	e0 2d       	mov	r30, r0
    1bec:	80 81       	ld	r24, Z
    1bee:	8a 36       	cpi	r24, 0x6A	; 106
    1bf0:	31 f4       	brne	.+12     	; 0x1bfe <Emergency+0x86>
		beep(1);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <beep>
		eflag=1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	80 93 a1 01 	sts	0x01A1, r24
		}
	if(*(emergency->read.buf)==0x55){
    1bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1c00:	fb 81       	ldd	r31, Y+3	; 0x03
    1c02:	05 80       	ldd	r0, Z+5	; 0x05
    1c04:	f6 81       	ldd	r31, Z+6	; 0x06
    1c06:	e0 2d       	mov	r30, r0
    1c08:	80 81       	ld	r24, Z
    1c0a:	85 35       	cpi	r24, 0x55	; 85
    1c0c:	d9 f4       	brne	.+54     	; 0x1c44 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    1c0e:	a0 e6       	ldi	r26, 0x60	; 96
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e0 e6       	ldi	r30, 0x60	; 96
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	88 60       	ori	r24, 0x08	; 8
    1c1a:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    1c1c:	a0 e6       	ldi	r26, 0x60	; 96
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e0 e6       	ldi	r30, 0x60	; 96
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8f 7b       	andi	r24, 0xBF	; 191
    1c28:	8c 93       	st	X, r24
		wdt_reset();
    1c2a:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    1c2c:	88 e1       	ldi	r24, 0x18	; 24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	28 e0       	ldi	r18, 0x08	; 8
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	a8 95       	wdr
    1c38:	80 93 60 00 	sts	0x0060, r24
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	20 93 60 00 	sts	0x0060, r18
    1c42:	ff cf       	rjmp	.-2      	; 0x1c42 <Emergency+0xca>
		while(1);
		}
	return tmp;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <EmergencyStatus>:

bool EmergencyStatus()
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    1c5e:	80 91 a1 01 	lds	r24, 0x01A1
    1c62:	88 23       	and	r24, r24
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <EmergencyStatus+0x16>
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <EmergencyStatus+0x1a>
	else return 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <__divmodhi4>:
    1c78:	97 fb       	bst	r25, 7
    1c7a:	09 2e       	mov	r0, r25
    1c7c:	07 26       	eor	r0, r23
    1c7e:	0a d0       	rcall	.+20     	; 0x1c94 <__divmodhi4_neg1>
    1c80:	77 fd       	sbrc	r23, 7
    1c82:	04 d0       	rcall	.+8      	; 0x1c8c <__divmodhi4_neg2>
    1c84:	0c d0       	rcall	.+24     	; 0x1c9e <__udivmodhi4>
    1c86:	06 d0       	rcall	.+12     	; 0x1c94 <__divmodhi4_neg1>
    1c88:	00 20       	and	r0, r0
    1c8a:	1a f4       	brpl	.+6      	; 0x1c92 <__divmodhi4_exit>

00001c8c <__divmodhi4_neg2>:
    1c8c:	70 95       	com	r23
    1c8e:	61 95       	neg	r22
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255

00001c92 <__divmodhi4_exit>:
    1c92:	08 95       	ret

00001c94 <__divmodhi4_neg1>:
    1c94:	f6 f7       	brtc	.-4      	; 0x1c92 <__divmodhi4_exit>
    1c96:	90 95       	com	r25
    1c98:	81 95       	neg	r24
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	08 95       	ret

00001c9e <__udivmodhi4>:
    1c9e:	aa 1b       	sub	r26, r26
    1ca0:	bb 1b       	sub	r27, r27
    1ca2:	51 e1       	ldi	r21, 0x11	; 17
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <__udivmodhi4_ep>

00001ca6 <__udivmodhi4_loop>:
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	a6 17       	cp	r26, r22
    1cac:	b7 07       	cpc	r27, r23
    1cae:	10 f0       	brcs	.+4      	; 0x1cb4 <__udivmodhi4_ep>
    1cb0:	a6 1b       	sub	r26, r22
    1cb2:	b7 0b       	sbc	r27, r23

00001cb4 <__udivmodhi4_ep>:
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	5a 95       	dec	r21
    1cba:	a9 f7       	brne	.-22     	; 0x1ca6 <__udivmodhi4_loop>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	08 95       	ret

00001cc6 <_exit>:
    1cc6:	f8 94       	cli

00001cc8 <__stop_program>:
    1cc8:	ff cf       	rjmp	.-2      	; 0x1cc8 <__stop_program>
