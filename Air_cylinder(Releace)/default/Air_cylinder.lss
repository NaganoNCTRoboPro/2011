
Air_cylinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  000004ec  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000095  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003cc  00000000  00000000  000005e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000238  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d0  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013a  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	a4 c0       	rjmp	.+328    	; 0x17a <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 30       	cpi	r26, 0x05	; 5
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	10 c2       	rjmp	.+1056   	; 0x474 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
#else
#define ADDR 0x40
#endif

int main(void)
{
  56:	df 93       	push	r29
  58:	cf 93       	push	r28
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62
  5e:	2e 97       	sbiw	r28, 0x0e	; 14
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	f8 94       	cli
  64:	de bf       	out	0x3e, r29	; 62
  66:	0f be       	out	0x3f, r0	; 63
  68:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[2]={0},tmp,tmps,pretmp=0;
  6a:	1d 82       	std	Y+5, r1	; 0x05
  6c:	1c 82       	std	Y+4, r1	; 0x04
  6e:	19 82       	std	Y+1, r1	; 0x01
	Slave data = {ADDR,{(int8_t*)&buf[0],1},{(int8_t*)&buf[1],1}};
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	8e 83       	std	Y+6, r24	; 0x06
  74:	ce 01       	movw	r24, r28
  76:	04 96       	adiw	r24, 0x04	; 4
  78:	98 87       	std	Y+8, r25	; 0x08
  7a:	8f 83       	std	Y+7, r24	; 0x07
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	9a 87       	std	Y+10, r25	; 0x0a
  82:	89 87       	std	Y+9, r24	; 0x09
  84:	ce 01       	movw	r24, r28
  86:	04 96       	adiw	r24, 0x04	; 4
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	9c 87       	std	Y+12, r25	; 0x0c
  8c:	8b 87       	std	Y+11, r24	; 0x0b
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9e 87       	std	Y+14, r25	; 0x0e
  94:	8d 87       	std	Y+13, r24	; 0x0d
	sei();
  96:	78 94       	sei
	initI2CSlave(&data);
  98:	ce 01       	movw	r24, r28
  9a:	06 96       	adiw	r24, 0x06	; 6
  9c:	35 d0       	rcall	.+106    	; 0x108 <initI2CSlave>
	DDRB |= 0x07;	//LED0~2
  9e:	a4 e2       	ldi	r26, 0x24	; 36
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e4 e2       	ldi	r30, 0x24	; 36
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	8c 93       	st	X, r24
	DDRD |= 0x0f;	//AIR0~3
  ac:	aa e2       	ldi	r26, 0x2A	; 42
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ea e2       	ldi	r30, 0x2A	; 42
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	8c 93       	st	X, r24
    PORTD = 0x00;
  ba:	eb e2       	ldi	r30, 0x2B	; 43
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	while(1){
		tmp   = buf[0];
  c0:	8c 81       	ldd	r24, Y+4	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
		PORTB = tmp&0x07;	
  c4:	e5 e2       	ldi	r30, 0x25	; 37
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
		PORTD = tmp&0x0f;
  ce:	eb e2       	ldi	r30, 0x2B	; 43
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	80 83       	st	Z, r24
		tmps=(tmp>>4);
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	82 95       	swap	r24
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	8a 83       	std	Y+2, r24	; 0x02
		if(tmp){
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	88 23       	and	r24, r24
  e4:	71 f0       	breq	.+28     	; 0x102 <main+0xac>
			if(tmp!=pretmp){
  e6:	9b 81       	ldd	r25, Y+3	; 0x03
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	98 17       	cp	r25, r24
  ec:	51 f0       	breq	.+20     	; 0x102 <main+0xac>
				PORTD = tmps;
  ee:	eb e2       	ldi	r30, 0x2B	; 43
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	80 83       	st	Z, r24
				PORTD = 0x00;
				wait_ms(50);
				PORTD = tmp;
				wait_ms(50);
#else
				wait_ms(6);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	32 d1       	rcall	.+612    	; 0x360 <wait_ms>
#endif
				PORTD = 0x00;
  fc:	eb e2       	ldi	r30, 0x2B	; 43
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
				}
			}
		pretmp=tmp;
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	dc cf       	rjmp	.-72     	; 0xc0 <main+0x6a>

00000108 <initI2CSlave>:
    }
#endif

#if SLAVE_COMPILE
void initI2CSlave(Slave *_own)
	{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	00 d0       	rcall	.+0      	; 0x10e <initI2CSlave+0x6>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		own = _own;
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	90 93 04 01 	sts	0x0104, r25
 11e:	80 93 03 01 	sts	0x0103, r24
		TWAR = (own->addr)<<=1;
 122:	2a eb       	ldi	r18, 0xBA	; 186
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	a0 91 03 01 	lds	r26, 0x0103
 12a:	b0 91 04 01 	lds	r27, 0x0104
 12e:	e0 91 03 01 	lds	r30, 0x0103
 132:	f0 91 04 01 	lds	r31, 0x0104
 136:	80 81       	ld	r24, Z
 138:	88 0f       	add	r24, r24
 13a:	8c 93       	st	X, r24
 13c:	8c 91       	ld	r24, X
 13e:	f9 01       	movw	r30, r18
 140:	80 83       	st	Z, r24
		TWAR |= 1;
 142:	aa eb       	ldi	r26, 0xBA	; 186
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	ea eb       	ldi	r30, 0xBA	; 186
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	8c 93       	st	X, r24
		TWCR = 0x45;
 150:	ec eb       	ldi	r30, 0xBC	; 188
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	85 e4       	ldi	r24, 0x45	; 69
 156:	80 83       	st	Z, r24
	#if WDT_RESET_IN_I2C
		wdt_reset();
 158:	a8 95       	wdr

		wdt_enable(WDT_RESET_TIME);
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2d e0       	ldi	r18, 0x0D	; 13
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	a8 95       	wdr
 166:	80 93 60 00 	sts	0x0060, r24
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	20 93 60 00 	sts	0x0060, r18

	#endif
	}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	08 95       	ret

0000017a <__vector_24>:


#if SLAVE_COMPILE

ISR (TWI_vect)
	{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	00 d0       	rcall	.+0      	; 0x19a <__vector_24+0x20>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	    switch(TWSR)                            
 19e:	e9 eb       	ldi	r30, 0xB9	; 185
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	3a 83       	std	Y+2, r19	; 0x02
 1aa:	29 83       	std	Y+1, r18	; 0x01
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	80 39       	cpi	r24, 0x90	; 144
 1b2:	91 05       	cpc	r25, r1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_24+0x3e>
 1b6:	43 c0       	rjmp	.+134    	; 0x23e <__vector_24+0xc4>
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	3a 81       	ldd	r19, Y+2	; 0x02
 1bc:	21 39       	cpi	r18, 0x91	; 145
 1be:	31 05       	cpc	r19, r1
 1c0:	8c f4       	brge	.+34     	; 0x1e4 <__vector_24+0x6a>
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	80 37       	cpi	r24, 0x70	; 112
 1c8:	91 05       	cpc	r25, r1
 1ca:	09 f4       	brne	.+2      	; 0x1ce <__vector_24+0x54>
 1cc:	9d c0       	rjmp	.+314    	; 0x308 <__vector_24+0x18e>
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	20 38       	cpi	r18, 0x80	; 128
 1d4:	31 05       	cpc	r19, r1
 1d6:	b1 f1       	breq	.+108    	; 0x244 <__vector_24+0xca>
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	80 36       	cpi	r24, 0x60	; 96
 1de:	91 05       	cpc	r25, r1
 1e0:	01 f1       	breq	.+64     	; 0x222 <__vector_24+0xa8>
 1e2:	a4 c0       	rjmp	.+328    	; 0x32c <__vector_24+0x1b2>
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	3a 81       	ldd	r19, Y+2	; 0x02
 1e8:	28 3a       	cpi	r18, 0xA8	; 168
 1ea:	31 05       	cpc	r19, r1
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <__vector_24+0x76>
 1ee:	50 c0       	rjmp	.+160    	; 0x290 <__vector_24+0x116>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	89 3a       	cpi	r24, 0xA9	; 169
 1f6:	91 05       	cpc	r25, r1
 1f8:	3c f4       	brge	.+14     	; 0x208 <__vector_24+0x8e>
 1fa:	29 81       	ldd	r18, Y+1	; 0x01
 1fc:	3a 81       	ldd	r19, Y+2	; 0x02
 1fe:	20 3a       	cpi	r18, 0xA0	; 160
 200:	31 05       	cpc	r19, r1
 202:	09 f4       	brne	.+2      	; 0x206 <__vector_24+0x8c>
 204:	3d c0       	rjmp	.+122    	; 0x280 <__vector_24+0x106>
 206:	92 c0       	rjmp	.+292    	; 0x32c <__vector_24+0x1b2>
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	88 3b       	cpi	r24, 0xB8	; 184
 20e:	91 05       	cpc	r25, r1
 210:	09 f4       	brne	.+2      	; 0x214 <__vector_24+0x9a>
 212:	5c c0       	rjmp	.+184    	; 0x2cc <__vector_24+0x152>
 214:	29 81       	ldd	r18, Y+1	; 0x01
 216:	3a 81       	ldd	r19, Y+2	; 0x02
 218:	20 3c       	cpi	r18, 0xC0	; 192
 21a:	31 05       	cpc	r19, r1
 21c:	09 f4       	brne	.+2      	; 0x220 <__vector_24+0xa6>
 21e:	7c c0       	rjmp	.+248    	; 0x318 <__vector_24+0x19e>
 220:	85 c0       	rjmp	.+266    	; 0x32c <__vector_24+0x1b2>
			{
				case 0x60:						
					count = 0;
 222:	10 92 02 01 	sts	0x0102, r1
					TWCR |= 0x80;	
 226:	ac eb       	ldi	r26, 0xBC	; 188
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8c 93       	st	X, r24
					i2cComFlag = true;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 01 01 	sts	0x0101, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 23a:	a8 95       	wdr
 23c:	80 c0       	rjmp	.+256    	; 0x33e <__vector_24+0x1c4>

					#endif
					break;
	            case 0x90:
	                emergency = true;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 00 01 	sts	0x0100, r24
				case 0x80:                      
					*(own->write.buf+count) = TWDR;	   
 244:	e0 91 03 01 	lds	r30, 0x0103
 248:	f0 91 04 01 	lds	r31, 0x0104
 24c:	21 81       	ldd	r18, Z+1	; 0x01
 24e:	32 81       	ldd	r19, Z+2	; 0x02
 250:	80 91 02 01 	lds	r24, 0x0102
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	d9 01       	movw	r26, r18
 25a:	a8 0f       	add	r26, r24
 25c:	b9 1f       	adc	r27, r25
 25e:	eb eb       	ldi	r30, 0xBB	; 187
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	8c 93       	st	X, r24
					count++;
 266:	80 91 02 01 	lds	r24, 0x0102
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 02 01 	sts	0x0102, r24
					TWCR |= 0x80;		
 270:	ac eb       	ldi	r26, 0xBC	; 188
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	ec eb       	ldi	r30, 0xBC	; 188
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8c 93       	st	X, r24
 27e:	5f c0       	rjmp	.+190    	; 0x33e <__vector_24+0x1c4>
					break;
				case 0xA0:
					TWCR |= 0x80;
 280:	ac eb       	ldi	r26, 0xBC	; 188
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	ec eb       	ldi	r30, 0xBC	; 188
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8c 93       	st	X, r24
 28e:	57 c0       	rjmp	.+174    	; 0x33e <__vector_24+0x1c4>
					break;				
	            case 0xA8:
					i2cComFlag = true;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 01 01 	sts	0x0101, r24
					count = 0;
 296:	10 92 02 01 	sts	0x0102, r1
					TWDR = *own->read.buf;				
 29a:	ab eb       	ldi	r26, 0xBB	; 187
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	e0 91 03 01 	lds	r30, 0x0103
 2a2:	f0 91 04 01 	lds	r31, 0x0104
 2a6:	05 80       	ldd	r0, Z+5	; 0x05
 2a8:	f6 81       	ldd	r31, Z+6	; 0x06
 2aa:	e0 2d       	mov	r30, r0
 2ac:	80 81       	ld	r24, Z
 2ae:	8c 93       	st	X, r24
					count++;					
 2b0:	80 91 02 01 	lds	r24, 0x0102
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 02 01 	sts	0x0102, r24
					TWCR |= 0x80;
 2ba:	ac eb       	ldi	r26, 0xBC	; 188
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	ec eb       	ldi	r30, 0xBC	; 188
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	8c 93       	st	X, r24
					#if WDT_RESET_IN_I2C

						wdt_reset();
 2c8:	a8 95       	wdr
 2ca:	39 c0       	rjmp	.+114    	; 0x33e <__vector_24+0x1c4>

					#endif				
					break;
				case 0xB8:						
					TWDR = *(own->read.buf + count);	
 2cc:	ab eb       	ldi	r26, 0xBB	; 187
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e0 91 03 01 	lds	r30, 0x0103
 2d4:	f0 91 04 01 	lds	r31, 0x0104
 2d8:	25 81       	ldd	r18, Z+5	; 0x05
 2da:	36 81       	ldd	r19, Z+6	; 0x06
 2dc:	80 91 02 01 	lds	r24, 0x0102
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	f9 01       	movw	r30, r18
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 1f       	adc	r31, r25
 2ea:	80 81       	ld	r24, Z
 2ec:	8c 93       	st	X, r24
					count++;					
 2ee:	80 91 02 01 	lds	r24, 0x0102
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 02 01 	sts	0x0102, r24
					TWCR |= 0x80;				
 2f8:	ac eb       	ldi	r26, 0xBC	; 188
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	ec eb       	ldi	r30, 0xBC	; 188
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	80 68       	ori	r24, 0x80	; 128
 304:	8c 93       	st	X, r24
 306:	1b c0       	rjmp	.+54     	; 0x33e <__vector_24+0x1c4>
					break;
			    case 0x70:                      
	                *own->read.buf = 0;
 308:	e0 91 03 01 	lds	r30, 0x0103
 30c:	f0 91 04 01 	lds	r31, 0x0104
 310:	05 80       	ldd	r0, Z+5	; 0x05
 312:	f6 81       	ldd	r31, Z+6	; 0x06
 314:	e0 2d       	mov	r30, r0
 316:	10 82       	st	Z, r1
				case 0xC0:   
					TWCR |= 0x80;
 318:	ac eb       	ldi	r26, 0xBC	; 188
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	ec eb       	ldi	r30, 0xBC	; 188
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	80 68       	ori	r24, 0x80	; 128
 324:	8c 93       	st	X, r24
					i2cComFlag = false;
 326:	10 92 01 01 	sts	0x0101, r1
 32a:	09 c0       	rjmp	.+18     	; 0x33e <__vector_24+0x1c4>
					break;					
				default:
					TWCR |= 0x80;
 32c:	ac eb       	ldi	r26, 0xBC	; 188
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	ec eb       	ldi	r30, 0xBC	; 188
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	8c 93       	st	X, r24
					i2cComFlag = false;				
 33a:	10 92 01 01 	sts	0x0101, r1
					break;
			}
	}
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	cf 91       	pop	r28
 344:	df 91       	pop	r29
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <wait_ms>:
#include <avr/io.h>
void wait_ms(uint16_t t){
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	00 d0       	rcall	.+0      	; 0x366 <wait_ms+0x6>
 366:	00 d0       	rcall	.+0      	; 0x368 <wait_ms+0x8>
 368:	0f 92       	push	r0
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	9b 83       	std	Y+3, r25	; 0x03
 370:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tt;
	TCCR2A = 0;
 372:	e0 eb       	ldi	r30, 0xB0	; 176
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	10 82       	st	Z, r1
	TCCR2B = 1;
 378:	e1 eb       	ldi	r30, 0xB1	; 177
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 83       	st	Z, r24
	OCR2A = 200;
 380:	e3 eb       	ldi	r30, 0xB3	; 179
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	88 ec       	ldi	r24, 0xC8	; 200
 386:	80 83       	st	Z, r24

	for(tt=100;t--;){
 388:	84 e6       	ldi	r24, 0x64	; 100
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	20 c0       	rjmp	.+64     	; 0x3ce <wait_ms+0x6e>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
 38e:	e2 eb       	ldi	r30, 0xB2	; 178
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	10 82       	st	Z, r1
 394:	e7 e3       	ldi	r30, 0x37	; 55
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	82 70       	andi	r24, 0x02	; 2
 3a0:	90 70       	andi	r25, 0x00	; 0
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	b9 f3       	breq	.-18     	; 0x394 <wait_ms+0x34>
			TIFR2 |= 0x02;
 3a6:	a7 e3       	ldi	r26, 0x37	; 55
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e7 e3       	ldi	r30, 0x37	; 55
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	8c 93       	st	X, r24
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
		while(tt--){
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	8d 83       	std	Y+5, r24	; 0x05
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	88 23       	and	r24, r24
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <wait_ms+0x62>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	8d 83       	std	Y+5, r24	; 0x05
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	99 81       	ldd	r25, Y+1	; 0x01
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	99 83       	std	Y+1, r25	; 0x01
 3ca:	88 23       	and	r24, r24
 3cc:	01 f7       	brne	.-64     	; 0x38e <wait_ms+0x2e>
	uint8_t tt;
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 200;

	for(tt=100;t--;){
 3ce:	1c 82       	std	Y+4, r1	; 0x04
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	9b 81       	ldd	r25, Y+3	; 0x03
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	11 f0       	breq	.+4      	; 0x3dc <wait_ms+0x7c>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	8c 83       	std	Y+4, r24	; 0x04
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	9b 81       	ldd	r25, Y+3	; 0x03
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	9b 83       	std	Y+3, r25	; 0x03
 3e4:	8a 83       	std	Y+2, r24	; 0x02
 3e6:	8c 81       	ldd	r24, Y+4	; 0x04
 3e8:	88 23       	and	r24, r24
 3ea:	21 f7       	brne	.-56     	; 0x3b4 <wait_ms+0x54>
		while(tt--){
			for(TCNT2=0;!(TIFR2&0x02););
			TIFR2 |= 0x02;
		}
	}
}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <wait_us>:
void wait_us(uint16_t t){
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <wait_us+0x6>
 402:	0f 92       	push	r0
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
	TCCR2A = 0;
 40c:	e0 eb       	ldi	r30, 0xB0	; 176
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	10 82       	st	Z, r1
	TCCR2B = 1;
 412:	e1 eb       	ldi	r30, 0xB1	; 177
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 83       	st	Z, r24
	OCR2A = 20;
 41a:	e3 eb       	ldi	r30, 0xB3	; 179
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	84 e1       	ldi	r24, 0x14	; 20
 420:	80 83       	st	Z, r24
 422:	13 c0       	rjmp	.+38     	; 0x44a <wait_us+0x4e>
	while(t--){
		for(TCNT2=0;!(TIFR2&0x02););
 424:	e2 eb       	ldi	r30, 0xB2	; 178
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	10 82       	st	Z, r1
 42a:	e7 e3       	ldi	r30, 0x37	; 55
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	82 70       	andi	r24, 0x02	; 2
 436:	90 70       	andi	r25, 0x00	; 0
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	b9 f3       	breq	.-18     	; 0x42a <wait_us+0x2e>
		TIFR2 |= 0x02;
 43c:	a7 e3       	ldi	r26, 0x37	; 55
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e7 e3       	ldi	r30, 0x37	; 55
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	82 60       	ori	r24, 0x02	; 2
 448:	8c 93       	st	X, r24
}
void wait_us(uint16_t t){
	TCCR2A = 0;
	TCCR2B = 1;
	OCR2A = 20;
	while(t--){
 44a:	1b 82       	std	Y+3, r1	; 0x03
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	9a 81       	ldd	r25, Y+2	; 0x02
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	11 f0       	breq	.+4      	; 0x458 <wait_us+0x5c>
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	8b 83       	std	Y+3, r24	; 0x03
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	9a 83       	std	Y+2, r25	; 0x02
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	88 23       	and	r24, r24
 466:	f1 f6       	brne	.-68     	; 0x424 <wait_us+0x28>
		for(TCNT2=0;!(TIFR2&0x02););
		TIFR2 |= 0x02;
	}
}
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
