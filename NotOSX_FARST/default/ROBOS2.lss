
ROBOS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000166c  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800134  00800134  00001734  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000413  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015d4  00000000  00000000  00001ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  0000327b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001322  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00004e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000096b  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_20>
      54:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_21>
      58:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_22>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_28>
      74:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_29>
      78:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 33       	cpi	r26, 0x34	; 52
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e3       	ldi	r26, 0x34	; 52
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 36       	cpi	r26, 0x6C	; 108
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 87 00 	call	0x10e	; 0x10e <main>
      c6:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initSlaveSupply>:


#define SUPPLY_WATCHING (1)

void initSlaveSupply(void)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x04;
      d6:	a7 e2       	ldi	r26, 0x27	; 39
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e7 e2       	ldi	r30, 0x27	; 39
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	8c 93       	st	X, r24
	PORTC = 0x04;
      e4:	e8 e2       	ldi	r30, 0x28	; 40
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	84 e0       	ldi	r24, 0x04	; 4
      ea:	80 83       	st	Z, r24
}
      ec:	cf 91       	pop	r28
      ee:	df 91       	pop	r29
      f0:	08 95       	ret

000000f2 <supplySalve>:
void supplySalve(void)
{
      f2:	df 93       	push	r29
      f4:	cf 93       	push	r28
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
	
	PORTC &= 0xFB;
      fa:	a8 e2       	ldi	r26, 0x28	; 40
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e8 e2       	ldi	r30, 0x28	; 40
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	8b 7f       	andi	r24, 0xFB	; 251
     106:	8c 93       	st	X, r24
} 
     108:	cf 91       	pop	r28
     10a:	df 91       	pop	r29
     10c:	08 95       	ret

0000010e <main>:

int main(void)
{
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	00 d0       	rcall	.+0      	; 0x118 <main+0xa>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	union controller_data *controller;

/*---------------------------------------------------------------*/
// 						èëÇ´Ç©Ç¶ÇøÇ·É_ÉÅÇÊÅI
/*---------------------------------------------------------------*/
	LEDInit();
     11c:	0e 94 c8 08 	call	0x1190	; 0x1190 <LEDInit>
	SwitchInit();
     120:	0e 94 ad 09 	call	0x135a	; 0x135a <SwitchInit>
	BeepInit();
     124:	0e 94 28 0a 	call	0x1450	; 0x1450 <BeepInit>
	initCtrlData();
     128:	0e 94 09 01 	call	0x212	; 0x212 <initCtrlData>
	initSlaveSupply();
     12c:	0e 94 67 00 	call	0xce	; 0xce <initSlaveSupply>
	initI2CMaster(100);
     130:	84 e6       	ldi	r24, 0x64	; 100
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 97 06 	call	0xd2e	; 0xd2e <initI2CMaster>

	setMU2PutFunc(uart0Put);
     138:	84 ea       	ldi	r24, 0xA4	; 164
     13a:	94 e0       	ldi	r25, 0x04	; 4
     13c:	0e 94 4e 02 	call	0x49c	; 0x49c <setMU2PutFunc>
	setMU2GetFunc(uart0Get);
     140:	82 ed       	ldi	r24, 0xD2	; 210
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	0e 94 60 02 	call	0x4c0	; 0x4c0 <setMU2GetFunc>

	wdt_reset();
     148:	a8 95       	wdr
	wdt_enable(WDTO_500MS);
     14a:	88 e1       	ldi	r24, 0x18	; 24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	2d e0       	ldi	r18, 0x0D	; 13
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	f8 94       	cli
     154:	a8 95       	wdr
     156:	80 93 60 00 	sts	0x0060, r24
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	20 93 60 00 	sts	0x0060, r18
	
	wait_ms(100);
     160:	84 e6       	ldi	r24, 0x64	; 100
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <wait_ms>
	initUART(0,
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	48 e1       	ldi	r20, 0x18	; 24
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	1b e4       	ldi	r17, 0x4B	; 75
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	0e 94 31 04 	call	0x862	; 0x862 <initUART>
			 StopBitIs1Bit|NonParity,
			 ReceiveEnable|TransmitEnable,
			 19200);
	mu2Command("GI","01");
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	23 e0       	ldi	r18, 0x03	; 3
     180:	31 e0       	ldi	r19, 0x01	; 1
     182:	b9 01       	movw	r22, r18
     184:	0e 94 a0 02 	call	0x540	; 0x540 <mu2Command>
	mu2Command("CH","08");
     188:	86 e0       	ldi	r24, 0x06	; 6
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	29 e0       	ldi	r18, 0x09	; 9
     18e:	31 e0       	ldi	r19, 0x01	; 1
     190:	b9 01       	movw	r22, r18
     192:	0e 94 a0 02 	call	0x540	; 0x540 <mu2Command>
	mu2Command("EI","01");
     196:	8c e0       	ldi	r24, 0x0C	; 12
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	23 e0       	ldi	r18, 0x03	; 3
     19c:	31 e0       	ldi	r19, 0x01	; 1
     19e:	b9 01       	movw	r22, r18
     1a0:	0e 94 a0 02 	call	0x540	; 0x540 <mu2Command>
	mu2Command("DI","10");
     1a4:	8f e0       	ldi	r24, 0x0F	; 15
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	22 e1       	ldi	r18, 0x12	; 18
     1aa:	31 e0       	ldi	r19, 0x01	; 1
     1ac:	b9 01       	movw	r22, r18
     1ae:	0e 94 a0 02 	call	0x540	; 0x540 <mu2Command>
	mu2Command("BR","48");
     1b2:	85 e1       	ldi	r24, 0x15	; 21
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	28 e1       	ldi	r18, 0x18	; 24
     1b8:	31 e0       	ldi	r19, 0x01	; 1
     1ba:	b9 01       	movw	r22, r18
     1bc:	0e 94 a0 02 	call	0x540	; 0x540 <mu2Command>
	initUART(0,
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	48 e9       	ldi	r20, 0x98	; 152
     1c6:	00 ec       	ldi	r16, 0xC0	; 192
     1c8:	12 e1       	ldi	r17, 0x12	; 18
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	0e 94 31 04 	call	0x862	; 0x862 <initUART>
			 StopBitIs1Bit|NonParity,
			 ReceiveEnable|TransmitEnable|ReceiveCompleteInteruptEnable,
			 4800);
	LED(0,false);LED(1,false);LED(2,false);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
	sei();
     1ea:	78 94       	sei
	wait_ms(1500);
     1ec:	8c ed       	ldi	r24, 0xDC	; 220
     1ee:	95 e0       	ldi	r25, 0x05	; 5
     1f0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <wait_ms>
	supplySalve();
     1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <supplySalve>
	wait_ms(25);
     1f8:	89 e1       	ldi	r24, 0x19	; 25
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <wait_ms>


	while(1){	
		controller = Toggle_RC_Rx_Buffer();
     200:	0e 94 2c 01 	call	0x258	; 0x258 <Toggle_RC_Rx_Buffer>
     204:	9a 83       	std	Y+2, r25	; 0x02
     206:	89 83       	std	Y+1, r24	; 0x01
		
		wait_ms(15);
     208:	8f e0       	ldi	r24, 0x0F	; 15
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <wait_ms>
     210:	f7 cf       	rjmp	.-18     	; 0x200 <main+0xf2>

00000212 <initCtrlData>:
static volatile char check[] = "DR=";
static volatile uint8_t ovf_cnt = 0;

__inline__ void resetCommunicateIntervalCounter(void);

void initCtrlData(void){
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<RC_DATA_LENGTH;i++){
     21a:	10 92 34 01 	sts	0x0134, r1
     21e:	15 c0       	rjmp	.+42     	; 0x24a <initCtrlData+0x38>
			ctrlData.buf[i] = defaultCtrlData[i];
     220:	80 91 34 01 	lds	r24, 0x0134
     224:	28 2f       	mov	r18, r24
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	80 91 34 01 	lds	r24, 0x0134
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	e5 5e       	subi	r30, 0xE5	; 229
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	80 81       	ld	r24, Z
     238:	f9 01       	movw	r30, r18
     23a:	e8 5c       	subi	r30, 0xC8	; 200
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	80 83       	st	Z, r24
static volatile uint8_t ovf_cnt = 0;

__inline__ void resetCommunicateIntervalCounter(void);

void initCtrlData(void){
	for(i=0;i<RC_DATA_LENGTH;i++){
     240:	80 91 34 01 	lds	r24, 0x0134
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 34 01 	sts	0x0134, r24
     24a:	80 91 34 01 	lds	r24, 0x0134
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	38 f3       	brcs	.-50     	; 0x220 <initCtrlData+0xe>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
}
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <Toggle_RC_Rx_Buffer>:
union controller_data *Toggle_RC_Rx_Buffer(void)
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
	cli();
     260:	f8 94       	cli
	for(i=0;i<RC_DATA_LENGTH;i++){
     262:	10 92 34 01 	sts	0x0134, r1
     266:	15 c0       	rjmp	.+42     	; 0x292 <Toggle_RC_Rx_Buffer+0x3a>
		keepCtrlData.buf[i] = ctrlData.buf[i];
     268:	80 91 34 01 	lds	r24, 0x0134
     26c:	28 2f       	mov	r18, r24
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	80 91 34 01 	lds	r24, 0x0134
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	e8 5c       	subi	r30, 0xC8	; 200
     27c:	fe 4f       	sbci	r31, 0xFE	; 254
     27e:	80 81       	ld	r24, Z
     280:	f9 01       	movw	r30, r18
     282:	e4 5c       	subi	r30, 0xC4	; 196
     284:	fe 4f       	sbci	r31, 0xFE	; 254
     286:	80 83       	st	Z, r24
		}
}
union controller_data *Toggle_RC_Rx_Buffer(void)
{
	cli();
	for(i=0;i<RC_DATA_LENGTH;i++){
     288:	80 91 34 01 	lds	r24, 0x0134
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 34 01 	sts	0x0134, r24
     292:	80 91 34 01 	lds	r24, 0x0134
     296:	84 30       	cpi	r24, 0x04	; 4
     298:	38 f3       	brcs	.-50     	; 0x268 <Toggle_RC_Rx_Buffer+0x10>
		keepCtrlData.buf[i] = ctrlData.buf[i];
	}
	sei();
     29a:	78 94       	sei
	return &keepCtrlData;
     29c:	8c e3       	ldi	r24, 0x3C	; 60
     29e:	91 e0       	ldi	r25, 0x01	; 1
}
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <__vector_20>:


ISR(USART0_RX_vect)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	00 90 5b 00 	lds	r0, 0x005B
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
     2bc:	5f 93       	push	r21
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	val = UDR0;
     2d6:	e6 ec       	ldi	r30, 0xC6	; 198
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	80 93 58 01 	sts	0x0158, r24

	if(phase){
     2e0:	80 91 36 01 	lds	r24, 0x0136
     2e4:	88 23       	and	r24, r24
     2e6:	09 f4       	brne	.+2      	; 0x2ea <__vector_20+0x44>
     2e8:	4e c0       	rjmp	.+156    	; 0x386 <__vector_20+0xe0>
		packet[cnt] = val;
     2ea:	80 91 35 01 	lds	r24, 0x0135
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	20 91 58 01 	lds	r18, 0x0158
     2f6:	fc 01       	movw	r30, r24
     2f8:	e0 5c       	subi	r30, 0xC0	; 192
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	20 83       	st	Z, r18
		if(cnt<2){
     2fe:	80 91 35 01 	lds	r24, 0x0135
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	b0 f4       	brcc	.+44     	; 0x332 <__vector_20+0x8c>
			if(val != check[cnt]){
     306:	80 91 35 01 	lds	r24, 0x0135
     30a:	88 2f       	mov	r24, r24
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	e1 5e       	subi	r30, 0xE1	; 225
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	90 81       	ld	r25, Z
     316:	80 91 58 01 	lds	r24, 0x0158
     31a:	98 17       	cp	r25, r24
     31c:	71 f1       	breq	.+92     	; 0x37a <__vector_20+0xd4>
				phase = false;
     31e:	10 92 36 01 	sts	0x0136, r1
				LED(0,false);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
				beep(1);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
     330:	24 c0       	rjmp	.+72     	; 0x37a <__vector_20+0xd4>
			}
		}else if(cnt==8){
     332:	80 91 35 01 	lds	r24, 0x0135
     336:	88 30       	cpi	r24, 0x08	; 8
     338:	01 f5       	brne	.+64     	; 0x37a <__vector_20+0xd4>
			ctrlData.buf[0] = packet[5];
     33a:	80 91 45 01 	lds	r24, 0x0145
     33e:	80 93 38 01 	sts	0x0138, r24
			ctrlData.buf[1] = packet[6];
     342:	80 91 46 01 	lds	r24, 0x0146
     346:	80 93 39 01 	sts	0x0139, r24
			ctrlData.buf[2] = packet[7];
     34a:	80 91 47 01 	lds	r24, 0x0147
     34e:	80 93 3a 01 	sts	0x013A, r24
			ctrlData.buf[3] = packet[8];
     352:	80 91 48 01 	lds	r24, 0x0148
     356:	80 93 3b 01 	sts	0x013B, r24
			phase = false;
     35a:	10 92 36 01 	sts	0x0136, r1
			wdt_reset();
     35e:	a8 95       	wdr
			LED(0,true);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
			if(EmergencyStatus()) beep(0);
     368:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <EmergencyStatus>
     36c:	88 23       	and	r24, r24
     36e:	19 f0       	breq	.+6      	; 0x376 <__vector_20+0xd0>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
			resetCommunicateIntervalCounter();
     376:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <resetCommunicateIntervalCounter>
		}
		cnt++;
     37a:	80 91 35 01 	lds	r24, 0x0135
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 35 01 	sts	0x0135, r24
     384:	09 c0       	rjmp	.+18     	; 0x398 <__vector_20+0xf2>
	}else{
		if(val=='*'){
     386:	80 91 58 01 	lds	r24, 0x0158
     38a:	8a 32       	cpi	r24, 0x2A	; 42
     38c:	29 f4       	brne	.+10     	; 0x398 <__vector_20+0xf2>
			cnt = 0;
     38e:	10 92 35 01 	sts	0x0135, r1
			phase = true;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 36 01 	sts	0x0136, r24
		}
	}

}
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	7f 91       	pop	r23
     3aa:	6f 91       	pop	r22
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
     3b4:	0f 90       	pop	r0
     3b6:	00 92 5b 00 	sts	0x005B, r0
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <resetCommunicateIntervalCounter>:

void resetCommunicateIntervalCounter(void)
{
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
	ovf_cnt = 0;
     3cc:	10 92 37 01 	sts	0x0137, r1
	TCNT1 = 0;
     3d0:	e4 e8       	ldi	r30, 0x84	; 132
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	11 82       	std	Z+1, r1	; 0x01
     3d6:	10 82       	st	Z, r1
}
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	08 95       	ret

000003de <initCommunicateIntervalCounter>:

__inline__ void initCommunicateIntervalCounter(void)
{
     3de:	df 93       	push	r29
     3e0:	cf 93       	push	r28
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     3e6:	e0 e8       	ldi	r30, 0x80	; 128
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	10 82       	st	Z, r1
	TCCR1B = 5;
     3ec:	e1 e8       	ldi	r30, 0x81	; 129
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	85 e0       	ldi	r24, 0x05	; 5
     3f2:	80 83       	st	Z, r24
	TIMSK1 = 1;
     3f4:	ef e6       	ldi	r30, 0x6F	; 111
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
	TCNT1 = 0;
     3fc:	e4 e8       	ldi	r30, 0x84	; 132
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	11 82       	std	Z+1, r1	; 0x01
     402:	10 82       	st	Z, r1
}
     404:	cf 91       	pop	r28
     406:	df 91       	pop	r29
     408:	08 95       	ret

0000040a <__vector_15>:

ISR (TIMER1_OVF_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	00 90 5b 00 	lds	r0, 0x005B
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
	if(++ovf_cnt>150){
     42e:	80 91 37 01 	lds	r24, 0x0137
     432:	8f 5f       	subi	r24, 0xFF	; 255
     434:	80 93 37 01 	sts	0x0137, r24
     438:	80 91 37 01 	lds	r24, 0x0137
     43c:	87 39       	cpi	r24, 0x97	; 151
     43e:	f0 f0       	brcs	.+60     	; 0x47c <__vector_15+0x72>
		ovf_cnt = 0;
     440:	10 92 37 01 	sts	0x0137, r1
		for(i=0;i<RC_DATA_LENGTH;i++){
     444:	10 92 34 01 	sts	0x0134, r1
     448:	15 c0       	rjmp	.+42     	; 0x474 <__vector_15+0x6a>
			ctrlData.buf[i] = defaultCtrlData[i];
     44a:	80 91 34 01 	lds	r24, 0x0134
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	80 91 34 01 	lds	r24, 0x0134
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	e5 5e       	subi	r30, 0xE5	; 229
     45e:	fe 4f       	sbci	r31, 0xFE	; 254
     460:	80 81       	ld	r24, Z
     462:	f9 01       	movw	r30, r18
     464:	e8 5c       	subi	r30, 0xC8	; 200
     466:	fe 4f       	sbci	r31, 0xFE	; 254
     468:	80 83       	st	Z, r24
}

ISR (TIMER1_OVF_vect){
	if(++ovf_cnt>150){
		ovf_cnt = 0;
		for(i=0;i<RC_DATA_LENGTH;i++){
     46a:	80 91 34 01 	lds	r24, 0x0134
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 34 01 	sts	0x0134, r24
     474:	80 91 34 01 	lds	r24, 0x0134
     478:	84 30       	cpi	r24, 0x04	; 4
     47a:	38 f3       	brcs	.-50     	; 0x44a <__vector_15+0x40>
			ctrlData.buf[i] = defaultCtrlData[i];
		}
	}
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	00 92 5b 00 	sts	0x005B, r0
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <setMU2PutFunc>:
/**
 * ÉVÉäÉAÉãëóêMä÷êîópÉ|ÉCÉìÉ^ÉZÉbÉ^Å[ä÷êî
 * @param {f:void(*)(void)}
 */
void setMU2PutFunc(void(*f)(uint8_t c))
{
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <setMU2PutFunc+0x6>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	9a 83       	std	Y+2, r25	; 0x02
     4a8:	89 83       	std	Y+1, r24	; 0x01
	put = f;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	90 93 5a 01 	sts	0x015A, r25
     4b2:	80 93 59 01 	sts	0x0159, r24
}
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <setMU2GetFunc>:
/**
 * ÉVÉäÉAÉãéÛêMä÷êîópÉ|ÉCÉìÉ^ÉZÉbÉ^Å[ä÷êî
 * @param {f:uint8_t(*)(void)}
 */
void setMU2GetFunc(uint8_t(*f)(void))
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <setMU2GetFunc+0x6>
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	89 83       	std	Y+1, r24	; 0x01
	get = f;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	90 93 5c 01 	sts	0x015C, r25
     4d6:	80 93 5b 01 	sts	0x015B, r24
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	08 95       	ret

000004e4 <byteToString>:
 * 1Byte->16êiï∂éöóÒïœä∑ä÷êî
 * @param {byte:uint8_t} ïœä∑ëŒè€ÉfÅ[É^
 * @param {string:char*} ïœä∑å„ï∂éöóÒäiî[êÊÉ|ÉCÉìÉ^
 */
void byteToString(uint8_t byte, char* string)
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <byteToString+0x6>
     4ea:	0f 92       	push	r0
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	7b 83       	std	Y+3, r23	; 0x03
     4f4:	6a 83       	std	Y+2, r22	; 0x02
	string[0] = ascii[ ( byte >> 4 ) & 0x0F ];
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	82 95       	swap	r24
     4fa:	8f 70       	andi	r24, 0x0F	; 15
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	ed 5d       	subi	r30, 0xDD	; 221
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	80 81       	ld	r24, Z
     508:	ea 81       	ldd	r30, Y+2	; 0x02
     50a:	fb 81       	ldd	r31, Y+3	; 0x03
     50c:	80 83       	st	Z, r24
	string[1] = ascii[ byte & 0x0F ];
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	dc 01       	movw	r26, r24
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	8f 70       	andi	r24, 0x0F	; 15
     51e:	90 70       	andi	r25, 0x00	; 0
     520:	fc 01       	movw	r30, r24
     522:	ed 5d       	subi	r30, 0xDD	; 221
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	8c 93       	st	X, r24
	string[2] = '\0';
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	9b 81       	ldd	r25, Y+3	; 0x03
     52e:	fc 01       	movw	r30, r24
     530:	32 96       	adiw	r30, 0x02	; 2
     532:	10 82       	st	Z, r1
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <mu2Command>:
 * MU2Ç…ÉRÉ}ÉìÉhÇëóêMÇ∑ÇÈä÷êî
 * @param {command:const char*} MU2Ç…ëóêMÇ∑ÇÈÉRÉ}ÉìÉh
 * @param {values:uint8_t*} ÉRÉ}ÉìÉhÇ…ïtâ¡Ç∑ÇÈÉfÅ[É^
 */
bool mu2Command(const char* command, const char* values)
{
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	60 97       	sbiw	r28, 0x10	; 16
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	9d 87       	std	Y+13, r25	; 0x0d
     55a:	8c 87       	std	Y+12, r24	; 0x0c
     55c:	7f 87       	std	Y+15, r23	; 0x0f
     55e:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t i, recv[10];
	
	put('@');
     560:	e0 91 59 01 	lds	r30, 0x0159
     564:	f0 91 5a 01 	lds	r31, 0x015A
     568:	80 e4       	ldi	r24, 0x40	; 64
     56a:	09 95       	icall
	put(command[0]);
     56c:	20 91 59 01 	lds	r18, 0x0159
     570:	30 91 5a 01 	lds	r19, 0x015A
     574:	ec 85       	ldd	r30, Y+12	; 0x0c
     576:	fd 85       	ldd	r31, Y+13	; 0x0d
     578:	80 81       	ld	r24, Z
     57a:	f9 01       	movw	r30, r18
     57c:	09 95       	icall
	put(command[1]);
     57e:	20 91 59 01 	lds	r18, 0x0159
     582:	30 91 5a 01 	lds	r19, 0x015A
     586:	8c 85       	ldd	r24, Y+12	; 0x0c
     588:	9d 85       	ldd	r25, Y+13	; 0x0d
     58a:	fc 01       	movw	r30, r24
     58c:	31 96       	adiw	r30, 0x01	; 1
     58e:	80 81       	ld	r24, Z
     590:	f9 01       	movw	r30, r18
     592:	09 95       	icall
     594:	0e c0       	rjmp	.+28     	; 0x5b2 <mu2Command+0x72>
	for ( ; *values != '\0'; values++ )
		{
			put(*values);
     596:	20 91 59 01 	lds	r18, 0x0159
     59a:	30 91 5a 01 	lds	r19, 0x015A
     59e:	ee 85       	ldd	r30, Y+14	; 0x0e
     5a0:	ff 85       	ldd	r31, Y+15	; 0x0f
     5a2:	80 81       	ld	r24, Z
     5a4:	f9 01       	movw	r30, r18
     5a6:	09 95       	icall
	uint8_t i, recv[10];
	
	put('@');
	put(command[0]);
	put(command[1]);
	for ( ; *values != '\0'; values++ )
     5a8:	8e 85       	ldd	r24, Y+14	; 0x0e
     5aa:	9f 85       	ldd	r25, Y+15	; 0x0f
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	9f 87       	std	Y+15, r25	; 0x0f
     5b0:	8e 87       	std	Y+14, r24	; 0x0e
     5b2:	ee 85       	ldd	r30, Y+14	; 0x0e
     5b4:	ff 85       	ldd	r31, Y+15	; 0x0f
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	69 f7       	brne	.-38     	; 0x596 <mu2Command+0x56>
		{
			put(*values);
		}
	put(0x0d);
     5bc:	e0 91 59 01 	lds	r30, 0x0159
     5c0:	f0 91 5a 01 	lds	r31, 0x015A
     5c4:	8d e0       	ldi	r24, 0x0D	; 13
     5c6:	09 95       	icall
	put(0x0a);
     5c8:	e0 91 59 01 	lds	r30, 0x0159
     5cc:	f0 91 5a 01 	lds	r31, 0x015A
     5d0:	8a e0       	ldi	r24, 0x0A	; 10
     5d2:	09 95       	icall
	
	for ( i = 0; i < 10; i++ )
     5d4:	19 82       	std	Y+1, r1	; 0x01
     5d6:	2e c0       	rjmp	.+92     	; 0x634 <mu2Command+0xf4>
		{
			recv[i] = get();
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	08 2f       	mov	r16, r24
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	e0 91 5b 01 	lds	r30, 0x015B
     5e2:	f0 91 5c 01 	lds	r31, 0x015C
     5e6:	09 95       	icall
     5e8:	28 2f       	mov	r18, r24
     5ea:	ce 01       	movw	r24, r28
     5ec:	02 96       	adiw	r24, 0x02	; 2
     5ee:	fc 01       	movw	r30, r24
     5f0:	e0 0f       	add	r30, r16
     5f2:	f1 1f       	adc	r31, r17
     5f4:	20 83       	st	Z, r18
			if( i > 0 && recv[i-1] == 0x0d && recv[i] == 0x0a )
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	88 23       	and	r24, r24
     5fa:	c9 f0       	breq	.+50     	; 0x62e <mu2Command+0xee>
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	88 2f       	mov	r24, r24
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9c 01       	movw	r18, r24
     604:	21 50       	subi	r18, 0x01	; 1
     606:	30 40       	sbci	r19, 0x00	; 0
     608:	ce 01       	movw	r24, r28
     60a:	02 96       	adiw	r24, 0x02	; 2
     60c:	fc 01       	movw	r30, r24
     60e:	e2 0f       	add	r30, r18
     610:	f3 1f       	adc	r31, r19
     612:	80 81       	ld	r24, Z
     614:	8d 30       	cpi	r24, 0x0D	; 13
     616:	59 f4       	brne	.+22     	; 0x62e <mu2Command+0xee>
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	02 96       	adiw	r24, 0x02	; 2
     622:	fc 01       	movw	r30, r24
     624:	e2 0f       	add	r30, r18
     626:	f3 1f       	adc	r31, r19
     628:	80 81       	ld	r24, Z
     62a:	8a 30       	cpi	r24, 0x0A	; 10
     62c:	31 f0       	breq	.+12     	; 0x63a <mu2Command+0xfa>
			put(*values);
		}
	put(0x0d);
	put(0x0a);
	
	for ( i = 0; i < 10; i++ )
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	8a 30       	cpi	r24, 0x0A	; 10
     638:	78 f2       	brcs	.-98     	; 0x5d8 <mu2Command+0x98>
			if( i > 0 && recv[i-1] == 0x0d && recv[i] == 0x0a )
				{
					break;
				}
		}
	if ( recv[1] == 'E' && recv[2] == 'R' )
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	85 34       	cpi	r24, 0x45	; 69
     63e:	31 f4       	brne	.+12     	; 0x64c <mu2Command+0x10c>
     640:	8c 81       	ldd	r24, Y+4	; 0x04
     642:	82 35       	cpi	r24, 0x52	; 82
     644:	19 f4       	brne	.+6      	; 0x64c <mu2Command+0x10c>
		{
			return true;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	88 8b       	std	Y+16, r24	; 0x10
     64a:	01 c0       	rjmp	.+2      	; 0x64e <mu2Command+0x10e>
		}
	
	return false;
     64c:	18 8a       	std	Y+16, r1	; 0x10
     64e:	88 89       	ldd	r24, Y+16	; 0x10
}
     650:	60 96       	adiw	r28, 0x10	; 16
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <mu2CommandToEEPROM>:
 * MU2Ç…ÉRÉ}ÉìÉhÇëóêMÇµÅCMU2ÇÃEEPROMÇ…èëÇ´Ç±Çﬁä÷êî
 * @param {command:const char*} MU2Ç…ëóêMÇ∑ÇÈÉRÉ}ÉìÉh
 * @param {values:uint8_t*} ÉRÉ}ÉìÉhÇ…ïtâ¡Ç∑ÇÈÉfÅ[É^
 */
bool mu2CommandToEEPROM(const char* command, const char* values)
{
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	df 93       	push	r29
     66c:	cf 93       	push	r28
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	60 97       	sbiw	r28, 0x10	; 16
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	9d 87       	std	Y+13, r25	; 0x0d
     680:	8c 87       	std	Y+12, r24	; 0x0c
     682:	7f 87       	std	Y+15, r23	; 0x0f
     684:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t i, recv[10];
	
	put('@');
     686:	e0 91 59 01 	lds	r30, 0x0159
     68a:	f0 91 5a 01 	lds	r31, 0x015A
     68e:	80 e4       	ldi	r24, 0x40	; 64
     690:	09 95       	icall
	put(command[0]);
     692:	20 91 59 01 	lds	r18, 0x0159
     696:	30 91 5a 01 	lds	r19, 0x015A
     69a:	ec 85       	ldd	r30, Y+12	; 0x0c
     69c:	fd 85       	ldd	r31, Y+13	; 0x0d
     69e:	80 81       	ld	r24, Z
     6a0:	f9 01       	movw	r30, r18
     6a2:	09 95       	icall
	put(command[1]);
     6a4:	20 91 59 01 	lds	r18, 0x0159
     6a8:	30 91 5a 01 	lds	r19, 0x015A
     6ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     6ae:	9d 85       	ldd	r25, Y+13	; 0x0d
     6b0:	fc 01       	movw	r30, r24
     6b2:	31 96       	adiw	r30, 0x01	; 1
     6b4:	80 81       	ld	r24, Z
     6b6:	f9 01       	movw	r30, r18
     6b8:	09 95       	icall
     6ba:	0e c0       	rjmp	.+28     	; 0x6d8 <mu2CommandToEEPROM+0x72>
	for ( ; *values != '\0'; values++ )
		{
			put(*values);
     6bc:	20 91 59 01 	lds	r18, 0x0159
     6c0:	30 91 5a 01 	lds	r19, 0x015A
     6c4:	ee 85       	ldd	r30, Y+14	; 0x0e
     6c6:	ff 85       	ldd	r31, Y+15	; 0x0f
     6c8:	80 81       	ld	r24, Z
     6ca:	f9 01       	movw	r30, r18
     6cc:	09 95       	icall
	uint8_t i, recv[10];
	
	put('@');
	put(command[0]);
	put(command[1]);
	for ( ; *values != '\0'; values++ )
     6ce:	8e 85       	ldd	r24, Y+14	; 0x0e
     6d0:	9f 85       	ldd	r25, Y+15	; 0x0f
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	9f 87       	std	Y+15, r25	; 0x0f
     6d6:	8e 87       	std	Y+14, r24	; 0x0e
     6d8:	ee 85       	ldd	r30, Y+14	; 0x0e
     6da:	ff 85       	ldd	r31, Y+15	; 0x0f
     6dc:	80 81       	ld	r24, Z
     6de:	88 23       	and	r24, r24
     6e0:	69 f7       	brne	.-38     	; 0x6bc <mu2CommandToEEPROM+0x56>
		{
			put(*values);
		}
	put('/');
     6e2:	e0 91 59 01 	lds	r30, 0x0159
     6e6:	f0 91 5a 01 	lds	r31, 0x015A
     6ea:	8f e2       	ldi	r24, 0x2F	; 47
     6ec:	09 95       	icall
	put('W');
     6ee:	e0 91 59 01 	lds	r30, 0x0159
     6f2:	f0 91 5a 01 	lds	r31, 0x015A
     6f6:	87 e5       	ldi	r24, 0x57	; 87
     6f8:	09 95       	icall
	put(0x0d);
     6fa:	e0 91 59 01 	lds	r30, 0x0159
     6fe:	f0 91 5a 01 	lds	r31, 0x015A
     702:	8d e0       	ldi	r24, 0x0D	; 13
     704:	09 95       	icall
	put(0x0a);
     706:	e0 91 59 01 	lds	r30, 0x0159
     70a:	f0 91 5a 01 	lds	r31, 0x015A
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	09 95       	icall
	
	for ( i = 0; i < 10; i++ )
     712:	19 82       	std	Y+1, r1	; 0x01
     714:	2e c0       	rjmp	.+92     	; 0x772 <mu2CommandToEEPROM+0x10c>
		{
			recv[i] = get();
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	08 2f       	mov	r16, r24
     71a:	10 e0       	ldi	r17, 0x00	; 0
     71c:	e0 91 5b 01 	lds	r30, 0x015B
     720:	f0 91 5c 01 	lds	r31, 0x015C
     724:	09 95       	icall
     726:	28 2f       	mov	r18, r24
     728:	ce 01       	movw	r24, r28
     72a:	02 96       	adiw	r24, 0x02	; 2
     72c:	fc 01       	movw	r30, r24
     72e:	e0 0f       	add	r30, r16
     730:	f1 1f       	adc	r31, r17
     732:	20 83       	st	Z, r18
			if( i > 0 && recv[i-1] == 0x0d && recv[i] == 0x0a )
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	88 23       	and	r24, r24
     738:	c9 f0       	breq	.+50     	; 0x76c <mu2CommandToEEPROM+0x106>
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9c 01       	movw	r18, r24
     742:	21 50       	subi	r18, 0x01	; 1
     744:	30 40       	sbci	r19, 0x00	; 0
     746:	ce 01       	movw	r24, r28
     748:	02 96       	adiw	r24, 0x02	; 2
     74a:	fc 01       	movw	r30, r24
     74c:	e2 0f       	add	r30, r18
     74e:	f3 1f       	adc	r31, r19
     750:	80 81       	ld	r24, Z
     752:	8d 30       	cpi	r24, 0x0D	; 13
     754:	59 f4       	brne	.+22     	; 0x76c <mu2CommandToEEPROM+0x106>
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	ce 01       	movw	r24, r28
     75e:	02 96       	adiw	r24, 0x02	; 2
     760:	fc 01       	movw	r30, r24
     762:	e2 0f       	add	r30, r18
     764:	f3 1f       	adc	r31, r19
     766:	80 81       	ld	r24, Z
     768:	8a 30       	cpi	r24, 0x0A	; 10
     76a:	31 f0       	breq	.+12     	; 0x778 <mu2CommandToEEPROM+0x112>
	put('/');
	put('W');
	put(0x0d);
	put(0x0a);
	
	for ( i = 0; i < 10; i++ )
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	8a 30       	cpi	r24, 0x0A	; 10
     776:	78 f2       	brcs	.-98     	; 0x716 <mu2CommandToEEPROM+0xb0>
			if( i > 0 && recv[i-1] == 0x0d && recv[i] == 0x0a )
				{
					break;
				}
		}
	if ( recv[1] == 'E' && recv[2] == 'R' )
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	85 34       	cpi	r24, 0x45	; 69
     77c:	31 f4       	brne	.+12     	; 0x78a <mu2CommandToEEPROM+0x124>
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	82 35       	cpi	r24, 0x52	; 82
     782:	19 f4       	brne	.+6      	; 0x78a <mu2CommandToEEPROM+0x124>
		{
			return true;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	88 8b       	std	Y+16, r24	; 0x10
     788:	01 c0       	rjmp	.+2      	; 0x78c <mu2CommandToEEPROM+0x126>
		}
	
	return false;
     78a:	18 8a       	std	Y+16, r1	; 0x10
     78c:	88 89       	ldd	r24, Y+16	; 0x10
}
     78e:	60 96       	adiw	r28, 0x10	; 16
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	cf 91       	pop	r28
     79c:	df 91       	pop	r29
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <mu2TransmitData>:
 * MU2Ç≈ÉfÅ[É^ÇëóêMÇ∑ÇÈä÷êî
 * @param {command:const char*} MU2Ç…ëóêMÇ∑ÇÈÉRÉ}ÉìÉh
 * @param {values:uint8_t*} ÉRÉ}ÉìÉhÇ…ïtâ¡Ç∑ÇÈÉfÅ[É^
 */
void mu2TransmitData(uint8_t* values, uint8_t size)
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	27 97       	sbiw	r28, 0x07	; 7
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	9e 83       	std	Y+6, r25	; 0x06
     7ba:	8d 83       	std	Y+5, r24	; 0x05
     7bc:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t i;
	char strSize[3];
	byteToString(size,strSize);
     7be:	9e 01       	movw	r18, r28
     7c0:	2e 5f       	subi	r18, 0xFE	; 254
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	8f 81       	ldd	r24, Y+7	; 0x07
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <byteToString>
	put('@');
     7cc:	e0 91 59 01 	lds	r30, 0x0159
     7d0:	f0 91 5a 01 	lds	r31, 0x015A
     7d4:	80 e4       	ldi	r24, 0x40	; 64
     7d6:	09 95       	icall
	put('D');
     7d8:	e0 91 59 01 	lds	r30, 0x0159
     7dc:	f0 91 5a 01 	lds	r31, 0x015A
     7e0:	84 e4       	ldi	r24, 0x44	; 68
     7e2:	09 95       	icall
	put('T');
     7e4:	e0 91 59 01 	lds	r30, 0x0159
     7e8:	f0 91 5a 01 	lds	r31, 0x015A
     7ec:	84 e5       	ldi	r24, 0x54	; 84
     7ee:	09 95       	icall
	put(strSize[0]);
     7f0:	e0 91 59 01 	lds	r30, 0x0159
     7f4:	f0 91 5a 01 	lds	r31, 0x015A
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	09 95       	icall
	put(strSize[1]);
     7fc:	e0 91 59 01 	lds	r30, 0x0159
     800:	f0 91 5a 01 	lds	r31, 0x015A
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	09 95       	icall
	for ( i = 0; i < size; i++ )
     808:	19 82       	std	Y+1, r1	; 0x01
     80a:	12 c0       	rjmp	.+36     	; 0x830 <mu2TransmitData+0x8c>
		{
			put(values[i]);
     80c:	40 91 59 01 	lds	r20, 0x0159
     810:	50 91 5a 01 	lds	r21, 0x015A
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	9e 81       	ldd	r25, Y+6	; 0x06
     81e:	fc 01       	movw	r30, r24
     820:	e2 0f       	add	r30, r18
     822:	f3 1f       	adc	r31, r19
     824:	80 81       	ld	r24, Z
     826:	fa 01       	movw	r30, r20
     828:	09 95       	icall
	put('@');
	put('D');
	put('T');
	put(strSize[0]);
	put(strSize[1]);
	for ( i = 0; i < size; i++ )
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	8f 5f       	subi	r24, 0xFF	; 255
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	99 81       	ldd	r25, Y+1	; 0x01
     832:	8f 81       	ldd	r24, Y+7	; 0x07
     834:	98 17       	cp	r25, r24
     836:	50 f3       	brcs	.-44     	; 0x80c <mu2TransmitData+0x68>
		{
			put(values[i]);
		}
	put(0x0d);
     838:	e0 91 59 01 	lds	r30, 0x0159
     83c:	f0 91 5a 01 	lds	r31, 0x015A
     840:	8d e0       	ldi	r24, 0x0D	; 13
     842:	09 95       	icall
	put(0x0a);
     844:	e0 91 59 01 	lds	r30, 0x0159
     848:	f0 91 5a 01 	lds	r31, 0x015A
     84c:	8a e0       	ldi	r24, 0x0A	; 10
     84e:	09 95       	icall
}
     850:	27 96       	adiw	r28, 0x07	; 7
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <initUART>:
 * @param {mode:uint8_t} UARTÇÃÉÇÅ[Éhê›íËílÅiÉXÉgÉbÉvÉrÉbÉgÅCÉpÉäÉeÉBÉrÉbÉgÅj
 * @param {act:uint8_t} UARTÇÃìÆçÏÇÃê›íËílÅiëóêMÅCéÛêMÅCäÑÇËçûÇ›Ç»Ç«Åj
 * @param {speed:uint32} UARTÇÃí êMë¨ìx
 */
void initUART(enum UARTNumber no, uint8_t mode, uint8_t act,uint32_t speed )
{
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	2d 97       	sbiw	r28, 0x0d	; 13
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	8d 83       	std	Y+5, r24	; 0x05
     87c:	6e 83       	std	Y+6, r22	; 0x06
     87e:	4f 83       	std	Y+7, r20	; 0x07
     880:	08 87       	std	Y+8, r16	; 0x08
     882:	19 87       	std	Y+9, r17	; 0x09
     884:	2a 87       	std	Y+10, r18	; 0x0a
     886:	3b 87       	std	Y+11, r19	; 0x0b
	uint32_t baud = ( ( ( FREQ * 1000000 ) >> 4 ) / speed ) - 1;
     888:	80 e2       	ldi	r24, 0x20	; 32
     88a:	91 ea       	ldi	r25, 0xA1	; 161
     88c:	a7 e0       	ldi	r26, 0x07	; 7
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	28 85       	ldd	r18, Y+8	; 0x08
     892:	39 85       	ldd	r19, Y+9	; 0x09
     894:	4a 85       	ldd	r20, Y+10	; 0x0a
     896:	5b 85       	ldd	r21, Y+11	; 0x0b
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 12 0b 	call	0x1624	; 0x1624 <__udivmodsi4>
     8a0:	da 01       	movw	r26, r20
     8a2:	c9 01       	movw	r24, r18
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	a1 09       	sbc	r26, r1
     8a8:	b1 09       	sbc	r27, r1
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	ab 83       	std	Y+3, r26	; 0x03
     8b0:	bc 83       	std	Y+4, r27	; 0x04
	
	switch ( no )
     8b2:	8d 81       	ldd	r24, Y+5	; 0x05
     8b4:	28 2f       	mov	r18, r24
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	3d 87       	std	Y+13, r19	; 0x0d
     8ba:	2c 87       	std	Y+12, r18	; 0x0c
     8bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8be:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	31 f0       	breq	.+12     	; 0x8d0 <initUART+0x6e>
     8c4:	2c 85       	ldd	r18, Y+12	; 0x0c
     8c6:	3d 85       	ldd	r19, Y+13	; 0x0d
     8c8:	21 30       	cpi	r18, 0x01	; 1
     8ca:	31 05       	cpc	r19, r1
     8cc:	d1 f0       	breq	.+52     	; 0x902 <initUART+0xa0>
     8ce:	31 c0       	rjmp	.+98     	; 0x932 <initUART+0xd0>
		{
			case UART0:
				UCSR0C = mode | OneFrameIs8Bit;
     8d0:	e2 ec       	ldi	r30, 0xC2	; 194
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	8e 81       	ldd	r24, Y+6	; 0x06
     8d6:	86 60       	ori	r24, 0x06	; 6
     8d8:	80 83       	st	Z, r24
				UCSR0B = act;
     8da:	e1 ec       	ldi	r30, 0xC1	; 193
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	80 83       	st	Z, r24
				UBRR0H = (uint8_t)(baud>>8);
     8e2:	e5 ec       	ldi	r30, 0xC5	; 197
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	ab 81       	ldd	r26, Y+3	; 0x03
     8ec:	bc 81       	ldd	r27, Y+4	; 0x04
     8ee:	89 2f       	mov	r24, r25
     8f0:	9a 2f       	mov	r25, r26
     8f2:	ab 2f       	mov	r26, r27
     8f4:	bb 27       	eor	r27, r27
     8f6:	80 83       	st	Z, r24
		 		UBRR0L = (uint8_t)baud;
     8f8:	e4 ec       	ldi	r30, 0xC4	; 196
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	80 83       	st	Z, r24
     900:	18 c0       	rjmp	.+48     	; 0x932 <initUART+0xd0>
				break;
			case UART1:
				UCSR1C = mode | OneFrameIs8Bit;
     902:	ea ec       	ldi	r30, 0xCA	; 202
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	8e 81       	ldd	r24, Y+6	; 0x06
     908:	86 60       	ori	r24, 0x06	; 6
     90a:	80 83       	st	Z, r24
				UCSR1B = act;
     90c:	e9 ec       	ldi	r30, 0xC9	; 201
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	8f 81       	ldd	r24, Y+7	; 0x07
     912:	80 83       	st	Z, r24
				UBRR1H = (uint8_t)(baud>>8);
     914:	ed ec       	ldi	r30, 0xCD	; 205
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	ab 81       	ldd	r26, Y+3	; 0x03
     91e:	bc 81       	ldd	r27, Y+4	; 0x04
     920:	89 2f       	mov	r24, r25
     922:	9a 2f       	mov	r25, r26
     924:	ab 2f       	mov	r26, r27
     926:	bb 27       	eor	r27, r27
     928:	80 83       	st	Z, r24
		 		UBRR1L = (uint8_t)baud;
     92a:	ec ec       	ldi	r30, 0xCC	; 204
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	80 83       	st	Z, r24
				break;
			default:
				break;
		}
}
     932:	2d 96       	adiw	r28, 0x0d	; 13
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	08 95       	ret

00000948 <uart0Put>:
/**
 * 1ByteëóêMÇ∑ÇÈ
 * @param {value:uint8_t} ëóêMÇ∑ÇÈÉfÅ[É^
 */
void uart0Put(uint8_t value)
{
     948:	df 93       	push	r29
     94a:	cf 93       	push	r28
     94c:	0f 92       	push	r0
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	89 83       	std	Y+1, r24	; 0x01
	while ( UART0_TRANSMITTING );
     954:	e0 ec       	ldi	r30, 0xC0	; 192
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 72       	andi	r24, 0x20	; 32
     960:	90 70       	andi	r25, 0x00	; 0
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	b9 f3       	breq	.-18     	; 0x954 <uart0Put+0xc>
	UDR0 = value;
     966:	e6 ec       	ldi	r30, 0xC6	; 198
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	80 83       	st	Z, r24
}
     96e:	0f 90       	pop	r0
     970:	cf 91       	pop	r28
     972:	df 91       	pop	r29
     974:	08 95       	ret

00000976 <uart1Put>:
void uart1Put(uint8_t value)
{
     976:	df 93       	push	r29
     978:	cf 93       	push	r28
     97a:	0f 92       	push	r0
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	89 83       	std	Y+1, r24	; 0x01
	while ( UART1_TRANSMITTING );
     982:	e8 ec       	ldi	r30, 0xC8	; 200
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	80 72       	andi	r24, 0x20	; 32
     98e:	90 70       	andi	r25, 0x00	; 0
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	b9 f3       	breq	.-18     	; 0x982 <uart1Put+0xc>
	UDR1 = value;
     994:	ee ec       	ldi	r30, 0xCE	; 206
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	80 83       	st	Z, r24
} 
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <uart0Get>:
/**
 * 1ByteéÛêMÇ∑ÇÈ
 * @return {uint8_t} éÛêMÇµÇΩÉfÅ[É^
 */
uint8_t uart0Get(void)
{
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	while ( UART0_RECEIVING );
     9ac:	e0 ec       	ldi	r30, 0xC0	; 192
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	88 23       	and	r24, r24
     9b4:	dc f7       	brge	.-10     	; 0x9ac <uart0Get+0x8>
	return UDR0;
     9b6:	e6 ec       	ldi	r30, 0xC6	; 198
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
}
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	08 95       	ret

000009c2 <uart1Get>:
uint8_t uart1Get(void)
{
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	while ( UART1_RECEIVING );
     9ca:	e8 ec       	ldi	r30, 0xC8	; 200
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	88 23       	and	r24, r24
     9d2:	dc f7       	brge	.-10     	; 0x9ca <uart1Get+0x8>
	return UDR1;
     9d4:	ee ec       	ldi	r30, 0xCE	; 206
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
}
     9da:	cf 91       	pop	r28
     9dc:	df 91       	pop	r29
     9de:	08 95       	ret

000009e0 <uart0Puts>:
 * ï°êîByteëóêMÇ∑ÇÈ
 * @param {values:uint8_t*} ëóÇÈÉfÅ[É^åQ
 * @param {size:uint8_t} ëóÇÈÉfÅ[É^ÉTÉCÉY
 */
void uart0Puts(uint8_t* values, uint8_t size)
{
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <uart0Puts+0x6>
     9e6:	0f 92       	push	r0
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	9a 83       	std	Y+2, r25	; 0x02
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	6b 83       	std	Y+3, r22	; 0x03
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <uart0Puts+0x30>
	for ( ; size != 0; size-- )
		{
			uart0Put(*values++);
     9f4:	e9 81       	ldd	r30, Y+1	; 0x01
     9f6:	fa 81       	ldd	r31, Y+2	; 0x02
     9f8:	20 81       	ld	r18, Z
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	82 2f       	mov	r24, r18
     a06:	0e 94 a4 04 	call	0x948	; 0x948 <uart0Put>
 * @param {values:uint8_t*} ëóÇÈÉfÅ[É^åQ
 * @param {size:uint8_t} ëóÇÈÉfÅ[É^ÉTÉCÉY
 */
void uart0Puts(uint8_t* values, uint8_t size)
{
	for ( ; size != 0; size-- )
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	81 50       	subi	r24, 0x01	; 1
     a0e:	8b 83       	std	Y+3, r24	; 0x03
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	88 23       	and	r24, r24
     a14:	79 f7       	brne	.-34     	; 0x9f4 <uart0Puts+0x14>
		{
			uart0Put(*values++);
		}
}
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	cf 91       	pop	r28
     a1e:	df 91       	pop	r29
     a20:	08 95       	ret

00000a22 <uart1Puts>:

void uart1Puts(uint8_t* values, uint8_t size)
{
     a22:	df 93       	push	r29
     a24:	cf 93       	push	r28
     a26:	00 d0       	rcall	.+0      	; 0xa28 <uart1Puts+0x6>
     a28:	0f 92       	push	r0
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	9a 83       	std	Y+2, r25	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	6b 83       	std	Y+3, r22	; 0x03
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <uart1Puts+0x30>
	for ( ; size != 0; size-- )
		{
			uart1Put(*values++);
     a36:	e9 81       	ldd	r30, Y+1	; 0x01
     a38:	fa 81       	ldd	r31, Y+2	; 0x02
     a3a:	20 81       	ld	r18, Z
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	82 2f       	mov	r24, r18
     a48:	0e 94 bb 04 	call	0x976	; 0x976 <uart1Put>
		}
}

void uart1Puts(uint8_t* values, uint8_t size)
{
	for ( ; size != 0; size-- )
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	88 23       	and	r24, r24
     a56:	79 f7       	brne	.-34     	; 0xa36 <uart1Puts+0x14>
		{
			uart1Put(*values++);
		}
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <setTransmitCompleteInterruptFunc>:
 * ëóêMäÆóπäÑÇËçûÇ›ìÆçÏàœè˜ópä÷êîÉ|ÉCÉìÉ^ÉZÉbÉ^Å[ä÷êî
 * @param {no:UARTNumber} UARTÇÃî‘çÜ
 * @param {f:void(*)(void)} ä÷êîÉ|ÉCÉìÉ^
 */
void setTransmitCompleteInterruptFunc(enum UARTNumber no, volatile void (*f)(void))
{
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	00 d0       	rcall	.+0      	; 0xa6a <setTransmitCompleteInterruptFunc+0x6>
     a6a:	0f 92       	push	r0
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	7b 83       	std	Y+3, r23	; 0x03
     a74:	6a 83       	std	Y+2, r22	; 0x02
	if ( no == UART0 )
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 23       	and	r24, r24
     a7a:	39 f4       	brne	.+14     	; 0xa8a <setTransmitCompleteInterruptFunc+0x26>
		transComplete0 = f;
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	9b 81       	ldd	r25, Y+3	; 0x03
     a80:	90 93 5e 01 	sts	0x015E, r25
     a84:	80 93 5d 01 	sts	0x015D, r24
     a88:	09 c0       	rjmp	.+18     	; 0xa9c <setTransmitCompleteInterruptFunc+0x38>
	else if ( no == UART1 )
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	31 f4       	brne	.+12     	; 0xa9c <setTransmitCompleteInterruptFunc+0x38>
		transComplete1 = f;
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	9b 81       	ldd	r25, Y+3	; 0x03
     a94:	90 93 60 01 	sts	0x0160, r25
     a98:	80 93 5f 01 	sts	0x015F, r24
}
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	cf 91       	pop	r28
     aa4:	df 91       	pop	r29
     aa6:	08 95       	ret

00000aa8 <setDataRegisterEmptyFunc>:
 * ëóêMÉfÅ[É^ÉåÉWÉXÉ^ãÛÇ´äÑÇËçûÇ›ìÆçÏàœè˜ópä÷êîÉ|ÉCÉìÉ^ÉZÉbÉ^Å[ä÷êî
 * @param {no:UARTNumber} UARTÇÃî‘çÜ
 * @param {f:void(*)(void)} ä÷êîÉ|ÉCÉìÉ^
 */
void setDataRegisterEmptyFunc(enum UARTNumber no, volatile void (*f)(void))
{
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	00 d0       	rcall	.+0      	; 0xaae <setDataRegisterEmptyFunc+0x6>
     aae:	0f 92       	push	r0
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	7b 83       	std	Y+3, r23	; 0x03
     ab8:	6a 83       	std	Y+2, r22	; 0x02
	if ( no == UART0 )
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	88 23       	and	r24, r24
     abe:	39 f4       	brne	.+14     	; 0xace <setDataRegisterEmptyFunc+0x26>
		dataRegisterEmpty0 = f;
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	90 93 62 01 	sts	0x0162, r25
     ac8:	80 93 61 01 	sts	0x0161, r24
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <setDataRegisterEmptyFunc+0x38>
	else if ( no == UART1 )
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	31 f4       	brne	.+12     	; 0xae0 <setDataRegisterEmptyFunc+0x38>
		dataRegisterEmpty1 = f;
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	90 93 64 01 	sts	0x0164, r25
     adc:	80 93 63 01 	sts	0x0163, r24
}
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <setReceiveCompleteInterruptFunc>:
 * éÛêMäÆóπäÑÇËçûÇ›ìÆçÏàœè˜ópä÷êîÉ|ÉCÉìÉ^ÉZÉbÉ^Å[ä÷êî
 * @param {no:UARTNumber} UARTÇÃî‘çÜ
 * @param {f:void(*)(void)} ä÷êîÉ|ÉCÉìÉ^
 */
 void setReceiveCompleteInterruptFunc(enum UARTNumber no, volatile void (*f)(void))
 {
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <setReceiveCompleteInterruptFunc+0x6>
     af2:	0f 92       	push	r0
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	89 83       	std	Y+1, r24	; 0x01
     afa:	7b 83       	std	Y+3, r23	; 0x03
     afc:	6a 83       	std	Y+2, r22	; 0x02
 	if ( no == UART0 )
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	88 23       	and	r24, r24
     b02:	39 f4       	brne	.+14     	; 0xb12 <setReceiveCompleteInterruptFunc+0x26>
		receiveComplete0 = f;
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	9b 81       	ldd	r25, Y+3	; 0x03
     b08:	90 93 66 01 	sts	0x0166, r25
     b0c:	80 93 65 01 	sts	0x0165, r24
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <setReceiveCompleteInterruptFunc+0x38>
	else if ( no == UART1 )
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	31 f4       	brne	.+12     	; 0xb24 <setReceiveCompleteInterruptFunc+0x38>
		receiveComplete1 = f;
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	9b 81       	ldd	r25, Y+3	; 0x03
     b1c:	90 93 68 01 	sts	0x0168, r25
     b20:	80 93 67 01 	sts	0x0167, r24
 }
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <__vector_22>:

/**
 * ëóêMäÆóπäÑÇËçûÇ›
 */
ISR (USART0_TX_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	00 90 5b 00 	lds	r0, 0x005B
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	transComplete0();
     b60:	e0 91 5d 01 	lds	r30, 0x015D
     b64:	f0 91 5e 01 	lds	r31, 0x015E
     b68:	09 95       	icall
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	00 92 5b 00 	sts	0x005B, r0
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_30>:

ISR (USART1_TX_vect)
{
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	00 90 5b 00 	lds	r0, 0x005B
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	4f 93       	push	r20
     bac:	5f 93       	push	r21
     bae:	6f 93       	push	r22
     bb0:	7f 93       	push	r23
     bb2:	8f 93       	push	r24
     bb4:	9f 93       	push	r25
     bb6:	af 93       	push	r26
     bb8:	bf 93       	push	r27
     bba:	ef 93       	push	r30
     bbc:	ff 93       	push	r31
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	transComplete1();
     bc6:	e0 91 5f 01 	lds	r30, 0x015F
     bca:	f0 91 60 01 	lds	r31, 0x0160
     bce:	09 95       	icall
}
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	00 92 5b 00 	sts	0x005B, r0
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_21>:
 
/**
 * ëóêMÉfÅ[É^ÉåÉWÉXÉ^ãÛÇ´äÑÇËçûÇ›
 */
ISR (USART0_UDRE_vect)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	00 90 5b 00 	lds	r0, 0x005B
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	dataRegisterEmpty0();
     c2c:	e0 91 61 01 	lds	r30, 0x0161
     c30:	f0 91 62 01 	lds	r31, 0x0162
     c34:	09 95       	icall
}
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	00 92 5b 00 	sts	0x005B, r0
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_29>:

ISR (USART1_UDRE_vect)
{
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	00 90 5b 00 	lds	r0, 0x005B
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	dataRegisterEmpty1();
     c92:	e0 91 63 01 	lds	r30, 0x0163
     c96:	f0 91 64 01 	lds	r31, 0x0164
     c9a:	09 95       	icall
}
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	00 92 5b 00 	sts	0x005B, r0
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_28>:
{
	receiveComplete0();
}*/

ISR (USART1_RX_vect)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	00 90 5b 00 	lds	r0, 0x005B
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
	receiveComplete1();
     cf8:	e0 91 67 01 	lds	r30, 0x0167
     cfc:	f0 91 68 01 	lds	r31, 0x0168
     d00:	09 95       	icall
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	00 92 5b 00 	sts	0x005B, r0
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <initI2CMaster>:
 *     initI2CMaster(100); //100kbpsÇ≈É}ÉXÉ^Å[ìÆçÏÇ…èâä˙âª
 *
 * @param {speed:uint16_t} I2CÇÃÉoÉXÉXÉsÅ[Éh
 */
void initI2CMaster(uint16_t speed) 
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <initI2CMaster+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
	// É{Å[ÉåÅ[ÉgÇê›íËÇµÅCTWIìÆçÏÇãñâ¬Ç∑ÇÈ
		TWBR = ( ( ( FREQ * 1000 ) / speed ) - 16 ) / 2;
     d3c:	e8 eb       	ldi	r30, 0xB8	; 184
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	9f e1       	ldi	r25, 0x1F	; 31
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	3a 81       	ldd	r19, Y+2	; 0x02
     d48:	b9 01       	movw	r22, r18
     d4a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__udivmodhi4>
     d4e:	cb 01       	movw	r24, r22
     d50:	40 97       	sbiw	r24, 0x10	; 16
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	80 83       	st	Z, r24
		TWSR = 0;
     d58:	e9 eb       	ldi	r30, 0xB9	; 185
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	10 82       	st	Z, r1
		TWCR = EnableI2C;
     d5e:	ec eb       	ldi	r30, 0xBC	; 188
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	80 83       	st	Z, r24
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <i2cWrite>:
 *     i2cWrite(&slave);   // ÉAÉhÉåÉXÇ™0x01ÇÃÉXÉåÅ[ÉuÇ…0xffÇ™èëÇ©ÇÍÇÈ
 *
 * @param {slave:Slave*} ëóêMêÊÇÃÉXÉåÅ[ÉuÉCÉìÉXÉ^ÉìÉXÇÃÉ|ÉCÉìÉ^
 */
bool i2cWrite(Slave* slave)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <i2cWrite+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <i2cWrite+0x8>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t i, size;
	// äJénèåèÇÃê∂ê¨
		TWCR = SendStartConditionBit;
     d82:	ec eb       	ldi	r30, 0xBC	; 188
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	84 ea       	ldi	r24, 0xA4	; 164
     d88:	80 83       	st	Z, r24
		while ( I2C_DOING );
     d8a:	ec eb       	ldi	r30, 0xBC	; 188
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 23       	and	r24, r24
     d92:	dc f7       	brge	.-10     	; 0xd8a <i2cWrite+0x1a>
		if ( I2C_STATUS != SentStartConditionBit ) goto ERROR;
     d94:	e9 eb       	ldi	r30, 0xB9	; 185
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	88 7f       	andi	r24, 0xF8	; 248
     da0:	90 70       	andi	r25, 0x00	; 0
     da2:	88 30       	cpi	r24, 0x08	; 8
     da4:	91 05       	cpc	r25, r1
     da6:	09 f0       	breq	.+2      	; 0xdaa <i2cWrite+0x3a>
     da8:	4e c0       	rjmp	.+156    	; 0xe46 <i2cWrite+0xd6>
		
	// ÉAÉhÉåÉXì]ëóÅCACKämîF		
		TWDR = ( slave->address << 1 ) | WRITE;
     daa:	ab eb       	ldi	r26, 0xBB	; 187
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb 81       	ldd	r30, Y+3	; 0x03
     db0:	fc 81       	ldd	r31, Y+4	; 0x04
     db2:	80 81       	ld	r24, Z
     db4:	88 0f       	add	r24, r24
     db6:	8c 93       	st	X, r24
		TWCR = ContinueI2C;
     db8:	ec eb       	ldi	r30, 0xBC	; 188
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	84 e8       	ldi	r24, 0x84	; 132
     dbe:	80 83       	st	Z, r24
		while ( I2C_DOING );
     dc0:	ec eb       	ldi	r30, 0xBC	; 188
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 23       	and	r24, r24
     dc8:	dc f7       	brge	.-10     	; 0xdc0 <i2cWrite+0x50>
		if ( I2C_STATUS != SentSlaveAddressWithWriteBitAndACK ) goto ERROR;
     dca:	e9 eb       	ldi	r30, 0xB9	; 185
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	88 7f       	andi	r24, 0xF8	; 248
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	88 31       	cpi	r24, 0x18	; 24
     dda:	91 05       	cpc	r25, r1
     ddc:	a1 f5       	brne	.+104    	; 0xe46 <i2cWrite+0xd6>
		
	// ÉfÅ[É^ÉoÉCÉgì]ëóÅCACKämîFÇÃàÍòAÇÉfÅ[É^ÉTÉCÉYï™çsÇ§
		for ( i = 0, size = slave->write.size; i < size; i++ )
     dde:	1a 82       	std	Y+2, r1	; 0x02
     de0:	eb 81       	ldd	r30, Y+3	; 0x03
     de2:	fc 81       	ldd	r31, Y+4	; 0x04
     de4:	83 81       	ldd	r24, Z+3	; 0x03
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	24 c0       	rjmp	.+72     	; 0xe32 <i2cWrite+0xc2>
			{
				TWDR = slave->write.buffer[i];
     dea:	ab eb       	ldi	r26, 0xBB	; 187
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	21 81       	ldd	r18, Z+1	; 0x01
     df4:	32 81       	ldd	r19, Z+2	; 0x02
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	f9 01       	movw	r30, r18
     dfe:	e8 0f       	add	r30, r24
     e00:	f9 1f       	adc	r31, r25
     e02:	80 81       	ld	r24, Z
     e04:	8c 93       	st	X, r24
				TWCR = ContinueI2C;
     e06:	ec eb       	ldi	r30, 0xBC	; 188
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	84 e8       	ldi	r24, 0x84	; 132
     e0c:	80 83       	st	Z, r24
				while ( I2C_DOING );
     e0e:	ec eb       	ldi	r30, 0xBC	; 188
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	88 23       	and	r24, r24
     e16:	dc f7       	brge	.-10     	; 0xe0e <i2cWrite+0x9e>
				if ( I2C_STATUS != SentDataByteAndACKAtMaster ) goto ERROR;
     e18:	e9 eb       	ldi	r30, 0xB9	; 185
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	88 7f       	andi	r24, 0xF8	; 248
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	88 32       	cpi	r24, 0x28	; 40
     e28:	91 05       	cpc	r25, r1
     e2a:	69 f4       	brne	.+26     	; 0xe46 <i2cWrite+0xd6>
		TWCR = ContinueI2C;
		while ( I2C_DOING );
		if ( I2C_STATUS != SentSlaveAddressWithWriteBitAndACK ) goto ERROR;
		
	// ÉfÅ[É^ÉoÉCÉgì]ëóÅCACKämîFÇÃàÍòAÇÉfÅ[É^ÉTÉCÉYï™çsÇ§
		for ( i = 0, size = slave->write.size; i < size; i++ )
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	8a 83       	std	Y+2, r24	; 0x02
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	98 17       	cp	r25, r24
     e38:	c0 f2       	brcs	.-80     	; 0xdea <i2cWrite+0x7a>
				while ( I2C_DOING );
				if ( I2C_STATUS != SentDataByteAndACKAtMaster ) goto ERROR;
			}
		
	// èIóπèåèÇÃê∂ê¨
		TWCR = SendStopConditionBit;
     e3a:	ec eb       	ldi	r30, 0xBC	; 188
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	84 e9       	ldi	r24, 0x94	; 148
     e40:	80 83       	st	Z, r24
		
	// ê≥èÌèIóπ
		return false;
     e42:	1d 82       	std	Y+5, r1	; 0x05
     e44:	06 c0       	rjmp	.+12     	; 0xe52 <i2cWrite+0xe2>
		
	// ÉGÉâÅ[ÉPÅ[ÉX
ERROR:
		TWCR = SendStopConditionBit;
     e46:	ec eb       	ldi	r30, 0xBC	; 188
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	84 e9       	ldi	r24, 0x94	; 148
     e4c:	80 83       	st	Z, r24
		return true;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <i2cRead>:
 *     i2cRead(&slave);   // ÉAÉhÉåÉXÇ™0x01ÇÃÉXÉåÅ[ÉuÇ©ÇÁílÇ1byteì«Çﬁ
 *
 * @param {slave:Slave*} éÛêMêÊÇÃÉXÉåÅ[ÉuÉCÉìÉXÉ^ÉìÉXÇÃÉ|ÉCÉìÉ^
 */
bool i2cRead(Slave* slave)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <i2cRead+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <i2cRead+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t i, size;
	// äJénèåèÇÃê∂ê¨
		TWCR = SendStartConditionBit;
     e76:	ec eb       	ldi	r30, 0xBC	; 188
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	84 ea       	ldi	r24, 0xA4	; 164
     e7c:	80 83       	st	Z, r24
		while ( I2C_DOING );
     e7e:	ec eb       	ldi	r30, 0xBC	; 188
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	dc f7       	brge	.-10     	; 0xe7e <i2cRead+0x1a>
		if ( I2C_STATUS != SentStartConditionBit ) goto ERROR;
     e88:	e9 eb       	ldi	r30, 0xB9	; 185
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 7f       	andi	r24, 0xF8	; 248
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <i2cRead+0x3a>
     e9c:	75 c0       	rjmp	.+234    	; 0xf88 <i2cRead+0x124>
		
	// ÉAÉhÉåÉXì]ëóÅCACKämîF
		TWDR = ( slave->address << 1 ) | READ;
     e9e:	ab eb       	ldi	r26, 0xBB	; 187
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
		TWCR = ContinueI2C;
     eb4:	ec eb       	ldi	r30, 0xBC	; 188
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	84 e8       	ldi	r24, 0x84	; 132
     eba:	80 83       	st	Z, r24
		while ( I2C_DOING );
     ebc:	ec eb       	ldi	r30, 0xBC	; 188
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	dc f7       	brge	.-10     	; 0xebc <i2cRead+0x58>
		if ( I2C_STATUS != SentSlaveAddressWithReadBitAndACK ) goto ERROR;
     ec6:	e9 eb       	ldi	r30, 0xB9	; 185
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	88 7f       	andi	r24, 0xF8	; 248
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	80 34       	cpi	r24, 0x40	; 64
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <i2cRead+0x78>
     eda:	56 c0       	rjmp	.+172    	; 0xf88 <i2cRead+0x124>
		
	// ÉfÅ[É^éÛêMÅCACKî≠çs
		for ( i = 0, size = slave->read.size - 1; i < size; i++ )
     edc:	1a 82       	std	Y+2, r1	; 0x02
     ede:	eb 81       	ldd	r30, Y+3	; 0x03
     ee0:	fc 81       	ldd	r31, Y+4	; 0x04
     ee2:	86 81       	ldd	r24, Z+6	; 0x06
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <i2cRead+0xce>
			{
				TWCR = ContinueAndResponseI2C;
     eea:	ec eb       	ldi	r30, 0xBC	; 188
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	84 ec       	ldi	r24, 0xC4	; 196
     ef0:	80 83       	st	Z, r24
				while( I2C_DOING );
     ef2:	ec eb       	ldi	r30, 0xBC	; 188
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	dc f7       	brge	.-10     	; 0xef2 <i2cRead+0x8e>
				if ( I2C_STATUS != ReceivedDataByteAndACKAtMaster ) goto ERROR;
     efc:	e9 eb       	ldi	r30, 0xB9	; 185
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	88 7f       	andi	r24, 0xF8	; 248
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	80 35       	cpi	r24, 0x50	; 80
     f0c:	91 05       	cpc	r25, r1
     f0e:	e1 f5       	brne	.+120    	; 0xf88 <i2cRead+0x124>
				slave->read.buffer[i] = TWDR;
     f10:	eb 81       	ldd	r30, Y+3	; 0x03
     f12:	fc 81       	ldd	r31, Y+4	; 0x04
     f14:	24 81       	ldd	r18, Z+4	; 0x04
     f16:	35 81       	ldd	r19, Z+5	; 0x05
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	d9 01       	movw	r26, r18
     f20:	a8 0f       	add	r26, r24
     f22:	b9 1f       	adc	r27, r25
     f24:	eb eb       	ldi	r30, 0xBB	; 187
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8c 93       	st	X, r24
		TWCR = ContinueI2C;
		while ( I2C_DOING );
		if ( I2C_STATUS != SentSlaveAddressWithReadBitAndACK ) goto ERROR;
		
	// ÉfÅ[É^éÛêMÅCACKî≠çs
		for ( i = 0, size = slave->read.size - 1; i < size; i++ )
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	98 17       	cp	r25, r24
     f38:	c0 f2       	brcs	.-80     	; 0xeea <i2cRead+0x86>
				if ( I2C_STATUS != ReceivedDataByteAndACKAtMaster ) goto ERROR;
				slave->read.buffer[i] = TWDR;
			}
			
	// ç≈èIÉfÅ[É^éÛêMÅCNACKî≠çs
		TWCR = ContinueI2C;
     f3a:	ec eb       	ldi	r30, 0xBC	; 188
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	84 e8       	ldi	r24, 0x84	; 132
     f40:	80 83       	st	Z, r24
		while ( I2C_DOING );
     f42:	ec eb       	ldi	r30, 0xBC	; 188
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	88 23       	and	r24, r24
     f4a:	dc f7       	brge	.-10     	; 0xf42 <i2cRead+0xde>
		if ( I2C_STATUS != ReceivedDataByteAndNACK ) goto ERROR;
     f4c:	e9 eb       	ldi	r30, 0xB9	; 185
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	88 7f       	andi	r24, 0xF8	; 248
     f58:	90 70       	andi	r25, 0x00	; 0
     f5a:	80 35       	cpi	r24, 0x50	; 80
     f5c:	91 05       	cpc	r25, r1
     f5e:	a1 f4       	brne	.+40     	; 0xf88 <i2cRead+0x124>
		slave->read.buffer[size] = TWDR;
     f60:	eb 81       	ldd	r30, Y+3	; 0x03
     f62:	fc 81       	ldd	r31, Y+4	; 0x04
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	d9 01       	movw	r26, r18
     f70:	a8 0f       	add	r26, r24
     f72:	b9 1f       	adc	r27, r25
     f74:	eb eb       	ldi	r30, 0xBB	; 187
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8c 93       	st	X, r24
		
	// èIóπèåèÇÃê∂ê¨
		TWCR = SendStopConditionBit;
     f7c:	ec eb       	ldi	r30, 0xBC	; 188
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	84 e9       	ldi	r24, 0x94	; 148
     f82:	80 83       	st	Z, r24
		
	// ê≥èÌèIóπ
		return false;
     f84:	1d 82       	std	Y+5, r1	; 0x05
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <i2cRead+0x130>
		
	// ÉGÉâÅ[ÉPÅ[ÉX
ERROR:
		TWCR = SendStopConditionBit;
     f88:	ec eb       	ldi	r30, 0xBC	; 188
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	84 e9       	ldi	r24, 0x94	; 148
     f8e:	80 83       	st	Z, r24
		return true;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	8d 83       	std	Y+5, r24	; 0x05
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <i2cReadWithCommand>:
 *
 * @param {slave:Slave*} ëóéÛêMêÊÇÃÉXÉåÅ[ÉuÉCÉìÉXÉ^ÉìÉXÇÃÉ|ÉCÉìÉ^
 * @param {command:uint8_t} ëóêMÉRÉ}ÉìÉh
 */
bool i2cReadWithCommand(Slave* slave, uint8_t command)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <i2cReadWithCommand+0x6>
     fac:	00 d0       	rcall	.+0      	; 0xfae <i2cReadWithCommand+0x8>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <i2cReadWithCommand+0xa>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	6d 83       	std	Y+5, r22	; 0x05
		uint8_t i, size;
	// äJénèåèÇÃê∂ê¨
		TWCR = SendStartConditionBit;
     fba:	ec eb       	ldi	r30, 0xBC	; 188
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	84 ea       	ldi	r24, 0xA4	; 164
     fc0:	80 83       	st	Z, r24
		while ( I2C_DOING );
     fc2:	ec eb       	ldi	r30, 0xBC	; 188
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	dc f7       	brge	.-10     	; 0xfc2 <i2cReadWithCommand+0x1c>
		if ( I2C_STATUS != SentStartConditionBit ) goto ERROR;
     fcc:	e9 eb       	ldi	r30, 0xB9	; 185
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 7f       	andi	r24, 0xF8	; 248
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <i2cReadWithCommand+0x3c>
     fe0:	8d c0       	rjmp	.+282    	; 0x10fc <i2cReadWithCommand+0x156>
    
	// ÉAÉhÉåÉXì]ëó
		TWDR = ( slave->address << 1 ) | READ;
     fe2:	ab eb       	ldi	r26, 0xBB	; 187
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb 81       	ldd	r30, Y+3	; 0x03
     fe8:	fc 81       	ldd	r31, Y+4	; 0x04
     fea:	80 81       	ld	r24, Z
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8c 93       	st	X, r24
		TWCR = ContinueI2C;
     ff8:	ec eb       	ldi	r30, 0xBC	; 188
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	84 e8       	ldi	r24, 0x84	; 132
     ffe:	80 83       	st	Z, r24
		while ( I2C_DOING );
    1000:	ec eb       	ldi	r30, 0xBC	; 188
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	dc f7       	brge	.-10     	; 0x1000 <i2cReadWithCommand+0x5a>
		if ( I2C_STATUS != SentSlaveAddressWithReadBitAndACK ) goto ERROR;
    100a:	e9 eb       	ldi	r30, 0xB9	; 185
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 7f       	andi	r24, 0xF8	; 248
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	91 05       	cpc	r25, r1
    101c:	09 f0       	breq	.+2      	; 0x1020 <i2cReadWithCommand+0x7a>
    101e:	6e c0       	rjmp	.+220    	; 0x10fc <i2cReadWithCommand+0x156>
    
	// ÉRÉ}ÉìÉhì]ëóÅCACKämîF
		TWDR = command;
    1020:	eb eb       	ldi	r30, 0xBB	; 187
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	80 83       	st	Z, r24
		TWCR = ContinueI2C;
    1028:	ec eb       	ldi	r30, 0xBC	; 188
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	84 e8       	ldi	r24, 0x84	; 132
    102e:	80 83       	st	Z, r24
		while ( I2C_DOING );
    1030:	ec eb       	ldi	r30, 0xBC	; 188
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <i2cReadWithCommand+0x8a>
		if ( I2C_STATUS != SentDataByteAndACKAtMaster ) goto ERROR;
    103a:	e9 eb       	ldi	r30, 0xB9	; 185
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 7f       	andi	r24, 0xF8	; 248
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	88 32       	cpi	r24, 0x28	; 40
    104a:	91 05       	cpc	r25, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <i2cReadWithCommand+0xaa>
    104e:	56 c0       	rjmp	.+172    	; 0x10fc <i2cReadWithCommand+0x156>
    
	// ÉfÅ[É^ÉoÉCÉgéÛêMÅCACKî≠çsÇÃàÍòAÇÉfÅ[É^ÉTÉCÉY-1ï™çsÇ§
		for ( i = 0, size = slave->read.size - 1; i < size; i++ )
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	eb 81       	ldd	r30, Y+3	; 0x03
    1054:	fc 81       	ldd	r31, Y+4	; 0x04
    1056:	86 81       	ldd	r24, Z+6	; 0x06
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	24 c0       	rjmp	.+72     	; 0x10a6 <i2cReadWithCommand+0x100>
		{
		    TWCR = ContinueAndResponseI2C;
    105e:	ec eb       	ldi	r30, 0xBC	; 188
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	84 ec       	ldi	r24, 0xC4	; 196
    1064:	80 83       	st	Z, r24
		    while( I2C_DOING );
    1066:	ec eb       	ldi	r30, 0xBC	; 188
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 23       	and	r24, r24
    106e:	dc f7       	brge	.-10     	; 0x1066 <i2cReadWithCommand+0xc0>
		    if ( I2C_STATUS != ReceivedDataByteAndACKAtMaster ) goto ERROR;
    1070:	e9 eb       	ldi	r30, 0xB9	; 185
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	88 7f       	andi	r24, 0xF8	; 248
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	80 35       	cpi	r24, 0x50	; 80
    1080:	91 05       	cpc	r25, r1
    1082:	e1 f5       	brne	.+120    	; 0x10fc <i2cReadWithCommand+0x156>
		    slave->read.buffer[i] = TWDR;
    1084:	eb 81       	ldd	r30, Y+3	; 0x03
    1086:	fc 81       	ldd	r31, Y+4	; 0x04
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	35 81       	ldd	r19, Z+5	; 0x05
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	d9 01       	movw	r26, r18
    1094:	a8 0f       	add	r26, r24
    1096:	b9 1f       	adc	r27, r25
    1098:	eb eb       	ldi	r30, 0xBB	; 187
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8c 93       	st	X, r24
		TWCR = ContinueI2C;
		while ( I2C_DOING );
		if ( I2C_STATUS != SentDataByteAndACKAtMaster ) goto ERROR;
    
	// ÉfÅ[É^ÉoÉCÉgéÛêMÅCACKî≠çsÇÃàÍòAÇÉfÅ[É^ÉTÉCÉY-1ï™çsÇ§
		for ( i = 0, size = slave->read.size - 1; i < size; i++ )
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	8a 83       	std	Y+2, r24	; 0x02
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	98 17       	cp	r25, r24
    10ac:	c0 f2       	brcs	.-80     	; 0x105e <i2cReadWithCommand+0xb8>
		    if ( I2C_STATUS != ReceivedDataByteAndACKAtMaster ) goto ERROR;
		    slave->read.buffer[i] = TWDR;
		}
    
	// ç≈èIÉfÅ[É^ÉoÉCÉgéÛêMÅCNACKî≠çs
		TWCR = ContinueI2C;
    10ae:	ec eb       	ldi	r30, 0xBC	; 188
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	84 e8       	ldi	r24, 0x84	; 132
    10b4:	80 83       	st	Z, r24
		while ( I2C_DOING );
    10b6:	ec eb       	ldi	r30, 0xBC	; 188
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	dc f7       	brge	.-10     	; 0x10b6 <i2cReadWithCommand+0x110>
		if ( I2C_STATUS != ReceivedDataByteAndNACK ) goto ERROR;
    10c0:	e9 eb       	ldi	r30, 0xB9	; 185
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	88 7f       	andi	r24, 0xF8	; 248
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	80 35       	cpi	r24, 0x50	; 80
    10d0:	91 05       	cpc	r25, r1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <i2cReadWithCommand+0x156>
		slave->read.buffer[size] = TWDR;
    10d4:	eb 81       	ldd	r30, Y+3	; 0x03
    10d6:	fc 81       	ldd	r31, Y+4	; 0x04
    10d8:	24 81       	ldd	r18, Z+4	; 0x04
    10da:	35 81       	ldd	r19, Z+5	; 0x05
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	d9 01       	movw	r26, r18
    10e4:	a8 0f       	add	r26, r24
    10e6:	b9 1f       	adc	r27, r25
    10e8:	eb eb       	ldi	r30, 0xBB	; 187
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8c 93       	st	X, r24
    
	// èIóπèåèÇÃê∂ê¨
		TWCR = SendStopConditionBit;
    10f0:	ec eb       	ldi	r30, 0xBC	; 188
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	84 e9       	ldi	r24, 0x94	; 148
    10f6:	80 83       	st	Z, r24
    
	// ê≥èÌèIóπ
		return false;
    10f8:	1e 82       	std	Y+6, r1	; 0x06
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <i2cReadWithCommand+0x162>
    
	// ÉGÉâÅ[ÉPÅ[ÉX
ERROR:
		TWCR = SendStopConditionBit;
    10fc:	ec eb       	ldi	r30, 0xBC	; 188
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	84 e9       	ldi	r24, 0x94	; 148
    1102:	80 83       	st	Z, r24
		return true;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	8e 83       	std	Y+6, r24	; 0x06
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
}
    110a:	26 96       	adiw	r28, 0x06	; 6
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <LED>:
/// LEDëÄçÏä÷êî 
/// </summary>
/// <param name="target">  </param>
/// <param name="status"> 0->è¡ìîÅ@1->ì_ìî </param>
void LED(unsigned char target, bool status)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <LED+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	if(target > 2)return;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	58 f5       	brcc	.+86     	; 0x1186 <LED+0x6a>
	if(status)	cbi(PORTA,target);
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 23       	and	r24, r24
    1134:	a9 f0       	breq	.+42     	; 0x1160 <LED+0x44>
    1136:	a2 e2       	ldi	r26, 0x22	; 34
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e2 e2       	ldi	r30, 0x22	; 34
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <LED+0x38>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <LED+0x34>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <LED+0x6a>
	else		sbi(PORTA,target);
    1160:	a2 e2       	ldi	r26, 0x22	; 34
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e2 e2       	ldi	r30, 0x22	; 34
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <LED+0x62>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <LED+0x5e>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <LEDInit>:

void LEDInit(void)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x07;
    1198:	a1 e2       	ldi	r26, 0x21	; 33
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e2       	ldi	r30, 0x21	; 33
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	87 60       	ori	r24, 0x07	; 7
    11a4:	8c 93       	st	X, r24
	PORTA |= 0x07;
    11a6:	a2 e2       	ldi	r26, 0x22	; 34
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e2 e2       	ldi	r30, 0x22	; 34
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	87 60       	ori	r24, 0x07	; 7
    11b2:	8c 93       	st	X, r24
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <wait_us>:
#include <avr/io.h>
void wait_us(uint16_t t){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <wait_us+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
  static unsigned char lpcnt;
  __asm__ __volatile__("\n"
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02

000011cc <CPU_wait_entry10>:
    11cc:	24 e0       	ldi	r18, 0x04	; 4

000011ce <CPU_wait_lp10>:
    11ce:	00 00       	nop
    11d0:	2a 95       	dec	r18
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <CPU_wait_lp10>
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	d1 f7       	brne	.-12     	; 0x11cc <CPU_wait_entry10>
    11d8:	20 93 69 01 	sts	0x0169, r18
    "sbiw %1,1\n\t"
    "brne CPU_wait_entry%=\n\t"
    :"=&a"(lpcnt)
    :"w"(t)
  );
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <wait_ms>:
void wait_ms(uint16_t t){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <wait_ms+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <wait_ms+0x1a>
	while(t--) wait_us(1000);
    11f8:	88 ee       	ldi	r24, 0xE8	; 232
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <wait_us>
    1200:	1b 82       	std	Y+3, r1	; 0x03
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	11 f0       	breq	.+4      	; 0x120e <wait_ms+0x28>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 23       	and	r24, r24
    121c:	69 f7       	brne	.-38     	; 0x11f8 <wait_ms+0x12>
	
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <mDrive>:
#include <common.h>



void mDrive(Slave *motor,unsigned char in, signed char duty,unsigned char no)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <mDrive+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <mDrive+0x8>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <mDrive+0xa>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	6c 83       	std	Y+4, r22	; 0x04
    123e:	4d 83       	std	Y+5, r20	; 0x05
    1240:	2e 83       	std	Y+6, r18	; 0x06
	signed char w_data=0;
    1242:	19 82       	std	Y+1, r1	; 0x01
	if((no>4)||(no<0)) return;
    1244:	8e 81       	ldd	r24, Y+6	; 0x06
    1246:	85 30       	cpi	r24, 0x05	; 5
    1248:	50 f5       	brcc	.+84     	; 0x129e <mDrive+0x74>
	if(duty>100) duty=100;
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	85 36       	cpi	r24, 0x65	; 101
    124e:	14 f0       	brlt	.+4      	; 0x1254 <mDrive+0x2a>
    1250:	84 e6       	ldi	r24, 0x64	; 100
    1252:	8d 83       	std	Y+5, r24	; 0x05
	if(duty<-100) duty=-100;
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	8c 39       	cpi	r24, 0x9C	; 156
    1258:	14 f4       	brge	.+4      	; 0x125e <mDrive+0x34>
    125a:	8c e9       	ldi	r24, 0x9C	; 156
    125c:	8d 83       	std	Y+5, r24	; 0x05
	if(in==CCW) w_data = -duty;
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	21 f4       	brne	.+8      	; 0x126c <mDrive+0x42>
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	81 95       	neg	r24
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	0d c0       	rjmp	.+26     	; 0x1286 <mDrive+0x5c>
	else if(in==FREE) w_data = 0; 
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	88 23       	and	r24, r24
    1270:	11 f4       	brne	.+4      	; 0x1276 <mDrive+0x4c>
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <mDrive+0x5c>
	else if(in==BRAKE) w_data = 0x7f;
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	19 f4       	brne	.+6      	; 0x1282 <mDrive+0x58>
    127c:	8f e7       	ldi	r24, 0x7F	; 127
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <mDrive+0x5c>
	else w_data = duty;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	89 83       	std	Y+1, r24	; 0x01
	motor->write.buffer[no] = w_data;
    1286:	ea 81       	ldd	r30, Y+2	; 0x02
    1288:	fb 81       	ldd	r31, Y+3	; 0x03
    128a:	21 81       	ldd	r18, Z+1	; 0x01
    128c:	32 81       	ldd	r19, Z+2	; 0x02
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	f9 01       	movw	r30, r18
    1296:	e8 0f       	add	r30, r24
    1298:	f9 1f       	adc	r31, r25
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	80 83       	st	Z, r24
}
    129e:	26 96       	adiw	r28, 0x06	; 6
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <mAngle>:


void mAngle(Slave *motor,int angle,bool act)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <mAngle+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <mAngle+0x8>
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	7c 83       	std	Y+4, r23	; 0x04
    12c4:	6b 83       	std	Y+3, r22	; 0x03
    12c6:	4d 83       	std	Y+5, r20	; 0x05
	if(act){
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	88 23       	and	r24, r24
    12cc:	a9 f0       	breq	.+42     	; 0x12f8 <mAngle+0x48>
		angle/=6;
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	26 e0       	ldi	r18, 0x06	; 6
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	b9 01       	movw	r22, r18
    12d8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__divmodhi4>
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	8b 83       	std	Y+3, r24	; 0x03
		motor->write.buffer[2] = 0x40|(angle&0x1f);
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	81 81       	ldd	r24, Z+1	; 0x01
    12e8:	92 81       	ldd	r25, Z+2	; 0x02
    12ea:	fc 01       	movw	r30, r24
    12ec:	32 96       	adiw	r30, 0x02	; 2
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	8f 71       	andi	r24, 0x1F	; 31
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	80 83       	st	Z, r24
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <mAngle+0x56>
		}
	else motor->write.buffer[2] = 0x00;
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	81 81       	ldd	r24, Z+1	; 0x01
    12fe:	92 81       	ldd	r25, Z+2	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	32 96       	adiw	r30, 0x02	; 2
    1304:	10 82       	st	Z, r1
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <aDrive>:


void aDrive(Slave *cylinder,unsigned char port,bool act)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <aDrive+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <aDrive+0x8>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6b 83       	std	Y+3, r22	; 0x03
    1328:	4c 83       	std	Y+4, r20	; 0x04

	if(act) *(cylinder->write.buffer) = port;
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	88 23       	and	r24, r24
    132e:	41 f0       	breq	.+16     	; 0x1340 <aDrive+0x2a>
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	01 80       	ldd	r0, Z+1	; 0x01
    1336:	f2 81       	ldd	r31, Z+2	; 0x02
    1338:	e0 2d       	mov	r30, r0
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	80 83       	st	Z, r24
    133e:	06 c0       	rjmp	.+12     	; 0x134c <aDrive+0x36>

	else 	*(cylinder->write.buffer) = 0x00;
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	01 80       	ldd	r0, Z+1	; 0x01
    1346:	f2 81       	ldd	r31, Z+2	; 0x02
    1348:	e0 2d       	mov	r30, r0
    134a:	10 82       	st	Z, r1

}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <SwitchInit>:
#include "switch.h"

void SwitchInit(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	DDRB &= 0xf0;
    1362:	a4 e2       	ldi	r26, 0x24	; 36
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e4 e2       	ldi	r30, 0x24	; 36
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 7f       	andi	r24, 0xF0	; 240
    136e:	8c 93       	st	X, r24
	PORTB |= 0x0f;
    1370:	a5 e2       	ldi	r26, 0x25	; 37
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e2       	ldi	r30, 0x25	; 37
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 60       	ori	r24, 0x0F	; 15
    137c:	8c 93       	st	X, r24
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <Switch>:
/// ÉXÉCÉbÉ`íléÊìæä÷êî 
/// </summary>
/// <param name="target"> ÉÅÉCÉìäÓî’è„ÇÃÉXÉâÉCÉhÉXÉCÉbÉ`î‘çÜÅ@1Å`4 </param>
/// <return> ÉXÉCÉbÉ`ÇÃèÛë‘ ON -> ture , OFF -> false </return>
bool Switch(unsigned char target)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <Switch+0x6>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char status;
	
	status = PINB ^ 0xff;
    1390:	e3 e2       	ldi	r30, 0x23	; 35
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 95       	com	r24
    1398:	89 83       	std	Y+1, r24	; 0x01
	status >>= (target-1); 
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	a9 01       	movw	r20, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <Switch+0x2c>
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <Switch+0x28>
    13b4:	ca 01       	movw	r24, r20
    13b6:	89 83       	std	Y+1, r24	; 0x01

	return (bool)(status & 0x01);
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	90 70       	andi	r25, 0x00	; 0
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <Group>:

__inline__ unsigned char Group(void)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	return ((PINB ^ 0xff)>>2)&0x03;
    13d4:	e3 e2       	ldi	r30, 0x23	; 35
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 95       	com	r24
    13dc:	86 95       	lsr	r24
    13de:	86 95       	lsr	r24
    13e0:	83 70       	andi	r24, 0x03	; 3
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <Channel>:

__inline__ unsigned char Channel(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	return (PINB ^ 0xff)&0x03;
    13f0:	e3 e2       	ldi	r30, 0x23	; 35
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 95       	com	r24
    13f8:	83 70       	andi	r24, 0x03	; 3
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <beep>:

static bool ctrl=1;
static uint8_t count = 0;

void beep(bool act)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
	if(BEEP&&act&&ctrl) PORTA|=0x08;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	89 27       	eor	r24, r25
    1412:	88 23       	and	r24, r24
    1414:	71 f4       	brne	.+28     	; 0x1432 <beep+0x32>
    1416:	80 91 33 01 	lds	r24, 0x0133
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	89 27       	eor	r24, r25
    141e:	88 23       	and	r24, r24
    1420:	41 f4       	brne	.+16     	; 0x1432 <beep+0x32>
    1422:	a2 e2       	ldi	r26, 0x22	; 34
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e2 e2       	ldi	r30, 0x22	; 34
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 60       	ori	r24, 0x08	; 8
    142e:	8c 93       	st	X, r24
    1430:	0b c0       	rjmp	.+22     	; 0x1448 <beep+0x48>
	else if(ctrl) PORTA&=0xf7;
    1432:	80 91 33 01 	lds	r24, 0x0133
    1436:	88 23       	and	r24, r24
    1438:	39 f0       	breq	.+14     	; 0x1448 <beep+0x48>
    143a:	a2 e2       	ldi	r26, 0x22	; 34
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e2       	ldi	r30, 0x22	; 34
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	87 7f       	andi	r24, 0xF7	; 247
    1446:	8c 93       	st	X, r24
}
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <BeepInit>:

void BeepInit()
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x08;
    1458:	a1 e2       	ldi	r26, 0x21	; 33
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e1 e2       	ldi	r30, 0x21	; 33
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	88 60       	ori	r24, 0x08	; 8
    1464:	8c 93       	st	X, r24
	PORTA &= 0xf7;
    1466:	a2 e2       	ldi	r26, 0x22	; 34
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e2       	ldi	r30, 0x22	; 34
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	8c 93       	st	X, r24
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <i2cCheck>:

void i2cCheck(bool flag)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	LED(1,flag);
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	0e 94 8e 08 	call	0x111c	; 0x111c <LED>
	beep(!(flag));
    148e:	99 81       	ldd	r25, Y+1	; 0x01
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 27       	eor	r24, r25
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
	if(!flag){
    149c:	99 81       	ldd	r25, Y+1	; 0x01
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 27       	eor	r24, r25
    14a2:	88 23       	and	r24, r24
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <i2cCheck+0x38>
		count++;
    14a6:	80 91 6a 01 	lds	r24, 0x016A
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	80 93 6a 01 	sts	0x016A, r24
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <i2cCheck+0x3c>
	}else{
		count = 0;
    14b2:	10 92 6a 01 	sts	0x016A, r1
	}
	if(count>=FALL_COUNT){
    14b6:	80 91 6a 01 	lds	r24, 0x016A
    14ba:	8a 30       	cpi	r24, 0x0A	; 10
    14bc:	40 f0       	brcs	.+16     	; 0x14ce <i2cCheck+0x54>
		count = 0;
    14be:	10 92 6a 01 	sts	0x016A, r1
		PORTC = 0x04;
    14c2:	e8 e2       	ldi	r30, 0x28	; 40
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	80 83       	st	Z, r24
		cli();
    14ca:	f8 94       	cli
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <i2cCheck+0x52>
		while(1);
	}
}
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <Emergency>:
#include <wait.h>

bool eflag;

bool Emergency(Slave *emergency,signed char act)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <Emergency+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <Emergency+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6c 83       	std	Y+4, r22	; 0x04
	bool tmp;
	if(act==E_ON){
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	71 f4       	brne	.+28     	; 0x150a <Emergency+0x34>
		*(emergency->write.buffer) = 0x6A;
    14ee:	ea 81       	ldd	r30, Y+2	; 0x02
    14f0:	fb 81       	ldd	r31, Y+3	; 0x03
    14f2:	01 80       	ldd	r0, Z+1	; 0x01
    14f4:	f2 81       	ldd	r31, Z+2	; 0x02
    14f6:	e0 2d       	mov	r30, r0
    14f8:	8a e6       	ldi	r24, 0x6A	; 106
    14fa:	80 83       	st	Z, r24
		beep(1);
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
		eflag=1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 6b 01 	sts	0x016B, r24
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <Emergency+0x60>
		}
	else if(act==E_OFF){
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	69 f4       	brne	.+26     	; 0x152a <Emergency+0x54>
		*(emergency->write.buffer) = 0x55;
    1510:	ea 81       	ldd	r30, Y+2	; 0x02
    1512:	fb 81       	ldd	r31, Y+3	; 0x03
    1514:	01 80       	ldd	r0, Z+1	; 0x01
    1516:	f2 81       	ldd	r31, Z+2	; 0x02
    1518:	e0 2d       	mov	r30, r0
    151a:	85 e5       	ldi	r24, 0x55	; 85
    151c:	80 83       	st	Z, r24
		beep(0);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
		eflag=0;
    1524:	10 92 6b 01 	sts	0x016B, r1
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <Emergency+0x60>
		}
	else *(emergency->write.buffer) = 0x00;
    152a:	ea 81       	ldd	r30, Y+2	; 0x02
    152c:	fb 81       	ldd	r31, Y+3	; 0x03
    152e:	01 80       	ldd	r0, Z+1	; 0x01
    1530:	f2 81       	ldd	r31, Z+2	; 0x02
    1532:	e0 2d       	mov	r30, r0
    1534:	10 82       	st	Z, r1
	
	tmp = i2cRead(emergency);
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	0e 94 32 07 	call	0xe64	; 0xe64 <i2cRead>
    153e:	89 83       	std	Y+1, r24	; 0x01
	if(*(emergency->read.buffer)==0x6A){
    1540:	ea 81       	ldd	r30, Y+2	; 0x02
    1542:	fb 81       	ldd	r31, Y+3	; 0x03
    1544:	04 80       	ldd	r0, Z+4	; 0x04
    1546:	f5 81       	ldd	r31, Z+5	; 0x05
    1548:	e0 2d       	mov	r30, r0
    154a:	80 81       	ld	r24, Z
    154c:	8a 36       	cpi	r24, 0x6A	; 106
    154e:	31 f4       	brne	.+12     	; 0x155c <Emergency+0x86>
		beep(1);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 00 0a 	call	0x1400	; 0x1400 <beep>
		eflag=1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 93 6b 01 	sts	0x016B, r24
		}
	if(*(emergency->read.buffer)==0x55){
    155c:	ea 81       	ldd	r30, Y+2	; 0x02
    155e:	fb 81       	ldd	r31, Y+3	; 0x03
    1560:	04 80       	ldd	r0, Z+4	; 0x04
    1562:	f5 81       	ldd	r31, Z+5	; 0x05
    1564:	e0 2d       	mov	r30, r0
    1566:	80 81       	ld	r24, Z
    1568:	85 35       	cpi	r24, 0x55	; 85
    156a:	d9 f4       	brne	.+54     	; 0x15a2 <Emergency+0xcc>
//		beep(0);
		WDTCSR |= 0x08;
    156c:	a0 e6       	ldi	r26, 0x60	; 96
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e0 e6       	ldi	r30, 0x60	; 96
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	8c 93       	st	X, r24
		WDTCSR &= 0xBF;
    157a:	a0 e6       	ldi	r26, 0x60	; 96
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e0 e6       	ldi	r30, 0x60	; 96
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8f 7b       	andi	r24, 0xBF	; 191
    1586:	8c 93       	st	X, r24
		wdt_reset();
    1588:	a8 95       	wdr
		wdt_enable(WDTO_15MS);
    158a:	88 e1       	ldi	r24, 0x18	; 24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	28 e0       	ldi	r18, 0x08	; 8
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	a8 95       	wdr
    1596:	80 93 60 00 	sts	0x0060, r24
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	20 93 60 00 	sts	0x0060, r18
    15a0:	ff cf       	rjmp	.-2      	; 0x15a0 <Emergency+0xca>
		while(1);
		}
	return tmp;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <EmergencyStatus>:

bool EmergencyStatus()
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	if(eflag) return 0;
    15bc:	80 91 6b 01 	lds	r24, 0x016B
    15c0:	88 23       	and	r24, r24
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <EmergencyStatus+0x16>
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <EmergencyStatus+0x1a>
	else return 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <__udivmodhi4>:
    15d6:	aa 1b       	sub	r26, r26
    15d8:	bb 1b       	sub	r27, r27
    15da:	51 e1       	ldi	r21, 0x11	; 17
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <__udivmodhi4_ep>

000015de <__udivmodhi4_loop>:
    15de:	aa 1f       	adc	r26, r26
    15e0:	bb 1f       	adc	r27, r27
    15e2:	a6 17       	cp	r26, r22
    15e4:	b7 07       	cpc	r27, r23
    15e6:	10 f0       	brcs	.+4      	; 0x15ec <__udivmodhi4_ep>
    15e8:	a6 1b       	sub	r26, r22
    15ea:	b7 0b       	sbc	r27, r23

000015ec <__udivmodhi4_ep>:
    15ec:	88 1f       	adc	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	5a 95       	dec	r21
    15f2:	a9 f7       	brne	.-22     	; 0x15de <__udivmodhi4_loop>
    15f4:	80 95       	com	r24
    15f6:	90 95       	com	r25
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	08 95       	ret

000015fe <__divmodhi4>:
    15fe:	97 fb       	bst	r25, 7
    1600:	09 2e       	mov	r0, r25
    1602:	07 26       	eor	r0, r23
    1604:	0a d0       	rcall	.+20     	; 0x161a <__divmodhi4_neg1>
    1606:	77 fd       	sbrc	r23, 7
    1608:	04 d0       	rcall	.+8      	; 0x1612 <__divmodhi4_neg2>
    160a:	e5 df       	rcall	.-54     	; 0x15d6 <__udivmodhi4>
    160c:	06 d0       	rcall	.+12     	; 0x161a <__divmodhi4_neg1>
    160e:	00 20       	and	r0, r0
    1610:	1a f4       	brpl	.+6      	; 0x1618 <__divmodhi4_exit>

00001612 <__divmodhi4_neg2>:
    1612:	70 95       	com	r23
    1614:	61 95       	neg	r22
    1616:	7f 4f       	sbci	r23, 0xFF	; 255

00001618 <__divmodhi4_exit>:
    1618:	08 95       	ret

0000161a <__divmodhi4_neg1>:
    161a:	f6 f7       	brtc	.-4      	; 0x1618 <__divmodhi4_exit>
    161c:	90 95       	com	r25
    161e:	81 95       	neg	r24
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	08 95       	ret

00001624 <__udivmodsi4>:
    1624:	a1 e2       	ldi	r26, 0x21	; 33
    1626:	1a 2e       	mov	r1, r26
    1628:	aa 1b       	sub	r26, r26
    162a:	bb 1b       	sub	r27, r27
    162c:	fd 01       	movw	r30, r26
    162e:	0d c0       	rjmp	.+26     	; 0x164a <__udivmodsi4_ep>

00001630 <__udivmodsi4_loop>:
    1630:	aa 1f       	adc	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	ee 1f       	adc	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	a2 17       	cp	r26, r18
    163a:	b3 07       	cpc	r27, r19
    163c:	e4 07       	cpc	r30, r20
    163e:	f5 07       	cpc	r31, r21
    1640:	20 f0       	brcs	.+8      	; 0x164a <__udivmodsi4_ep>
    1642:	a2 1b       	sub	r26, r18
    1644:	b3 0b       	sbc	r27, r19
    1646:	e4 0b       	sbc	r30, r20
    1648:	f5 0b       	sbc	r31, r21

0000164a <__udivmodsi4_ep>:
    164a:	66 1f       	adc	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	1a 94       	dec	r1
    1654:	69 f7       	brne	.-38     	; 0x1630 <__udivmodsi4_loop>
    1656:	60 95       	com	r22
    1658:	70 95       	com	r23
    165a:	80 95       	com	r24
    165c:	90 95       	com	r25
    165e:	9b 01       	movw	r18, r22
    1660:	ac 01       	movw	r20, r24
    1662:	bd 01       	movw	r22, r26
    1664:	cf 01       	movw	r24, r30
    1666:	08 95       	ret

00001668 <_exit>:
    1668:	f8 94       	cli

0000166a <__stop_program>:
    166a:	ff cf       	rjmp	.-2      	; 0x166a <__stop_program>
